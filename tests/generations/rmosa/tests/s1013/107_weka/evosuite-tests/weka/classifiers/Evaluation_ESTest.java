/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 14:59:05 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.StringSelection;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Properties;
import java.util.Random;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomForest;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.BallNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1762.017041736491);
      doubleArray0[1] = (-1762.017041736491);
      doubleArray0[2] = (-1762.017041736491);
      doubleArray0[3] = (-1762.017041736491);
      doubleArray0[4] = (-1762.017041736491);
      doubleArray0[5] = (-1762.017041736491);
      doubleArray0[6] = 1.7976931348623157E308;
      doubleArray0[7] = (-1762.017041736491);
      doubleArray0[8] = (-1863.192107553215);
      SparseInstance sparseInstance0 = new SparseInstance((-1762.017041736491), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance1);
      instances0.add((Instance) binarySparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.parallelStream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(2);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision(2);
      evaluation0.kappa();
      SGD sGD0 = new SGD();
      Capabilities capabilities0 = sGD0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getRelationalClassFormat();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(1069.939, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-386));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9014225129216666
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Capabilities capabilities0 = new Capabilities(classificationViaRegression0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MissingClass;
      evaluation0.toMatrixString(".arff");
      try { 
        evaluation0.evaluateModelOnce(0.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9704652436863546
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("http://www-stat.stanford.edu/~jhf/f_p/stobst.ps");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = new double[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(byteArrayInputStream0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("minWordFrequencyTipText");
      Instances instances1 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.SFEntropyGain();
      double double0 = evaluation1.m_SumErr;
      evaluation1.matthewsCorrelationCoefficient((-1));
      evaluation1.numFalsePositives(1);
      evaluation1.weightedTrueNegativeRate();
      evaluation0.SFMeanEntropyGain();
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8%j]X]fGLY!D=");
      TestInstances testInstances1 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.iterator();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities1 = votedPerceptron0.getCapabilities();
      capabilities0.or(capabilities1);
      capabilities0.enableAllAttributeDependencies();
      TestInstances.forCapabilities(capabilities0);
      double[] doubleArray0 = new double[1];
      DenseInstance denseInstance0 = new DenseInstance(0, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorEntropy = 2.0;
      evaluation0.pctUnclassified();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      evaluation0.SFMeanPriorEntropy();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5978649045126536
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Capabilities capabilities0 = new Capabilities(classificationViaRegression0);
      classificationViaRegression0.globalInfo();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      classificationViaRegression0.buildClassifier(instances0);
      evaluation0.m_NumTrainClassVals = (-1);
      evaluation0.areaUnderROC(1462);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      evaluation0.rootMeanPriorSquaredError();
      MockRandom mockRandom0 = new MockRandom();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      SparseInstance sparseInstance0 = new SparseInstance(603);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, sparseInstance0, (-687.569));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("db!a@c");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.coverageOfTestCasesByPredictedRegions();
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[0];
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex((-1457654536));
      Instances instances1 = new Instances(instances0, (-219252797));
      instances0.delete();
      MockRandom mockRandom0 = new MockRandom(335L);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(118, false, false);
      Stacking stacking0 = new Stacking();
      Attribute attribute0 = new Attribute("@relation", instances0, (-1954653100));
      evaluation0.equals(attribute0);
      try { 
        evaluation0.crossValidateModel((Classifier) simpleLogistic0, instances0, (-3006), (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.equals(evaluation0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      int int0 = 0;
      instances0.setClassIndex(0);
      System.setCurrentTimeMillis(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClassPredicted;
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-2464.3), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      try { 
        evaluation0.evaluateModelOnce((double) (-1086997899), (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1086997899
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.weightedTrueNegativeRate();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      double double0 = evaluation0.m_TotalCoverage;
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      evaluation0.toMatrixString("@relation");
      evaluation0.SFEntropyGain();
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6389482949003704
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.7976931348623157E308);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation1.sizeOfPredictedRegions();
      evaluation1.weightedAreaUnderROC();
      evaluation0.makeDistribution(Double.NaN);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      gaussianProcesses0.setOptions(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.m_SumSqrClass;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.updateStatsForPredictor(1, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2036);
      byte[] byteArray0 = new byte[3];
      LWL lWL0 = new LWL();
      testInstances0.setHandler(lWL0);
      byteArray0[0] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updateStatsForPredictor((-720.19499431289), binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClassPredicted;
      evaluation0.m_WithClass = (-1082.59);
      evaluation0.errorRate();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1456206972));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.iterator();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances.forCapabilities(capabilities0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      double double0 = evaluation0.m_SumSqrPredicted;
      Evaluation.makeOptionString((Classifier) null, true);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.rootMeanPriorSquaredError();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(2196.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.SFMeanEntropyGain();
      evaluation0.SFMeanPriorEntropy();
      double double0 = evaluation0.m_SumSqrClass;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("http://www-stat.stanford.edu/~jhf/f_p/stobst.ps");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.generate("em?8 yO<9Q/nez6");
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumKBInfo;
      evaluation1.areaUnderPRC((-637));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-637);
      doubleArray0[0] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-637));
      evaluation0.weightedFalseNegativeRate();
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(1069.939, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.areaUnderPRC(1084);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-1086997899);
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (double) (-1086997899);
      doubleArray1[5] = (double) (-1086997899);
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) (-1086997899);
      evaluation0.updateNumericScores(doubleArray1, doubleArray1, (-1.086997899E9));
      // Undeclared exception!
      try { 
        evaluation0.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      instances0.parallelStream();
      evaluation0.weightedFalsePositiveRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.unweightedMacroFmeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.meanPriorAbsoluteError();
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[2] = 1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 704.062;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (-1992.8699);
      // Undeclared exception!
      try { 
        evaluation1.updateMargins(doubleArray0, 2, 1.050000000745058);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 176265
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex((-2));
      instances0.stream();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[] doubleArray0 = evaluation0.makeDistribution(0.95);
      SparseInstance sparseInstance0 = new SparseInstance(357.7, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = 357.7;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = 0.95;
      doubleArray1[5] = (double) (-1086997899);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray1, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      System.setCurrentTimeMillis(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1808;
      intArray0[5] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnce((-2305.8525231), (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      Instances instances1 = new Instances(instances0, 2741);
      instances1.delete();
      MockRandom mockRandom0 = new MockRandom(0L);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-219252797), false, false);
      Stacking stacking0 = new Stacking();
      evaluation0.equals(stacking0);
      Object[] objectArray0 = new Object[0];
      evaluation0.crossValidateModel((Classifier) simpleLogistic0, instances1, (-3811), (Random) mockRandom0, objectArray0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumNominal(1);
      testInstances0.setNoClass(false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double0 = evaluation0.m_SumPredicted;
      MockRandom mockRandom0 = new MockRandom();
      double double1 = evaluation0.m_WithClass;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numTrueNegatives((-2));
      evaluation0.areaUnderPRC((-546));
      evaluation0.numFalseNegatives(0);
      evaluation1.setPriors(instances0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      double double2 = evaluation1.m_SumPredicted;
      evaluation0.matthewsCorrelationCoefficient(357913932);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      evaluation0.weightedFalsePositiveRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.unweightedMacroFmeasure();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.meanPriorAbsoluteError();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 704.062;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 704.062;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Cannot print distribution without '-p' option!");
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2779.0;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2736.0), doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("distributionForInstance");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.trueNegativeRate((-2));
      int int0 = 1457;
      evaluation0.areaUnderPRC(1457);
      evaluation0.setPriors(instances0);
      int int1 = 104;
      // Undeclared exception!
      try { 
        testInstances0.setWords(".arff");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At least 2 words must be provided!
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities0 = multiScheme0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      testInstances1.setNumNominal((-2));
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.setNoClass(true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double1 = evaluation0.m_SumPredicted;
      MockRandom mockRandom0 = new MockRandom();
      double double2 = evaluation0.m_WithClass;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numTrueNegatives(2);
      evaluation0.areaUnderPRC(75);
      evaluation1.numFalseNegatives(357913932);
      evaluation1.setPriors(instances0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      evaluation1.areaUnderROC(0);
      evaluation1.matthewsCorrelationCoefficient(7);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      testInstances0.setNumDate((-1));
      testInstances1.generate();
      Instances instances0 = testInstances0.generate(".bsi");
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom((-1));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Properties properties0 = new Properties();
      properties0.values();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      System.setCurrentTimeMillis(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.listOptions();
      CostMatrix costMatrix0 = new CostMatrix(2);
      costMatrix0.getRevision();
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation1.numTruePositives((-1473));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.correct();
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      evaluation0.setDiscardPredictions(true);
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.unweightedMacroFmeasure();
      Float float0 = new Float(Double.NaN);
      double double0 = evaluation0.m_Incorrect;
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) null, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.numFalseNegatives(0);
      // Undeclared exception!
      try { 
        evaluation0.numTruePositives(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumAbsErr = 1439.05080854446;
      double double0 = evaluation0.m_SumPriorEntropy;
      Integer integer0 = new Integer((-2));
      double double1 = evaluation0.m_SumErr;
      instances0.deleteStringAttributes();
      evaluation0.unweightedMicroFmeasure();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      // Undeclared exception!
      try { 
        Instances.mergeInstances(instances1, instances1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'text' '@@class@@' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@data";
      evaluation0.sizeOfPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.unweightedMicroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      gaussianProcesses0.setOptions(testInstances0.DEFAULT_WORDS);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(2074L);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      textDirectoryLoader0.getRevision();
      Properties properties0 = new Properties();
      properties0.values();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances0 = testInstances0.generate("8034");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate(0);
      BallNode ballNode0 = new BallNode((-1));
      testInstances0.getRelationalClassFormat();
      try { 
        BallNode.calcPivot(ballNode0, ballNode0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      RandomForest randomForest0 = new RandomForest();
      Capabilities capabilities0 = randomForest0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 5165.676;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 0, 4828.3948);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      evaluation0.KBMeanInformation();
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "-MD5lZzco+-");
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ComplexityStatisticsAvailable = false;
      testInstances1.getData();
      evaluation0.rootMeanPriorSquaredError();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.SFMeanEntropyGain();
      evaluation0.SFMeanPriorEntropy();
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.8746040004438655
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.toSummaryString();
      evaluation0.setDiscardPredictions(true);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalsePositiveRate();
      evaluation0.sizeOfPredictedRegions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      textDirectoryLoader0.listOptions();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      int int0 = evaluation0.m_NumFolds;
      evaluation0.unweightedMacroFmeasure();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      System.setCurrentTimeMillis(0L);
      evaluation1.precision(1);
      evaluation0.sizeOfPredictedRegions();
      double double0 = evaluation1.m_WithClass;
      evaluation1.numTrueNegatives(22);
      evaluation0.numFalseNegatives(12);
      evaluation1.setPriors(instances0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      evaluation1.equals(filteredClassifier0);
      evaluation0.getDiscardPredictions();
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.595722115257705
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("@relation");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)106;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      evaluation0.toClassDetailsString("numExecutionSlotsTipText");
      try { 
        Evaluation.handleCostOption("@relation", 1276);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"gj\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      evaluation0.equals((Object) null);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MockRandom mockRandom0 = new MockRandom((-2));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2779.0, intArray0, 9);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.updatePriors(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.correlationCoefficient();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumDate((-1));
      Instances instances0 = testInstances1.generate();
      testInstances1.setWordSeparators((String) null);
      testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      StringSelection stringSelection0 = new StringSelection("/:");
      System.setCurrentTimeMillis((-20));
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      double double0 = evaluation0.SFMeanSchemeEntropy();
      double double1 = evaluation0.errorRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.trueNegativeRate((-2));
      assertEquals(0.0, double3, 0.01);
      
      evaluation0.getHeader();
      evaluation0.getClassPriors();
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      String string0 = evaluation0.num2ShortID((-2), charArray0, 1);
      assertEquals("c", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.m_Incorrect = (-4171.6626641471);
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      instances0.stream();
      evaluation0.sizeOfPredictedRegions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      textDirectoryLoader0.listOptions();
      boolean boolean0 = evaluation0.m_NoPriors;
      evaluation0.unweightedMacroFmeasure();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      System.setCurrentTimeMillis(0L);
      evaluation0.precision(2);
      evaluation0.sizeOfPredictedRegions();
      double double0 = evaluation0.m_WithClass;
      evaluation0.numTrueNegatives((-2342));
      evaluation0.numFalseNegatives(0);
      double double1 = evaluation0.errorRate();
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(1069.939, doubleArray0);
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      serializedClassifier1.getCurrentModel();
      boolean boolean0 = true;
      evaluation0.getHeader();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) serializedClassifier0, (Instance) denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      gaussianProcesses0.setOptions(testInstances0.DEFAULT_WORDS);
      evaluation0.sizeOfPredictedRegions();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      int int0 = evaluation0.m_NumFolds;
      evaluation0.unweightedMacroFmeasure();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      System.setCurrentTimeMillis((-959L));
      evaluation0.precision(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      double double0 = evaluation1.m_WithClass;
      evaluation1.numTrueNegatives(1);
      try { 
        Evaluation.handleCostOption("~gfG", 2151);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8%j]X]fGLY!L=");
      TestInstances testInstances1 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.iterator();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision((-983));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -983
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      RandomForest randomForest0 = new RandomForest();
      try { 
        randomForest0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.trees.RandomTree: Cannot handle string attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Stacking stacking0 = new Stacking();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Properties properties0 = new Properties();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.setPriors(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) gaussianProcesses0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.pctUnclassified();
      System.setCurrentTimeMillis((-535L));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      evaluation0.weightedTruePositiveRate();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.SFPriorEntropy();
      evaluation0.SFSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.recall(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(27);
      evaluation0.KBMeanInformation();
      MockRandom mockRandom0 = new MockRandom(1821L);
      evaluation0.recall(0);
      try { 
        evaluation0.crossValidateModel((Classifier) gaussianProcesses0, instances0, 1977, (Random) mockRandom0, (Object[]) gaussianProcesses0.TAGS_FILTER);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[0];
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) attributeSelectedClassifier0, instances0, 0, (Random) mockRandom0, (Object[]) gaussianProcesses0.TAGS_FILTER);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      MockRandom mockRandom0 = new MockRandom(0L);
      LinearRegression linearRegression0 = new LinearRegression();
      try { 
        evaluation0.crossValidateModel((Classifier) linearRegression0, instances0, 2, (Random) mockRandom0, (Object[]) doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toSummaryString();
      ArffLoader arffLoader0 = new ArffLoader();
      ArffLoader arffLoader1 = new ArffLoader();
      evaluation0.truePositiveRate((-742));
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-1634));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      int[] intArray0 = new int[3];
      intArray0[0] = 117;
      intArray0[1] = 117;
      intArray0[2] = (-643);
      Instance instance0 = BallNode.calcCentroidPivot(117, (-643), intArray0, instances0);
      evaluation0.setPriors(instances0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) serializedClassifier0, instance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance2);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.m_MaxTarget = 704.062;
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom((-1063L));
      Attribute attribute0 = new Attribute("W:EoC|rJn$n#)@)", instances0, 0);
      instances0.renameAttribute(attribute0, "c5U&94@~5jRG");
      DenseInstance denseInstance0 = new DenseInstance(484);
      instances0.add((Instance) denseInstance0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.rootMeanPriorSquaredError();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instances0.setClassIndex(0);
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      textDirectoryLoader0.listOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(0L);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision(2);
      evaluation0.kappa();
      try { 
        evaluation0.evaluateModel((Classifier) gaussianProcesses0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setClassIndex(0);
      instances0.stream();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision((-1604));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom0 = new MockRandom(0);
      MockRandom mockRandom1 = new MockRandom();
      instances0.resample(mockRandom0);
      evaluation0.falseNegativeRate((-102261121));
      evaluation0.weightedPrecision();
      evaluation0.truePositiveRate((-102261121));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.addNumericTrainClass((-674.29295032856), (-2023.92302198197));
      assertTrue(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1933);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getStructure();
      instances0.setClassIndex(0);
      instances0.stream();
      MockRandom mockRandom0 = new MockRandom(137L);
      CoverTree coverTree0 = new CoverTree();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 137L;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
      // Undeclared exception!
      try { 
        evaluation0.confusionMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Properties properties0 = new Properties();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = 10.0;
      doubleArray0[3] = (double) 2;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2096.0));
      evaluation0.confusionMatrix();
      MockRandom mockRandom0 = new MockRandom(0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1.0E-75);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(27);
      MockRandom mockRandom0 = new MockRandom(27);
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, binarySparseInstance0, (-5873.063));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(155.0, 1.0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.m_MaxTarget = 704.062;
      instances0.stream();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.weightedFalsePositiveRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      textDirectoryLoader0.listOptions();
      MockRandom mockRandom0 = new MockRandom(0);
      evaluation0.weightedFalsePositiveRate();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      MockRandom mockRandom1 = new MockRandom(2);
      evaluation0.unweightedMacroFmeasure();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 2, (-2.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(27);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) gaussianProcesses0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = new String[1];
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.totalCost();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Properties properties0 = new Properties();
      properties0.values();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      
      evaluation0.addNumericTrainClass(1.0, (-2.0));
      assertEquals(1.0, evaluation0.kappa(), 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      String[] stringArray0 = new String[1];
      try { 
        Evaluation.evaluateModel((Classifier) simpleLinearRegression0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Instances instances1 = testInstances0.generate("-preserve-order\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation1.SFEntropyGain();
      double double1 = evaluation1.m_SumErr;
      testInstances0.setNumNominal(9);
      evaluation0.m_SumClass = (-1463.746449);
      double double2 = evaluation0.matthewsCorrelationCoefficient(634);
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation1.numFalsePositives(634);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.weightedTrueNegativeRate();
      double double5 = evaluation1.SFMeanEntropyGain();
      assertEquals(double5, double4, 0.01);
      
      double double6 = evaluation0.unclassified();
      assertNotEquals(double6, double5, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.m_TotalCoverage = 1950.5719535758383;
      evaluation0.weightedPrecision();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      RandomForest randomForest0 = new RandomForest();
      randomForest0.getOptions();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation.makeOptionString(randomForest0, true);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.getRevision();
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader0.getStructure();
      instances0.setClassIndex(0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      Attribute attribute0 = new Attribute(".arff", instances0, 1);
      instances1.renameAttribute(attribute0, "@attribute");
      Evaluation evaluation0 = new Evaluation(instances0);
      CoverTree coverTree0 = new CoverTree();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      DenseInstance denseInstance0 = new DenseInstance(1);
      evaluation0.meanPriorAbsoluteError();
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = (-1113102237);
      instances0.setClassIndex((-1113102237));
      evaluation0.setDiscardPredictions(false);
      evaluation0.areaUnderROC(12);
      evaluation0.matthewsCorrelationCoefficient((-1113102237));
      System.setCurrentTimeMillis(0L);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      MockRandom mockRandom0 = new MockRandom();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@data");
      evaluation0.pctCorrect();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(12, (char[]) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      // Undeclared exception!
      try { 
        evaluation0.trueNegativeRate(86);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8%j]X]fGLY!D=");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom((-987L));
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NoPriors = true;
      // Undeclared exception!
      try { 
        evaluation0.precision(2306);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2306
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(27);
      double double0 = evaluation0.numTruePositives((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.numFalseNegatives(2147483645);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.numFalsePositives((-1));
      // Undeclared exception!
      try { 
        ConverterUtils.DataSource.read(".bsi");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class weka.core.converters.ConverterUtils
         //
         verifyException("weka.core.converters.ConverterUtils$DataSource", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8%j]X]fGLY!D=");
      TestInstances testInstances1 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.iterator();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses1.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances.forCapabilities(capabilities0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      evaluation0.weightedFMeasure();
      String string0 = Evaluation.makeOptionString(gaussianProcesses0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setOptions((String[]) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 54;
      evaluation0.falseNegativeRate(54);
      evaluation0.weightedPrecision();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-195225796));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -195225796
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.fMeasure(1526);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient(0);
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      gaussianProcesses0.setOptions(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.m_SumSqrClass;
      testInstances0.setNoClass(false);
      instances0.setClassIndex(1);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      testInstances0.setNumNominal(2);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@data";
      stringArray0[1] = " ";
      stringArray0[2] = ".bsi";
      stringArray0[3] = " ";
      stringArray0[4] = "@relation";
      MockRandom mockRandom0 = new MockRandom();
      instances0.resample(mockRandom0);
      evaluation0.falseNegativeRate((-102261121));
      evaluation0.weightedPrecision();
      evaluation0.truePositiveRate(1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.listOptions();
      DenseInstance denseInstance0 = new DenseInstance(101);
      try { 
        Evaluation.handleCostOption("bVM@uoWr&uOgkJ)0.JT", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      System.setCurrentTimeMillis(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderPRC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      double[] doubleArray0 = new double[3];
      DenseInstance denseInstance0 = new DenseInstance((-2.0), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Instances instances0 = testInstances0.generate("lambdaTipText");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel("lambdaTipText", instances0, (-2), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: lambdaTipText
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      instances0.stream();
      evaluation0.weightedFalsePositiveRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation1.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setClassIndex(0);
      instances0.stream();
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.handleCostOption((String) null, 0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation1.toMatrixString("setKernel");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.evaluateModel((Classifier) regressionByDiscretization0, instances0, (Object[]) regressionByDiscretization0.TAGS_ESTIMATOR);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Instances instances1 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances1);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) null, instances0, objectArray0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      ArffLoader arffLoader0 = new ArffLoader();
      ArffLoader arffLoader1 = new ArffLoader();
      double double0 = evaluation0.truePositiveRate((-742));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      double double1 = evaluation0.numInstances();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom0 = new MockRandom(1L);
      MockRandom mockRandom1 = new MockRandom();
      instances0.resample(mockRandom1);
      evaluation0.falseNegativeRate((-3478));
      instances0.lastIndexOf("getMinVarianceProp");
      evaluation0.weightedPrecision();
      evaluation0.truePositiveRate((-3478));
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.truePositiveRate((-3478));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      instances0.setClassIndex(0);
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      MockRandom mockRandom1 = new MockRandom(137L);
      Attribute attribute0 = new Attribute("%\"iQs=-gpa7zbg&tWK", instances0, 1);
      instances1.renameAttribute(attribute0, "@attribute");
      DenseInstance denseInstance0 = new DenseInstance(4);
      instances0.add((Instance) denseInstance0);
      CoverTree coverTree0 = new CoverTree();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(27);
      MockRandom mockRandom0 = new MockRandom(1821L);
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.0992338308014475
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = (double) 0;
      instances0.setClassIndex(0);
      instances0.stream();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.weightedFalsePositiveRate();
      textDirectoryLoader0.listOptions();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.toClassDetailsString();
      evaluation0.pctIncorrect();
      evaluation0.pctCorrect();
      evaluation0.setNumericPriorsFromBuffer();
      ZeroR zeroR0 = new ZeroR();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.falsePositiveRate((-910));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex((-100));
      evaluation0.setDiscardPredictions(true);
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.m_SumPredicted;
      evaluation0.m_Correct = 0.0;
      textDirectoryLoader0.setOutputFilename(true);
      double double2 = evaluation0.m_SumClassPredicted;
      evaluation0.SFEntropyGain();
      evaluation0.priorEntropy();
      evaluation0.weightedFMeasure();
      evaluation0.KBInformation();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(27);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockRandom mockRandom0 = new MockRandom(1821L);
      int int0 = 1977;
      try { 
        evaluation0.updateStatsForClassifier((double[]) null, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CoverTree coverTree0 = new CoverTree();
      Properties properties0 = new Properties();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.trueNegativeRate((-2177));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        Evaluation.evaluateModel((Classifier) null, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      instances0.setClassIndex(0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toSummaryString(true);
      Instances instances1 = new Instances(instances0, 18);
      MockRandom mockRandom0 = new MockRandom((-1997L));
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation.getGlobalInfo(attributeSelectedClassifier0);
      // Undeclared exception!
      try { 
        evaluation0.weightedFalsePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".bsi");
      testInstances0.setOptions((String[]) null);
      TestInstances testInstances1 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.setMultiInstance(true);
      TestInstances testInstances3 = new TestInstances();
      testInstances2.assign(testInstances3);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(1704.6681345, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      System.setCurrentTimeMillis(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setOptions");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.avgCost();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      MockRandom mockRandom0 = new MockRandom(0L);
      LinearRegression linearRegression0 = new LinearRegression();
      try { 
        evaluation0.crossValidateModel((Classifier) linearRegression0, instances0, (-299), (Random) mockRandom0, (Object[]) linearRegression0.TAGS_SELECTION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = new String[1];
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) gaussianProcesses0, instances0, 2, (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("http://www-stat.stanford.edu/~jhf/f_p/stobst.ps");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.generate("em?8 yO<9Q/nez6");
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.trueNegativeRate(653);
      assertEquals(0.0, double0, 0.01);
      
      evaluation1.m_SumPredicted = 1.2000000029802322;
      evaluation1.areaUnderPRC((-637));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-637);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@data";
      stringArray0[1] = "http://www-stat.stanford.edu/~jhf/f_p/stobst.ps";
      stringArray0[2] = ".bsi";
      stringArray0[2] = "@data";
      stringArray0[4] = ".bsi";
      stringArray0[5] = "@data";
      stringArray0[6] = ".bsi";
      stringArray0[7] = "http://www-stat.stanford.edu/~jhf/f_p/stobst.ps";
      stringArray0[8] = "@relation";
      Evaluation.main(stringArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = ']';
      evaluation1.num2ShortID(0, charArray0, 0);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = evaluation0.m_SumPredicted;
      textDirectoryLoader0.setOutputFilename(true);
      double double1 = evaluation0.m_SumClassPredicted;
      evaluation0.SFEntropyGain();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedAreaUnderPRC();
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID((-2), (char[]) null, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      evaluation0.weightedFalsePositiveRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.setNumericPriorsFromBuffer();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = 'a';
      charArray0[2] = '9';
      charArray0[3] = '.';
      charArray0[4] = 'C';
      charArray0[5] = '';
      charArray0[6] = '*';
      evaluation1.num2ShortID(0, charArray0, 16);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@data";
      stringArray0[2] = "               o";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "@data";
      stringArray0[5] = "@relation";
      stringArray0[6] = "setNumFolds";
      stringArray0[7] = ".bsi";
      stringArray0[8] = "@data";
      Evaluation.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex((-2));
      instances0.stream();
      double double0 = evaluation0.m_SumPredicted;
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double1 = evaluation0.falsePositiveRate(0);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      org.evosuite.runtime.Random.setNextRandom((-102261132));
      double double0 = evaluation0.falsePositiveRate(33);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Stacking stacking0 = new Stacking();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.falsePositiveRate((-4390));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      Properties properties0 = new Properties();
      properties0.values();
      evaluation0.toMatrixString(" is not assignable from ");
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1893.15584352723;
      doubleArray0[2] = (-1016.2713158062577);
      evaluation0.toMatrixString();
      try { 
        CostMatrix.parseMatlab((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      instances0.parallelStream();
      evaluation0.weightedFalsePositiveRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.unweightedMacroFmeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.meanPriorAbsoluteError();
      double[] doubleArray0 = null;
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[6] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation1.evaluationForSingleInstance((double[]) null, binarySparseInstance0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      String string0 = Evaluation.getGlobalInfo(naiveBayesMultinomialUpdateable0);
      assertEquals("\nSynopsis for weka.classifiers.bayes.NaiveBayesMultinomialUpdateable:\n\nClass for building and using a multinomial Naive Bayes classifier. For more information see,\n\nAndrew Mccallum, Kamal Nigam: A Comparison of Event Models for Naive Bayes Text Classification. In: AAAI-98 Workshop on 'Learning for Text Categorization', 1998.\n\nThe core equation for this classifier:\n\nP[Ci|D] = (P[D|Ci] x P[Ci]) / P[D] (Bayes rule)\n\nwhere Ci is class i and D is a document.\n\nIncremental version of the algorithm.", string0);
      
      double double0 = evaluation0.m_MissingClass;
      double double1 = evaluation0.KBInformation();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.priorEntropy();
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Properties properties0 = new Properties();
      properties0.values();
      CostMatrix costMatrix0 = new CostMatrix(1);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      gaussianProcesses0.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.generate();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, (-1337), 1.050000000745058);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      double[] doubleArray0 = new double[1];
      evaluation0.rootMeanSquaredError();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 0, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      Properties properties0 = new Properties();
      properties0.values();
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = null;
      instances0.setClassIndex(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      // Undeclared exception!
      try { 
        evaluation0.weightedFalsePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.deleteAttributeType((-2933));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.SFMeanPriorEntropy();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1439.05080854446;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1188.0143468185624), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      SparseInstance sparseInstance0 = new SparseInstance(1);
      String string0 = "\n\n=== Error on training data ===\n";
      int int0 = 1364;
      try { 
        evaluation0.evaluateModelOnce((double[]) null, (Instance) sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = 2779.0;
      int[] intArray0 = new int[0];
      int int0 = 9;
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(2779.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2779
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getStructure();
      instances0.setClassIndex(0);
      instances0.stream();
      MockRandom mockRandom0 = new MockRandom(137L);
      CoverTree coverTree0 = new CoverTree();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 137L;
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      org.evosuite.runtime.Random.setNextRandom(27);
      double double0 = evaluation0.m_SumAbsErr;
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.9940302114769565, double1, 0.01);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Properties properties0 = new Properties();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.trueNegativeRate(1);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.areaUnderPRC((-1174));
      double double1 = evaluation0.meanAbsoluteError();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.numTruePositives((-2));
      double double1 = evaluation0.numFalseNegatives((-2));
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      gaussianProcesses0.setOptions(testInstances0.DEFAULT_WORDS);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(2074L);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      String string0 = textDirectoryLoader0.getRevision();
      Properties properties0 = new Properties();
      properties0.values();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 1;
      double double0 = new Double(2);
      String string1 = Evaluation.makeOptionString(inputMappedClassifier0, false);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom();
      textDirectoryLoader0.getDataSet();
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".arff";
      stringArray0[1] = "@data";
      stringArray0[2] = "@data";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "@relation";
      stringArray0[5] = "@relation";
      stringArray0[6] = ".bsi";
      stringArray0[7] = "@relation";
      try { 
        Evaluation.evaluateModel((Classifier) zeroR0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      gaussianProcesses0.setOptions(testInstances0.DEFAULT_WORDS);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      StringSelection stringSelection0 = new StringSelection("@data");
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString(" ", false);
      assertEquals(" \nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toSummaryString((String) null, true);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals("null\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances1.getOptions();
      int[] intArray0 = new int[1];
      intArray0[0] = (-2);
      Instance instance0 = BallNode.calcCentroidPivot((-2), (-574), intArray0, instances0);
      try { 
        evaluation0.evaluationForSingleInstance((double[]) null, instance0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = 290.497;
      doubleArray0[2] = 3101.95248246;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1.7976931348623157E308);
      doubleArray0[7] = (-1.7976931348623157E308);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      System.setCurrentTimeMillis(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.matthewsCorrelationCoefficient(634);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      MockRandom mockRandom0 = new MockRandom(0L);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Properties properties0 = new Properties();
      properties0.values();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      System.setCurrentTimeMillis(0L);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClass;
      CSVLoader cSVLoader0 = new CSVLoader();
      // Undeclared exception!
      try { 
        evaluation0.numTrueNegatives(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      gaussianProcesses0.setOptions(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.m_SumSqrClass;
      testInstances0.setNoClass(false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[0] = (double) 1;
      evaluation0.updateMargins(doubleArray0, 0, 100.0);
      instances0.stream();
      ConverterUtils.DataSource converterUtils_DataSource0 = null;
      try {
        converterUtils_DataSource0 = new ConverterUtils.DataSource("evaluatorTipText");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class weka.core.converters.ConverterUtils
         //
         verifyException("weka.core.converters.ConverterUtils$DataSource", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      RandomForest randomForest0 = new RandomForest();
      Capabilities capabilities0 = randomForest0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 5165.676;
      doubleArray0[1] = 5165.676;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 0, 4828.3948);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "Uu5dR?NO{1";
      stringArray0[4] = "@relation";
      stringArray0[5] = ".arff";
      stringArray0[6] = "@data";
      RandomForest.main(stringArray0);
      RandomForest randomForest0 = new RandomForest();
      randomForest0.globalInfo();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation.makeOptionString(regressionByDiscretization0, false);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex((-1114383320));
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(":T0{\"Mr7`l", arrayList0, 118);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(1126.001358585, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.7976931348623157E308);
      SparseInstance sparseInstance0 = new SparseInstance((-1.7976931348623157E308), doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      boolean boolean0 = true;
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 704.062;
      doubleArray0[1] = 704.062;
      doubleArray0[2] = 704.062;
      doubleArray0[3] = 704.062;
      doubleArray0[4] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(704.062, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) naiveBayesMultinomial0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader0.getStructure();
      instances0.setClassIndex(0);
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      Attribute attribute0 = new Attribute(".arff", instances0, 1);
      instances1.renameAttribute(attribute0, "@attribute");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String[] stringArray0 = new String[8];
      instances0.toString();
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@relation";
      stringArray0[4] = "@relation";
      stringArray0[5] = "@data";
      stringArray0[6] = ".arff";
      stringArray0[7] = "@relation";
      RandomForest randomForest0 = new RandomForest();
      randomForest0.globalInfo();
      textDirectoryLoader0.setRetrieval((-2991));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation0.weightedRecall();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      double double1 = evaluation0.pctCorrect();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      try { 
        Evaluation.evaluateModel((Classifier) simpleLinearRegression0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.SimpleLinearRegression:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setWeightTrimBeta");
      instances0.deleteStringAttributes();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=1.874099239168671
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      instances0.stream();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.weightedFalsePositiveRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Instance instance0 = null;
      MockRandom mockRandom0 = new MockRandom(1);
      evaluation0.unweightedMacroFmeasure();
      Instances instances1 = instances0.resample(mockRandom0);
      evaluation0.toClassDetailsString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 171
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      instances0.resample(mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) gaussianProcesses0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 172
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      String string0 = Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      assertEquals("\nSynopsis for weka.classifiers.bayes.NaiveBayesMultinomial:\n\nClass for building and using a multinomial Naive Bayes classifier. For more information see,\n\nAndrew Mccallum, Kamal Nigam: A Comparison of Event Models for Naive Bayes Text Classification. In: AAAI-98 Workshop on 'Learning for Text Categorization', 1998.\n\nThe core equation for this classifier:\n\nP[Ci|D] = (P[D|Ci] x P[Ci]) / P[D] (Bayes rule)\n\nwhere Ci is class i and D is a document.", string0);
      
      double double0 = evaluation0.falseNegativeRate(86);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 173
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, " dt'zT3dd");
      assertNotNull(string0);
  }

  /**
  //Test case number: 174
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = new String[7];
      Evaluation.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 175
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      org.evosuite.runtime.Random.setNextRandom(27);
      try { 
        Evaluation.evaluateModel("+fK>A+Z7j&!", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name +fK>A+Z7j&!.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 176
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom();
      instances0.numDistinctValues(0);
      evaluation0.useNoPriors();
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_SumSqrErr;
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 177
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.incorrect();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 178
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      OneR oneR0 = new OneR();
      String string0 = ":C5K\\GF";
      try { 
        Evaluation.wekaStaticWrapper(oneR0, ":C5KGF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 179
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 180
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex((-1132887188));
      evaluation0.setDiscardPredictions(true);
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom0 = new MockRandom(3366L);
      Instances instances1 = instances0.resample(mockRandom0);
      instances0.listIterator();
      evaluation0.toClassDetailsString();
      TreeSet<IBk> treeSet0 = new TreeSet<IBk>();
      instances0.containsAll(instances1);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 181
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 182
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tk{'");
      System.setCurrentTimeMillis(0L);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 183
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.rootMeanPriorSquaredError();
      double double0 = evaluation0.SFMeanEntropyGain();
      evaluation0.SFMeanPriorEntropy();
      double double1 = evaluation0.weightedPrecision();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 184
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      boolean boolean0 = true;
      textDirectoryLoader0.getStructure();
      int int0 = 0;
      instances0.setClassIndex(0);
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      textDirectoryLoader0.getRevision();
      Properties properties0 = new Properties();
      properties0.values();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedPrecision();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 185
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@relation";
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.weightedMatthewsCorrelation();
      try { 
        evaluation0.crossValidateModel((Classifier) attributeSelectedClassifier0, instances0, 1401, (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 186
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedMatthewsCorrelation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 187
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      instances0.stream();
      evaluation0.weightedFalsePositiveRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      textDirectoryLoader0.listOptions();
      MockRandom mockRandom0 = new MockRandom(1);
      evaluation0.unweightedMacroFmeasure();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 704.062;
      doubleArray0[1] = 704.062;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 100.0;
      evaluation0.weightedTruePositiveRate();
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertTrue(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 188
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader0.getStructure();
      instances0.setClassIndex(0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      Attribute attribute0 = new Attribute(".arff", instances0, 1);
      instances1.renameAttribute(attribute0, "@attribute");
      Evaluation evaluation0 = new Evaluation(instances0);
      CoverTree coverTree0 = new CoverTree();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      // Undeclared exception!
      try { 
        evaluation0.weightedTruePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 189
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toClassDetailsString("Correctly Classified Instances     ");
      assertEquals("Correctly Classified Instances     \n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 190
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      try { 
        evaluation0.toClassDetailsString((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 191
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      int int0 = 0;
      instances0.setClassIndex(0);
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      Attribute attribute0 = new Attribute(".arff", instances0, 1);
      instances1.renameAttribute(attribute0, "@attribute");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Evaluation evaluation0 = new Evaluation(instances1);
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 192
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 193
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Evaluation.handleCostOption("", 1464);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      assertFalse(serializedClassifier0.getDebug());
  }

  /**
  //Test case number: 194
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 195
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }
}
