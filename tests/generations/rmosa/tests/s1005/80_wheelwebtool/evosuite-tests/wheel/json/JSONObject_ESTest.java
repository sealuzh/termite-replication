/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 04:18:04 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "I";
      short short0 = (short) (-2353);
      Short short1 = new Short((short) (-2353));
      JSONObject jSONObject1 = jSONObject0.append("null", object0);
      jSONObject1.remove("I");
      jSONObject0.optJSONArray("null");
      jSONObject1.optJSONArray("I");
      try { 
        jSONObject0.getInt("I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"I\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("\n", object0);
      jSONObject1.toString();
      boolean boolean0 = jSONObject1.isNull("\n");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      Boolean boolean0 = Boolean.FALSE;
      Float float0 = new Float(5352.033197706394);
      hashMap0.put(boolean0, float0);
      hashMap0.put(boolean0, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject1 = jSONObject0.put("] nt found.", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.put("] nt found.", (Map) hashMap0);
      String string0 = JSONObject.valueToString(boolean0);
      jSONObject0.getJSONObject("] nt found.");
      String string1 = jSONObject2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("pus", (Map) hashMap0);
      jSONObject0.write(stringWriter0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("pus");
      assertNotSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('$');
      Long long0 = new Long((-870L));
      JSONObject.numberToString(long0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "java.lang.Long@0000000002");
      stringWriter2.append((CharSequence) "java.lang.Long@0000000002", 10, 10);
      JSONObject jSONObject1 = jSONObject0.put("k9kk?6 -Ee", (double) 10);
      long long1 = jSONObject1.optLong("k9kk?6 -Ee");
      assertEquals(10L, long1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4377134277438377
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-4905.8229342));
      assertEquals("-4905.8229342", string0);
      
      JSONObject.quote("-4905.8229342");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      jSONObject0.put("-4905.8229342", 70);
      jSONObject0.optLong("Ht36", (long) 70);
      Double double0 = new Double(70);
      JSONObject.testValidity(double0);
      int int0 = jSONObject0.optInt("-4905.8229342");
      assertEquals(70, int0);
      
      JSONObject.numberToString(double0);
      jSONObject0.names();
      jSONObject0.toString(70, (-1425));
      String string1 = JSONObject.quote("is0Ni3:cp^HD}/enY");
      assertEquals("\"is0Ni3:cp^HD}/enY\"", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4941176470588235
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-115959602));
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.put(integer0, jSONArray0);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "Expected '";
      stringArray0[2] = "is";
      stringArray0[3] = "\r";
      stringArray0[4] = "lOwMAbP`80h!z&`KW'";
      stringArray0[5] = "Null key.";
      stringArray0[6] = "8o00R8$K!(*Q)^u";
      stringArray0[7] = "\r";
      stringArray0[8] = "JSONArray initial value should be a string or collection or array.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      String string0 = JSONObject.doubleToString((-115959602));
      assertEquals("-1.15959602E8", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Double.isFinite(0.0);
      try { 
        JSONObject.valueToString(double0, 1777, 1777);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      String string0 = "Null pointer";
      Double double0 = new Double(Double.NaN);
      hashMap0.put("Null pointer", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      Boolean boolean0 = Boolean.FALSE;
      Float float0 = new Float(5352.480371);
      hashMap0.put(boolean0, float0);
      Float.isFinite((-436.46088F));
      Boolean boolean1 = Boolean.FALSE;
      hashMap0.put(boolean1, (Float) null);
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject1 = jSONObject0.put("gethashCode", (Collection) linkedList0);
      JSONObject.quote("gethashCode");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"gethashCode\"";
      stringArray0[1] = "\"gethashCode\"";
      stringArray0[2] = "\"gethashCode\"";
      stringArray0[3] = "\"gethashCode\"";
      stringArray0[4] = "gethashCode";
      stringArray0[5] = "gethashCode";
      stringArray0[6] = "gethashCode";
      JSONObject jSONObject2 = new JSONObject(boolean0, stringArray0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject1, 3440, 3440);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, (String) null);
      hashMap0.putIfAbsent((String) null, (String) null);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 148, 148);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(12);
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{3$\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {3$
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      Boolean boolean0 = Boolean.FALSE;
      Float float0 = new Float(5352.480371);
      Boolean boolean1 = new Boolean(false);
      Float float1 = new Float((-2125.35F));
      hashMap0.put(boolean1, float1);
      Boolean boolean2 = Boolean.FALSE;
      Float float2 = new Float(Double.NaN);
      hashMap0.put(boolean1, float2);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-659));
      try { 
        jSONObject0.toString(76, (-746));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-2538.0671F));
      Float.isFinite(1.0F);
      jSONObject0.put("!n{Gd~'GJ<=I", (Object) float0);
      Integer integer0 = new Integer(377);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer1 = new Integer((-52526265));
      Integer integer2 = new Integer((-24668172));
      Short short0 = new Short((short)74);
      hashMap0.put(integer2, short0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.isNull("!n{Gd~'GJ<=I");
      long long0 = jSONObject0.getLong("!n{Gd~'GJ<=I");
      assertEquals((-2538L), long0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "sM'`");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("sM'`", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{1>r<");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {1>r<
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", (Object) jSONArray0);
      jSONObject1.toString(506, 506);
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000003\": []}");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.590919980975802
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Float float0 = new Float(1122.409);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("A JSONArray text must start with '['", (Object) float0);
      String string0 = jSONObject0.toString(544, 1909);
      JSONObject jSONObject1 = new JSONObject(string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put(".", 0L);
      jSONObject0.getDouble(".");
      JSONObject.getNames((Object) ".");
      jSONObject0.getInt(".");
      JSONTokener jSONTokener0 = new JSONTokener(".");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject((Object) "2S]mh{,\":qn}uBG");
      // Undeclared exception!
      jSONObject0.toString(48, 8192);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{5k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {5k
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONObject@0000000001", (Object) null);
      JSONObject.valueToString(jSONObject1);
      assertEquals(0, jSONObject1.length());
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = JSONObject.quote("V$F</(@I[un:$d6*");
      assertEquals("\"V$F<\\/(@I[un:$d6*\"", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      Boolean boolean0 = Boolean.FALSE;
      Float float0 = new Float(5352.480371);
      hashMap0.put(boolean0, float0);
      Boolean boolean1 = Boolean.FALSE;
      hashMap0.put(boolean1, (Float) null);
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject1 = jSONObject0.put("gethashCode", (Collection) linkedList0);
      jSONObject1.names();
      jSONObject0.optJSONArray("gethashCode");
      JSONArray jSONArray0 = (JSONArray)jSONObject1.get("gethashCode");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double((-2657.7741492363));
      Double double1 = new Double((-2657.7741492363));
      hashMap0.put(double0, double1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Boolean.valueOf("|OH/a@K,1/ic:(");
      Boolean.valueOf("|OH/a@K,1/ic:(");
      Boolean boolean0 = new Boolean("|OH/a@K,1/ic:(");
      String[] stringArray0 = new String[0];
      jSONArray0.toJSONObject(jSONArray0);
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("|OH/a@K,1/ic:(", 1107);
      jSONObject0.opt("|OH/a@K,1/ic:(");
      JSONArray jSONArray1 = jSONObject1.optJSONArray("|OH/a@K,1/ic:(");
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      Float float0 = new Float(5351.963192469272);
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject1 = jSONObject0.put("gethashCode", (Collection) linkedList0);
      jSONObject0.keys();
      linkedList0.toArray();
      String string0 = "v03GK5g,\\GP3Y^]*8";
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONArray jSONArray0 = jSONObject1.getJSONArray("gethashCode");
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.append("9>o#q2", object0);
      jSONObject0.getJSONArray("9>o#q2");
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("qssX_}u{'^Z\"Glm0)y", (-646L));
      JSONObject jSONObject1 = jSONObject0.put("qssX_}u{'^Z\"Glm0)y", (-646L));
      jSONObject1.getDouble("qssX_}u{'^Z\"Glm0)y");
      JSONObject.getNames((Object) jSONObject0);
      jSONObject1.getInt("qssX_}u{'^Z\"Glm0)y");
      JSONTokener jSONTokener0 = new JSONTokener("qssX_}u{'^Z\"Glm0)y");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Long.getLong("0..");
      Long.getLong("0..", (Long) null);
      Long.getLong("0..", (Long) null);
      hashMap0.put((Long) null, (Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      jSONObject0.toString();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("v", (Object) hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(12);
      hashMap1.put(integer0, "v");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.isNull("v");
      Short short0 = new Short((short) (-1423));
      JSONObject jSONObject2 = jSONObject1.accumulate("v", short0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float(495.628811658332);
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      Boolean boolean0 = new Boolean("z?VN|jW&%ep[");
      hashMap0.put(boolean0, float0);
      Boolean boolean1 = Boolean.FALSE;
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject0.put("gethashCode", (Collection) linkedList0);
      JSONObject.quote(">*qT0#f[YVE-(+5e/");
      Integer integer0 = new Integer((-659));
      // Undeclared exception!
      jSONObject0.toString(5497, 5497);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.0987996145617602
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      Boolean.valueOf(false);
      Boolean.valueOf(true);
      Float float0 = new Float(Double.NaN);
      Float float1 = new Float(0.0);
      Boolean boolean0 = new Boolean("QAhT|");
      Float float2 = new Float(0.0F);
      hashMap0.put(boolean0, float2);
      Boolean boolean1 = Boolean.valueOf(true);
      hashMap1.put(boolean1, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.optBoolean("gethashCode", true);
      jSONObject0.names();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject2 = jSONObject0.put("QAhT|", (Collection) linkedList0);
      jSONObject1.keys();
      try { 
        jSONObject2.toString(1016);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("iscompare", hashMap1);
      jSONObject1.remove("iscompare");
      try { 
        jSONObject0.getJSONArray("iscompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iscompare\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      Float float0 = new Float(0.0);
      Float.isFinite(3350.0F);
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      hashMap0.put((Boolean) null, float0);
      Boolean boolean0 = Boolean.TRUE;
      Float float1 = new Float((-84.881));
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'q';
      String string0 = "su";
      Boolean.valueOf("0");
      JSONObject.quote("su");
      char[] charArray0 = new char[6];
      stringWriter0.write(743);
      charArray0[4] = 'q';
      charArray0[2] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      charArray0[4] = 'q';
      // Undeclared exception!
      try { 
        jSONObject0.toString(743);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("Pk(pBgg1x4", (Map) null);
      jSONObject0.put("{}", 0.0);
      // Undeclared exception!
      jSONObject1.toString(8192);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.0983268013229894
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray((Collection) null);
      JSONObject.getNames((Object) jSONArray1);
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      Boolean boolean0 = new Boolean("Kc2bT(HXL");
      Float float0 = new Float(512.01445181559);
      hashMap0.put(boolean0, float0);
      Boolean boolean1 = Boolean.FALSE;
      Boolean boolean2 = new Boolean(true);
      hashMap0.put(boolean2, (Float) null);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "gethashCode";
      jSONObject0.optBoolean(",>Ylg6(eezQ/v2<Duz", true);
      jSONObject0.names();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject1.put(",>Ylg6(eezQ/v2<Duz", (Collection) linkedList0);
      jSONObject1.keys();
      int int0 = 8448;
      // Undeclared exception!
      jSONObject0.toString(8448);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}nn,q({#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }nn,q({#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONTokener jSONTokener0 = new JSONTokener("{}l9Om`j wKg8CY7oX");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{/S >_HR@heZyP<*~G@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 1 of {/S >_HR@heZyP<*~G@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject$1", (Object) null);
      jSONObject0.accumulate("wheel.json.JSONObject$1", "wheel.json.JSONObject$1");
      JSONArray jSONArray1 = jSONObject1.optJSONArray((String) null);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("rsoXqaHK+)", (-4986L));
      jSONObject1.optInt("rsoXqaHK+)");
      double double0 = new Float((double) (-4986));
      double double1 = new Double((-4986));
      assertEquals((-4986.0), double1, 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8911601612408222
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0, 112, (-2200));
      JSONObject jSONObject1 = jSONObject0.put("{}", (-3611.140492862354));
      boolean boolean0 = jSONObject1.has("{}");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Float float0 = new Float(1122.409);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", (Object) float0);
      double double0 = jSONObject1.optDouble("A JSONArray text must start with '['");
      assertEquals(4, jSONObject0.length());
      assertEquals(1122.4090576171875, double0, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("8t", (-646L));
      JSONObject jSONObject1 = jSONObject0.put("qssX_}u{'^Z\"Glm0)y", (-646L));
      double double0 = jSONObject1.optDouble("qssX_}u{'^Z\"Glm0)y", 1.0);
      assertEquals((-646.0), double0, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      jSONObject0.keys();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("#x7p4I41l};gSd}q^5", (Collection) linkedList0);
      Float.min(1807.0F, 1097.2094F);
      JSONObject jSONObject2 = jSONObject0.append("#x7p4I41l};gSd}q^5", float0);
      jSONObject0.has("JSONArray[");
      jSONObject1.opt((String) null);
      jSONObject2.names();
      JSONObject jSONObject3 = jSONObject2.optJSONObject("JSONArray[");
      assertNull(jSONObject3);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)69);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      LinkedList<JSONObject> linkedList2 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList2);
      jSONArray0.put((double) (byte)69);
      Float float0 = new Float((double) (byte)69);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "wheel.json.JSONArray";
      stringArray0[1] = "wheel.json.JSONArray";
      stringArray0[2] = "wheel.json.JSONArray";
      stringArray0[3] = "wheel.json.JSONArray";
      stringArray0[4] = "wheel.json.JSONArray";
      stringArray0[5] = "wheel.json.JSONArray";
      stringArray0[7] = "wheel.json.JSONArray";
      stringArray0[8] = "wheel.json.JSONArray";
      jSONObject0.opt("getwait");
      try { 
        jSONObject0.getBoolean("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Long, Object> hashMap1 = new HashMap<Long, Object>();
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      hashMap1.put(long0, jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("D5Kl>);J$8Ll(m&{", 2871L);
      jSONObject1.getDouble("D5Kl>);J$8Ll(m&{");
      String string0 = null;
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject1.append("D5Kl>);J$8Ll(m&{", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[D5Kl>);J$8Ll(m&{] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, 62, 15);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("] not found.");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject.getNames(jSONObject0);
      Integer integer0 = new Integer((-3334));
      JSONObject.valueToString(integer0);
      jSONObject0.optDouble("wheel.json.JSONObject", (double) (-3334));
      JSONObject jSONObject1 = jSONObject0.accumulate("java.lang.Integer@0000000003", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("qDh*}IyT~'K9qAQQb5", jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      Boolean boolean0 = Boolean.FALSE;
      Float float0 = new Float(5352.480371);
      Boolean boolean1 = Boolean.valueOf(true);
      hashMap0.put(boolean1, float0);
      Boolean boolean2 = Boolean.FALSE;
      Float float1 = new Float(118.30831F);
      hashMap0.put(boolean2, float1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-659));
      String string0 = jSONObject0.toString(693, (-659));
      assertNotNull(string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Long long0 = new Long(1L);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Byte byte0 = new Byte((byte)27);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONObject.", byte0);
      int int0 = jSONObject1.getInt("] is not a JSONObject.");
      assertEquals(27, int0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Function<Object, Object> function0 = Function.identity();
      hashMap0.computeIfAbsent("0=leP\"_bi", function0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.getInt("0=leP\"_bi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0=leP\\\"_bi\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("iscmpae", "");
      try { 
        jSONObject0.getBoolean("iscmpae");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iscmpae\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("iscopare", (-1488));
      jSONObject1.optLong("iscopare");
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("iscopare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of iscopare
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.clear();
      int int0 = jSONObject0.optInt("isreplaceAll", (-12473307));
      assertEquals((-12473307), int0);
      
      String string0 = JSONObject.quote("l6 oVRk#%@Wv");
      assertEquals("\"l6 oVRk#%@Wv\"", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong(".", (-275L));
      JSONObject.quote((String) null);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      try { 
        jSONArray0.getJSONObject((-2828));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2828] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) null);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\n", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      Float float0 = new Float(0.0F);
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put(float0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Long, Short> hashMap0 = new HashMap<Long, Short>();
      Short short0 = new Short((short)11);
      hashMap0.put((Long) null, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      jSONObject0.put("CqsbC~4dBHx>p\"x", 3);
      long long0 = jSONObject0.getLong("CqsbC~4dBHx>p\"x");
      assertEquals(3L, long0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      Boolean boolean1 = Boolean.FALSE;
      Float float0 = new Float((-1452.05152));
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      Boolean boolean2 = new Boolean("fq-Ca9~=qL-%R");
      Float float1 = new Float(239.116);
      hashMap1.put(boolean2, float1);
      Boolean boolean3 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Collection<Object> collection0 = null;
      JSONObject jSONObject1 = jSONObject0.put("(?49+#", (Collection) null);
      try { 
        jSONObject1.getLong("(?49+#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(?49+#\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("Null pointer", 0.0);
      StringWriter stringWriter1 = new StringWriter();
      assertFalse(stringWriter1.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      Boolean boolean0 = Boolean.FALSE;
      Float float0 = new Float(0.0);
      hashMap0.put(boolean0, float0);
      Boolean boolean1 = Boolean.TRUE;
      hashMap0.put(boolean1, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-1773), 682);
      assertNotNull(string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Null key.", "Null key.");
      hashMap0.putIfAbsent((String) null, (String) null);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 148, 148);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      Byte byte0 = new Byte((byte) (-102));
      linkedList0.add(byte0);
      String string0 = JSONObject.valueToString(jSONArray1, 8448, 1417);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("joi");
      StringWriter stringWriter1 = new StringWriter();
      assertFalse(stringWriter1.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "toU";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[8] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", false);
      jSONObject1.getBoolean("");
      Object object0 = jSONObject0.remove("wheel.json.JSONArray");
      assertNull(object0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      HashMap<Double, Short> hashMap1 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((-2384.105F));
      JSONObject jSONObject1 = jSONObject0.put("!n{Gd~'GJ<=I", (Object) float0);
      try { 
        jSONObject1.getBoolean("!n{Gd~'GJ<=I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!n{Gd~'GJ<=I\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray0);
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "v";
      JSONObject jSONObject1 = jSONObject0.put("v", (Object) hashMap0);
      try { 
        jSONObject1.getDouble("v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"v\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("7W)j>Q;sL", 2052L);
      assertEquals(2052L, long0);
      
      String string0 = JSONObject.quote("2`da@o");
      assertEquals("\"2`da@o\"", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("co", 0L);
      JSONTokener jSONTokener0 = new JSONTokener("JN'!gI]`t$X.asjnj");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of JN'!gI]`t$X.asjnj
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1172927292153942
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("0");
      JSONObject jSONObject1 = jSONObject0.putOpt("getput", "getput");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-2921L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("65t}Q[>FN]%cPXX-6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"65t}Q[>FN]%cPXX-6\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject(object0);
      jSONObject1.put("*WM", object0);
      jSONObject1.getString("*WM");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("Missing value", 114);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("R C9LDX");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.8726585610126601
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.quote("Unterminate stri");
      assertEquals("\"Unterminate stri\"", string0);
      
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("\"Unterminate stri\\\"");
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("@3#j6c C+sT");
      jSONObject0.putOpt("@3#j6c C+sT", boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject.testValidity("\"`f~uBsq>mCMa[4");
      String string0 = JSONObject.valueToString((Object) null, (-1718), (-1718));
      assertEquals("null", string0);
      
      Float float0 = new Float((double) (-1718));
      JSONObject.valueToString(float0, 523, 91);
      Double double0 = new Double(1360.37125);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000001", (Object) "null");
      jSONObject0.optDouble("java.lang.Float@0000000001", 390.7);
      jSONObject0.optString("java.lang.Float@0000000001", "\"`f~uBsq>mCMa[4");
      jSONObject1.put("java.lang.String@0000000004", (-2286L));
      double double1 = jSONObject0.optDouble("null", (-958.15334256));
      assertEquals((-958.15334256), double1, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Xq\"hKyxu}d", 1299.392048112392);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject.testValidity("\"`f~uBsq>mCMa[4");
      JSONObject.valueToString((Object) null);
      Float float0 = new Float((double) (-1718));
      String string0 = JSONObject.valueToString("null", 60, 8);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("\"`f~uBsq>mCMa[4", object0);
      String string1 = jSONObject1.optString("\"`f~uBsq>mCMa[4");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject.testValidity("\"`f~uBsq>mCMa[4");
      JSONObject.valueToString((Object) null, (-1718), (-1718));
      Float float0 = new Float((double) (-1718));
      JSONObject.valueToString(float0, 523, 91);
      Double double0 = new Double(1360.37125);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("java.lang.Float@0000000001", (Object) "null");
      jSONObject0.optDouble("java.lang.Float@0000000001", 390.7);
      jSONObject0.optString("java.lang.Float@0000000001", "\"`f~uBsq>mCMa[4");
      JSONObject.valueToString(float0);
      jSONObject0.keys();
      jSONObject0.has("su");
      jSONObject0.optDouble("", 1.0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "java.lang.Float@0000000001");
      assertSame(stringWriter0, stringWriter1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("isdoubleToLongBits", "isdoubleToLongBits");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("A JSONArray text must start with '['", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.quote("QhKJTSk/?");
      assertEquals("\"QhKJTSk/?\"", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("getparseDouble", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Float float0 = new Float(0.0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertFalse(linkedList0.contains(string0));
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = JSONObject.valueToString("{5k");
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("j$MC");
      jSONObject0.optInt("j$MC", 0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of j$MC
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.095341709310384
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = JSONObject.quote("Expected a ',' or ']'");
      assertEquals("\"Expected a ',' or ']'\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "Expected a ',' or ']'");
      int int0 = jSONObject0.optInt("/NxqLbc =V(]MFB~f*t");
      assertEquals(0, int0);
      
      String string1 = jSONObject0.optString("\"Expected a ',' or ']'\"", ">~t,l");
      assertEquals(">~t,l", string1);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = JSONObject.quote("@n?;/?J@3L*?");
      assertNotNull(string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = JSONObject.quote("[0y&i*_\"");
      assertEquals("\"[0y&i*_\\\"\"", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Float float0 = new Float((double) 59);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 0, 0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-664.27055));
      linkedList0.add(double0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-664.27055));
      linkedList0.add((Double) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "ismae");
      Long long0 = new Long(621L);
      String string0 = JSONObject.quote("ismae");
      Object object1 = jSONObject0.get("");
      assertFalse(object1.equals((Object)string0));
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Float float0 = new Float(343.0437755);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt("5XL.PUpD{8aP#V}nJ,B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5XL.PUpD{8aP#V}nJ,B\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put("ha", "=/");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.quote("null");
      String string1 = jSONObject0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      Float float1 = new Float(0.0);
      Float.max(0.0F, (-332.05225F));
      try { 
        jSONObject0.append((String) null, float1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put(boolean0, (Float) null);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "iscompare";
      try { 
        jSONObject0.put((String) null, (-1369));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("}78_!/yN{:|bQZ1T", false);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("iscompare", (-1492));
      JSONObject.valueToString(jSONObject0);
      try { 
        jSONObject0.append("iscompare", "wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[iscompare] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("Mp\"", "Mp\"");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean((String) null);
      try { 
        jSONObject0.accumulate((String) null, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Byte byte0 = new Byte((byte)95);
      String string0 = JSONObject.valueToString(byte0, (byte)95, (byte)95);
      assertNotNull(string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)34);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{5k");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {5k
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("V#4\"ZS", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("zfm,5jR>;(8x!NG\"-aR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of zfm,5jR>;(8x!NG\"-aR
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[4];
      jSONArray0.toJSONObject(jSONArray0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-702.3842102));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("E?^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"E?^\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      Boolean boolean0 = Boolean.FALSE;
      Float float0 = new Float(5350.842732300312);
      hashMap0.put(boolean0, float0);
      hashMap0.put(boolean0, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string0 = jSONObject0.toString(2417, (-2946));
      assertNotNull(string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Float float0 = new Float(777.5F);
      hashMap0.put((Object) null, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(42);
      // Undeclared exception!
      try { 
        jSONObject0.toString(693, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("ismae", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = JSONObject.valueToString(linkedList0, 47, 47);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      Boolean boolean0 = Boolean.FALSE;
      Float float0 = new Float(5350.84273);
      hashMap0.put(boolean0, float0);
      hashMap0.put(boolean0, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string0 = jSONObject0.toString(1998, 1998);
      assertNotNull(string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(927, 927);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(59);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      double double0 = jSONObject0.optDouble("')dYbjj.?");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("q!:69", "q!:69");
      assertEquals("q!:69", string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Float float0 = new Float(0.0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "!n{Gd~v'GJ<S=I";
      JSONObject jSONObject1 = jSONObject0.put("!n{Gd~v'GJ<S=I", (Object) linkedList0);
      try { 
        jSONObject1.getJSONArray("!n{Gd~v'GJ<S=I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!n{Gd~v'GJ<S=I\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("Ew*gyy!plg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ew*gyy!plg\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("!n{Gd~v'GJ<S=I", (Object) hashMap0);
      try { 
        jSONObject1.getJSONObject("!n{Gd~v'GJ<S=I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!n{Gd~v'GJ<S=I\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("co");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"co\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
