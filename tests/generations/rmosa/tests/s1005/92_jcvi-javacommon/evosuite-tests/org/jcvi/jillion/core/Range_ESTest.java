/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 03:41:12 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775802L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(9223372036854775802L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.060362201498235
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(9223372036854775802L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of((-1564L));
      range1.startsBefore(range0);
      // Undeclared exception!
      try { 
        range1.complement(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1564 would make range [9223372036854775802 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(9223372036854772266L);
      Range range1 = Range.of(9223372036854772265L);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.211693077167816
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(9223372036854772265L);
      Range range1 = Range.of(9223372036854774476L);
      range1.equals(range0);
      range1.spliterator();
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0581000423930447
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(1L, 0L);
      range0.complementFrom(linkedList0);
      Object object0 = new Object();
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range1.equals(range0);
      assertTrue(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L);
      range0.split(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(757L);
      Range range1 = Range.of(1350L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3267198375627096
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 868L, 868L);
      Range range1 = Range.of(868L);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      Long long0 = new Long(2640L);
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.794779783551898
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(3868L);
      Range range1 = Range.of(4078071448678L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 4078071448679 .. 4078071448679 ]/RB", string0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      linkedList0.add(range0);
      List<Range> list0 = range1.split(4078071448678L);
      List<Range> list1 = range0.complementFrom(linkedList0);
      assertTrue(list1.equals((Object)list0));
      
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(3869L, long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.7573331792428575
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3543L);
      Range range0 = Range.of(3543L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.split(2147483647L);
      range0.complementFrom(linkedList0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range0.complementFrom(linkedList1);
      Range range1 = Range.of(2147483647L, 2147483647L);
      range1.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range1.split(9223372036854775807L);
      range0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2071394542898237
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(9223372036854772265L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 9223372036854772265 .. 9223372036854772266 ]/SB", string0);
      
      Long long0 = new Long(9223372036854772265L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      List<Range> list1 = range0.split(9223372036854772265L);
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65559L, (-9223372036854775808L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of((-339L));
      Range range1 = Range.of((-173L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of((-2549L));
      Range range1 = Range.of((-1922L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1327282156912077
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Long.getLong((String) null);
      long long0 = 2066L;
      Range.of(1935L);
      range0.equals((Object) null);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2031L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 4294967295L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1080L, 9223372032559808514L);
      Object object0 = new Object();
      Long long0 = new Long(1080L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(9223372036854772266L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2660952157462746
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Long.getLong("");
      range0.equals("");
      Range range1 = Range.of(0L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1080L, 9223372032559808514L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1164L, 65535L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of(65535L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.797208748908024
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long((-2147483648L));
      Range range1 = Range.of((-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.contractEnd((-1408L));
      range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Long.compareUnsigned(9223372036854775807L, 2147483647L);
      Long.compareUnsigned(1, 1);
      Long.getLong("");
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(0);
      boolean boolean1 = range0.equals("gT%!wFa$+%!.?e");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.892632114903634
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.ofLength(255L);
      String string0 = range0.toString();
      assertEquals("[ 255 .. 255 ]/0B", string0);
      
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.891722433292198
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Long.compareUnsigned(255L, 255L);
      Long.getLong("number of entries must be >=0");
      Range range0 = Range.of(255L);
      boolean boolean0 = range0.equals("g.:<Ivgz-c*p\"`;lT");
      Range.Builder range_Builder0 = new Range.Builder(0);
      Object object0 = new Object();
      Range range1 = Range.ofLength(259L);
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-2549L));
      Range range1 = Range.of((-2549L));
      range1.equals(range0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(1332L);
      Range range1 = Range.of(1350L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 4294967295L);
      boolean boolean0 = range0.equals(object1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(4294967295L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Long.compareUnsigned(4294967295L, 9223372036854771941L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2592L, (-1241L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.ofLength(4294967271L);
      boolean boolean0 = range0.equals("unable to delete ");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.7167661202268483
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(1945L);
      Range range1 = Range.ofLength(1945L);
      String string0 = range1.toString();
      assertEquals("[ 0 .. 1944 ]/0B", string0);
      
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(1945L, 1945L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.parseRange("[ 0 .. 1944 ]/0B", range_CoordinateSystem0);
      Range.Builder range_Builder3 = new Range.Builder(range3);
      assertFalse(range3.isEmpty());
      
      range_Builder2.contractEnd((-32768L));
      boolean boolean0 = range2.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range3));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.equals(range1);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854773944L, (-4149L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4149 would make range [9223372036854773944 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.386495788903917
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-1313L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.3870160531981783
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 2776L);
      Long long0 = new Long(0L);
      Range range1 = Range.of(255L, 2147483647L);
      range1.isSubRangeOf(range0);
      Range.of((-1L), 127L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.2017210871781594
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1L), long0);
      
      Range range1 = Range.of(255L);
      range0.intersection(range1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65551L, (-9223372036854775808L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2015566946087035
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(624L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.5890181618603387
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(32767L, 65535L);
      Long long0 = new Long(127L);
      Long.compareUnsigned(3224L, 9223372036854743041L);
      Long.compareUnsigned(462L, 9223372036854743041L);
      Long.getLong("");
      range0.equals((Object) null);
      List<Range> list0 = range0.split(65535L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
      
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 32768 .. 65536 ]/RB", string0);
      
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(32768L, long1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of(2178L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(4294967271L);
      boolean boolean0 = range0.equals("unable to delete ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-128L));
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.2013835344355432
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 127L, 127L);
      Range.ofLength(149L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("oj P=M\"s%!,XZ", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse oj P=M\"s%!,XZ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.05979471828628
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add((Range) null);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range0 = Range.ofLength(2556L);
      range0.split(2556L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Long.compareUnsigned(1L, (-36L));
      Long.getLong("|fT+");
      range0.equals(range_Builder0);
      List<Range> list0 = range0.split(1L);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(1332L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.390361318829
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = 466L;
      Range.Builder range_Builder0 = new Range.Builder(466L);
      Range range0 = range_Builder0.build();
      range_Builder0.expandBegin(466L);
      Range range1 = Range.of(466L, 3224L);
      range1.startsBefore(range0);
      int int0 = Long.compareUnsigned(3224L, 2375L);
      Long.compareUnsigned(1, 466L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Long.getLong("YVhQjz b>v>]pS{a");
      List<Range> list0 = range0.split(1);
      range0.complementFrom(list0);
      Range.of((long) int0, long0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.206716867768877
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(9223372036854772265L);
      List<Range> list0 = range0.split(9223372036854772265L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.contains(range0));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.4406795806701997
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals(".pyYKh");
      assertFalse(boolean0);
      
      Range range1 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65551L, 65551L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(9223372036854774254L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775792L, (-1283L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1283 would make range [9223372036854775792 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.1351203217412427
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of((-2002L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2001L), long0);
      
      Range range1 = Range.of((-1760L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 858L, 858L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of((-1909L), 32767L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.9811472512917607
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of((-301L));
      Range range1 = Range.of(9223372036854774983L);
      boolean boolean0 = range0.startsBefore(range1);
      Range range2 = Range.of(9223372036854774983L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean1 = range0.equals(object1);
      assertFalse(boolean1 == boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-128L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.979024296846825
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-1L));
      boolean boolean0 = range1.intersects(range0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L);
      range_Builder0.contractBegin(0L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.9784131432944947
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(6L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.parseRange("can not parse ", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range0.complementFrom(linkedList1);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.getBegin();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      boolean boolean0 = range0.equals("?_-");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-227L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.387669055193462
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.3306226704810866
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-2007L), (-2007L));
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 858L, 858L);
      Object object0 = new Object();
      Long long0 = new Long(2640L);
      boolean boolean0 = range0.intersects(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.20490554701416
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(9223372036854775796L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      
      List<Range> list1 = new LinkedList<Range>();
      //  // Unstable assertion: assertFalse(list1.equals((Object)list0));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.0618047033734874
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      range0.complement(range0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), 239L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3543L, 9223372036854773863L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.203195832170171
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(300L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 300 .. 301 ]/SB", string0);
      
      Range range1 = Range.parseRange("[ 300 .. 301 ]/SB");
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32767L), 0L);
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.060276460265276
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.8896985514868954
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(255L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.1339026904400007
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder();
      Object object0 = new Object();
      range0.equals(range_Builder0);
      // Undeclared exception!
      try { 
        Range.parseRange("L3U7,4U1^alS^589|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.134006824564753
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3543L);
      range_Builder0.expandBegin(3543L);
      Range range0 = Range.of(4294967321L, 9223372036854775166L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 4294967321 .. 9223372036854775166 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 4294967321 .. 9223372036854775166 ]/0B", range_CoordinateSystem0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-32784L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 9223372036854773863L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(65535L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.059686199566801
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-3563L));
      boolean boolean0 = range1.intersects(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1239L, 2147483647L);
      long long0 = 2147483647L;
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(65535L);
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(3868L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.984829714874938
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of(448L, 65535L);
      String string0 = range0.toString();
      assertEquals("[ 448 .. 65535 ]/0B", string0);
      
      Range.CoordinateSystem.values();
      List<Range> list0 = range0.split(448L);
      assertFalse(list0.contains(range0));
      assertEquals(146, list0.size());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      List<Range> list0 = range0.split(2921L);
      assertTrue(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of((-2394L));
      long long0 = 1L;
      Range range1 = Range.of(1L);
      range0.isSubRangeOf(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(255L, (-647L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.573112427755785
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1189L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1189L, long0);
      
      Range range1 = range_Builder0.build();
      long long1 = range1.getLength();
      assertSame(range1, range0);
      assertEquals(1189L, long1);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-2L));
      range0.split(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.798520052343639
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.ofLength(1945L);
      range0.toString();
      range0.toString();
      Range range1 = Range.ofLength(1945L);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("`lP('9uRpR.tMc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse `lP('9uRpR.tMc into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of((-1958L));
      Object object0 = new Object();
      range0.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("8ykkkE8nGa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.8ykkkE8nGa
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.693159536685813
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of((-2549L));
      Range range1 = Range.of((-1922L));
      boolean boolean0 = range1.startsBefore(range0);
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
      
      Range range2 = Range.of((-1922L));
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.058282690794871
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(873L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(range0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774273L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.2732409507095364
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = 466L;
      Range.Builder range_Builder0 = new Range.Builder(466L, 466L);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 9223372036854775807L;
      long long2 = (-2050L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1584L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.9811472512917607
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), 1031L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-32768L), (-32768L));
      assertSame(range2, range0);
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(854L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      long long1 = range0.getBegin();
      assertEquals(9223372036854775807L, long1);
      
      Long.compareUnsigned((-1991L), 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = range0.asRange();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.iterator();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.7931511307298944
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(757L);
      Range range0 = range_Builder0.build();
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1333L);
      long long1 = (-1333L);
      long long2 = (-1171L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1333L), (-1171L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem1, (-1332L), (-1333L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem2, (-1171L), (-1333L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-127L), long0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      List<Range> list0 = range1.complement(range0);
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
      
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.startsBefore(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(149L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.3284514392943114
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of((-4560L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-4560L), (-4560L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      range0.getEnd(range_CoordinateSystem1);
      range1.startsBefore(range0);
      range0.intersects(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-4560L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.794110516722859
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.ofLength(360L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of((-128L));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of((-466L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = range0.getEnd();
      assertEquals((-1L), long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Long long0 = new Long((-2237L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      // Undeclared exception!
      try { 
        range0.split((-552L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = 2147483647L;
      Range.Builder range_Builder0 = new Range.Builder((-2059L), 3481L);
      Range range0 = range_Builder0.build();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("j;93");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.j;93
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 1L);
      String string0 = "*D $PH^$x%\\X?";
      // Undeclared exception!
      try { 
        Range.parseRange("*D $PH^$x%X?", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse *D $PH^$x%X? into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.5683304305687247
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(127L, long0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.5672464197286162
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(757L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.8940784789052407
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.ofLength(501L);
      Range range1 = Range.ofLength(501L);
      range0.intersection(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.798987970691887
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775779L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of((-9223372036854775779L));
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      assertSame(range1, range2);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.9795303057019797
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.of(10247L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.892740633623113
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range range0 = range_Builder0.build();
      range_Builder0.expandBegin(0L);
      Range range1 = Range.ofLength(1909L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 32768L;
      // Undeclared exception!
      try { 
        Range.of(32768L, (-1223L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.798881389290342
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      boolean boolean0 = range0.equals(".pyYKh");
      assertFalse(boolean0);
      
      Range range1 = Range.of((-9223372036854775808L));
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      range0.complementFrom(linkedList1);
      range0.complementFrom(linkedList0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.ofLength(1945L);
      Range.CoordinateSystem.values();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1070L, 1070L);
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L);
      range_Builder0.expandBegin(466L);
      range_Builder0.contractEnd(466L);
      // Undeclared exception!
      try { 
        Range.parseRange("gvn%,6b2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse gvn%,6b2 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long long0 = 466L;
      Range.Builder range_Builder0 = new Range.Builder(466L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3543L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        Range.of(448L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("hk)Mlx~H,?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.hk)Mlx~H,?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-32804L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3543L);
      range_Builder0.expandBegin(3543L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range range0 = Range.of(4294967338L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long long0 = 1L;
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, (-9223372036854775808L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin((-1L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      range_Builder0.shift(1L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(2L, long0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 5172L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(662L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-2L), (-2L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-128L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, (-128L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -129 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-2492L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 171
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(9223372036854775660L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1076L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 172
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
