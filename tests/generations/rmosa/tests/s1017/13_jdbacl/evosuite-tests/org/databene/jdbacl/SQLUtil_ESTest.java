/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 19:13:10 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.UnsupportedEncodingException;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.databene.commons.version.VersionNumberComponent;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.jni.LocalGDSImpl;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType dBDataType0 = DBDataType.getInstance((-2029249544), "DATE");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("deletealter", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("DATE", stringBuilder0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7u!j{.Q%=Y");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("pZ", defaultDBTable0, (DBDataType) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "7u!j{.Q%=Y";
      stringArray0[1] = "_Q";
      stringArray0[2] = "pZ";
      stringArray0[3] = "HK2R";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "HK2R", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("_Q", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "exec", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT exec UNIQUE (7u!j{.Q%=Y, _Q, pZ, HK2R)", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "u7K^Bjq`^", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      File file0 = MockFile.createTempFile("42Z73", "'\"'Z*iS(#R^");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("create materialized viewjkfs$t#");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("jkf", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "inner";
      stringArray0[1] = "create materialized viewjkfs$t#";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("inner", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      boolean boolean1 = SQLUtil.isDDL("create materialized viewjkfs$t#");
      assertFalse(boolean1 == boolean0);
      
      SQLUtil.parseColumnTypeAndSize("inner");
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (inner, create materialized viewjkfs$t#) REFERENCES null(inner, create materialized viewjkfs$t#)", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLUtil.mutatesStructure("alter t^ble");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "alter t^ble";
      stringArray0[1] = "alter t^ble";
      stringArray0[2] = "alter t^ble";
      stringArray0[3] = "alter t^ble";
      stringArray0[4] = "alter t^ble";
      stringArray0[5] = "alter t^ble";
      stringArray0[6] = "alter t^ble";
      stringArray0[7] = "alter t^ble";
      stringArray0[8] = "alter t^ble";
      String[] stringArray1 = new String[2];
      stringArray1[0] = null;
      stringArray1[1] = "alter t^ble";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("alter t^ble", stringArray0, (String) null, "alter t^ble", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("8l(?TTFKv^CnezFo$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: 8l(?TTFKv^CnezFo$
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLUtil.normalize("--", false);
      DBDataType dBDataType0 = DBDataType.getInstance((-1914442680), "--");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      Integer.getInteger(" ADD ", (-3987));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("--", (DBTable) null, dBDataType0, integer0);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBColumn0.setSize(integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      FromVTI fromVTI0 = new FromVTI();
      fromVTI0.getContextManager();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTransactionCompile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = null;
      TableContainer tableContainer0 = new TableContainer((String) null);
      tableContainer0.getTable("");
      int int0 = 1010;
      DBDataType dBDataType0 = DBDataType.getInstance(1010, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string1 = "KuUl;F]N`1i)8*US<K";
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("KuUl;F]N`1i)8*US<K", (DBTable) null, dBDataType0, integer1);
      defaultDBColumn0.setType(dBDataType0);
      String string2 = null;
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0, integer1, integer2);
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(defaultDBColumn1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("esce", true, defaultDBTable0, "esce");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT esce CHECK esce", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[31];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " )\n", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("|vB1i@@c^:s>h", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, " )\n", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \" )\n\" ", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("?KYZ]uC0uZI9#");
      tableContainer0.toString();
      tableContainer0.getTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(932, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, 932, "");
      defaultDBColumn0.setType(dBDataType0);
      String string0 = SQLUtil.renderValue(defaultDBColumn0);
      assertEquals(" : ", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" : ");
      System.setCurrentTimeMillis(0L);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "getPrecision");
      SQLUtil.renderValue(stringBuilder0);
      SQLUtil.addRequiredCondition("?C[u", stringBuilder0);
      assertEquals("?C[u", stringBuilder0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('$');
      String[] stringArray0 = new String[25];
      stringArray0[0] = "updategetbyte(strixg)";
      stringArray0[2] = "updategetbyte(strixg)";
      stringArray0[4] = "updategetbyte(strixg)";
      SQLUtil.renderColumnListWithTableName("updategetbyte(strixg)", stringArray0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('$');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = " not found in result set.";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create table,grantor=", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, mockPrintWriter0);
      assertEquals(249, charArrayWriter0.size());
      assertEquals("$$create table null (\n)ALTER TABLE null ADD \n\tCONSTRAINT \"create table,grantor=\" FOREIGN KEY (updategetbyte(strixg), , updategetbyte(strixg), , updategetbyte(strixg), , , , , , , , , , , , , , , , , , , , ) REFERENCES null( not found in result set.)", charArrayWriter0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.countProviders();
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "table null";
      stringArray0[1] = "COLUMNDEFAULTID";
      stringArray0[2] = "table null";
      stringArray0[3] = "COLUMNDEFAULTID";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("COLUMNDEFAULTID", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter materialized viewalter t^ble");
      PrintWriter printWriter0 = mockPrintWriter0.printf("callexecute", (Object[]) stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertNull(dBForeignKeyConstraint0.getDoc());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("alter table");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter table", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputTextLog0, false);
      PrintStream printStream0 = mockPrintStream0.format("alter table", (Object[]) stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('G');
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, printWriter0);
      assertSame(dBTable0, defaultDBTable0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = "$1eJin0)w.E0yI$\\";
      File file0 = FileUtil.canonicalFile("$1eJin0)w.E0yI$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      String string1 = "alter materialized view=";
      PrintWriter printWriter0 = mockPrintWriter0.format("alter materialized view=", (Object[]) stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "F9H41";
      stringArray0[1] = "AC";
      stringArray0[2] = "F9H41";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("F9H41", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (.
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select\u00A2");
      Object object0 = new Object();
      defaultDBTable0.equals(object0);
      DBDataType dBDataType0 = DBDataType.getInstance(1398, ".}5aDJM");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop table1et=ate4};$;", defaultDBTable0, dBDataType0, integer2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1398);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("org.apache.derby.iapi.store.access.AccessFactory", stringBuilder0);
      assertEquals("org.apache.derby.iapi.store.access.AccessFactory", stringBuilder0.toString());
      
      DBSchema dBSchema0 = new DBSchema("m!bs<3$>C:%=");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("U[~x|Ob", dBSchema0);
      defaultDBTable0.getCatalog();
      DBSchema dBSchema1 = new DBSchema("", (DBCatalog) null);
      String string0 = SQLUtil.ownerDotComponent(dBSchema1);
      assertEquals("", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "?KYZ]uC0uZI9#";
      TableContainer tableContainer0 = new TableContainer("?KYZ]uC0uZI9#");
      String string1 = "";
      tableContainer0.getTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(986, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("?KYZ]uC0uZI9#", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.setType(dBDataType0);
      SQLUtil.renderValue(defaultDBColumn0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?KYZ]uC0uZI9# : (3)");
      SQLUtil.mutatesDataOrStructure("");
      String string2 = "//";
      SQLUtil.substituteMarkers("", "//", (Object) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLUtil.normalize("A~,BK-!^ctA6U#qn", true);
      DBCatalog dBCatalog0 = new DBCatalog("A ~, BK - ! ^ ctA6U # qn");
      assertEquals("catalog", dBCatalog0.getObjectType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "A~,BK-!^ctA6U#qn";
      int int0 = (-1691);
      DBDataType dBDataType0 = DBDataType.getInstance((-1691), "A~,BK-!^ctA6U#qn");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("A~,BK-!^ctA6U#qn", defaultDBTable0, dBDataType0);
      DBDataType.getInstance((-1691), "A~,BK-!^ctA6U#qn");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.toString();
      defaultDBColumn0.setDefaultValue("A~,BK-!^ctA6U#qn");
      DefaultDBTable defaultDBTable2 = new DefaultDBTable((String) null);
      defaultDBTable1.getForeignKeyConstraints();
      SQLUtil.renderColumn(defaultDBColumn0);
      Boolean boolean0 = new Boolean(true);
      LocalGDSImpl localGDSImpl0 = null;
      try {
        localGDSImpl0 = new LocalGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.antlr.runtime.Parser", true);
      assertEquals("org.antlr.runtime.Parser", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("updategetbyte(strixg)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"strixg\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLUtil.mutatesStructure("alter t^ble");
      TableContainer tableContainer0 = new TableContainer((String) null);
      tableContainer0.getTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter t^ble", (DBTable) null, 670, "alter t^ble");
      defaultDBColumn0.isEquivalent((DBObject) null);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "alter t^ble");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("alter t^bleALTER T^BLE", stringBuilder0.toString());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("selectdelttecflwv/<7a%/~3z", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delttecFlwv/<7A%/~3z", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("^gFc C{aZ21W");
      tableContainer0.getTable("^gFc C{aZ21W");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("^gFc C{aZ21W", (DBTable) null, (-1228908903), "r)+");
      defaultDBColumn0.toString();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(1714, "getWindowResultSet");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("getWindowResultSet", (DBTable) null, dBDataType0);
      DBDataType.getInstance(1714, "getWindowResultSet");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7G'/!5c90(uGq:s", (DBSchema) null);
      defaultDBTable0.toString();
      defaultDBTable0.getForeignKeyConstraints();
      defaultDBColumn0.toString();
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("getWindowResultSet : GETWINDOWRESULTSET");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "PreparedStatement", false, (String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("M2^I", stringBuilder0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("renameda", (String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.469384931184183
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.join("bulkInsert", "bulkInsert", stringArray0, "@Q`;ja~[:R", "bulkInsert", stringArray0);
      assertEquals("bulkInsert join @Q`;ja~[:R as bulkInsert on bulkInsert.null = bulkInsert.null and bulkInsert.null = bulkInsert.null and bulkInsert.null = bulkInsert.null and bulkInsert.null = bulkInsert.null and bulkInsert.null = bulkInsert.null and bulkInsert.null = bulkInsert.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "insert", true, stringArray1);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("~vF|PC'H;/[l6~J", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "insert", true, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT insert PRIMARY KEY ()", string1);
      
      String string2 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "/(U47u3Xp.~", false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(6, "qCRAT{Pk=,1-[@");
      StringBuilder stringBuilder3 = stringBuilder2.append((long) 6);
      StringBuilder stringBuilder4 = stringBuilder3.delete(6, 6);
      SQLUtil.addOptionalCondition("table null", stringBuilder4);
      assertEquals("CONSTRqCRAT{Pk=,1-[@AINT /(U47u3Xp.~ 6 or table null", stringBuilder4.toString());
      assertEquals("CONSTRqCRAT{Pk=,1-[@AINT /(U47u3Xp.~ 6 or table null", stringBuilder0.toString());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraints(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Integer integer0 = RawTransaction.ABORT;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("/*", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "en;GLaF", false, stringArray0);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      SQLUtil.normalize("null", true);
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select intoreisterout{aramete");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('$');
      boolean boolean0 = SQLUtil.isDML("updategetbyte(strixg)");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLUtil.normalize("!.,*a#*g", true);
      DBSchema dBSchema0 = new DBSchema("!., * a # * g");
      assertEquals("!., * a # * g", dBSchema0.getName());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLUtil.normalize("Less severe exception raised during cleanup (ignored) ", true);
      DBSchema dBSchema0 = new DBSchema("JK8");
      assertEquals("JK8", dBSchema0.getName());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("SELECT * FROM ");
      assertTrue(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SELECT * FROM ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer(":");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ":";
      DBCatalog dBCatalog0 = new DBCatalog("S");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(":");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("(", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (:, , , , , , ) REFERENCES :(:, , , , , , )", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("select7|5u%X{.q%=@");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "SELECT * FROM ";
      stringArray0[1] = "LIMIT";
      stringArray0[2] = "KK-Qm74v:^O";
      stringArray0[3] = "KK-Qm74v:^O";
      stringArray0[4] = "KK-Qm74v:^O";
      stringArray0[5] = "LIMIT";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("PqR.\">=+lbmo2\"&", compositeDBObject0);
      tableContainer0.getTable("");
      DBDataType dBDataType0 = DBDataType.getInstance((-1113), "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("UK3Ow9!Nc26%.A^W", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.setType(dBDataType0);
      Character character0 = Character.valueOf('n');
      SQLUtil.renderValue(character0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("a?plte", "`g?5yl/");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // `g?5yl/
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(1029, "alter t^ble");
      Integer integer0 = new Integer(1029);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter t^ble", (DBTable) null, dBDataType0, integer0, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "ALTER T^BLE(1029,3)", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.normalize("alter maOeIialiBed v$ew", true);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.add((Object) dataDictionaryImpl0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.derby.impl.sql.catalog.DataDictionaryImpl cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(", ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("01522", defaultDBTable0, 4, ", ");
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("01522", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "^gFc C{aZ21W";
      Object[] objectArray0 = new Object[5];
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-118);
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)73;
      byteArray0[3] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[1] = (Object) stringArray0[3];
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("g@$+");
      DBDataType dBDataType0 = DBDataType.getInstance(90, "Non-null positions are not yet supported.");
      defaultDBTable0.getColumnNames();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Non-null positions are not yet supported.", defaultDBTable0, dBDataType0, integer0);
      genericDescriptorList0.trimToSize();
      genericDescriptorList0.add((Object) defaultDBColumn0);
      genericDescriptorList0.stream();
      SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
      GenericDescriptorList genericDescriptorList1 = new GenericDescriptorList();
      System.setCurrentTimeMillis((-1801625990));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.join((String) null, "", stringArray0, "", (String) null, stringArray0);
      assertEquals(" as null on .null = null.null and .null = null.null and .null = null.null and .null = null.null", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FROM ", true, defaultDBTable0, "SELECT * FROM ");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"SELECT * FROM \" ", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Random.setNextRandom(4489);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = 877;
      DBDataType dBDataType0 = DBDataType.getInstance(877, "/:,;");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("43X55.U");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("43X55.U", defaultDBTable0, dBDataType0, (Integer) null, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop materialized view", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      defaultDBColumn1.toString();
      StringBuilder stringBuilder1 = new StringBuilder("43X55.U");
      int int1 = 2314;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(877, ')');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "w}Q /$u=`:jP1";
      DBDataType dBDataType0 = DBDataType.getInstance((-864), "IL");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("w}Q /$u=`:jP1", defaultDBTable0, dBDataType0, integer1, integer1);
      defaultDBColumn0.toString();
      StringBuilder stringBuilder0 = new StringBuilder("w}Q /$u=`:jP1");
      // Undeclared exception!
      try { 
        stringBuilder0.insert(140, ']');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = "08006.D";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "bx~cly-0uhs";
      stringArray1[1] = "08006.D";
      // Undeclared exception!
      try { 
        SQLUtil.join("08006.D", "08006.D", stringArray1, "drop table", "select?kyz]uc0uzi9#", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("create table ", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("#1%a)^qBIOX0$");
      SQLUtil.addOptionalCondition("#1%a)^qBIOX0$", stringBuilder0);
      assertEquals("#1%a)^qBIOX0$ or #1%a)^qBIOX0$", stringBuilder0.toString());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "u7K^Bjq`^", false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.substituteMarkers("CONSTRAINT u7K^Bjq`^ ", "CONSTRAINT u7K^Bjq`^ ", dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "5l=!", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "delttecFlwv<7A%/~3z", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("40001", true, defaultDBTable0, "40001");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT 40001 ", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create table", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.7689528313755152
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLUtil.normalize("drop indexselect into;j*]c;'ff~yn?n(}~", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      DBDataType dBDataType0 = DBDataType.getInstance(183, "drop index_@wx,x3cxh=8r(luuo");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop indexselect into;j*]c;'ff~yn?n(}~", defaultDBTable0, dBDataType0);
      defaultDBTable0.addColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLUtil.normalize("E#\"grIX2Q0S2rL", true);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      assertEquals(0, dataDictionaryImpl0.getCollationTypeOfUserSchemas());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("6w@M_P$`IN:", stringBuilder0);
      assertEquals("6w@M_P$`IN:", stringBuilder0.toString());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("in");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "6w@M_P$`IN:", false, (String[]) null);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "l!v.mzy`zjq-j", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.9254455824627208
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = SQLUtil.normalize("drop indexselect into;j*]c;'ff~yn?n(}~", false);
      assertEquals("drop indexselect into ; j * ] c ; 'ff~yn?n(}~'", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog("drop indexselect into ; j * ] c ; 'ff~yn?n(}~'");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]g,h{";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      stringArray0[1] = "drop indexselect into ; j * ] c ; 'ff~yn?n(}~'";
      stringArray0[2] = "drop indexselect into ; j * ] c ; 'ff~yn?n(}~'";
      stringArray0[3] = "]g,h{";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "]g,h{", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (]g,h{, drop indexselect into ; j * ] c ; 'ff~yn?n(}~', drop indexselect into ; j * ] c ; 'ff~yn?n(}~', ]g,h{)", string1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "truncate";
      SQLUtil.join("truncate", "create table ", stringArray0, "truncate", (String) null, stringArray0);
      SQLUtil.isDML("truncate");
      String[] stringArray1 = new String[3];
      stringArray1[0] = "truncate";
      stringArray1[1] = "truncate join truncate as null on create table .truncate = null.truncate";
      stringArray1[2] = "truncate";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("truncate join truncate as null on create table .truncate = null.truncate", stringArray1, "truncate", "truncate join truncate as null on create table .truncate = null.truncate", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer(":");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ":";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(":", (String[]) null, ":", ":", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("execif_reproducible");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("executeupdating");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("TEMP");
      assertNull(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("E5VO<t:=U6vZQ)");
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DBPackage dBPackage0 = new DBPackage("create table.}5adjm", dBSchema0);
      dBPackage0.setSubObjectName((String) null);
      DBProcedure dBProcedure0 = new DBProcedure("create table.}5adjm", dBPackage0);
      String string0 = SQLUtil.ownerDotComponent(dBProcedure0);
      assertEquals("create table.}5adjm.create table.}5adjm", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop indexselect nnto;j*]c;'ff~yn?n(}~");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select intoreisterout{aramete");
      SQLUtil.mutatesDataOrStructure("alter sessionalter tableinsert");
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append("alter sessionalter tableinsert");
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt((-54552646));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -54552646
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Xf");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isDDL("alter materialized viewcallalter taleinset");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(">HIZ", defaultDBTable0, (DBDataType) null);
      DBColumn[] dBColumnArray0 = new DBColumn[10];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.8083793546730063
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("-QQN\"", true);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SQLUtil.mutatesDataOrStructure("execorg.apache.derby.impl.sql.compile.extractoperatornode");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-QQN\"";
      stringArray0[1] = "execorg.apache.derby.impl.sql.compile.extractoperatornode";
      stringArray0[2] = "execorg.apache.derby.impl.sql.compile.extractoperatornode";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        SQLUtil.join("iL3iL3PW", "iL3iL3PW", stringArray0, "iL3iL3PW", "truncateg7q", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "P{}ACR<X=gM9^T(";
      stringArray0[1] = "P{}ACR<X=gM9^T(";
      stringArray0[2] = "P{}ACR<X=gM9^T(";
      stringArray0[3] = "P{}ACR<X=gM9^T(";
      stringArray0[4] = "P{}ACR<X=gM9^T(";
      stringArray0[5] = "P{}ACR<X=gM9^T(";
      stringArray0[6] = "P{}ACR<X=gM9^T(";
      stringArray0[7] = "P{}ACR<X=gM9^T(";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "P{}ACR<X=gM9^T(";
      stringArray1[1] = "BpP)a7AoNjF5$0/F\"Z";
      stringArray1[2] = "P{}ACR<X=gM9^T(";
      stringArray1[3] = "P{}ACR<X=gM9^T(";
      stringArray1[4] = "P{}ACR<X=gM9^T(";
      stringArray1[5] = "9]mx8}(M25$G!";
      stringArray1[6] = "P{}ACR<X=gM9^T(";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("P{}ACR<X=gM9^T(", stringArray0, "P{}ACR<X=gM9^T(", "F=6Mfm2X2)mL,X", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName(" as ", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.renderColumnListWithTableName("select7u!j{.q%=y", stringArray0);
      assertEquals("select7u!j{.q%=y.null, select7u!j{.q%=y.null, select7u!j{.q%=y.null, select7u!j{.q%=y.null, select7u!j{.q%=y.null, select7u!j{.q%=y.null", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = SQLUtil.normalize("c`(B_eiL/W3I~6", false);
      assertEquals(" c ` (B_eiL / W3I ~ 6", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "MZ;\\L6/*'~XKl[vz3,X";
      TableContainer tableContainer0 = new TableContainer("MZ;L6/*'~XKl[vz3,X");
      // Undeclared exception!
      SQLUtil.isDML("MZ;L6/*'~XKl[vz3,X");
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("yl$j%H{,uEay!k#QQ");
      SQLUtil.addRequiredCondition("yl$j%H{,uEay!k#QQ", stringBuilder0);
      assertEquals("yl$j%H{,uEay!k#QQ and yl$j%H{,uEay!k#QQ", stringBuilder0.toString());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(";d*]C;'fi~YnDN(_~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ;d*]C;'fi~YnDN(_~
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("l;nE|[k", stringBuilder0);
      assertEquals("l;nE|[k", stringBuilder0.toString());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select\u00A2");
      Object object0 = new Object();
      defaultDBTable0.equals(object0);
      DBDataType dBDataType0 = DBDataType.getInstance(1398, "select\u00A2");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop table1et=ate4};$;", defaultDBTable0, dBDataType0, integer2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1398);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.removeComments(")");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "drop table1et=ate4};$;";
      stringArray0[1] = "sele";
      stringArray0[2] = "select\u00A2";
      stringArray0[3] = ")";
      stringArray0[4] = ")";
      stringArray0[5] = "drop table1et=ate4};$;";
      stringArray0[6] = "select\u00A2";
      stringArray0[7] = "drop table1et=ate4};$;";
      stringArray0[8] = "drop table1et=ate4};$;";
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLUtil.isProcedureCall("|3NZ/r");
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("|3NZ/r", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", false, stringArray0);
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("reiste");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("43X18qU");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLUtil.isQuery("drop index");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("drop index");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("&,#V'^v7PpKd");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[20];
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, "STMT_TYPE", "STMT_TYPE", stringArray0);
      assertEquals("left join STMT_TYPE as STMT_TYPE on null.null = STMT_TYPE.null and null.null = STMT_TYPE.null and null.null = STMT_TYPE.null and null.null = STMT_TYPE.null and null.null = STMT_TYPE.null and null.null = STMT_TYPE.null and null.null = STMT_TYPE.null and null.null = STMT_TYPE.null and null.null = STMT_TYPE.null and null.null = STMT_TYPE.null and null.null = STMT_TYPE.null and null.null = STMT_TYPE.null and null.null = STMT_TYPE.null and null.null = STMT_TYPE.null and null.null = STMT_TYPE.null and null.null = STMT_TYPE.null and null.null = STMT_TYPE.null and null.null = STMT_TYPE.null and null.null = STMT_TYPE.null and null.null = STMT_TYPE.null", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("alter taleinset", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraints(true);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SELECT * FROM ";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = SQLUtil.innerJoin("", stringArray0, "", "", stringArray0);
      assertEquals(" as  on ", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = SQLUtil.innerJoin("", stringArray0, "", "CHECK ", stringArray0);
      assertEquals(" as CHECK  on . = CHECK .", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.join("inner", "6VZ9Tw!3QbdEUc<M`G5", stringArray0, "org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation", "org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation", stringArray0);
      Random.setNextRandom(1861);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("[}:d@ ", (String[]) null, "H8*/!7q", "[}:d@ ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "";
      StringBuilder stringBuilder0 = new StringBuilder();
      String string1 = "";
      Vector<VersionNumberComponent> vector0 = null;
      try {
        vector0 = new Vector<VersionNumberComponent>((-2441));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2441
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers(">c7x,T", "djS4|~2(", ">c7x,T");
      assertEquals(">c7x,T", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      String string0 = SQLUtil.renderValue(genericDescriptorList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "create table";
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("org.firebirdsql.gds.GDSException");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[41];
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = SQLUtil.removeComments("SELECT * FROM ");
      assertEquals("SELECT * FROM ", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer(")");
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertNotNull(string0);
      assertEquals("container )", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.join("exec", "truncate1-,a%r4%u-2`x", stringArray0, "derby.engineType", "derby.engineType", stringArray0);
      assertEquals("exec join derby.engineType as derby.engineType on truncate1-,a%r4%u-2`x.null = derby.engineType.null and truncate1-,a%r4%u-2`x.null = derby.engineType.null and truncate1-,a%r4%u-2`x.null = derby.engineType.null and truncate1-,a%r4%u-2`x.null = derby.engineType.null and truncate1-,a%r4%u-2`x.null = derby.engineType.null and truncate1-,a%r4%u-2`x.null = derby.engineType.null", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("pL\"\"5&%$M MXQt(6lh", "pL\"\"5&%$M MXQt(6lh", stringArray0, "pL\"\"5&%$M MXQt(6lh", "elete", stringArray0);
      assertEquals("pL\"\"5&%$M MXQt(6lh join pL\"\"5&%$M MXQt(6lh as elete on ", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.join("bulkInsert", "@Q`;ja~[:R", stringArray0, "@Q`;ja~[:R", "bulkInsert", stringArray0);
      assertEquals("bulkInsert join @Q`;ja~[:R as bulkInsert on @Q`;ja~[:R.null = bulkInsert.null and @Q`;ja~[:R.null = bulkInsert.null and @Q`;ja~[:R.null = bulkInsert.null and @Q`;ja~[:R.null = bulkInsert.null and @Q`;ja~[:R.null = bulkInsert.null and @Q`;ja~[:R.null = bulkInsert.null", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("5Fo %-F$VVTo#60S[;i", (String[]) null, "5Fo %-F$VVTo#60S[;i", "+<x-.,c!4;GOL7>$", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName(" = ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = SQLUtil.renderValue("rename");
      assertEquals("'rename'", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "updategetbyte(strixg)";
      stringArray0[1] = "updategetbyte(strixg)";
      stringArray0[2] = "updategetbyte(strixg)";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "updategetbyte(strixg)";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
