/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 20:13:07 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(70);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte) (-6);
      byteArray0[3] = (byte)48;
      SimpleNode simpleNode1 = new SimpleNode(2616);
      simpleNode0.parent = (Node) simpleNode1;
      byteArray0[5] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuffer stringBuffer0 = new StringBuffer("PU/ ,OvZ{se");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((-24589507));
      simpleNode0.dump("PU/ ,OvZ{se", stringWriter0);
      simpleNode0.toString(" ");
      simpleNode0.toString();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetParent();
      simpleNode0.dump("Expression", stringWriter0);
      assertEquals("\uCB3D", stringWriter0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(89);
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtAddChild((Node) null, 0);
      StringReader stringReader0 = new StringReader("NR?Q-cXC^");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("NR?Q-cXC^", stringWriter0);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier(")");
      simpleNode0.dump("q", stringWriter0);
      simpleNode0.jjtGetNumChildren();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1983260823));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(48);
      StringWriter stringWriter0 = new StringWriter();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtGetNumChildren();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = simpleNode0.jjtGetChild(2);
      assertSame(simpleNode0, node0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(70);
      simpleNode0.setIdentifier("{");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.close();
      simpleNode0.dump("|", stringWriter0);
      assertEquals("<Statement>\n</Statement>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((-3084));
      simpleNode0.setIdentifier("}");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "m");
      simpleNode0.dump(">=", stringWriter1);
      assertEquals("\uF3F4m<AllocationExpression>\n</AllocationExpression>\n", stringWriter1.toString());
      assertEquals("\uF3F4m<AllocationExpression>\n</AllocationExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(68);
      simpleNode0.setIdentifier("<=");
      stringWriter0.append((CharSequence) "<=");
      simpleNode0.dump("/y|Q.`K'WpyUAO1", stringWriter0);
      assertEquals("D<=<AllocationExpression>\n  <identifier>*le</identifier>\n</AllocationExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(70);
      simpleNode0.setIdentifier("&");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) ">=");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "&");
      stringWriter1.flush();
      stringWriter0.close();
      simpleNode0.dump("7", stringWriter0);
      assertEquals(">=&<Statement>\n  <identifier>*amp</identifier>\n</Statement>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(48);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("&&");
      simpleNode0.dump(">([z8dxyX>Iy)", stringWriter0);
      assertEquals("<RelationalExpression>\n  <identifier>*amp</identifier>\n</RelationalExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.7805062184775959
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(70);
      String string0 = "PU/ ,OvZ{se";
      simpleNode0.identifiers = null;
      StringBuffer stringBuffer0 = new StringBuffer("PU/ ,OvZ{se");
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "D*B4dnrheo~");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(0);
      stringWriter0.close();
      // Undeclared exception!
      try { 
        simpleNode0.setIdentifier("BRKvo9Ko#v>GQkcK/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(48);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("<<");
      simpleNode0.dump("[wY", stringWriter0);
      assertEquals("<RelationalExpression>\n  <identifier>*lshft</identifier>\n</RelationalExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9920480917684886
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      simpleNode0.setIdentifier("&i&b}d$INqNvW");
      simpleNode0.jjtClose();
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("=S%CnNKe", stringWriter0);
      simpleNode0.dump(" : ", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>&i&b}d$INqNvW</identifier>\n  <identifier>*gt</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>&i&b}d$INqNvW</identifier>\n  <identifier>*gt</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 63;
      SimpleNode simpleNode0 = new SimpleNode(63);
      simpleNode0.setIdentifier((String) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      stringWriter0.flush();
      stringWriter0.close();
      simpleNode0.dump((String) null, stringWriter1);
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      // Undeclared exception!
      try { 
        jJTJavaParserState0.rootNode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(70);
      simpleNode0.setIdentifier(">>");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ">>");
      stringWriter1.flush();
      stringWriter1.close();
      simpleNode0.dump(">=", stringWriter1);
      StringReader stringReader0 = new StringReader("4p0U:{_");
      int int0 = (-1627);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-523), (-1627));
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 70);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 70. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleNode simpleNode0 = new SimpleNode(1779);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 1779);
      simpleNode0.jjtGetChild(1779);
      assertEquals(1780, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(70);
      StringBuffer stringBuffer0 = new StringBuffer("PU/ ,OvZ{se");
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "D*B4dnrheo~");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(0);
      stringWriter0.close();
      simpleNode0.setIdentifier(";");
      simpleNode0.dump("PU/ ,OvZ{se", stringWriter0);
      assertEquals("\u0000<Statement>\n</Statement>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(70);
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) ">=");
      stringWriter0.flush();
      stringWriter0.close();
      simpleNode0.dump("7", stringWriter0);
      StringReader stringReader0 = new StringReader("4p0U:{_");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2856), 70);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 524);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 524. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("<=");
      simpleNode0.toString();
      simpleNode0.toString();
      SimpleNode simpleNode1 = new SimpleNode(36);
      simpleNode0.jjtSetParent(simpleNode1);
      simpleNode1.jjtAddChild(simpleNode0, 10);
      simpleNode1.jjtGetChild(10);
      assertEquals(11, simpleNode1.jjtGetNumChildren());
      
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.002663334987299
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(38);
      simpleNode0.toString();
      simpleNode0.setIdentifier("<");
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      stringWriter0.write(charArray0);
      StringWriter stringWriter1 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "<");
      stringWriter0.append((CharSequence) stringBuffer0);
      stringWriter1.close();
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump("|+05OSg[|P", stringWriter2);
      simpleNode0.dump("m", stringWriter0);
      assertEquals("^<<Expression>\n  <identifier>*lt</identifier>\n</Expression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(89);
      simpleNode0.jjtAddChild(simpleNode0, 0);
      simpleNode0.jjtAddChild(simpleNode0, 19);
      assertEquals(20, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      StringReader stringReader0 = new StringReader("");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      Node node0 = javaParser0.currNode;
      int int0 = 1709;
      simpleNode0.jjtAddChild(nodeArray0[0], 1709);
      StringReader stringReader1 = new StringReader("5+5M4(-}.QyM8t");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "");
      // Undeclared exception!
      simpleNode0.dump("<<", stringWriter0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringReader stringReader0 = new StringReader("N]=(6(!kL$Wq{_");
      JavaParser javaParser0 = new JavaParser("N]=(6(!kL$Wq{_");
      Node node0 = javaParser0.currNode;
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump("N]=(6(!kL$Wq{_", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(89);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 0;
      SimpleNode simpleNode0 = new SimpleNode(89);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode0, (-19));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(34);
      JavaParser javaParser0 = new JavaParser("`?_W");
      SimpleNode simpleNode1 = new SimpleNode(34);
      simpleNode1.jjtAddChild(simpleNode0, 34);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode1.dump("`?_W", stringWriter0);
      assertEquals("<PrimitiveType></PrimitiveType>\n", stringWriter0.toString());
      assertEquals(35, simpleNode1.jjtGetNumChildren());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(48);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("");
      simpleNode0.dump("", stringWriter0);
      assertEquals("<RelationalExpression>\n</RelationalExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1969477513));
      String string0 = "!v]";
      JavaParser javaParser0 = new JavaParser("!v]");
      Node node0 = javaParser0.currNode;
      simpleNode0.jjtAddChild((Node) null, 1367);
      simpleNode0.jjtGetNumChildren();
      String string1 = "sLM";
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "sLM", 28, 1367);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1667);
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode1 = new SimpleNode((-1086988641));
      simpleNode0.jjtSetParent(simpleNode1);
      // Undeclared exception!
      try { 
        simpleNode1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1086988641
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 106;
      SimpleNode simpleNode0 = new SimpleNode(106);
      simpleNode0.identifiers = null;
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(89);
      simpleNode0.jjtAddChild(simpleNode0, 89);
      simpleNode0.jjtAddChild(simpleNode0, 0);
      assertEquals(90, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.8350516730230504
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(68);
      simpleNode0.setIdentifier("o");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.toString();
      simpleNode0.dump("TypeArgument", stringWriter1);
      simpleNode0.dump("o", stringWriter0);
      assertEquals("D<AllocationExpression>\n  <identifier>o</identifier>\n</AllocationExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1486));
      JavaParser javaParser0 = new JavaParser("");
      simpleNode0.parser = javaParser0;
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1486));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1486
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1196));
      simpleNode0.jjtOpen();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-886));
      // Undeclared exception!
      try { 
        simpleNode0.toString("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -886
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.009656341980306
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(70);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)48;
      SimpleNode simpleNode1 = new SimpleNode(2616);
      simpleNode0.parent = (Node) simpleNode1;
      byteArray0[5] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuffer stringBuffer0 = new StringBuffer("PU/ ,OvZ{se");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((-24589507));
      simpleNode0.setIdentifier("~");
      simpleNode0.dump("ThrowStatement", stringWriter0);
      assertEquals("\uCB3D<Statement>\n  <identifier>~</identifier>\n</Statement>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString(" ");
      assertEquals(" Statement : ~", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-394));
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump("NR?Q-cXC^", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -394
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(68);
      simpleNode0.setIdentifier("m");
      stringWriter0.append((CharSequence) "m");
      simpleNode0.dump("/y|Q.`K'WpyUAO1", stringWriter0);
      assertEquals("Dm<AllocationExpression>\n  <identifier>m</identifier>\n</AllocationExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9925623248862889
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(70);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuffer stringBuffer0 = new StringBuffer("PU/ ,OvZ{se");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((-24589507));
      simpleNode0.setIdentifier("~");
      simpleNode0.dump("ThrowStatement", stringWriter0);
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.937566794583933
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier("=");
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "#";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      simpleNode0.jjtClose();
      simpleNode0.setIdentifier("#");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = '^';
      simpleNode0.dump("\")\"", stringWriter1);
      charArray0[2] = '^';
      charArray0[3] = '^';
      stringWriter2.write(charArray0);
      StringWriter stringWriter3 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "=");
      stringWriter1.append((CharSequence) stringBuffer0);
      stringWriter3.close();
      StringWriter stringWriter4 = new StringWriter();
      SimpleNode simpleNode1 = new SimpleNode(18);
      simpleNode1.dump("<", stringWriter1);
      StringReader stringReader0 = new StringReader("\")\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1938);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, (-3285));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }
}
