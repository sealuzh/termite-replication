/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 09 02:55:17 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 17, 238);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = JSONObject.quote("MX}UG(=<*^=/ZPj]|H");
      assertEquals("\"MX}UG(=<*^=/ZPj]|H\"", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{t+WzzR4");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {t+WzzR4
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Double double0 = new Double(4475.562634420233);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put((Double) null, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      Object object0 = jSONObject1.remove("");
      assertEquals("", object0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("x", 1001L);
      assertEquals(1001L, long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("[ppW}4!4i#C", (-1L));
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("{}", 16);
      long long0 = jSONObject0.optLong("{}");
      assertEquals(16L, long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("getgetChars", 17);
      assertEquals(17, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("c^;_o{3t`OAX", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("get", 1060.0);
      assertEquals(1060.0, double0, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("q>+e,?;", 128);
      double double0 = jSONObject1.optDouble("q>+e,?;");
      assertEquals(128.0, double0, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-1370.09036619));
      double double0 = jSONObject1.optDouble("");
      assertEquals((-1370.09036619), double0, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("FvQ*ujgrISUT", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("_s]", stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("_s]", jSONObject0);
      JSONObject jSONObject2 = (JSONObject)jSONObject1.opt("_s]");
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2187));
      boolean boolean0 = jSONObject0.has("\"java.lang.Object@0000000001\"");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(" {yNt+Wz\fl", 1L);
      String string0 = jSONObject0.getString(" {yNt+Wz\fl");
      assertNotNull(string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-10));
      jSONObject0.putOpt("#-<o8%X8s!R", byte0);
      long long0 = jSONObject0.getLong("#-<o8%X8s!R");
      assertEquals((-10L), long0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("(tMX0RoN^=Uh", (-1370.09036619));
      int int0 = jSONObject0.getInt("(tMX0RoN^=Uh");
      assertEquals((-1370), int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-10));
      JSONObject jSONObject1 = jSONObject0.putOpt("#-<o8%X8s!R", byte0);
      double double0 = jSONObject1.getDouble("#-<o8%X8s!R");
      assertEquals((-10.0), double0, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.8239592165010823
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1648, 1648);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray1, 1502, 1502);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1786549963416462
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      hashMap0.put((Boolean) null, (Object) null);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 238, (-506));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.890362775338868
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(" {yNt+Wz\fl", 1L);
      jSONObject0.putOpt("isnotifyAll", "isnotifyAll");
      // Undeclared exception!
      jSONObject0.toString(8448, 2429);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9430096637858085
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "c^;_o{3t`OAX");
      // Undeclared exception!
      jSONObject0.toString(535);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = new Boolean(false);
      hashMap0.put((Integer) null, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(71);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Double double0 = Double.valueOf(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Boolean, JSONObject> hashMap1 = new HashMap<Boolean, JSONObject>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1428074196753928
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Float float0 = new Float(1938.6666452440234);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.put((String) null, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-6733.8));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.917103344461739
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(2262L);
      JSONObject jSONObject1 = jSONObject0.accumulate("we cjjg@", long0);
      String string0 = jSONObject1.toString(3731, 3731);
      assertNotNull(string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(2429, 2429);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = JSONObject.quote("Dr[ ]bC8?E]>ysl3/");
      assertEquals("\"Dr[ ]bC8?E]>ysl3/\"", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("istoString", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("getadd", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-10));
      jSONObject0.putOpt("#-<o8%X8s!R", byte0);
      jSONObject0.optString("#-<o8%X8s!R", "#-<o8%X8s!R");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("!8E", (-445.3689));
      assertEquals((-445.3689), double0, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("{}");
      assertNull(object0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Double double0 = new Double((-2431.575));
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      Object object0 = jSONObject0.opt(stringArray0[3]);
      assertNull(object0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("VfDLyY};n*D}g]", 1078.0);
      int int0 = jSONObject0.getInt("VfDLyY};n*D}g]");
      assertEquals(1078, int0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("#-<=8%X8s!R", "#-<=8%X8s!R");
      try { 
        jSONObject1.getDouble("#-<=8%X8s!R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#-<=8%X8s!R\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("{}", 16);
      Object object0 = jSONObject1.get("{}");
      assertEquals(16, object0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6885673693022827
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("zwcPJ");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of zwcPJ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Float float0 = new Float(1938.6666452440234);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.4519628914537848
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt(" {yNt+Wz\fl", jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8210251127650912
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      linkedList0.add(jSONObject0);
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      jSONObject1.write(stringWriter0);
      assertEquals(4, jSONObject1.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = JSONObject.valueToString(linkedList0, (-506), 238);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-749), 40);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 34, 22);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 55, 1933);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8228804629889481
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\",\n\"");
      StringWriter stringWriter0 = new StringWriter(1445);
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.7870020467612302
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float float0 = new Float(1938.6666452440234);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(58, 2756);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.2171062112294098
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(boolean0, boolean0);
      String string0 = JSONObject.valueToString(hashMap0, 238, (-506));
      assertNotNull(string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6904546939944762
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Float float0 = new Float(1938.6666452440234);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.put(object0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = new Float(1938.6666452440234);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double((-2314.3898590571));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = JSONObject.quote("/yw9V<6*P\"$,g5");
      assertEquals("\"/yw9V<6*P\\\"$,g5\"", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt(": ", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, hashMap0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("4<7", "4<7");
      String string0 = jSONObject0.optString("4<7");
      assertNotNull(string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      jSONObject0.put("\"\"", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("\"\"");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("", "#-<o8%X8s!R");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\",\n\"");
      jSONObject0.optJSONArray("\"=U(%t[92I3m");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.8120005877987306
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(" {yNt+Wz\fl");
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(" {yNt+Wz\fl", 1L);
      jSONObject1.names();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.putOpt("B", hashMap0);
      Float float0 = new Float(0.0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Integer integer0 = new Integer((-709));
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Double double0 = Double.valueOf(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 53, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.6715952780212544
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "{u");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("{u", stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float float0 = new Float(1938.6666452440234);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("!8E", 1L);
      long long0 = jSONObject0.getLong("!8E");
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\"xC|jXB\\#vL2H\"", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("\"xC|jXB\\#vL2H\"");
      assertNotSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("LMz>s", 10);
      try { 
        jSONObject1.getJSONObject("LMz>s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"LMz>s\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.4998949364896357
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.append("", (Object) null);
      jSONObject0.getJSONArray("");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.3640159254907818
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Long long0 = Long.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.put(" {yNt+Wz\fl", (Object) long0);
      try { 
        jSONObject0.getJSONArray(" {yNt+Wz\fl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" {yNt+Wz\\fl\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Long long0 = Long.getLong("Missing value", 0L);
      JSONObject jSONObject1 = jSONObject0.putOpt("H3q#sMiZ:<}", long0);
      int int0 = jSONObject1.optInt("H3q#sMiZ:<}", 61);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.6423651354584372
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("\n", hashMap0);
      try { 
        jSONObject1.getInt("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\n\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(2829L);
      jSONObject0.accumulate("#I\"PNuV;.", long0);
      double double0 = jSONObject0.getDouble("#I\"PNuV;.");
      assertEquals(2829.0, double0, 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isjoin", false);
      try { 
        jSONObject0.getLong("isjoin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isjoin\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.1873223188492537
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.put("", true);
      boolean boolean0 = jSONObject0.optBoolean("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.3532342724783726
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "\\u";
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1938.6666452440234);
      JSONObject jSONObject1 = jSONObject0.put(string0, (Object) double0);
      try { 
        jSONObject1.getBoolean(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\u";
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.put(string0, (Object) boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject1.getBoolean(string0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.3576302876552417
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\u";
      JSONObject jSONObject1 = jSONObject0.put(string0, (Object) string0);
      try { 
        jSONObject1.getBoolean(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2429);
      assertEquals("2429", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-3689.4641));
      assertEquals("-3689.4641", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.7201934592198251
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("B", jSONArray0);
      jSONObject1.append("B", " {yNt+Wz\fl");
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@00000000030", object0);
      try { 
        jSONObject1.append("java.lang.Long@00000000030", "wheel.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.lang.Long@00000000030] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.8636799873410004
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("_s]", stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("7}y'n3#,4$f;Akjg+.", jSONArray0);
      jSONObject0.accumulate("7}y'n3#,4$f;Akjg+.", "_s]");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.40912941612615
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("}Xk;O", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", true);
      Short short0 = new Short((short)13);
      jSONObject0.accumulate("", short0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.2033320406994705
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.String@0000000003\": null}");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{t+WzRD");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {t+WzRD
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("", "#-<o8%X8s!R");
      boolean boolean0 = jSONObject0.isNull("");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(535);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("-3689.4641");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("] is not a JSONArray.");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("getgetChars", (-5210));
      assertEquals((-5210), int0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("u>*KE_Hb8L", (-2725));
      double double0 = jSONObject0.optDouble("u>*KE_Hb8L", (double) (-2725));
      assertEquals(1, jSONObject0.length());
      assertEquals((-2725.0), double0, 0.01);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("FvQ*ujgrISUT", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.4016171508386506
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("\"q$:i;0@O< gG+ZPb\"");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = jSONObject0.optString("q$:i;0@O< gG+ZPb");
      assertEquals(1, jSONObject0.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("IA4I(N>:1tvrB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of IA4I(N>:1tvrB
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.78489484807327
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(13, (-740));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove(".");
      assertNull(object0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString(" {yNt+Wz\fl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" {yNt+Wz\\fl\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("Missing value", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("Ey5gRsjg");
      assertFalse(boolean0);
  }
}
