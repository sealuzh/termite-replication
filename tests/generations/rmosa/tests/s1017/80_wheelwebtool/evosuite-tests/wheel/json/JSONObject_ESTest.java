/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 20:02:08 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) null);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("] is not a number.", (Collection) linkedList0);
      jSONObject0.getJSONArray("] is not a number.");
      String string0 = "pxJBZEAdWq";
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("m'>k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of m'>k
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0987996145617602
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      Short short0 = new Short((short) (-4465));
      hashMap0.put((JSONArray) null, short0);
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("!r\tK", hashMap0);
      boolean boolean0 = true;
      jSONObject1.optBoolean("kV)1:H%4)Vbp6]|C");
      hashMap0.putIfAbsent((JSONArray) null, (Short) null);
      jSONObject1.put("kV)1:H%4)Vbp6]|C", true);
      Short short1 = new Short((short)1917);
      Short.toUnsignedInt((short)6);
      hashMap0.put((JSONArray) null, short1);
      jSONObject0.put("3d\"1c0m", (Map) hashMap0);
      JSONObject.quote("kV)1:H%4)Vbp6]|C");
      // Undeclared exception!
      try { 
        jSONObject0.toString(44, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{E:!8CF)Y ;G?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 13 of {E:!8CF)Y ;G?
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.put("flo", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("flo");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = "] is not a number.";
      hashMap0.put(hashMap0, "] is not a number.");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4971098265895954
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1236, (double) 1236);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 116, 116);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Double double0 = new Double(745.0);
      Float float0 = new Float(745.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      Double double1 = new Double(745.0);
      JSONObject jSONObject0 = new JSONObject(double1, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put((Object) null, "] is not a number.");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
      
      jSONObject0.put("}COZ[u1-JDs>dY:O", (-977));
      long long0 = jSONObject0.getLong("}COZ[u1-JDs>dY:O");
      assertEquals((-977L), long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.874099239168671
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "xF ~|r'%|Aj1{<f");
      // Undeclared exception!
      jSONObject0.toString(1913);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.100963336162914
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("gettoString", (Map) null);
      JSONObject jSONObject2 = jSONObject1.put("@L", (Map) null);
      jSONObject2.optBoolean("gettoString");
      String string0 = jSONObject0.toString((-557), 3839);
      // Undeclared exception!
      jSONObject1.get(string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.192932680345445
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "gettoString";
      jSONObject0.put("gettoString", (Map) null);
      JSONObject jSONObject1 = jSONObject0.put("ru", (Map) null);
      JSONObject.getNames((Object) "gettoString");
      JSONObject jSONObject2 = jSONObject1.accumulate("gettoString", jSONObject0);
      Boolean boolean0 = Boolean.valueOf("gettoString");
      jSONObject0.put("", (Object) boolean0);
      int int0 = 1005;
      StringWriter stringWriter0 = new StringWriter(1005);
      stringWriter0.write("Expected a ':' after a key");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      // Undeclared exception!
      jSONObject2.write(stringWriter1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "{}";
      JSONObject jSONObject0 = new JSONObject("{}");
      try { 
        jSONObject0.getBoolean("JSONObject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONObject[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "isaOppend";
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(Double.NaN);
      linkedList0.offerLast(double0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.putOpt("isaOppend", jSONArray0);
      try { 
        jSONObject0.toString((-827), 1487);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.put("", (Collection) null);
      JSONObject jSONObject1 = jSONObject0.append("", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.087698781999318
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", true);
      jSONObject1.optBoolean("] is not a Boolean.");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("Pl--");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.097242790482881
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must begin with '{'", (-4400));
      jSONObject1.optInt("A JSONObject text must begin with '{'");
      jSONObject0.optString("wheel.json.JSONExcepion");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      Byte.toUnsignedLong((byte) (-81));
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("2v;[;7uwJJx6W:m", jSONArray0);
      JSONArray jSONArray2 = jSONObject1.getJSONArray("2v;[;7uwJJx6W:m");
      assertEquals(1, jSONArray2.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.874099239168671
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("gettoString", (Map) null);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.put("min", (Map) null);
      JSONObject jSONObject3 = jSONObject2.optJSONObject("gettoString");
      assertNotNull(jSONObject3);
      
      jSONObject3.keys();
      JSONObject.valueToString("gettoString");
      jSONObject3.put("min", 967);
      String string0 = jSONObject1.optString("ScYBkBXD`07");
      assertEquals("", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("G<,5V W*HcW4BXeP{", (Object) "G<,5V W*HcW4BXeP{");
      try { 
        jSONObject1.getBoolean("G<,5V W*HcW4BXeP{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G<,5V W*HcW4BXeP{\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put(" of ", " of ");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.doubleToString((-24668184));
      assertEquals("-2.4668184E7", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("isintValue", (Collection) null);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", 0L);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.put(160, (double) 0L);
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
      
      double double0 = jSONObject1.optDouble("wheel.json.JSONException", 1443.2);
      assertEquals(0.0, double0, 0.01);
      
      jSONObject0.getInt("wheel.json.JSONException");
      Float float0 = new Float((-3931.294));
      jSONObject0.optJSONArray("M1v{aY=cIo(yX7r)");
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("^`myBw+ixSU m'01hE", (-2988.3416948385507));
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      int int0 = jSONObject1.getInt("^`myBw+ixSU m'01hE");
      assertEquals((-2988), int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.put("G<,5V W*HcW4BXeP{", (Object) boolean0);
      jSONObject1.getBoolean("G<,5V W*HcW4BXeP{");
      try { 
        Byte.decode("G<,5V W*HcW4BXeP{");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"G<,5V W*HcW4BXeP{\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("G<,5V W*HcW4BXeP{", (Object) "G<,5V W*HcW4BXeP{");
      try { 
        jSONObject1.getJSONArray("G<,5V W*HcW4BXeP{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G<,5V W*HcW4BXeP{\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("] isot a Bolean.", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte byte0 = (byte) (-17);
      Byte byte1 = Byte.valueOf((byte) (-17));
      JSONObject.numberToString(byte1);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "java.lang.Byte@0000000001";
      byte byte2 = (byte) (-36);
      Byte.toUnsignedLong((byte) (-36));
      stringArray0[1] = "java.lang.Byte@0000000001";
      stringArray0[2] = "java.lang.Byte@0000000001";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Byte@0000000001", (double) (byte) (-17));
      jSONObject1.getDouble("java.lang.Byte@0000000001");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((byte) (-17));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject.quote("istoString");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("P/[", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("P/[");
      assertNotSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("", object0);
      jSONObject0.optString("");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{_dd=qk53%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 10 of {_dd=qk53%
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble(",LW+w");
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = JSONObject.quote("z8/(D&(OHGfp,</");
      assertEquals("\"z8/(D&(OHGfp,<\\/\"", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      boolean boolean0 = jSONObject1.isNull("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      jSONArray0.put(1493, object0);
      jSONArray0.optBoolean(34);
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.keys();
      // Undeclared exception!
      jSONObject0.toString(8192, 243);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "G<,5V W*HcW4BXeP{";
      Short short0 = new Short((short)1747);
      jSONObject0.put("G<,5V W*HcW4BXeP{", (Object) "G<,5V W*HcW4BXeP{");
      Float float0 = new Float((double) (short)1747);
      try { 
        jSONObject0.append("G<,5V W*HcW4BXeP{", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[G<,5V W*HcW4BXeP{] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = JSONObject.doubleToString((-529.4089656211));
      jSONObject0.put("-529.4089656211", false);
      jSONObject0.accumulate("-529.4089656211", "-529.4089656211");
      String string1 = jSONObject0.getString("-529.4089656211");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-889));
      hashMap0.put(integer0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "\\u";
      jSONObject0.put(string0, (Object) hashMap0);
      try { 
        jSONObject0.getJSONObject(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8783578531833827
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float((-3931.2939962));
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      BiFunction<Object, Float, Float> biFunction0 = (BiFunction<Object, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("Bad value from toJSONString: ", float0, biFunction0);
      Boolean boolean0 = Boolean.TRUE;
      Float float1 = new Float((-3931.2939962));
      BiFunction<Object, Object, Float> biFunction1 = (BiFunction<Object, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("7}y'n3#,4$f;Akjg+.", float1, biFunction1);
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject1.toString(13, 1655);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("DAa4b", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("gettoString", (Map) null);
      jSONObject0.remove("gettoString");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      JSONArray jSONArray1 = jSONObject1.optJSONArray("false");
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Boolean boolean0 = Boolean.valueOf("to");
      hashMap0.put(boolean0, "null");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      jSONObject1.write(stringWriter0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      hashMap0.put((Long) null, "isparseDouble");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      hashMap0.putAll(hashMap1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('c');
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("ILQ2n<w=zks", (Collection) linkedList0);
      String string0 = jSONObject1.optString("ILQ2n<w=zks", "!z{abf8R,H=BEgS");
      assertNotNull(string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Float float0 = new Float(0.0);
      int int0 = 62;
      int int1 = (-494);
      int int2 = (-497);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-497), (-494));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject((String) null);
      JSONObject jSONObject1 = jSONObject0.put("E_7eQ`<zi\"Z", 2018L);
      long long0 = jSONObject1.getLong("E_7eQ`<zi\"Z");
      assertEquals(2018L, long0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.toJSONObject((JSONArray) null);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.put("getaccumulate", 0.0);
      long long0 = jSONObject0.getLong("getaccumulate");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Long long0 = new Long(1L);
      hashMap0.put(long0, "to");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.put("isvalueOf", true);
      String string0 = JSONObject.valueToString(jSONObject0, (-2660), (-2660));
      assertNotNull(string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean("toS", false);
      assertFalse(boolean0);
      
      String string0 = JSONObject.doubleToString((-12.480769898750115));
      assertEquals("-12.480769898750115", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.494949494949495
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(63L);
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      Long long1 = new Long(63L);
      hashMap1.put((Double) null, long1);
      hashMap1.values();
      hashMap0.remove((Object) long1);
      String[] stringArray0 = new String[20];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optString("ZHk=`;0\"If_dfov)Ax_", stringArray0[0]);
      try { 
        jSONObject1.getDouble("VtqZ*Y}gdg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"VtqZ*Y}gdg\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject.quote("");
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("issubList", (Collection) linkedList0);
      try { 
        jSONObject0.getLong("issubList");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issubList\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "*:";
      jSONObject0.optLong("*:", 838L);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.optBoolean((-2258), false);
      Double double0 = new Double((-1.0));
      JSONObject.getNames((Object) double0);
      JSONArray jSONArray1 = jSONArray0.put(false);
      double double1 = 802.97776314;
      try { 
        jSONArray1.put((-2258), 802.97776314);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2258] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      String string0 = JSONObject.valueToString(hashMap0, (-3480), 12);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1274039526734327
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      String string1 = jSONObject0.toString();
      assertNotNull(string1);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.912334935725068
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = JSONObject.quote("z]");
      assertEquals("\"z]\"", string0);
      
      Float float0 = new Float((-1963.936902368));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string1 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1051229190915939
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject.quote("U6%pkL m9");
      JSONObject jSONObject0 = new JSONObject((Object) "\"U6%pkL m9\"");
      jSONObject0.toString(8, 8);
      JSONObject.valueToString("U6%pkL m9", 8, 8);
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(0.0);
      Integer integer0 = new Integer((-1076));
      hashMap0.put(float0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("{J\"d4R~yZGo^", (long) (-1076));
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = "G<,5V W*HcW4BXeP{";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("G<,5V W*HcW4BXeP{", object0);
      try { 
        jSONObject1.getLong("G<,5V W*HcW4BXeP{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G<,5V W*HcW4BXeP{\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      Integer integer0 = new Integer((-6));
      JSONObject.valueToString(object0);
      Boolean boolean0 = new Boolean(true);
      JSONObject.doubleToString((-6));
      Double double0 = new Double((-6));
      JSONObject jSONObject1 = new JSONObject((Object) "null");
      Object object1 = JSONObject.NULL;
      jSONObject0.accumulate("-6", "null");
      jSONObject0.opt((String) null);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString((-6));
      assertEquals("-6", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("[{s*~U", (-406.76));
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put((String) null, (Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("G<,5V W*HcW4BXeP{", (Object) jSONObject0);
      try { 
        jSONObject1.getBoolean("G<,5V W*HcW4BXeP{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G<,5V W*HcW4BXeP{\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.put("Gs7?-", (Object) boolean0);
      boolean boolean1 = jSONObject0.getBoolean("Gs7?-");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = JSONObject.quote("P>*{}a)MuP$`WIk7/F");
      assertEquals("\"P>*{}a)MuP$`WIk7/F\"", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.clone();
      JSONObject jSONObject1 = jSONObject0.put("isremainderUnsigned", 0.0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject2.length());
      
      JSONObject jSONObject3 = new JSONObject();
      double double0 = jSONObject1.optDouble("isremainderUnsigned");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0944759084445832
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = JSONObject.quote("1`+k,Dyk E~TL6z4M");
      assertEquals("\"1`+k,Dyk E~TL6z4M\"", string0);
      
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString();
      jSONObject0.toString((-1533), 42);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.toString(3366);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put(jSONArray0, linkedList0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("S2~SJ42aA^{A1Urvyx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"S2~SJ42aA^{A1Urvyx\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-985));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("_s]", stringArray0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float((-3931.2939962));
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject2 = jSONObject0.accumulate("_s]", jSONObject1);
      Float.max(0.0F, 0.0F);
      BiFunction<Object, Float, Float> biFunction0 = (BiFunction<Object, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("Bad value from toJSONString: ", float0, biFunction0);
      Boolean boolean0 = Boolean.TRUE;
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.putOpt("7}y'n3#,4$f;Akjg+.", jSONArray0);
      jSONObject1.accumulate("7}y'n3#,4$f;Akjg+.", "_s]");
      jSONObject2.opt("_s]");
      assertEquals(1, jSONObject0.length());
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      Byte byte0 = new Byte((byte)21);
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      Short short0 = new Short((short)101);
      JSONObject jSONObject2 = jSONObject1.accumulate("", short0);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("isaOppend", 3967);
      assertEquals(3967, int0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double double0 = new Double(1287.0);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 69, 2751);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-450), (-450));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      BiConsumer<Object, JSONObject> biConsumer0 = (BiConsumer<Object, JSONObject>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      jSONObject0.optLong("wheel.json.JSONObject", 0L);
      String string0 = JSONObject.quote("/ReSW");
      assertEquals("\"/ReSW\"", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0833116341224143
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = JSONObject.quote("JhON does not allYE non-finite numbers.");
      assertEquals("\"JhON does not allYE non-finite numbers.\"", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "JhON does not allYE non-finite numbers.";
      stringArray0[1] = "\"JhON does not allYE non-finite numbers.\"";
      stringArray0[2] = "JhON does not allYE non-finite numbers.";
      stringArray0[3] = "\"JhON does not allYE non-finite numbers.\"";
      stringArray0[4] = "\"JhON does not allYE non-finite numbers.\"";
      stringArray0[5] = "JhON does not allYE non-finite numbers.";
      JSONObject jSONObject0 = new JSONObject("\"JhON does not allYE non-finite numbers.\"", stringArray0);
      long long0 = jSONObject0.optLong("Unterminated string");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(" {yNt+Wz\fl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of  {yNt+Wz\fl
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove((String) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      BiFunction<Object, Float, Float> biFunction0 = (BiFunction<Object, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Boolean boolean0 = Boolean.FALSE;
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = new JSONObject(boolean0);
      JSONObject jSONObject2 = jSONObject1.accumulate("istoUnsignedInt", jSONObject0);
      jSONObject2.opt("");
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Integer.divideUnsigned(74, 74);
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0, 74, (-1350));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(2177, 2177);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = JSONObject.quote("=.!k?9+");
      assertEquals("\"=.!k?9+\"", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("A JSONObject text must end with '}'", true);
      Float float0 = new Float(0.0F);
      // Undeclared exception!
      try { 
        hashMap0.computeIfPresent(float0, (BiFunction<? super Float, ? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0498195516449371
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject.quote(" {yNt+Wz\fl");
      Short short0 = new Short((short)10);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.optBoolean(" {yNt+Wz\fl");
      jSONObject0.putOpt("true", " {yNt+Wz\fl");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("]/is not a JSONAr^ay.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]/is not a JSONAr^ay.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.optString("Missing value", "\r4as1_");
      assertEquals("\r4as1_", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.entrySet();
      String string0 = JSONObject.valueToString(jSONObject0);
      String string1 = jSONObject0.optString("wheel.json.JSONObject@0000000001");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      Float float0 = new Float(0.0);
      Integer integer0 = new Integer((-1224));
      hashMap0.put(float0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.434799037944202
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2187), (-2187));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(17L);
      JSONObject.valueToString(jSONArray0, (-2187), (-1559));
      jSONObject0.optDouble("\"java.lang.Object@0000000001\"");
      jSONObject0.length();
      double double0 = new Long(17L);
      jSONObject0.has("\"java.lang.Object@0000000001\"");
      try { 
        jSONObject0.getString("Uzp;'=7s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Uzp;'=7s\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.0951521981483863
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2187), (-2187));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      jSONObject0.put("\"java.lang.Object@0000000001\"", 4799.3656775161235);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((long) (-2187));
      JSONObject.doubleToString((-2187));
      jSONObject0.optDouble("\"java.lang.Object@0000000001\"");
      Long long0 = new Long((-2187));
      try { 
        jSONObject0.getString("Uzp;'=7s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Uzp;'=7s\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("[1w9zLtk76", 1024.86917769456);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)123);
      JSONObject jSONObject1 = jSONObject0.put("false", (Object) byte0);
      jSONObject1.optDouble("false", (double) (byte)123);
      try { 
        jSONObject0.getBoolean("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Integer integer0 = new Integer((-1354));
      String string0 = JSONObject.valueToString(integer0, 1617, 1617);
      assertNotNull(string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Double double0 = new Double(3080.5373132804);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("k RK4*x-ez'^H", 1918L);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Map<String, Object> map0 = null;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, 4477L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("E*u;eEQjT}<W", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("000");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Short short0 = new Short((short)4701);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[0];
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("p@#[pV[K-<<[2sI5e");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.has("getgetString");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.entrySet();
      try { 
        jSONObject0.getString(",|SYlPsm^1N}0J@>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",|SYlPsm^1N}0J@>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getLong("l;8C:NfI<*CV3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"l;8C:NfI<*CV3\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", object0);
      int int0 = jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isnumberToString", false);
      try { 
        jSONObject0.getInt("isnumberToString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isnumberToString\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.putOpt("isaOppend", boolean0);
      try { 
        jSONObject0.getDouble("isaOppend");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isaOppend\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("java.lang.Long@0000000003.", object0);
      Object object1 = jSONObject0.get("java.lang.Long@0000000003.");
      assertSame(object1, object0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      try { 
        jSONObject0.append((String) null, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      Float.isFinite(1743.4652F);
      try { 
        jSONObject0.append("\"\"", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      HashMap<String, Long> hashMap1 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("for");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"for\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("] is not a number.", "] is not a number.");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, "aE)VY+_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("Null key.", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      int int0 = jSONObject0.optInt("isappend", (-573));
      assertEquals((-573), int0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt(",:]}/\"[{;=#");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("getlogicalOr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getlogicalOr\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[10];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.put((String) null, (Object) "G<,5V W*HcW4BXeP{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("?d>M5OlEihQ7HY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?d>M5OlEihQ7HY\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("brp{-ZiKl9jbd9dj");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of brp{-ZiKl9jbd9dj
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("getwait");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getwait
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
