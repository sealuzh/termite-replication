/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 08:41:04 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 2714, 2714);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.87996524719584
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wkT\ftcg,tp}", (Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.append(" ", hashMap0);
      jSONObject0.toString((-318), (-318));
      String string0 = jSONObject1.toString(1, 4095);
      // Undeclared exception!
      jSONObject1.get(string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      String string0 = "whee.json.JSOObject";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "whee.json.JSOObject";
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("whee.json.JSOObject", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Double.max(922.36868461, 922.36868461);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Double double0 = new Double(498.15164);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 8448, 8448);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Long long0 = new Long(0L);
      jSONObject0.append("", long0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Function<Object, Double> function0 = (Function<Object, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      hashMap0.computeIfAbsent("getequals", function0);
      jSONObject0.put("vL9L>?", 3298L);
      jSONObject0.length();
      int int0 = jSONObject0.optInt("vL9L>?");
      assertEquals(3298, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      jSONObject0.put("qu", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("qu");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("n FJEav@O~WSxd", linkedList0);
      boolean boolean0 = jSONObject0.isNull("n FJEav@O~WSxd");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.quote("]1d@i</'CFx`P8o)");
      assertEquals("\"]1d@i<\\/'CFx`P8o)\"", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5875011775569985
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Float float0 = new Float((-1199.655));
      Float.min((-888.0F), (-888.0F));
      JSONObject jSONObject2 = jSONObject0.accumulate("y&l(;SD28Ej", float0);
      jSONObject2.optDouble("y&l(;SD28Ej");
      jSONObject0.optBoolean("y&l(;SD28Ej", true);
      String string0 = null;
      try { 
        jSONObject1.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "zp\\u";
      jSONObject0.put(string0, 1062);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      boolean boolean0 = jSONObject0.has(string0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wkT\ftcg,tp}", (Map) hashMap0);
      jSONObject0.put("}'2!//fxv#Z#)*69sn", 1L);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      jSONObject0.put("wkT\ftcg,tp}", 13);
      Long long0 = new Long((-1L));
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("gethashCode", (Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      Float float0 = new Float(1.0F);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("gethashCode");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(")5`=L", (Object) ")5`=L");
      JSONObject jSONObject1 = new JSONObject();
      String string0 = JSONObject.valueToString(linkedList0, 0, (-485));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5984213761060628
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      hashMap0.put(jSONObject0, (Float) null);
      Float float0 = new Float(1.0);
      Float float1 = new Float((-2149.0F));
      Float float2 = new Float(1.0);
      Float.isFinite((-2149.0F));
      JSONObject jSONObject1 = jSONObject0.append("Unterminated string", "Unterminated string");
      jSONObject0.toString(281, 281);
      JSONObject jSONObject2 = jSONObject0.accumulate("{\"java.lang.String@0000000003\": [\"java.lang.String@0000000003\"]}", hashMap0);
      jSONObject2.putOpt("Unterminated string", jSONObject1);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject0.write(stringWriter0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("'n4oF}-Woz%G;1pJ(:/F", (Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      Float float0 = new Float(1.0F);
      StringWriter stringWriter0 = new StringWriter(3309);
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.doubleToString(Double.NaN);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.put("null", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("null");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, (-124622348), 51);
      JSONObject.doubleToString((-124622348));
      JSONObject jSONObject1 = jSONObject0.put("gmthighest7neBi`", (Object) "gmthighest7neBi`");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5884082070354566
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0);
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      hashMap0.put(jSONObject0, float0);
      Float.max(3938.034F, 0.0F);
      Float float1 = new Float(0.0);
      Float float2 = new Float((double) 3938.034F);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.append("y!0!qaCJRg}vfW*dUH", jSONObject1);
      try { 
        jSONObject2.toString((-1799), (-335));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(1809.0F);
      JSONObject jSONObject1 = jSONObject0.put(": ", (Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.valueToString(boolean0);
      Float float1 = new Float(Double.NaN);
      Short short0 = new Short((short) (-1745));
      JSONObject jSONObject2 = jSONObject1.putOpt(": ", short0);
      long long0 = jSONObject2.optLong(": ");
      assertEquals((-1745L), long0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString(8448);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, JSONObject> hashMap1 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.valueToString(hashMap0, 38, 92);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "{}", 38, 38);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Ee6", "Ee6");
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      jSONObject0.put("w+vGf", (Map) hashMap0);
      jSONObject1.opt("Ee6");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("getadd", (Object) "getadd");
      jSONObject1.remove("getadd");
      try { 
        jSONObject0.getBoolean("getadd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getadd\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(" }9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of  }9
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.48717948717948717
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Ee6";
      JSONObject jSONObject1 = jSONObject0.accumulate("Ee6", "Ee6");
      String string1 = "[l(_X!ywT$+93]%)4";
      Byte byte0 = new Byte((byte) (-114));
      Object object0 = new Object();
      jSONObject0.append("[l(_X!ywT$+93]%)4", object0);
      Short short0 = new Short((byte) (-114));
      JSONObject.getNames((Object) short0);
      jSONObject1.accumulate("[l(_X!ywT$+93]%)4", byte0);
      try { 
        jSONObject1.getBoolean("Ee6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ee6\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.putOpt("getquote", jSONObject1);
      JSONObject jSONObject3 = jSONObject2.accumulate("getquote", hashMap0);
      assertFalse(jSONObject3.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("getadd", object0);
      try { 
        jSONObject1.getBoolean("getadd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getadd\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5895213795772005
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Double.valueOf((-226.4317791944));
      Double double0 = new Double((-226.4317791944));
      Double double1 = new Double((-1.0));
      Double double2 = new Double(30.14812812406131);
      Boolean.valueOf("Mm9($X");
      JSONObject jSONObject0 = new JSONObject(double2);
      JSONObject jSONObject1 = jSONObject0.put("Mm9($X", 30.14812812406131);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      jSONObject1.write(stringWriter0);
      jSONObject1.getLong("Mm9($X");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Double double0 = new Double((-2779.850942109));
      Double double1 = new Double((-4495.41313011));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isdivideUnsigned", (-1.0));
      jSONObject1.getDouble("isdivideUnsigned");
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject2 = new JSONObject(boolean0);
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      jSONObject2.put("Unterminated string", (Map) hashMap0);
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("|_}L*&Ey`G", (-0.3088717040127451));
      jSONObject0.getLong("|_}L*&Ey`G");
      Byte byte0 = new Byte((byte)92);
      Float float0 = new Float(Double.NaN);
      hashMap0.put(byte0, float0);
      Float float1 = new Float((-0.3088717040127451));
      int int0 = Byte.toUnsignedInt((byte) (-69));
      Float float2 = new Float((-1071.0F));
      Float.min(0.0F, (-1071.0F));
      Float.max((-2185.0F), 0.0F);
      hashMap0.put(byte0, float2);
      jSONObject1.put("I9I3uCT]e/umP`)|q", false);
      int int1 = jSONObject0.getInt("|_}L*&Ey`G");
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4337813219886597
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = JSONObject.doubleToString(187.71);
      assertEquals("187.71", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "187.71");
      jSONObject0.toString(57, 57);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONArray0.put(0L);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      Short short0 = new Short((short)2975);
      JSONObject jSONObject1 = jSONObject0.append("u,[R", short0);
      // Undeclared exception!
      jSONObject1.toString(2, 8448);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.587973990795769
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("false", "false");
      jSONObject0.getBoolean("false");
      JSONObject jSONObject1 = jSONObject0.append("_", "_");
      JSONObject.valueToString("false");
      JSONObject.valueToString(jSONObject0);
      // Undeclared exception!
      jSONObject1.toString(6323, 69);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("] is not a number.");
      jSONObject0.put("RhWZC\u0002%}:EZB", (Object) boolean0);
      boolean boolean1 = jSONObject0.getBoolean("RhWZC\u0002%}:EZB");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      jSONObject0.append("&KO3X\" vgMie0", object0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = jSONObject0.append("&KO3X\" vgMie0", boolean0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double.valueOf((-86.4821));
      Double.valueOf((-86.4821));
      Double double0 = new Double((-86.4821));
      Double double1 = new Double((-86.4821));
      Long long0 = new Long((-1595L));
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject jSONObject1 = jSONObject0.put("-XFR:R@t\"UIL9Vp", (-86.4821));
      StringWriter stringWriter0 = new StringWriter();
      Boolean.valueOf(true);
      Boolean.logicalOr(true, true);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.accumulate(".)r&", object0);
      long long1 = jSONObject2.getLong("-XFR:R@t\"UIL9Vp");
      assertEquals(3, jSONObject0.length());
      assertEquals((-86L), long1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0, 8192, 955);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = ": ";
      JSONObject jSONObject1 = jSONObject0.put("gethashCode", (Map) hashMap0);
      try { 
        jSONObject1.getInt("gethashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gethashCode\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-20));
      JSONObject jSONObject1 = jSONObject0.put("NY?N&{", (Object) byte0);
      jSONObject0.getInt("NY?N&{");
      try { 
        jSONObject1.getJSONObject("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("do", jSONObject0);
      jSONObject1.append("do", object0);
      Float float0 = new Float((double) (-2264));
      assertEquals((-2264.0F), (float)float0, 0.01F);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      try { 
        jSONObject1.append("", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("sp", 0L);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("ds");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ds
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.put("d", object0);
      JSONObject.quote(",\n");
      Object object1 = jSONObject0.get("d");
      assertSame(object1, object0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1829430989272922
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4314);
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Writer writer0 = jSONObject0.write(stringWriter0);
      JSONObject jSONObject1 = jSONObject0.putOpt("to", writer0);
      try { 
        jSONObject1.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gethighestOneBit", (Object) "gethighestOneBit");
      try { 
        jSONObject0.getJSONArray("gethighestOneBit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gethighestOneBit\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gH?NOdB8;P9]Q{QQ@", true);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{", false);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0980526298332742
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject.quote("");
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      try { 
        jSONObject0.get("=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "{hN7";
      JSONTokener jSONTokener0 = new JSONTokener("{hN7");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {hN7
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 1497, 1497);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8772034520289815
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(59);
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                                           \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                           \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                           \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString(59);
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Double.valueOf((-2362.6321));
      Double.valueOf((-86.4821));
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = JSONObject.quote("wheel.json.JSONObject$1");
      assertEquals("\"wheel.json.JSONObject$1\"", string0);
      
      jSONObject0.optDouble("ON(&tzt ", (-2362.6321));
      jSONObject0.opt((String) null);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5869843816913654
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Double double0 = Double.valueOf((-86.4821));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = new JSONObject(double0);
      StringWriter stringWriter0 = new StringWriter();
      Float float0 = new Float(0.0);
      jSONObject0.optString("", "");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.accumulate((String) null, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.accumulate("CDL", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.keys();
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(1.0);
      hashMap0.put(double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 0;
      jSONObject0.optInt("Eg?/`LiCk", 0);
      String string0 = "toS";
      JSONTokener jSONTokener0 = new JSONTokener("toS");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of toS
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      boolean boolean0 = jSONObject0.optBoolean("[");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("isclear", (Object) hashMap0);
      jSONObject0.put("u`9;/I", 12);
      long long0 = jSONObject0.optLong("u`9;/I");
      assertEquals(12L, long0);
      
      Object object0 = new Object();
      jSONObject0.append(" $!v", object0);
      String string0 = JSONObject.doubleToString((-2537.0));
      assertEquals("-2537", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String[] stringArray0 = new String[9];
      stringArray0[3] = stringArray0[2];
      stringArray0[4] = "getputIfAbsent";
      stringArray0[5] = "rU";
      stringArray0[6] = "null";
      stringArray0[7] = stringArray0[0];
      JSONObject.getNames((Object) "rU");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optBoolean("[", false);
      try { 
        jSONObject0.getInt("Fg1G]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Fg1G]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Short short0 = new Short((short) (-447));
      hashMap0.clone();
      hashMap0.remove((Object) short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("es`J6^4Xl9>7ZrS\"", (long) (short) (-447));
      JSONObject jSONObject1 = jSONObject0.put("", 670);
      Short.toUnsignedInt((short) (-447));
      jSONObject1.optDouble("", (double) 670);
      Short.compare((short) (-447), (short) (-447));
      jSONObject0.length();
      JSONObject.valueToString(short0, (short) (-447), 1);
      jSONObject0.names();
      try { 
        jSONObject0.getJSONArray("3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(101);
      jSONObject0.put("d8?", (Object) integer0);
      double double0 = jSONObject0.optDouble("d8?");
      assertEquals(101.0, double0, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      String string0 = "whee.8sRn~JSOObject";
      JSONObject jSONObject1 = jSONObject0.put("whee.8sRn~JSOObject", object0);
      try { 
        jSONObject1.getLong("whee.8sRn~JSOObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"whee.8sRn~JSOObject\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("u`9;/I");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "gethighestOneBit";
      stringArray0[1] = "gethighestOneBit";
      stringArray0[2] = "gethighestOneBit";
      JSONObject jSONObject0 = new JSONObject("gethighestOneBit", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("gethighestOneBit", (Object) "gethighestOneBit");
      try { 
        jSONObject1.getDouble("gethighestOneBit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gethighestOneBit\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("getadd", (Object) null);
      try { 
        jSONObject0.getBoolean("getadd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getadd\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)40);
      JSONObject jSONObject1 = jSONObject0.accumulate("getreverseBytes", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("GzInZ:PB7TS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"GzInZ:PB7TS\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5869843816913654
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Double.valueOf(0.0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("", (-3081.2788996196346));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('x');
      jSONObject0.write(stringWriter1);
      Float float0 = new Float(1.0);
      jSONObject0.optString("", "");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "java.lang.Double@0000000005";
      stringArray0[2] = "java.lang.Double@0000000005";
      stringArray0[3] = "java.lang.Double@0000000005";
      stringArray0[4] = "java.lang.Double@0000000005";
      stringArray0[5] = "";
      stringArray0[6] = "java.lang.Double@0000000005";
      stringArray0[7] = "java.lang.Double@0000000005";
      stringArray0[8] = "java.lang.Double@0000000005";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.keys();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double double0 = new Double((-86.4821));
      Byte byte0 = new Byte((byte)0);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("\b", jSONArray0);
      String string0 = jSONObject1.optString("\b");
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5904155673566343
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Float float0 = new Float(0.0);
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject(float0);
      hashMap0.put(jSONObject0, (Float) null);
      Float float1 = new Float(Double.NaN);
      hashMap0.put(jSONObject0, float1);
      Float.max(3938.034F, 2205.38F);
      Float float2 = new Float(170.86380654203037);
      Float float3 = new Float((double) 3938.034F);
      Long long0 = new Long(0L);
      jSONObject0.append("Unterminated string", long0);
      jSONObject0.toString((-926), (-926));
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{IG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {IG
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("Leu:l\"tdexx0ENk", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("TbZatou", "\"\"");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      Double double0 = new Double(1.0);
      hashMap0.put(double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      try { 
        jSONObject0.append((String) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Float.sum((-1567.5F), (-1567.5F));
      Float float0 = new Float(Double.NaN);
      Float float1 = new Float((double) (-1567.5F));
      Float float2 = new Float((-1.0F));
      Float float3 = new Float(0.0);
      Float.isFinite((-1567.5F));
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("log", object1);
      jSONObject1.getString("log");
      try { 
        jSONObject0.getBoolean("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("L]X) O$ekV#QFmdv", 0L);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (long) 48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (Object) "");
      StringWriter stringWriter0 = new StringWriter(78);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      Boolean boolean0 = Boolean.valueOf("VZi`'k$wI7ap~]n");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put(boolean0, jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(1773);
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.putIfAbsent(integer0, boolean0);
      Integer integer1 = new Integer(87);
      Boolean boolean1 = Boolean.FALSE;
      hashMap0.put(integer1, boolean1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.isNull((String) null);
      JSONObject.doubleToString(87);
      StringWriter stringWriter0 = new StringWriter(87);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put((Object) null, "getadd");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("8 ;b6b95arpR7 ~n{");
      StringWriter stringWriter0 = new StringWriter(105);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Eej{");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "Eej{", 105, 105);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = JSONObject.quote("'nToF}-WozL>G;J(:/F");
      assertEquals("\"'nToF}-WozL>G;J(:/F\"", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("pus", (Object) "pus");
      try { 
        jSONObject0.getJSONObject("pus");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pus\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(jSONArray0, (-659), (-1865));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
      
      String string1 = JSONObject.valueToString(jSONArray0, 0, 0);
      assertEquals("[]", string1);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Long.getLong((String) null);
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalAnd(true, false);
      hashMap0.put((Object) null, boolean0);
      JSONObject.getNames((Object) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 2773, 2773);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.optString("cv#KPLBQ", "cv#KPLBQ");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      Float float0 = new Float(Double.NaN);
      String string0 = null;
      String string1 = "(K[XB*>gry;bDdf8";
      jSONObject0.optString("(K[XB*>gry;bDdf8", (String) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("islogicalOr", (-1903));
      assertEquals((-1903), int0);
      
      String string0 = JSONObject.quote("/]HoHMsQ^t]");
      assertEquals("\"/]HoHMsQ^t]\"", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("getwait", 458.05332632287);
      assertEquals(458.05332632287, double0, 0.01);
      
      String string0 = JSONObject.doubleToString((-3841.67540760001));
      assertEquals("-3841.67540760001", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("whee.json.JSOObject", (Object) jSONObject0);
      try { 
        jSONObject1.getBoolean("whee.json.JSOObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"whee.json.JSOObject\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float float0 = new Float((-3035.0));
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      Object object0 = jSONObject0.remove("\"g+M23iypHBH");
      assertNull(object0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-3366.7));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("R(}");
      assertEquals("", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble(")m", (-1052.624));
      assertEquals((-1052.624), double0, 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("000", true);
      JSONObject jSONObject1 = jSONObject0.append("Expected a ':' after a key", "Expected a ':' after a key");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getadd", (Object) "getadd");
      try { 
        jSONObject0.getBoolean("getadd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getadd\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.put("whee.json.JSOObject", (Object) boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject1.getBoolean("whee.json.JSOObject");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.018706115735962
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = JSONObject.quote("'noF}-WozL%G;1pJ(:/F");
      assertEquals("\"'noF}-WozL%G;1pJ(:/F\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("'noF}-WozL%G;1pJ(:/F");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Boolean, Short> hashMap0 = new HashMap<Boolean, Short>(44);
      Boolean boolean0 = Boolean.FALSE;
      Short short0 = new Short((short) (-436));
      hashMap0.put(boolean0, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(3447, 44);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.putOpt("getquote", (Object) null);
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject.valueToString(linkedList0);
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      Float float0 = new Float((double) (-1));
      hashMap0.put((JSONObject) null, float0);
      Float float1 = new Float(1469.4);
      hashMap0.put((JSONObject) null, (Float) null);
      Float.max((-1), (-1));
      Float float2 = new Float(0.0);
      Float.sum(0.0F, 3199.038F);
      String string0 = "9t/\"ai)Uz21M(YgbEs";
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long((-1));
      jSONObject0.append("Q", long0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(32, 1244);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.0451238684657966
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject.quote("'noF}-WozL%G;1pJ(:/F");
      JSONObject jSONObject0 = new JSONObject((Object) "'noF}-WozL%G;1pJ(:/F");
      jSONObject0.toString((-1177), (-1177));
      try { 
        jSONObject0.getInt("{\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000050,\njava.lang.Byte@0000000051,\njava.lang.Byte@0000000052,\njava.lang.Byte@0000000053,\njava.lang.Byte@0000000054,\njava.lang.Byte@0000000055,\njava.lang.Byte@0000000056,\njava.lang.Byte@0000000057,\njava.lang.Byte@0000000058,\njava.lang.Byte@0000000059,\njava.lang.Byte@0000000060,\njava.lang.Byte@0000000061,\njava.lang.Byte@0000000062,\njava.lang.Byte@0000000063,\njava.lang.Byte@0000000064,\njava.lang.Byte@0000000065,\njava.lang.Byte@0000000066,\njava.lang.Byte@0000000067,\njava.lang.Byte@0000000068,\njava.lang.Byte@0000000069\n],\n\"java.lang.String@0000000047\": \"java.lang.Class@0000000048\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000004\\\": [\\njava.lang.Byte@0000000050,\\njava.lang.Byte@0000000051,\\njava.lang.Byte@0000000052,\\njava.lang.Byte@0000000053,\\njava.lang.Byte@0000000054,\\njava.lang.Byte@0000000055,\\njava.lang.Byte@0000000056,\\njava.lang.Byte@0000000057,\\njava.lang.Byte@0000000058,\\njava.lang.Byte@0000000059,\\njava.lang.Byte@0000000060,\\njava.lang.Byte@0000000061,\\njava.lang.Byte@0000000062,\\njava.lang.Byte@0000000063,\\njava.lang.Byte@0000000064,\\njava.lang.Byte@0000000065,\\njava.lang.Byte@0000000066,\\njava.lang.Byte@0000000067,\\njava.lang.Byte@0000000068,\\njava.lang.Byte@0000000069\\n],\\n\\\"java.lang.String@0000000047\\\": \\\"java.lang.Class@0000000048\\\",\\n\\\"java.lang.String@0000000002\\\": java.lang.Boolean@0000000003\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(1631, 1631);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(22);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, (Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("isnotify");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of isnotify
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("Null pointer");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject.quote("iscompare");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject0);
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.opt("[");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.7774035244144605
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("0");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1637));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("falsF1e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"falsF1e\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("\"r4An&79", 1211L);
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("] not found.", (-1L));
      try { 
        jSONObject0.getInt("nu'{/&U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nu'{/&U\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("HpB&e(J.!>i4B$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"HpB&e(J.!>i4B$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = JSONObject.quote(",`D\n");
      assertEquals("\",`D\\n\"", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = JSONObject.quote("_s^");
      assertEquals("\"_s^\"", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "] is not a JSONObject.");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("] is not a JSONObject.", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("no");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"no\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("7CVz%\"(#rE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7CVz%\\\"(#rE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(" wccXs`8NasZ4~-", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.valueToString(float0, 1275, 1275);
      assertNotNull(string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Float float0 = new Float((-1710.9532115553914));
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("\b", 2305);
      Float float0 = new Float(0.0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("-33.0");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getInt("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = JSONObject.valueToString(stringWriter0, 46, 46);
      assertNotNull(string0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Boolean boolean0 = new Boolean("Unclosed c)omment");
      String string0 = JSONObject.valueToString(boolean0, 34, 8);
      assertNotNull(string0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 47, 3140);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = JSONObject.quote("Null pointer");
      assertEquals("\"Null pointer\"", string0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Byte byte0 = new Byte((byte)120);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject.testValidity("I<:b5[tp@]w/!S^=");
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }
}
