/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 15:56:19 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      int int0 = 2147483645;
      // Undeclared exception!
      outputFormat0.setIndentSize(2147483645);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-hlencong");
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-suppressDeclaration";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9809066497880012
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.getLineSeparator();
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat0.setLineSeparator((String) null);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setSuppressDeclaration(false);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setSuppressDeclaration(true);
      outputFormat2.setOmitEncoding(false);
      OutputFormat.createPrettyPrint();
      outputFormat0.setIndent("-expandEmptyd}P^NnNzLPw^");
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      outputFormat1.getLineSeparator();
      OutputFormat outputFormat4 = OutputFormat.createCompactFormat();
      outputFormat4.setExpandEmptyElements(true);
      outputFormat0.setIndent("=SL9vr7y$ST");
      assertEquals("=SL9vr7y$ST", outputFormat0.getIndent());
      
      OutputFormat.createCompactFormat();
      outputFormat3.getAttributeQuoteCharacter();
      OutputFormat outputFormat5 = OutputFormat.createPrettyPrint();
      char char0 = outputFormat5.getAttributeQuoteCharacter();
      assertEquals('\"', char0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-newlines");
      assertFalse(outputFormat0.isNewlines());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "-ecodig";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isNewlines());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, true, (String) null);
      assertFalse(outputFormat0.isXHTML());
      
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat0.setXHTML(true);
      outputFormat1.getAttributeQuoteCharacter();
      outputFormat0.getAttributeQuoteCharacter();
      OutputFormat.createCompactFormat();
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat0.getEncoding();
      assertTrue(outputFormat0.isXHTML());
      
      outputFormat1.setIndent("-expandEmpty");
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-hlencong");
      assertEquals("-hlencong", outputFormat0.getIndent());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-hlencong";
      stringArray0[1] = "-indent";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals(3, int0);
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("51Xw-A");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-indent";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-padText");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-padText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indentSize");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-indentSize";
      stringArray0[2] = "-xhfVtmlnon";
      stringArray0[3] = "-indentSize";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9974995112475309
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent(false);
      assertFalse(outputFormat0.isTrimText());
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "-trimText";
      outputFormat0.parseOptions(stringArray0, 1);
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isTrimText());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-d_HhtmlencMdng");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-lineSeparator";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-omitEncoding", true);
      assertFalse(outputFormat0.isOmitEncoding());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-omitEncoding";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isOmitEncoding());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-hlnong");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "-hlnong";
      stringArray0[2] = "-hlnong";
      stringArray0[3] = "EeT";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-hlnong", outputFormat0.getEncoding());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndent("");
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setNewlines(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.getIndent();
      assertTrue(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "-xhtmlencodng";
      OutputFormat outputFormat0 = new OutputFormat("-xhtmlencodng", true);
      String[] stringArray0 = new String[11];
      stringArray0[0] = "-xhtmlencodng";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-expandEmptyQRHO";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.679983198025875
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true);
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator("");
      outputFormat1.setIndentSize(0);
      outputFormat0.getLineSeparator();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setIndent("-xhtml\"I9ht3k");
      assertEquals("-xhtml\"I9ht3k", outputFormat0.getIndent());
      
      OutputFormat.createCompactFormat();
      outputFormat1.setNewlines(false);
      assertTrue(outputFormat1.isExpandEmptyElements());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-encoding";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags(346);
      String[] stringArray0 = new String[3];
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(346, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isPadText());
      
      outputFormat0.setPadText(true);
      outputFormat0.isSuppressDeclaration();
      boolean boolean0 = outputFormat0.isPadText();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4297811167972485
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setIndent("o|[1");
      outputFormat1.setEncoding("o|[1");
      outputFormat0.setEncoding("o|[1");
      boolean boolean0 = outputFormat0.isNewlines();
      assertEquals("o|[1", outputFormat0.getIndent());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[4];
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.setNewlines(false);
      outputFormat1.setEncoding("o|[1");
      assertEquals("o|[1", outputFormat1.getEncoding());
      
      outputFormat0.isNewlines();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat2.isTrimText());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("^MQ+l?uN<`**k:", true, "");
      outputFormat0.getEncoding();
      outputFormat0.setEncoding("");
      outputFormat0.setOmitEncoding(false);
      String string0 = "";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "^MQ+l?uN<`**k:";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setIndent(true);
      outputFormat0.setLineSeparator("");
      outputFormat0.getIndent();
      outputFormat0.setIndent("");
      String[] stringArray0 = new String[22];
      stringArray0[0] = "  ";
      stringArray0[2] = "%X]DSvX,3";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('P');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (P)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('!');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (!)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setAttributeQuoteCharacter('\"');
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-xhtm|-xh#mHzlencong";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setAttributeQuoteCharacter('\'');
      assertEquals('\'', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7853437136837007
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("2%l{$_4,]6;sLj");
      outputFormat0.setXHTML(true);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setLineSeparator("2%l{$_4,]6;sLj");
      OutputFormat outputFormat1 = new OutputFormat("2%l{$_4,]6;sLj", false);
      outputFormat1.setIndent("2%l{$_4,]6;sLj");
      outputFormat0.setNewLineAfterNTags(414);
      outputFormat0.setNewLineAfterNTags(3174);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent(false);
      outputFormat0.isExpandEmptyElements();
      outputFormat0.isOmitEncoding();
      outputFormat0.isXHTML();
      outputFormat0.setXHTML(false);
      assertEquals("2%l{$_4,]6;sLj", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.562200162369491
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndentSize(1);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setIndentSize(8);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setOmitEncoding(true);
      outputFormat0.isExpandEmptyElements();
      outputFormat0.getEncoding();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setNewLineAfterNTags(8);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setIndentSize(1);
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setEncoding((String) null);
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setLineSeparator("");
      outputFormat0.getIndent();
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.430758633903798
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setTrimText(false);
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[3];
      outputFormat0.isTrimText();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('{');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ({)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("5RB8eB");
      outputFormat0.setLineSeparator("*>7a[kOM#%CmOU'p");
      outputFormat0.isTrimText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "5RB8eB";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1010));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1010
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(boolean0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "vTj-$";
      outputFormat0.parseOptions(stringArray0, 0);
      String string0 = outputFormat0.getLineSeparator();
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", string0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setIndent(false);
      outputFormat0.setLineSeparator("");
      outputFormat0.getIndent();
      outputFormat0.setIndent("");
      String[] stringArray0 = new String[22];
      stringArray0[0] = null;
      stringArray0[2] = "m%@wCyYa+xTB,C5";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('P');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (P)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      boolean boolean1 = outputFormat0.isPadText();
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(boolean1 == boolean0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterDeclaration(true);
      boolean boolean0 = outputFormat0.isXHTML();
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(boolean0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"I9htMk";
      stringArray0[6] = "-xhtml-hlnong";
      stringArray0[2] = "-xhtml-hlnong";
      stringArray0[0] = "$e7&yA)|i)0/";
      stringArray0[4] = "\"I9htMk";
      outputFormat0.setOmitEncoding(true);
      outputFormat0.isOmitEncoding();
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-686));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -686
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent((String) null);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3755754015654476
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "d}P^NNzLPw^";
      outputFormat0.parseOptions(stringArray0, 1);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isTrimText());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertFalse(outputFormat1.isXHTML());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isPadText());
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isOmitEncoding());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertFalse(outputFormat1.isSuppressDeclaration());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.549749826558804
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "Invalid attribute quote character (";
      outputFormat0.parseOptions(stringArray0, 1);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertEquals("  ", outputFormat1.getIndent());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertFalse(outputFormat1.isXHTML());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertTrue(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isPadText());
      assertFalse(outputFormat1.isOmitEncoding());
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isExpandEmptyElements());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 946);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[2];
      stringArray0[1] = ")dDamFJ";
      outputFormat0.parseOptions(stringArray0, 1);
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals('\"', char0);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtOlencdng");
      assertEquals("-xhtOlencdng", outputFormat0.getIndent());
      
      outputFormat0.setIndentSize(2920);
      assertFalse(outputFormat0.isNewlines());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtmlencodng");
      assertEquals("-xhtmlencodng", outputFormat0.getIndent());
      
      outputFormat0.setIndentSize((-3262));
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent(true);
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("  ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isTrimText());
      
      outputFormat0.setTrimText(true);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "Invalid attribute quote character (";
      outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      assertFalse(outputFormat0.isOmitEncoding());
      
      outputFormat0.setOmitEncoding(true);
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertTrue(outputFormat0.isOmitEncoding());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterDeclaration(true);
      String[] stringArray0 = new String[2];
      stringArray0[1] = ")dDamFJ";
      outputFormat0.parseOptions(stringArray0, 1);
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setOmitEncoding(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-xhtmelZ?nM";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-xhfVtmlnon", true, "elW}]j");
      outputFormat0.setEncoding("elW}]j");
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(boolean0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("-expandEmpty-xhfVtmlnon", outputFormat0.getIndent());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("elW}]j", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setXHTML(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-xhtmelZ?nM";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-htmzlencong";
      OutputFormat outputFormat0 = new OutputFormat("-htmzlencong");
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "-htmzl{encong";
      outputFormat0.setNewLineAfterNTags((-1016));
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals((-1016), int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("-xhtml3b");
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("-xhtml3b", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('9');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (9)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      
      String[] stringArray0 = new String[8];
      outputFormat0.setNewLineAfterNTags(1);
      stringArray0[1] = "Invalid attribute quote character (";
      outputFormat0.parseOptions(stringArray0, 1);
      assertEquals(1, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.getNewLineAfterNTags();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('B');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (B)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(false);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "Invalid attribute quote character (";
      outputFormat0.parseOptions(stringArray0, 1);
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      outputFormat0.setExpandEmptyElements(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-xhtmelZ?nM";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewlines(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Invalid attribue quo@e character (";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[7];
      outputFormat0.setLineSeparator("-xhtmelZ?nM");
      stringArray0[0] = "-xhtmelZ?nM";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-xhtmelZ?nM", outputFormat0.getLineSeparator());
  }
}
