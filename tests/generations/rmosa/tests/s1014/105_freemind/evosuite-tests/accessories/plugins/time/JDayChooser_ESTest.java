/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 15:46:21 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseMotionListener;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.beans.PropertyChangeListener;
import java.sql.Timestamp;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.format.FormatStyle;
import java.time.format.ResolverStyle;
import java.util.Date;
import java.util.Locale;
import javax.swing.Icon;
import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JSpinner;
import javax.swing.JTabbedPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.text.Segment;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JButton[] jButtonArray0 = new JButton[1];
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getClosedIcon();
      JButton jButton0 = new JButton(icon0);
      jButtonArray0[0] = jButton0;
      jDayChooser0.days = jButtonArray0;
      // Undeclared exception!
      try { 
        jDayChooser0.updateUI();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.167745255120623
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.YELLOW;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setDay(12);
      assertEquals(12, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.day = 1504;
      jDayChooser0.setMonth(1504);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setToolTipText("");
      Locale locale0 = Locale.ROOT;
      AWTEventMulticaster.remove((MouseMotionListener) null, (MouseMotionListener) null);
      AWTEventMulticaster.remove((MouseMotionListener) null, (MouseMotionListener) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-661), 39, 4, 40, '}');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      sVGGeneratorContext_GraphicContextDefaults0.getFont();
      JButton[] jButtonArray0 = new JButton[1];
      jDayChooser0.weeks = jButtonArray0;
      // Undeclared exception!
      try { 
        jDayChooser0.setFont((Font) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(1);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DefaultEditor jSpinner_DefaultEditor0 = new JSpinner.DefaultEditor(jSpinner0);
      jDayChooser0.addPropertyChangeListener("-/@Y_e[{%", (PropertyChangeListener) jSpinner_DefaultEditor0);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.createToolTip();
      jDayChooser0.removeNotify();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener1);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener2, inputMethodListener2);
      AWTEventMulticaster.add((MouseMotionListener) aWTEventMulticaster0, (MouseMotionListener) aWTEventMulticaster0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4, 0L, 4, 38, 'M');
      jDayChooser0.keyPressed(keyEvent0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.WORD_SPACING;
      SystemColor systemColor0 = SystemColor.text;
      assertEquals((-4144960), systemColor0.getRGB());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-309L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.ROOT;
      AWTEventMulticaster.remove((MouseMotionListener) null, (MouseMotionListener) null);
      AWTEventMulticaster.remove((MouseMotionListener) null, (MouseMotionListener) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 72, 4, 72, 72, 'K');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8016776519777116
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.decorationBackgroundColor;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 36, 245L, 31, 36, 'N');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.keyPressed(keyEvent0);
      Font.decode("+}e9*Yl");
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      String string0 = JDayChooser.DAY_PROPERTY;
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_DATE_TIME;
      assertNotNull(dateTimeFormatter0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.800890177739808
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.LIGHT_GRAY;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1468.639F);
      floatArray0[1] = (-1468.639F);
      floatArray0[2] = 329.94482F;
      color0.getRGBColorComponents(floatArray0);
      jDayChooser0.setForeground(color0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      DateTimeFormatter.ofLocalizedDateTime(formatStyle0, formatStyle0);
      Segment segment0 = new Segment();
      jDayChooser0.setDayBordersVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser_DecoratorButton1.addItemListener((ItemListener) null);
      jDayChooser_DecoratorButton1.paint((Graphics) null);
      jDayChooser0.drawDays();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getHeight();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.WORD_SPACING;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_ALL, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JButton jButton0 = new JButton("day");
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 2614, "org.apache.batik.dom.AbstractNode", 0L, 2614);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"day\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JButton[] jButtonArray0 = new JButton[1];
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getClosedIcon();
      JButton jButton0 = new JButton(icon0);
      jButtonArray0[0] = jButton0;
      jDayChooser0.days = jButtonArray0;
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 49, 0L, 1, 49, '$');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-291L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setToolTipText("");
      Locale locale0 = Locale.ROOT;
      AWTEventMulticaster.remove((MouseMotionListener) null, (MouseMotionListener) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 49, (-291L), 39, 39, 'Z');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getX();
      Color color0 = Color.cyan;
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.695616860294419
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser0.setForeground(color0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setFocus();
      MockDate mockDate0 = new MockDate(0L);
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      DateTimeFormatter.ofLocalizedDateTime(formatStyle0, formatStyle0);
      Segment segment0 = new Segment();
      jDayChooser0.setDayBordersVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser_DecoratorButton1.addItemListener((ItemListener) null);
      jDayChooser_DecoratorButton1.paint((Graphics) null);
      jDayChooser0.drawDays();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.init();
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "West");
      System.setCurrentTimeMillis((-309L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.init();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8009457487317504
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-309L));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.UK;
      jDayChooser0.initDecorations();
      jDayChooser0.getTransferHandler();
      locale0.getDisplayName();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 1415;
      jDayChooser0.setDay(1415);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.isDayBordersVisible();
      int int1 = 14;
      jDayChooser0.setMonth(14);
      int int2 = 1558;
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1558);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.pink;
      jDayChooser0.setWeekdayForeground(color0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.getWeekdayForeground();
      System.setCurrentTimeMillis(0L);
      HsqlProperties hsqlProperties0 = HsqlProperties.delimitedArgPairsToProps("day", "3B~({", "3B~({", "3B~({");
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 9, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters((-215));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 10;
      JButton[] jButtonArray0 = new JButton[1];
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getClosedIcon();
      JButton jButton0 = new JButton(icon0);
      jButtonArray0[0] = jButton0;
      jDayChooser0.days = jButtonArray0;
      jDayChooser0.createImage(10, 10);
      // Undeclared exception!
      try { 
        jDayChooser0.setMaxDayCharacters(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 1;
      JButton[] jButtonArray0 = new JButton[1];
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getClosedIcon();
      JButton jButton0 = new JButton(icon0);
      jButtonArray0[0] = jButton0;
      jDayChooser0.days = jButtonArray0;
      jDayChooser0.createImage(1, 1);
      // Undeclared exception!
      try { 
        jDayChooser0.setMaxDayCharacters(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.lightGray;
      jDayChooser0.setSundayForeground(color0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      MockDate mockDate0 = new MockDate();
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      Segment segment0 = new Segment();
      assertEquals(0, segment0.offset);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      jDayChooser0.setForeground(color0);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6955063642778003
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = jDayChooser_DecoratorButton0.getLocale();
      locale0.getDisplayName();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale1 = Locale.JAPANESE;
      jDayChooser0.setLocale(locale1);
      jDayChooser_DecoratorButton0.isFocusable();
      MockDate mockDate0 = new MockDate();
      jDayChooser0.requestFocus();
      jDayChooser0.setMinSelectableDate(mockDate0);
      Segment segment0 = new Segment();
      assertEquals(0, segment0.count);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(685);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser0.setForeground(color0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setFocus();
      MockDate mockDate0 = new MockDate(0L);
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.setAuthor("org.apache.crimson.tree.NodeBase");
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.PINK;
      color0.getColorSpace();
      color0.getRGBColorComponents((float[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "freemind.main.Tools$ObjectHolder");
      jDayChooser0.getTreeLock();
      jDayChooser0.addListeners(6);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.578540640778935
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMonth((-1380));
      Timestamp timestamp0 = new Timestamp((-1380));
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      Font font0 = new Font((String) null, 1818, 342);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5777233286214165
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(210, color0.getRed());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setWeekOfYearVisible(true);
      JTabbedPane jTabbedPane0 = new JTabbedPane(3);
      // Undeclared exception!
      try { 
        jTabbedPane0.getBackgroundAt(39);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 39, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.577674757227539
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      System.setCurrentTimeMillis((-309L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth((-1367));
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.695529662081982
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.white;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setMonth((-3238));
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-3238));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-309L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^<TiLCA[$'");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.firePropertyChange("14", (short)238, (short)5027);
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      FormatStyle formatStyle1 = FormatStyle.FULL;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofLocalizedDateTime(formatStyle0, formatStyle1);
      Segment segment0 = new Segment();
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      dateTimeFormatter0.withResolverStyle(resolverStyle0);
      DateTimeFormatter dateTimeFormatter1 = DateTimeFormatter.ISO_OFFSET_DATE;
      // Undeclared exception!
      try { 
        MockLocalTime.parse((CharSequence) "day", dateTimeFormatter1);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'day' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.1373029436503463
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[3];
      JMenu jMenu0 = new JMenu();
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      JPopupMenu jPopupMenu1 = new JPopupMenu();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (int) 'z';
      intArray0[2] = 0;
      intArray0[3] = 478;
      intArray0[4] = 478;
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(478, 0, intArray0, 478, 8928);
      jPopupMenu0.createImage((ImageProducer) memoryImageSource0);
      menuElementArray0[1] = (MenuElement) jPopupMenu1;
      JMenuItem jMenuItem0 = jMenu0.add("West");
      menuElementArray0[2] = (MenuElement) jMenuItem0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 478, 1567L, 478, 478, 'z', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setFocus();
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertNull(jButton0);
      
      boolean boolean1 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean1 == boolean0);
      
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-3932));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(4566);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.8960770909801887
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.695482417057474
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser0.setForeground(color0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.drawDays();
      System.setCurrentTimeMillis((-1673L));
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Color color0 = Color.GREEN;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate((-1241L));
      jDayChooser0.setMaxSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser0.setForeground(color0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Segment segment0 = new Segment();
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Rectangle rectangle0 = new Rectangle();
      jDayChooser0.computeVisibleRect(rectangle0);
      jDayChooser0.setToolTipText("day");
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.LIGHT_GRAY;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-1432));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.getTreeLock();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_DATE_TIME;
      assertNotNull(dateTimeFormatter0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.GERMANY;
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate(2378L);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_DATE_TIME;
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getKeyListeners();
      jDayChooser0.createToolTip();
      jDayChooser0.removeNotify();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.setDecorationBackgroundVisible(false);
      PDFDocument pDFDocument0 = new PDFDocument("I,$OB|L\"");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 5, false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }
}
