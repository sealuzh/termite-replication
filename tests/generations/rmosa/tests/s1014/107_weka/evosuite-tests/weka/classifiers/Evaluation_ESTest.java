/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 15:51:38 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.Stack;
import java.util.function.Consumer;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.GainRatioAttributeEval;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.evaluation.output.prediction.PlainText;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.functions.supportVector.Kernel;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.EM;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.Loader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.KDTree;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.137198593555779
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("f(<pDiY6P:mi");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instance instance0 = instances0.remove(2);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Capabilities capabilities0 = principalComponents0.getCapabilities();
      capabilities0.test(instances0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costSensitiveClassifier0.setCostMatrix(costMatrix0);
      Instances instances1 = testInstances0.generate("setUseCrossValidation");
      instances1.delete();
      J48 j48_0 = new J48();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedAreaUnderROC();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.updatePriors(instance0);
      evaluation1.evaluateModelOnce(1.0, instance0);
      Evaluation.main(testInstances1.DEFAULT_WORDS);
      evaluation1.toSummaryString();
      evaluation1.unweightedMicroFmeasure();
      evaluation0.weightedTruePositiveRate();
      evaluation1.incorrect();
      evaluation1.toClassDetailsString((String) null);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("again");
      testInstances0.setNumRelationalNominal(4);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumClass = (-4112.57878642301);
      testInstances0.setRelation("@data");
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(573);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.areaUnderPRC(4);
      instances0.add((Instance) binarySparseInstance0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      simpleLinearRegression0.setSuppressErrorMessage(true);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4947368421052632
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalNominal((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3870531208335888
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".bsi");
      Instances instances1 = new Instances(instances0);
      J48 j48_0 = new J48();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      SparseInstance sparseInstance0 = new SparseInstance(19);
      evaluation0.m_WithClass = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.weightedTrueNegativeRate();
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1878840226652085
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalNominal((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.areaUnderPRC(573);
      simpleLinearRegression0.setSuppressErrorMessage(true);
      evaluation0.setPriors(instances0);
      Evaluation.main(testInstances1.DEFAULT_WORDS);
      try { 
        CostMatrix.parseMatlab(" ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4948453608247423
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      RandomTree randomTree0 = new RandomTree();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalNominal((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation1.kappa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("f(<pDY6P:mi");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instance instance0 = instances0.remove(2);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Capabilities capabilities0 = principalComponents0.getCapabilities();
      capabilities0.test(instances0);
      TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("setUseCrossValidation");
      instances1.delete();
      J48 j48_0 = new J48();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5898403588435481
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      RandomTree randomTree0 = new RandomTree();
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-209.69);
      doubleArray0[1] = (-2117.366456522);
      doubleArray0[2] = 2.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnce((-6160.605775784994), (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1840562714690361
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      RandomTree randomTree0 = new RandomTree();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalNominal((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(573);
      evaluation0.areaUnderPRC(573);
      instances0.add((Instance) binarySparseInstance0);
      simpleLinearRegression0.setSuppressErrorMessage(true);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 2903;
      SparseInstance sparseInstance0 = new SparseInstance(2903);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      try { 
        evaluation0.evaluateModelOnce(1.050000000745058, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("9;jOpGThaX?(*r}/+a");
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double[] doubleArray0 = null;
      DenseInstance denseInstance0 = new DenseInstance((-1), (double[]) null);
      try { 
        evaluation0.updatePriors(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byte byte0 = (byte) (-42);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)36;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      try { 
        Evaluation.handleCostOption(" ", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFFFD-$\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      RandomTree randomTree0 = new RandomTree();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalNominal((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("again");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      Vote vote0 = new Vote();
      MockRandom mockRandom0 = new MockRandom();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, binarySparseInstance0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorAbsErr;
      double double1 = evaluation0.m_SumAbsErr;
      evaluation0.sizeOfPredictedRegions();
      evaluation0.SFSchemeEntropy();
      Instances instances1 = evaluation0.getHeader();
      evaluation0.setPriors(instances1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.717020786717215
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Vote vote0 = new Vote();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumClasses = (-163);
      evaluation0.confusionMatrix();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.numTrueNegatives(5);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Correctly Classified Instances     ");
      EM eM0 = new EM();
      Capabilities capabilities0 = eM0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("Correctly Classified Instances     ");
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1840562714690361
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      capabilities0.enableDependency(capabilities_Capability0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      RandomTree randomTree0 = new RandomTree();
      randomTree0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      evaluation0.errorRate();
      evaluation0.totalCost();
      // Undeclared exception!
      try { 
        evaluation0.weightedMatthewsCorrelation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      int int0 = (-2256);
      testInstances0.setNumInstances((-2256));
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance((Instances) null);
      databaseLoader0.getStructure();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2256);
      doubleArray0[1] = (double) (-2256);
      doubleArray0[2] = 3021.275839560158;
      doubleArray0[4] = 0.95;
      testInstances0.setNumInstances((-1911562654));
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-2);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      try { 
        evaluation0.evaluateModelOnce((Classifier) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation1.errorRate();
      try { 
        evaluation1.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SGD sGD0 = new SGD();
      Capabilities capabilities0 = sGD0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.numFalsePositives(1);
      evaluation0.unweightedMacroFmeasure();
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SGD sGD0 = new SGD();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MultiScheme multiScheme0 = new MultiScheme();
      multiScheme0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      testInstances0.setNumRelational(1);
      DenseInstance denseInstance0 = new DenseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      try { 
        evaluation0.evaluateModelOnce(3302.7815915, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3302
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("himlf");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "}}!m1.5vLP-BDex";
      testInstances0.setOptions(stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      MockRandom mockRandom0 = new MockRandom((-4094));
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      additiveRegression0.setShrinkage((-2));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation.makeOptionString(additiveRegression0, false);
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2);
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      intArray0[3] = (-4094);
      intArray0[4] = (-2);
      intArray0[5] = (-1);
      intArray0[6] = (-4094);
      intArray0[7] = (-4094);
      SparseInstance sparseInstance0 = new SparseInstance(1.0E75, doubleArray0, intArray0, (-2));
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominalValues((-196));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.1500000059604645;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.49056603773584906
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".arff");
      testInstances0.setNumRelationalNominal(81);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setOptions(testInstances0.DEFAULT_WORDS);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      int int0 = (-4094);
      testInstances1.listOptions();
      MockRandom mockRandom0 = new MockRandom((-4094));
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Evaluation.makeOptionString(simpleLinearRegression0, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MultiScheme multiScheme0 = new MultiScheme();
      multiScheme0.setOptions(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumInstances(451);
      textDirectoryLoader0.setOutputFilename(true);
      instances0.delete();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Instances instances1 = new Instances(instances0);
      DecisionStump decisionStump0 = new DecisionStump();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "makeCopies");
      assertNotNull(string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".arff");
      testInstances0.setNumRelationalNominal(92);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(92, true, true);
      MockRandom mockRandom0 = new MockRandom(92);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionStump decisionStump0 = new DecisionStump();
      AdaBoostM1 adaBoostM1_1 = new AdaBoostM1();
      J48 j48_0 = new J48();
      // Undeclared exception!
      try { 
        evaluation0.confusionMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("himself");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".bsi";
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      gainRatioAttributeEval0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      double double1 = evaluation0.pctCorrect();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2);
      evaluation0.confusionMatrix();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      try { 
        evaluation0.updateStatsForPredictor((-394.4715098704283), sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2907574652200386
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      testInstances0.setNumRelationalNominalValues(1);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      MultiScheme multiScheme0 = new MultiScheme();
      multiScheme0.buildClassifier(instances0);
      multiScheme0.setOptions(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedAreaUnderPRC();
      evaluation0.m_NoPriors = true;
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.priorEntropy();
      Evaluation.makeOptionString(costSensitiveClassifier0, true);
      evaluation2.areaUnderROC((-1));
      evaluation2.SFMeanSchemeEntropy();
      double double0 = evaluation2.unclassified();
      assertEquals(Double.NaN, evaluation2.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SGD sGD0 = new SGD();
      sGD0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("again");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.avgCost();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      J48 j48_0 = new J48();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.numTruePositives((-1630532294));
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation1.meanAbsoluteError();
      double double2 = evaluation1.kappa();
      assertEquals(1.0, double2, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.confusionMatrix();
      double double3 = evaluation1.weightedFMeasure();
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0, 1);
      costSensitiveClassifier0.setSeed(3036);
      instances0.compactify();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.numFalsePositives(1);
      assertEquals(0.0, double0, 0.01);
      
      OneR oneR0 = new OneR();
      double double1 = evaluation0.m_SumPriorSqrErr;
      double double2 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double2, 0.01);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      evaluation0.incorrect();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("himself");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "}}!m1.5vLP-BDex";
      testInstances0.setOptions(stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      testInstances0.generate("@relation");
      MockRandom mockRandom0 = new MockRandom((-4094));
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation.makeOptionString(additiveRegression0, false);
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives((-2));
      evaluation0.SFMeanPriorEntropy();
      evaluation0.m_Unclassified = 0.125;
      evaluation0.meanAbsoluteError();
      double double0 = evaluation0.numFalsePositives((-1));
      assertEquals(-0.0, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = new Instances(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      J48 j48_0 = new J48();
      try { 
        evaluation0.updateStatsForPredictor(1, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      instances0.removeAll(instances1);
      PlainText plainText0 = new PlainText();
      evaluation0.equals((Object) null);
      Instances instances2 = null;
      try {
        instances2 = new Instances(instances1, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters first and/or toCopy out of range
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("himself");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "}}!m1.5vLP-BDex";
      testInstances0.setOptions(stringArray0);
      Instances instances0 = testInstances0.generate("synopsis");
      instances0.delete();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      sMO0.getCapabilities();
      evaluation0.weightedAreaUnderPRC();
      double double0 = evaluation0.truePositiveRate(1);
      double double1 = evaluation0.unweightedMacroFmeasure();
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.priorEntropy();
      assertEquals(1.0, double2, 0.01);
      
      double double3 = evaluation0.numFalseNegatives(1);
      assertNotEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("himself");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".bsi";
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      IBk iBk0 = new IBk(564);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[4] = 1.5;
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 564;
      doubleArray0[7] = (double) 2;
      Instances instances1 = iBk0.pruneToK(instances0, doubleArray0, (-2333));
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.setDiscardPredictions(true);
      evaluation0.trueNegativeRate(493);
      DenseInstance denseInstance0 = new DenseInstance(2);
      denseInstance0.toString();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.makeDistribution(0.0);
      assertTrue(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".bsi");
      Instances instances1 = new Instances(instances0);
      J48 j48_0 = new J48();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      SparseInstance sparseInstance0 = new SparseInstance(19);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("f(<pDY6P:mi");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instance instance0 = instances0.remove(2);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Capabilities capabilities0 = principalComponents0.getCapabilities();
      capabilities0.test(instances0);
      TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("setUseCrossValidation");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        evaluation0.evaluateModelOnce((Classifier) costSensitiveClassifier0, instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      try { 
        evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, (Instances) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SGD sGD0 = new SGD();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setMultiInstance(true);
      testInstances1.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances0 = testInstances0.generate("our");
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Vote vote0 = new Vote();
      Evaluation.main(testInstances1.DEFAULT_WORDS);
      try { 
        evaluation0.toClassDetailsString(".bsi");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SGD sGD0 = new SGD();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setMultiInstance(true);
      testInstances1.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances0 = testInstances0.generate("our");
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Vote vote0 = new Vote();
      try { 
        evaluation0.crossValidateModel((Classifier) vote0, instances0, 1, (Random) mockRandom0, (Object[]) vote0.TAGS_RULES);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSchemeEntropy;
      double double1 = evaluation0.totalCost();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SGD sGD0 = new SGD();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setMultiInstance(true);
      testInstances1.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances1 = testInstances0.generate("our");
      LinkedList<NaiveBayes> linkedList0 = new LinkedList<NaiveBayes>();
      instances1.retainAll(linkedList0);
      instances0.delete();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances1);
      SMO sMO0 = new SMO();
      sMO0.getCapabilities();
      double double0 = evaluation0.m_SumSqrPredicted;
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SGD sGD0 = new SGD();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("split-percentage");
      Instances instances1 = new Instances(instances0);
      J48 j48_0 = new J48();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.trueNegativeRate(1);
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@data";
      Version.MINOR = (-1098);
      stringArray0[1] = "@relation";
      stringArray0[2] = ".arff";
      stringArray0[3] = "@data";
      stringArray0[4] = ".bsi";
      evaluation0.numTrueNegatives(1032);
      evaluation0.toSummaryString("1nHFB", true);
      evaluation0.areaUnderPRC(1032);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("SK~%,AG>>");
      testInstances0.setNumRelationalNominal(84);
      String[] stringArray0 = new String[2];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      stringArray0[0] = ".bsi";
      stringArray0[1] = "}}!m1.5vLP-BDex";
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.crossValidateModel((Classifier) multiScheme0, instances0, 12, (Random) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances1 = new Instances(instances0);
      Instances instances2 = new Instances(instances1);
      Evaluation evaluation0 = new Evaluation(instances2, (CostMatrix) null);
      evaluation0.matthewsCorrelationCoefficient(4890);
      evaluation0.getClassPriors();
      evaluation0.avgCost();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      XRFFLoader xRFFLoader1 = new XRFFLoader();
      try { 
        xRFFLoader1.getNextInstance(instances2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XRFFLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SGD sGD0 = new SGD();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MultiScheme multiScheme0 = new MultiScheme();
      multiScheme0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      testInstances0.setNumRelational(1);
      Character character0 = new Character(' ');
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertNotNull(doubleArray0);
      assertEquals(2, doubleArray0.length);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("himself");
      testInstances0.setNumRelationalNominal((-1132887188));
      Evaluation evaluation0 = new Evaluation(instances0);
      JRip jRip0 = new JRip();
      Capabilities capabilities0 = jRip0.getCapabilities();
      capabilities0.getClassCapabilities();
      capabilities0.disableAllAttributes();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.recall((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumSqrErr;
      double double1 = evaluation0.m_ConfLevel;
      evaluation0.unweightedMacroFmeasure();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Instances instances2 = new Instances(instances1);
      assertEquals(0, instances2.numClasses());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("himself");
      testInstances0.setNumRelationalNominal(84);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".arff";
      testInstances0.setOptions(stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "globalInfo");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`q*#C`Sk]1");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double double0 = evaluation0.numFalseNegatives(118);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 1473;
      DenseInstance denseInstance0 = new DenseInstance(1473);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = lMT0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      capabilities0.capabilities();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      evaluation0.getHeader();
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SMO sMO0 = new SMO();
      Kernel kernel0 = sMO0.getKernel();
      kernel0.getCapabilities();
      instances0.attributeStats(1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      double double0 = evaluation0.m_TotalCost;
      evaluation0.KBRelativeInformation();
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".bsi";
      stringArray0[1] = " \r\n\t.,;:'\"()?!";
      multiScheme0.setOptions(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumInstances((-1));
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DenseInstance denseInstance0 = new DenseInstance(35);
      textDirectoryLoader0.setCharSet("j8K;>");
      instances0.add((Instance) denseInstance0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate((-1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      DecisionStump decisionStump0 = new DecisionStump();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      J48 j48_0 = new J48();
      double double1 = evaluation0.m_TotalCost;
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SGD sGD0 = new SGD();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities0 = multiScheme0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities1 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.setNumRelationalNominal(3365);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Instances instances1 = new Instances(instances0, 0, (-1127281206));
      Evaluation evaluation0 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation0.falsePositiveRate(59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      RandomTree randomTree0 = new RandomTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation.makeOptionString(logitBoost0, false);
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Stacking stacking0 = new Stacking();
      boolean boolean0 = true;
      Evaluation.makeOptionString(stacking0, true);
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".xml");
      instances0.delete();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      try { 
        principalComponents0.transformedData(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("  F-Measure  MCC    ROC Area  PRC Area  Class\n");
      testInstances0.setNumRelationalNominal((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      SparseInstance sparseInstance0 = new SparseInstance(103);
      double double0 = evaluation0.numFalsePositives(103);
      assertEquals(0.0, double0, 0.01);
      
      OneR oneR0 = new OneR();
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      
      double double3 = evaluation0.numFalseNegatives(103);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Stacking stacking0 = new Stacking();
      String string0 = Evaluation.makeOptionString(stacking0, true);
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(string0);
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      String string1 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string1);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("SK~%,AG>>");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(2, charArray0, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Stacking stacking0 = new Stacking();
      String string0 = Evaluation.makeOptionString(stacking0, true);
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(string0);
      instances0.delete();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      String string1 = evaluation0.toSummaryString("@data", true);
      assertEquals("@data\nTotal Number of Instances                0     \n", string1);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (-3045.55308014651);
      doubleArray0[4] = (-2636.23712);
      doubleArray0[5] = (-3653.5);
      doubleArray0[6] = (-2717.6138914);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances1 = new Instances(instances0);
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      Vote vote0 = new Vote();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNumeric(1);
      Double double0 = new Double(1089.9);
      double double1 = evaluation0.m_SumPriorAbsErr;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (-1.7976931348623157E308);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) 3;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("himself");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "}}!m1.5vLP-BDex";
      testInstances0.setOptions(stringArray0);
      DenseInstance denseInstance0 = new DenseInstance(5);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      Version.MINOR = (-2022042151);
      int int0 = (-1);
      try { 
        evaluation0.evaluationForSingleInstance((double[]) null, denseInstance0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".bsi";
      evaluation0.addNumericTrainClass(794.93789354, 15.0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'v';
      evaluation0.num2ShortID(19, charArray0, 19);
      Instances instances1 = new Instances(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'v';
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'v';
      intArray0[1] = (int) 'v';
      intArray0[2] = (int) 'v';
      gaussianProcesses0.getFilterType();
      intArray0[3] = (int) 'v';
      intArray0[4] = 1;
      DenseInstance denseInstance0 = new DenseInstance(1318);
      DenseInstance denseInstance1 = null;
      try {
        denseInstance1 = new DenseInstance((-26));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SGD sGD0 = new SGD();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.delete();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.addNumericTrainClass(0, (-1478.661897292337));
      KDTree kDTree0 = new KDTree();
      try { 
        kDTree0.nearestNeighbour((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.KDTree", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setMultiInstance(true);
      testInstances1.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances1 = testInstances0.generate("our");
      simpleLinearRegression0.listOptions();
      LinkedList<NaiveBayes> linkedList0 = new LinkedList<NaiveBayes>();
      instances1.retainAll(linkedList0);
      instances0.delete();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances1);
      SMO sMO0 = new SMO();
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.areaUnderPRC((-1336));
      evaluation0.addNumericTrainClass((-1), 0.25);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("SK~%,AG>>");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet(".arff");
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMOreg sMOreg0 = new SMOreg();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      sMOreg0.getFilterType();
      OneR oneR0 = new OneR();
      evaluation0.SFMeanEntropyGain();
      evaluation0.addNumericTrainClass((-1), 0.17499999701976776);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.delete();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Vote vote0 = new Vote();
      String string0 = evaluation0.toSummaryString(".bsi", false);
      assertEquals(".bsi\nTotal Number of Instances                0     \n", string0);
      
      MockRandom mockRandom2 = new MockRandom();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".arff";
      stringArray0[1] = "@data";
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      evaluation0.fMeasure(2);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedData(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      Vote vote0 = new Vote();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.deleteStringAttributes();
      PlainText plainText0 = new PlainText();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.recall(369);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1915598789726438
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      capabilities0.disableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".bsi");
      Instances instances1 = new Instances(instances0);
      J48 j48_0 = new J48();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      SparseInstance sparseInstance0 = new SparseInstance(19);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toClassDetailsString("@data");
      assertEquals("@data\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\n                 0        0        0          0       0          0     ?         ?         class3\n                 0        0        0          0       0          0     ?         ?         class4\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation.handleCostOption("", (-3147));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      textDirectoryLoader0.setRetrieval((-2));
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = null;
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      instances0.delete();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("himself");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "SK~%,AG>>";
      stringArray0[1] = "c";
      testInstances0.setOptions(stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SK~%,AG>>");
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 116;
      int[] intArray0 = new int[3];
      intArray0[0] = (-801);
      intArray0[1] = (-801);
      intArray0[2] = 116;
      DecisionStump decisionStump0 = new DecisionStump();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, "-inf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      testInstances0.setNumRelational(2);
      Character character0 = new Character(' ');
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, "_");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "setClassifiers";
      stringArray0[1] = "setClassifiers";
      stringArray0[2] = "setClassifiers";
      stringArray0[3] = "setClassifiers";
      stringArray0[4] = "setClassifiers";
      stringArray0[5] = "setClassifiers";
      stringArray0[6] = "setClassifiers";
      try { 
        Evaluation.evaluateModel("setClassifiers", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name setClassifiers.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      testInstances1.setNumRelationalNominal(25);
      sGDText0.setLearningRate((-4.0));
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(8, false, true);
      Capabilities capabilities1 = simpleLogistic0.getCapabilities();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      capabilities0.disableAllAttributes();
      LinearRegression linearRegression0 = new LinearRegression();
      LinearRegression linearRegression1 = new LinearRegression();
      linearRegression1.getCapabilities();
      capabilities1.getOtherCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.priorEntropy();
      assertEquals(0.9023932827949789, double2, 0.01);
      
      Evaluation.makeOptionString(linearRegression0, false);
      evaluation0.addNumericTrainClass((-2.0), (-2));
      double double3 = evaluation0.weightedFalsePositiveRate();
      double double4 = evaluation0.pctUnclassified();
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SGD sGD0 = new SGD();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = naiveBayesMultinomialUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "}}!m1.5vLP-BDex";
      stringArray0[1] = "@relation";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = " ";
      stringArray0[4] = " ";
      stringArray0[5] = "weka/core/Capabilities.props";
      stringArray0[6] = "weka/core/Capabilities.props";
      stringArray0[7] = "weka/core/Capabilities.props";
      testInstances0.setOptions(stringArray0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      MockRandom mockRandom0 = new MockRandom();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(1);
      Evaluation.main(stringArray0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      gainRatioAttributeEval0.getCapabilities();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Instances instances1 = new Instances(instances0);
      J48 j48_0 = new J48();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      SparseInstance sparseInstance0 = new SparseInstance(1463);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      capabilities0.disableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".bsi");
      Instances instances1 = new Instances(instances0);
      J48 j48_0 = new J48();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      SparseInstance sparseInstance0 = new SparseInstance(19);
      evaluation0.truePositiveRate(0);
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.SFEntropyGain();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getNextInstance(instances1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XRFFLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.updateNumericScores((double[]) null, (double[]) null, 2);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, 2);
      evaluation0.toSummaryString(false);
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("himself");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setOptions(testInstances0.DEFAULT_WORDS);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate(1);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedData(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      DenseInstance denseInstance0 = new DenseInstance(1);
      denseInstance0.toString();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) costSensitiveClassifier0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("-$FAG9&?Q|%Dm~");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      Vote vote0 = new Vote();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.SFMeanEntropyGain();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      capabilities0.disableAll();
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (-1369.37461989);
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 6;
      DenseInstance denseInstance0 = new DenseInstance((-4.57826535), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) vote0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      textDirectoryLoader0.getStructure();
      Instances instances2 = new Instances(instances1, 7);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) null, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      Vote vote0 = new Vote();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNumeric(1);
      double double0 = evaluation0.m_SumPriorAbsErr;
      evaluation0.meanPriorAbsoluteError();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      textDirectoryLoader0.getDataSet();
      evaluation0.setDiscardPredictions(false);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("himself");
      RandomTree randomTree0 = new RandomTree();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-7));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("himself");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setOptions(testInstances0.DEFAULT_WORDS);
      costSensitiveClassifier0.distributionForInstance((Instance) null);
      costSensitiveClassifier0.getCostMatrix();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      LMT lMT0 = new LMT();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, (Instance) null, 1637.484157057791);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("`=~vn,7]'wASX+'O");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      double double0 = evaluation0.m_SumPriorSqrErr;
      String string0 = evaluation0.toMatrixString("@relation");
      assertEquals("@relation\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.delete();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      evaluation0.toMatrixString();
      double double1 = evaluation0.errorRate();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("`=~vn,7]'wASX+'O");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances1 = new Instances(instances0);
      textDirectoryLoader0.getStructure();
      Instances instances2 = new Instances(instances1, 331);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.delete();
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("No training file and no object input file given.");
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance((-2), doubleArray0);
      denseInstance0.toString();
      evaluation0.areaUnderROC((-1));
      String string0 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-2));
      evaluation0.SFPriorEntropy();
      testInstances0.generate(".arff");
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      SGD sGD0 = new SGD();
      Capabilities capabilities0 = sGD0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      evaluation0.numTrueNegatives((-1));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", naiveBayesMultinomialText0.globalInfo());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("cxBp3 l3l4|rMRJr");
      Evaluation evaluation0 = new Evaluation(instances0);
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-2));
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      capabilities0.getOtherCapabilities();
      evaluation0.numTrueNegatives(1);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        Evaluation.handleCostOption("weka/core/Capabilities.props", 77);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("  F-Measure  MCC    ROC Area  PRC Area  Class\n");
      testInstances0.setNumRelationalNominal((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient(2147);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@data";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@relation";
      stringArray0[3] = ".bsi";
      String[] stringArray1 = null;
      evaluation0.m_NumClasses = 3448;
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      // Undeclared exception!
      try { 
        evaluation0.numFalseNegatives(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("himself");
      testInstances0.setNumRelationalNominal(84);
      testInstances0.setOptions(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double double0 = evaluation0.numFalseNegatives(84);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumKBInfo;
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.confusionMatrix();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SGD sGD0 = new SGD();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MultiScheme multiScheme0 = new MultiScheme();
      multiScheme0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ConfLevel;
      assertEquals(0.95, double0, 0.01);
      
      double double1 = evaluation0.precision(1);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.numTrueNegatives((-445));
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.numTruePositives(0);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("  F-Measure  MCC    ROC Area  PRC Area  Class\n");
      testInstances0.setNumRelationalNominal((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'j';
      charArray0[2] = 'K';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2), charArray0, 497);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SGD sGD0 = new SGD();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("Cannot print distribution without '-p' option!");
      instances0.delete();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      capabilities0.getOtherCapabilities();
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderPRC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("`=~vn,7]'wASX+'O");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC((-1));
      boolean boolean0 = true;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      // Undeclared exception!
      try { 
        instances0.add((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_TotalCost = (-67.8090370282675);
      char char0 = 'm';
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      evaluation0.num2ShortID(15, charArray0, 15);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      // Undeclared exception!
      try { 
        testInstances0.setNumRelational((-597));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("f(<pDY6P:mi");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTruePositives((-2));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("again");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      Vote vote0 = new Vote();
      MockRandom mockRandom0 = new MockRandom();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.setPriors(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("  F-Measure  MCC    ROC Area  PRC Area  Class\n");
      testInstances0.setNumRelationalNominal((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision(1023);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1023
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("himself");
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.setPriors(instances0);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Object object0 = new Object();
      try { 
        evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".bsi");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setOptions(testInstances0.DEFAULT_WORDS);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate((-1));
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      // Undeclared exception!
      try { 
        Instances.mergeInstances(instances0, instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '.bsiNominal1' '.bsiClass' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("3$O'");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-443));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Vote vote0 = new Vote();
      Vote vote1 = new Vote();
      MockRandom mockRandom0 = new MockRandom();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.unclassified();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation.makeOptionString((Classifier) null, true);
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Vote vote0 = new Vote();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNumeric(1);
      Double double0 = new Double(1089.9);
      double double1 = evaluation0.m_SumPriorAbsErr;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1089.9;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = 0.0;
      doubleArray0[6] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      instances0.add((Instance) denseInstance0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      simpleLinearRegression0.setSuppressErrorMessage(true);
      try { 
        evaluation0.setPriors(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("himself");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-219252797), (char[]) null, 55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SGD sGD0 = new SGD();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.num2ShortID(0, (char[]) null, 0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = costSensitiveClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      // Undeclared exception!
      try { 
        testInstances0.setNumRelational((-1931));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@data";
      Evaluation.handleCostOption((String) null, 37);
      stringArray0[1] = "@relation";
      stringArray0[2] = ".arff";
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      String string0 = evaluation0.num2ShortID((-1156), charArray0, 37);
      assertEquals("                                    i", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      PlainText plainText0 = new PlainText();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.equals(evaluation0);
      Instances instances1 = new Instances(instances0);
      assertEquals(1, instances1.classIndex());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      PlainText plainText0 = new PlainText();
      boolean boolean0 = evaluation0.equals(instances0);
      assertFalse(boolean0);
      
      Instances instances1 = new Instances(instances0);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances1 = new Instances(instances0, 1);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.numFalsePositives(1);
      assertEquals(0.0, double0, 0.01);
      
      OneR oneR0 = new OneR();
      double double1 = Evaluation.MIN_SF_PROB;
      double double2 = evaluation0.m_SumClassPredicted;
      double double3 = evaluation0.KBMeanInformation();
      evaluation0.areaUnderROC(12);
      double double4 = evaluation0.weightedRecall();
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SGD sGD0 = new SGD();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".arff";
      stringArray0[1] = "@relation";
      multiScheme0.setOptions(stringArray0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.pctUnclassified();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("himself");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".bsi";
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      gainRatioAttributeEval0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numTruePositives(1452);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-1));
      int int0 = 357913932;
      costSensitiveClassifier0.setSeed(357913932);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MultiScheme multiScheme0 = new MultiScheme();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".bsi";
      String[] stringArray1 = new String[1];
      stringArray1[0] = ".arff";
      multiScheme0.setOptions(stringArray1);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumInstances(58);
      instances0.delete();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Instances instances1 = new Instances(instances0);
      MockRandom mockRandom2 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, 134.98257676226012);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("himsef");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "}}!m1.5vLP-BDex";
      testInstances0.setOptions(stringArray0);
      Instances instances1 = testInstances0.generate("synopsis");
      instances1.delete();
      instances1.equalHeaders(instances0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances1);
      SMO sMO0 = new SMO();
      sMO0.getCapabilities();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) instances1;
      objectArray0[1] = (Object) sMO0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) instances1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Jd n");
      testInstances0.setNumRelationalNominal(84);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      capabilities0.disableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".bsi");
      LinkedList<DenseInstance> linkedList0 = new LinkedList<DenseInstance>();
      instances0.addAll((Collection<? extends Instance>) linkedList0);
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.priorEntropy();
      MockRandom mockRandom0 = new MockRandom();
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        CostMatrix.parseMatlab("-_<k8{%1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1156), (char[]) null, (-197112209));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(1, (char[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SGD sGD0 = new SGD();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      MultiScheme multiScheme1 = new MultiScheme();
      String[] stringArray0 = new String[1];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Stack<String> stack0 = new Stack<String>();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1;
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      try { 
        evaluation1.crossValidateModel((Classifier) inputMappedClassifier0, instances0, (-966), (Random) null, (Object[]) stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("again");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      Vote vote0 = new Vote();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel("d*PN1:VQG0=3}ff2;AM", instances0, 2999, testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: d*PN1:VQG0=3}ff2;AM
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("himself");
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".bsi";
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 5;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 825, 679.69549);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 825
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 16, (-339.0974568746732));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numInstances();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.delete();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      // Undeclared exception!
      try { 
        evaluation0.precision((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SGD sGD0 = new SGD();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      MultiScheme multiScheme1 = new MultiScheme();
      String[] stringArray0 = new String[1];
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Stack<String> stack0 = new Stack<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) stack0);
      Attribute attribute0 = new Attribute("P9~", list0);
      instances0.setClass(attribute0);
      stringArray0[0] = "@data";
      multiScheme1.setOptions(stringArray0);
      try { 
        evaluation0.crossValidateModel((Classifier) multiScheme1, instances0, 284, (Random) null, (Object[]) sGD0.TAGS_SELECTION);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.useNoPriors();
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.errorRate();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.correct();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedData(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.handleCostOption(" ", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("f(<pDY6P:mi");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      SMO sMO0 = new SMO();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) sMO0, instances0, 583, (Random) mockRandom0, (Object[]) sMO0.TAGS_FILTER);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Stacking stacking0 = new Stacking();
      String string0 = Evaluation.getGlobalInfo(stacking0);
      assertEquals("\nSynopsis for weka.classifiers.meta.Stacking:\n\nCombines several classifiers using the stacking method. Can do classification or regression.\n\nFor more information, see\n\nDavid H. Wolpert (1992). Stacked generalization. Neural Networks. 5:241-259.", string0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        Evaluation.evaluateModel((Classifier) naiveBayesMultinomialText0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.bayes.NaiveBayesMultinomialText:
         // 
         // -W
         // \tUse word frequencies instead of binary bag of words.
         // -P <# instances>
         // \tHow often to prune the dictionary of low frequency words (default = 0, i.e. don't prune)
         // -M <double>
         // \tMinimum word frequency. Words with less than this frequence are ignored.
         // \tIf periodic pruning is turned on then this is also used to determine which
         // \twords to remove from the dictionary (default = 3).
         // -normalize
         // \tNormalize document length (use in conjunction with -norm and -lnorm)
         // -norm <num>
         // \tSpecify the norm that each instance must have (default 1.0)
         // -lnorm <num>
         // \tSpecify L-norm to use (default 2.0)
         // -lowercase
         // \tConvert all tokens to lowercase before adding to the dictionary.
         // -stoplist
         // \tIgnore words that are in the stoplist.
         // -stopwords <file>
         // \tA file containing stopwords to override the default ones.
         // \tUsing this option automatically sets the flag ('-stoplist') to use the
         // \tstoplist if the file exists.
         // \tFormat: one stopword per line, lines starting with '#'
         // \tare interpreted as comments and ignored.
         // -tokenizer <spec>
         // \tThe tokenizing algorihtm (classname plus parameters) to use.
         // \t(default: weka.core.tokenizers.WordTokenizer)
         // -stemmer <spec>
         // \tThe stemmering algorihtm (classname plus parameters) to use.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      String string0 = Evaluation.makeOptionString(costSensitiveClassifier0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String string0 = Evaluation.makeOptionString((Classifier) null, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      String[] stringArray0 = new String[2];
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        Evaluation.evaluateModel((Classifier) naiveBayesMultinomialText0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("co", arrayList0, 11);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
