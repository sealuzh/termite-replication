/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 16:22:23 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("islistIterator", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.49122807017543857
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Float float0 = new Float((-850.1530078520816));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.put("gettoUnsignedLong", false);
      assertEquals(9, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("getjoin", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("'");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      Float float0 = new Float(2682.486F);
      JSONObject jSONObject1 = jSONObject0.put("re", (Object) float0);
      double double0 = jSONObject1.optDouble("re");
      assertEquals(2682.486083984375, double0, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{x/6k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {x/6k
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.optInt("N]4D_,WhR`C5}]", 12);
      Writer writer0 = jSONObject0.write(stringWriter0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("N]4D_,WhR`C5}]", (Collection) linkedList0);
      Writer writer1 = jSONObject0.write(writer0);
      assertSame(writer0, writer1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8764904395512632
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject jSONObject1 = jSONObject0.put("", (-1L));
      jSONObject1.toString((-108916119), (-108916119));
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 592;
      Float float0 = new Float(Double.NaN);
      try { 
        jSONArray0.put((-851), (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      String string1 = jSONObject0.optString("xtFy");
      assertEquals("", string1);
      
      double double0 = jSONObject0.optDouble("B5\"b3");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6385904275495748
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject.getNames((Object) "~.o b|wNyVY");
      JSONObject jSONObject0 = new JSONObject((Object) "~.o b|wNyVY");
      Byte byte0 = new Byte((byte)27);
      jSONObject0.put("~.o b|wNyVY", (Object) byte0);
      jSONObject0.optInt("~.o b|wNyVY");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.182508882687605
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", (-8L));
      jSONObject1.getDouble("Unterminated string");
      JSONObject jSONObject2 = new JSONObject((Object) "Unterminated string");
      Double double0 = new Double(0.0);
      jSONObject1.accumulate("Unterminated string", double0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8760902794872374
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Float float0 = new Float((-850.1530078520816));
      JSONObject.doubleToString((-850.1530078520816));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.accumulate("-850.1530078520816", "-850.1530078520816");
      jSONObject0.optInt("-850.1530078520816");
      jSONObject0.names();
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("dxSj1orH", (-8L));
      JSONObject.doubleToString((-8L));
      jSONObject1.optDouble("dxSj1orH");
      double double0 = jSONObject1.optDouble("X.c3");
      assertEquals(2, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("\"", "\"");
      jSONObject0.keys();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("\"", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("\"");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      jSONObject0.put("{}", 1.0);
      long long0 = jSONObject0.getLong("{}");
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = (-397);
      JSONObject jSONObject1 = jSONObject0.put("get", (-397));
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      Object object0 = hashMap0.clone();
      jSONObject1.put("rev", (Map) hashMap0);
      JSONObject.getNames(object0);
      jSONObject1.getLong("get");
      try { 
        jSONObject0.getJSONArray("isreverseBytes");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isreverseBytes\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.2815553875954016
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("dxSj1orH", (-8L));
      jSONObject0.toString((-108916119), (-108916119));
      JSONObject.doubleToString((-8L));
      jSONObject0.optLong("dxSj1orH");
      jSONObject1.keys();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("'45Ej~0;ZF.*C+>=$", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("'45Ej~0;ZF.*C+>=$");
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("toU", (Object) null);
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getrotateRight", 0L);
      double double0 = jSONObject1.getDouble("getrotateRight");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("o@lRw)6K'3", 2020L);
      double double0 = jSONObject1.getDouble("o@lRw)6K'3");
      assertEquals(2020.0, double0, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.keys();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = jSONObject0.put("toU", (-2355));
      jSONObject1.getInt("toU");
      jSONObject1.accumulate("=H|mY@Prr~S!%*wJ*s;", jSONObject0);
      try { 
        jSONObject0.getBoolean(",Mv'kfV=p_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",Mv'kfV=p_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONArray0.write(stringWriter0);
      jSONObject0.write(writer0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Byte byte0 = new Byte((byte)32);
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONArray, JSONObject> hashMap1 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(hashMap0, 50, 34);
      jSONObject0.toString((int) (byte)32, (int) (byte)32);
      Double double0 = new Double(0.0);
      Double.max((-3054.0694493522346), 1787.9989654370474);
      jSONObject0.accumulate("{}", double0);
      JSONObject.quote("{}");
      jSONObject0.optDouble("{}");
      JSONObject.getNames((Object) byte0);
      jSONObject0.opt("{}");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Unterminatd string", (-8L));
      JSONObject.getNames((Object) null);
      double double0 = jSONObject0.optDouble("Unterminatd string", (-1691.410567505));
      assertEquals((-8.0), double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString((-108916119), 3327);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("' and instead saw '", jSONArray1);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.optString("Dx>9Qp0zuUi+O6f-", "");
      jSONObject0.keys();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Expected a ',' or ']'";
      stringArray0[1] = "^Y~VsZ#@";
      stringArray0[2] = "";
      stringArray0[3] = "] is not a JSONObject.";
      stringArray0[4] = "Q%<dH`FZ9-F\"@D)";
      stringArray0[5] = "jXC'";
      stringArray0[6] = "null";
      JSONObject jSONObject1 = new JSONObject(object0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote(" 0wV</v?{d");
      JSONObject.quote("{");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("l=)O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of l=)O
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Byte, Double> hashMap1 = new HashMap<Byte, Double>();
      String string0 = JSONObject.valueToString(hashMap1, 1103, (-3867));
      String string1 = JSONObject.valueToString("1S+8;y|#48/");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Double double0 = new Double((-44786037));
      String string0 = JSONObject.doubleToString((-44786037));
      assertEquals("-4.4786037E7", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Double double0 = new Double(1.0);
      Object object0 = JSONObject.NULL;
      hashMap0.put(double0, object0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject.doubleToString((-1138.260292857011));
      JSONObject jSONObject0 = new JSONObject((Object) "-1138.260292857011");
      // Undeclared exception!
      jSONObject0.toString(1926);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(linkedList0, 276, 276);
      assertEquals("[]", string0);
      
      String string1 = JSONObject.doubleToString(276);
      assertEquals("276", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Boolean.logicalAnd(true, true);
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(402L);
      jSONObject0.put("wM?L", (Object) long0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.optLong("wM?L");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.getJSONObject("wM?L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wM?L\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] not found.";
      jSONObject0.put("] not found.", 567);
      jSONObject0.optLong("] not found.", (-1058L));
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("(z", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0218020909681602
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Float float0 = new Float((double) 0);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "K/kp(RcA=";
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object1, stringArray0);
      jSONObject0.optInt("K/kp(RcA=", 0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("] not found.");
      JSONObject.quote("K/kp(RcA=");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("\"K/kp(RcA=\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"K/kp(RcA=\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Boolean.valueOf(false);
      Boolean.logicalXor(false, true);
      Boolean.logicalAnd(true, false);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("1WyvlpUv];g<$T4", (Object) jSONArray0);
      jSONObject1.accumulate("1WyvlpUv];g<$T4", jSONObject0);
      assertEquals(1, jSONArray0.length());
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray1 = jSONObject0.getJSONArray("1WyvlpUv];g<$T4");
      assertSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0F);
      jSONObject0.putOpt("get", float0);
      boolean boolean0 = new Boolean("get");
      Float float1 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.accumulate("get", float1);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)95);
      JSONObject jSONObject1 = jSONObject0.putOpt("isremainderUnsigned", byte0);
      jSONObject1.get("isremainderUnsigned");
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{~R!L9}77=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {~R!L9}77=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertNull(jSONArray2);
      
      JSONObject jSONObject1 = new JSONObject(jSONArray1);
      assertEquals(1, jSONObject1.length());
      
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.doubleToString(1523.4);
      Double double0 = new Double(1523.4);
      JSONObject jSONObject1 = jSONObject0.put("1523.4", 0L);
      jSONObject1.isNull("1523.4");
      jSONObject0.has("1523.4");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("1523.4");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("VO@bas7YrArcxMCdvR", linkedList0);
      try { 
        jSONObject0.getBoolean("VO@bas7YrArcxMCdvR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"VO@bas7YrArcxMCdvR\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5875011775569985
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.append("J'pJC_tA{\u0007gAsM", (Object) null);
      jSONObject0.optLong("Xh");
      jSONObject0.optString("J'pJC_tA{\u0007gAsM", "bgki?jpF{=!A*9)5MU");
      Float float0 = new Float(0.0F);
      JSONObject.valueToString(float0, 1034, 1034);
      jSONObject1.optString("wheel.json.JSONArray@0000000004", (String) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "~'/#9 =uW\"");
      Double double0 = new Double((-3287.989));
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.put("~'/#9 =uW\"", false);
      try { 
        jSONObject0.getInt("~'/#9 =uW\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~'/#9 =uW\\\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Q^", (Object) "Q^");
      try { 
        jSONObject0.getBoolean("Q^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Q^\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("yS5H");
      jSONObject0.putOpt("ishashCode", boolean0);
      boolean boolean1 = jSONObject0.getBoolean("ishashCode");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = JSONObject.quote("/6GK%");
      assertEquals("\"/6GK%\"", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("#32q]VSlhN)7F", "#32q]VSlhN)7F");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) jSONObject0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.put("toL", 0.0);
      int int0 = jSONObject0.getInt("toL");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(2553L);
      Long.divideUnsigned(0L, 1816L);
      JSONObject jSONObject1 = jSONObject0.putOpt("JSONArray initial value should be a string or collection or array.", long0);
      jSONObject1.getInt("JSONArray initial value should be a string or collection or array.");
      boolean boolean0 = new Boolean("JSONArray initial value should be a string or collection or array.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("ppax", (-4177984));
      try { 
        jSONObject0.get(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Boolean boolean0 = new Boolean("yS5H");
      jSONObject0.putOpt("yS5H", boolean0);
      jSONObject0.getBoolean("yS5H");
      String string0 = jSONObject0.optString("yS5H");
      assertNotNull(string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("oHTMg-`N\"gN", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "] is not a JSONObject.";
      JSONObject jSONObject1 = jSONObject0.append("] is not a JSONObject.", "] is not a JSONObject.");
      try { 
        jSONObject1.getLong("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer integer0 = Integer.valueOf(0);
      Float float0 = new Float((double) 0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(integer0, 108, 97);
      String string0 = jSONObject0.optString("Dgk:", "dou");
      assertEquals("dou", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Double double0 = Double.valueOf((-2681.870534345));
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.putOpt("ha", "ha");
      jSONObject1.getString("ha");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("ha");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean boolean1 = new Boolean(true);
      Boolean.logicalAnd(true, false);
      JSONObject.getNames((Object) boolean0);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Boolean.logicalXor(true, true);
      Boolean.logicalXor(true, true);
      jSONObject0.optDouble("8:mO*t<ak\"", 0.0);
      Object object0 = jSONObject0.opt("?&r\r6JhqfY>[");
      assertNull(object0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("^M", (Object) null);
      try { 
        jSONObject1.getJSONObject("^M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^M\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Long, Byte> hashMap0 = new HashMap<Long, Byte>();
      Long long0 = new Long(202L);
      Byte byte0 = new Byte((byte)24);
      hashMap0.put(long0, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject jSONObject1 = jSONObject0.put(": ", (Object) null);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", 2219.01597239232);
      assertEquals(2219.01597239232, double0, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      String string0 = "ishashCode";
      JSONObject jSONObject1 = jSONObject0.putOpt("ishashCode", "ishashCode");
      jSONObject1.remove("ishashCode");
      try { 
        jSONObject1.getBoolean("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ishashCode\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("^M", (Object) "^M");
      try { 
        jSONObject0.getJSONObject("^M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^M\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString(32, 32);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-1194), (-1194));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      linkedList0.removeFirstOccurrence((Object) null);
      linkedList0.spliterator();
      // Undeclared exception!
      jSONObject0.toString(61, 8448);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }a
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      hashMap0.put((String) null, (JSONArray) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("dxSj1orH", 0L);
      boolean boolean0 = jSONObject0.isNull("dxSj1orH");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 2020L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("|~vv");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Integer integer0 = new Integer(81);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.toString(1172, 1172);
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{VzMWu:P.y[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 11 of {VzMWu:P.y[
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {<
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 2 of {#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalXor(false, true);
      Boolean.logicalAnd(true, false);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wM?L", (Object) boolean0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      try { 
        jSONObject0.getJSONArray("wM?L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wM?L\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("' and instead saw '", false);
      StringWriter stringWriter0 = new StringWriter();
      Float float0 = new Float(Double.NaN);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.154327141142871
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = JSONObject.doubleToString(4090.81);
      assertEquals("4090.81", string0);
      
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("4090.81");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long.getLong("has");
      hashMap0.put((Long) null, (Long) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-3301), (-3301));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = new Boolean("3KS7$=+c.$X");
      hashMap0.put("H{$y", boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.quote("f_J");
      jSONObject0.keys();
      String string1 = jSONObject0.toString((-954), (-4244));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("istoJSONObject", (-1039), (-1039));
      JSONObject.doubleToString(0.0);
      JSONObject.quote("toJ");
      boolean boolean0 = jSONObject0.has("0");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      jSONObject0.accumulate("4090.810", stringWriter0);
      try { 
        jSONObject0.append("4090.810", stringWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[4090.810] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("istoJSONObject", (-1039), (-1039));
      jSONObject0.optLong("9)", (long) 854);
      Integer integer0 = new Integer(1508);
      jSONObject0.append("\"java.lang.String@0000000002\"", integer0);
      JSONObject jSONObject1 = jSONObject0.append("\"java.lang.String@0000000002\"", "9)");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalXor(false, false);
      Boolean.logicalAnd(true, false);
      JSONObject.getNames((Object) boolean0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a number.";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", object0);
      Integer integer0 = new Integer((-1201));
      Integer.compareUnsigned((-1201), 61);
      try { 
        jSONObject1.append("] is not a number.", integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a number.] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("'", true);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      linkedList0.stream();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>(linkedList1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList2);
      HashMap<Float, Integer> hashMap1 = new HashMap<Float, Integer>();
      String string0 = JSONObject.valueToString(hashMap1);
      String string1 = jSONObject0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      Byte byte0 = new Byte((byte) (-67));
      hashMap0.put(byte0, (Boolean) null);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      hashMap0.put((JSONArray) null, (JSONObject) null);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("h'U$4J~4N()0");
      assertEquals("", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("wM?L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wM?L\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("tJ[$p)Q2(o@5bG", (Map) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Byte, Double> hashMap1 = new HashMap<Byte, Double>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.valueToString(jSONObject0, 47, (-771));
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "{}", 123, 123);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0935773141956315
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0";
      stringArray0[1] = "0";
      stringArray0[2] = "0";
      stringArray0[3] = "0";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) "o@lRw)S4M*K'(");
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("+(`C/k!3s=-QQvs", (-176.54));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalXor(false, false);
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      
      Object object0 = JSONObject.NULL;
      Long long0 = new Long((-1256L));
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("J`in\"g >`");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("J`in\"g >`", 0L);
      jSONObject0.putOpt("J`in\"g >`", jSONTokener0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 8192, 1274);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("5gkS<giK~C3?~I?qAu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 5gkS<giK~C3?~I?qAu
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Float float0 = new Float((-538.41950423372));
      Float.isFinite(81.03821F);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put("+'2V#*MnR8%P1", (Object) "+'2V#*MnR8%P1");
      try { 
        jSONObject0.getDouble("+'2V#*MnR8%P1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+'2V#*MnR8%P1\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean.valueOf(false);
      Boolean.logicalXor(false, true);
      Boolean.logicalAnd(true, false);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put("1WyvlpUv];g<$T4", (Object) jSONArray0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray1 = jSONObject0.getJSONArray("1WyvlpUv];g<$T4");
      assertEquals(0, jSONArray1.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("~|~y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~|~y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      try { 
        jSONObject0.append((String) null, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Float float0 = new Float(1.0);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      Byte byte0 = new Byte((byte)60);
      hashMap0.put(byte0, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("i ", (-1033L));
      assertEquals((-1033L), long0);
      
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("\"", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Boolean boolean0 = Boolean.valueOf(true);
      String string0 = JSONObject.valueToString(boolean0, 2470, 47);
      assertNotNull(string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "ha");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(0.0);
      hashMap0.putIfAbsent(jSONArray0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer.getInteger(")s6iieM3!8NB+");
      Double double0 = new Double(0.0);
      hashMap0.put((Integer) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Short, JSONObject> hashMap0 = new HashMap<Short, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(67, 67);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.0087704997952445
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject.quote("~'/#9 = W\"");
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("~'/#9 = W\"", (Object) "~'/#9 = W\"");
      Integer integer0 = new Integer((-1599));
      hashMap0.replace(integer0, "~'/#9 = W\"", "getnotify");
      jSONObject1.toString(3);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 553, 553);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string0 = "G";
      jSONObject0.optInt("Dg9", 102);
      try { 
        Long.decode("Expected a ',' or '}'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Expected a ',' or '}'\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = jSONObject0.optInt("Bad value from toJSONString: ");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.remove("getjoin");
      assertNull(object0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", 39);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(431);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      hashMap0.compute(integer0, biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = JSONObject.quote("~'r%XSi-ymFr8_.");
      assertEquals("\"~'r%XSi-ymFr8_.\"", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("is", (-1120.475837));
      assertEquals((-1120.475837), double0, 0.01);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("(~\"$");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Short short0 = new Short((short)106);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Long long0 = new Long((-2159L));
      Double double0 = new Double(1878L);
      Double.sum(2992.35142, (-2732.047300961382));
      JSONObject.valueToString((Object) null, 734, (-1697));
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("null", false);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("getnotify");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getnotify
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 000
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Long long0 = new Long((-1L));
      String string0 = JSONObject.valueToString(long0, (-1905), (-1905));
      assertNotNull(string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0, 3317, (-2907));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("Bag\"c@");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Double double0 = new Double(532.138663);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("wM?L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wM?L\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, (-1120.475837));
      assertEquals((-1120.475837), double0, 0.01);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject.testValidity(";{ ");
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("'45Ej~0;ZF.*C+>=$");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("-)vy(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-)vy(\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
