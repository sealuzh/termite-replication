/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 15:57:01 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.math.BigInteger;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FromBaseTable;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.Table;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[20];
      String string0 = SQLUtil.join("pOLe[", "pOLe[", stringArray0, "pOLe[", "pOLe[", stringArray0);
      assertEquals("pOLe[ join pOLe[ as pOLe[ on pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null and pOLe[.null = pOLe[.null", string0);
      
      String string1 = SQLUtil.normalize("3(K1ZF}pfP*/l%5~>n7", true);
      assertEquals("3 (K1ZF } pfP */ l % 5 ~ > n7", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(")(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: )(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLUtil.isDDL("");
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBSchema dBSchema0 = new DBSchema("into");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "WB1lT1bfz[2cbH}p1", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      dBUniqueConstraint0.isIdentical(dBUniqueIndex0);
      DBDataType dBDataType0 = DBDataType.getInstance((-187), "into");
      dBUniqueIndex0.isIdentical(dBSchema0);
      Integer integer0 = new Integer((-187));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", dBTable0, dBDataType0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("new Map() /* ");
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("getLastIndexKeyResultSet");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insts", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insts", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      DBColumn dBColumn0 = defaultDBTable0.getColumn("insts");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "insts BLOB NULL";
      stringArray0[1] = "pd1fT]";
      stringArray0[2] = "insts BLOB NULL";
      stringArray0[3] = "BLOB";
      stringArray0[4] = "BLOB";
      stringArray0[5] = "insts BLOB NULL";
      stringArray0[6] = "7$3^C`\"=KPuU=E\"kts9";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("BLOB", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("1Q5r4FmI>I");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append(false);
      StringBuilder stringBuilder3 = stringBuilder2.append('>');
      StringBuffer stringBuffer0 = new StringBuffer("7$3^C`\"=KPuU=E\"kts9");
      StringBuilder stringBuilder4 = stringBuilder3.append(stringBuffer0);
      StringBuilder stringBuilder5 = stringBuilder4.append("insts BLOB NULL");
      SQLUtil.renderColumnTypeWithSize(dBColumn0, stringBuilder5);
      assertEquals("1Q5r4FmI>Ifalse>7$3^C`\"=KPuU=E\"kts9insts BLOB NULLBLOB", stringBuilder5.toString());
      assertEquals("1Q5r4FmI>Ifalse>7$3^C`\"=KPuU=E\"kts9insts BLOB NULLBLOB", stringBuilder0.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute");
      DBDataType dBDataType0 = DBDataType.getInstance(362, "zU:o_b?)<@M;2Ub@");
      Integer integer0 = new Integer(362);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("call", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("nullZU:O_B?)<@M;2UB@(362)", stringBuilder1.toString());
      assertEquals("nullZU:O_B?)<@M;2UB@(362)", stringBuilder0.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = " iupT6V[G(Zl{<otIS*";
      stringArray0[1] = "~3|_";
      stringArray0[2] = "0ox -Bxq/%s";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("0ox -Bxq/%s", true, defaultDBTable0, (String[]) null, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null( iupT6V[G(Zl{<otIS*, ~3|_, 0ox -Bxq/%s)", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType dBDataType0 = DBDataType.getInstance(90, "40");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("2lmk]`b`jcy");
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("2lmk]`b`jcy", defaultDBTable0, dBDataType0, integer1, integer2);
      defaultDBColumn0.toString();
      String string0 = SQLUtil.normalize("2lmk]`b`jcy", false);
      assertEquals("2lm  k ] ` b ` jcy", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("truncate");
      assertFalse(boolean0);
      
      defaultDBColumn0.setNullable(false);
      SQLUtil.removeComments("");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("2lmk]`b`jcy 40(3,2) NOT NULL", string1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "-:rV4slG", false, stringArray0);
      dBPrimaryKeyConstraint0.setName("-:rV4slG");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)5;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(table0).getColumnCount();
      doReturn((int[]) null).when(table0).getColumnTypes();
      rowOutputBinary0.writeData((Object[]) stringArray0, table0);
      PrintWriter printWriter0 = mockPrintWriter0.append('J');
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertEquals(38, rowOutputBinary0.size());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("j/*H<Yx)n");
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      byteArray0[2] = (byte)32;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)84;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "9VXTb4>s*\\p/*)fVlCR";
      // Undeclared exception!
      SQLUtil.isDML("9VXTb4>s*p/*)fVlCR");
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" = ", defaultDBTable0, (DBDataType) null, integer0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, " = ", true, " = ");
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals(" =  NOT NULL", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
      
      String[] stringArray1 = new String[8];
      stringArray1[0] = "";
      stringArray1[1] = "GMECoB3T:]s,3|";
      stringArray1[2] = "GMECoB3T:]s,3|";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "";
      stringArray1[6] = "";
      stringArray1[7] = "GMECoB3T:]s,3|";
      String[] stringArray2 = new String[4];
      stringArray2[0] = "GMECoB3T:]s,3|";
      stringArray2[1] = "alte";
      stringArray2[2] = "=V@eQ=w_8\u0007M";
      stringArray2[3] = "GMECoB3T:]s,3|";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("GMECoB3T:]s,3|", stringArray1, "]=:*VM=VYZ]+XV5]t", "'AI2r/c>G:Uax(=}'", stringArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SRtLastIndxKeyResultSet");
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SRtLastIndxKeyResultSet", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("SRtLastIndxKeyResultSet BLOB NULL", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("rw");
      assertFalse(boolean0);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SRtLastIndxKeyResultSet BLOB NULL", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES SRtLastIndxKeyResultSet()", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("nF;9*:");
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("updateupdatenclob(int, nclob)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = SQLUtil.normalize("O'.e4M<.#`7]%J9", false);
      assertEquals("O '.e4M<.#`7]%J9'", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select intosel^ne#bzt iabs", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ";PV";
      stringArray0[1] = "Zgzyty0\"\"";
      stringArray0[3] = " join ";
      stringArray0[4] = " join ";
      stringArray0[5] = ";PV";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ";PV", true, stringArray0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (;PV, Zgzyty0\"\", ,  join ,  join , ;PV)", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select");
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.max((-934), 336330753);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("BLOB");
      SQLUtil.renderColumn(defaultDBColumn0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Exception rolling back failed!tx: ", true, (String) null, "SQLTABLES");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"Exception rolling back failed!tx: \" CHECK SQLTABLES", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = SQLUtil.normalize("|9}[Z)uxx lO", false);
      assertEquals("| 9 } [ Z) uxx lO", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("_uM6VO/ Vv@y~6lw?f");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance((-153), "PQ|//G*0pf$5");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("tFj2IIa@KX;qguE=", defaultDBTable1, dBDataType0, integer1);
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(" NULL", defaultDBTable1, dBDataType0, integer0, integer2);
      defaultDBColumn1.getForeignKeyConstraint();
      FileUtil.canonicalFile("tFj2IIa@KX;qguE=");
      MockFile mockFile0 = new MockFile("inner", "drop materialized view");
      File file0 = MockFile.createTempFile("4[#z_& }5P", (String) null, (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable1, false, nameSpec0, mockPrintWriter0);
      assertTrue(defaultDBTable1.equals((Object)defaultDBTable0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\")");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\")";
      stringArray0[1] = "\")";
      stringArray0[2] = "\")";
      stringArray0[3] = "\")";
      stringArray0[4] = "\")";
      stringArray0[5] = "\")";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("\")", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (\"), \"), \"), \"), \"), \")) REFERENCES \")(\"), \"), \"), \"), \"), \"))", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("Exception rolling back failed tx: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sele");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("inner", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("inner", dBForeignKeyConstraint0.getName());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = " d";
      stringArray0[1] = "Blob p=sition is limited to 2^31 - 1 due to isc_seek_blob limitatioqs.";
      stringArray0[2] = "Blob p=sition is limited to 2^31 - 1 due to isc_seek_blob limitatioqs.";
      stringArray0[3] = "Blob p=sition is limited to 2^31 - 1 due to isc_seek_blob limitatioqs.";
      stringArray0[4] = "Blob p=sition is limited to 2^31 - 1 due to isc_seek_blob limitatioqs.";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Blob p=sition is limited to 2^31 - 1 due to isc_seek_blob limitatioqs.", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(" references ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = " references ";
      stringArray0[1] = " references ";
      stringArray0[2] = " references ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" references ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(4500);
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (double) 4500);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition(" references ", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.append((Object) stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder3, nameSpec0);
      assertEquals("4500.0 or  references 4500.0 or  references ", stringBuilder2.toString());
      assertEquals("4500.0 or  references 4500.0 or  references ", stringBuilder0.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("pOLe[", defaultDBTable0, (DBDataType) null, integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("pOLe[");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("pOLe[, pOLe[", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext", defaultDBTable0, (DBDataType) null, integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "(";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderColumnListWithTableName("Ed;NJ#0zb#", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Object object0 = new Object();
      genericDescriptorList0.add(object0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("deletexe^xyvcs");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9287964732655708
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = SQLUtil.normalize("h<VcPK>L+z/-@|>V@b/", true);
      assertEquals("h < VcPK > L + z / - @ | > V @ b /", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("I8]LI");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h < VcPK > L + z / - @ | > V @ b /";
      stringArray0[1] = "I8]LI";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.firebirdsql.jdbc.FBCachedBlob", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT org.firebirdsql.jdbc.FBCachedBlob UNIQUE (h < VcPK > L + z / - @ | > V @ b /, I8]LI)", string1);
      
      boolean boolean0 = SQLUtil.isProcedureCall("C_");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ClDh/v.y7~}0K2");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sGKqR;(VyAZ");
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "oyXgsw]s}v='!&";
      mockPrintWriter0.println("1M5@&S}2~2^7dw/Q");
      stringArray0[2] = "oyXgsw]s}v='!&";
      stringArray0[3] = "update";
      stringArray0[4] = "serect-{ int";
      stringArray0[5] = "oyXgsw]s}v='!&";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("oyXgsw]s}v='!&", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", dBTable0.getObjectType());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      Character character0 = new Character(' ');
      Character.highSurrogate(2393);
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("' '", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("3", defaultDBTable0, (DBDataType) null, integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("i[^8nX*");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize(dBColumnArray0[0], (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SQLUtil.renderColumnListWithTableName("&4+_zi[=+9n", stringArray0);
      SQLUtil.mutatesStructure("execute");
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext", defaultDBTable0, (DBDataType) null, integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("exec");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.apache.derby.impl.sql.compile.LockTableNode", false);
      assertEquals("org.apache.derby.impl.sql.compile.LockTableNode", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("insert");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "3XM\u0000C+M,4f)0?";
      stringArray0[1] = "3XM\u0000C+M,4f)0?";
      stringArray0[2] = "3XM\u0000C+M,4f)0?";
      stringArray0[3] = "3XM\u0000C+M,4f)0?";
      stringArray0[4] = "3XM\u0000C+M,4f)0?";
      stringArray0[5] = "uCT8>]]Z6hVQt+j";
      stringArray0[6] = "3XM\u0000C+M,4f)0?";
      String string0 = SQLUtil.join("3XM\u0000C+M,4f)0?", "3XM\u0000C+M,4f)0?", stringArray0, "PRIMARY KEY ", "Unknown constraint type: ", stringArray0);
      assertEquals("3XM\u0000C+M,4f)0? join PRIMARY KEY  as Unknown constraint type:  on 3XM\u0000C+M,4f)0?.3XM\u0000C+M,4f)0? = Unknown constraint type: .3XM\u0000C+M,4f)0? and 3XM\u0000C+M,4f)0?.3XM\u0000C+M,4f)0? = Unknown constraint type: .3XM\u0000C+M,4f)0? and 3XM\u0000C+M,4f)0?.3XM\u0000C+M,4f)0? = Unknown constraint type: .3XM\u0000C+M,4f)0? and 3XM\u0000C+M,4f)0?.3XM\u0000C+M,4f)0? = Unknown constraint type: .3XM\u0000C+M,4f)0? and 3XM\u0000C+M,4f)0?.3XM\u0000C+M,4f)0? = Unknown constraint type: .3XM\u0000C+M,4f)0? and 3XM\u0000C+M,4f)0?.uCT8>]]Z6hVQt+j = Unknown constraint type: .uCT8>]]Z6hVQt+j and 3XM\u0000C+M,4f)0?.3XM\u0000C+M,4f)0? = Unknown constraint type: .3XM\u0000C+M,4f)0?", string0);
      
      DBSequence dBSequence0 = new DBSequence("", "3XM\u0000C+M,4f)0?", "3XM\u0000C+M,4f)0?");
      dBSequence0.getMaxValue();
      dBSequence0.setMinValue((BigInteger) null);
      String string1 = SQLUtil.ownerDotComponent(dBSequence0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SRtLastIndxKeyResultSet");
      DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "SRtLastIndxKeyResultSet";
      stringArray0[1] = "SRtLastIndxKeyResultSet";
      stringArray0[2] = "BLOB";
      stringArray0[3] = "BLOB";
      stringArray0[4] = "BLOB";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("BLOB");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "SRtLastIndxKeyResultSet";
      objectArray0[1] = (Object) "SRtLastIndxKeyResultSet = 'SRtLastIndxKeyResultSet' AND SRtLastIndxKeyResultSet = 'SRtLastIndxKeyResultSet' AND BLOB = 'BLOB' AND BLOB = 'BLOB' AND BLOB = 'BLOB'";
      objectArray0[2] = (Object) integer0;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable1, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("drop table");
      assertTrue(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-234), "RUvHl0Q\"F;n");
      Integer integer0 = new Integer((-234));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop table", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("RUVHL0Q\"F;N(-234)", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("X0Y23.S");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "X0Y23.S";
      stringArray0[1] = "X0Y23.S";
      DBDataType dBDataType0 = DBDataType.getInstance((-1664), "X0Y23.S");
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter indexdrop indexzvb-/v(k?md9", defaultDBTable0, dBDataType0, integer0);
      Integer integer2 = RawTransaction.ABORT;
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      Integer integer3 = RawTransaction.COMMIT;
      assertFalse(integer3.equals((Object)integer2));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-51);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.typeAndName((DBObject) null);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ints";
      stringArray0[1] = "ints";
      stringArray0[2] = "ints";
      stringArray0[3] = "ints";
      stringArray0[4] = "ints";
      stringArray0[5] = "ints";
      stringArray0[6] = "ints";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "ints";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("ints", stringArray0, "ints", "drop index", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("g^");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "zU$=D&hfczoQ&Wm;}";
      stringArray0[1] = "\")";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "EwKT!pY>B3[8KsPV'", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("g^", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("EwKT!pY>B3[8KsPV'", defaultDBTable0, (DBDataType) null, (Integer) null);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("g^CONSTRAINT EwKT!pY>B3[8KsPV' ", stringBuilder0.toString());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("\")");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, dBTable0, (DBDataType) null, integer1);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("\")", stringBuilder0.toString());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("Ed;NJ#0zb#", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(1248, "sel^Ne#bzt iAbS");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sel^Ne#bzt iAbS", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("sel^Ne#bzt iAbS SEL^NE#BZT IABS(1) NULL", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("\u0001\u0143", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = SQLUtil.normalize("O<Se9a7Je|h8{_4K(DT", false);
      assertEquals("O < Se9a7Je | h8 { _4K (DT", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "SYSCS_CHECKPOINT_DATABASE";
      stringArray0[1] = "wRB8Y*']6|M~5U3o";
      stringArray0[2] = "wRB8Y*']6|M~5U3o";
      stringArray0[3] = "wRB8Y*']6|M~5U3o";
      stringArray0[4] = "wRB8Y*']6|M~5U3o";
      stringArray0[5] = "wRB8Y*']6|M~5U3o";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join("wRB8Y*']6|M~5U3o", "wRB8Y*']6|M~5U3o", stringArray0, "wRB8Y*']6|M~5U3o", "org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("M`zcMIEwrNBlK", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(1153, "M`zcMIEwrNBlK");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("4qo--er|", defaultDBTable0, dBDataType0);
      StringBuilder stringBuilder0 = new StringBuilder("pOLe[");
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable("M`zcMIEwrNBlK", false);
      defaultDBTable0.addReferrer((DBTable) null);
      StringBuilder stringBuilder1 = stringBuilder0.append("pOLe[");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("pOLe[pOLe[M`ZCMIEWRNBLK", stringBuilder1.toString());
      assertEquals("pOLe[pOLe[M`ZCMIEWRNBLK", stringBuilder0.toString());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("drop tablezelectivt2q");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[17];
      SQLUtil.join("", "", stringArray0, "", "", stringArray0);
      Integer integer0 = RawTransaction.COMMIT;
      assertEquals(0, (int)integer0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " NULL", false, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \" NULL\" ", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("hQfpjWSt+%e1Roa' Z");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "hQfpjWSt+%e1Roa' Z", false, (String[]) null);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \"hQfpjWSt+%e1Roa' Z\" ", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O<Se9a7Je|h8{_4K(DT");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = SQLUtil.normalize("h\"5}jz.aJ=gKL", true);
      assertEquals("h \"5}jz.aJ=gKL\"", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLUtil.normalize("h<VK>L+z/-@|>?V@b/", true);
      String string0 = "qj4d%";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/Y(");
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "/Y(");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("getBlob(int)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("O<Se9a7Je|h8{_4K(DT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: O<Se9a7Je|h8{_4K(DT
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("_uM6VO/ Vv@y~6lw?f");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance((-153), "PQ|//G*0pf$5");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" NULL", defaultDBTable1, dBDataType0, integer0, integer2);
      defaultDBColumn0.getForeignKeyConstraint();
      FileUtil.canonicalFile("tFj2IIa@KX;qguE=");
      MockFile mockFile0 = new MockFile("inner", "drop materialized view");
      File file0 = MockFile.createTempFile("4[#z_& }5P", (String) null, (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLUtil.isDML("pOLe[");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "jM3p+:?u0:-'RE9#", true, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      Random.setNextRandom((-817));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "))2Z?yGG+5qGp6";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "sel^Ne#bt iAbS";
      stringArray0[1] = "))2Z?yGG+5qGp6";
      stringArray0[2] = "sel^Ne#bt iAbS";
      stringArray0[3] = "))2Z?yGG+5qGp6";
      stringArray0[4] = "sel^Ne#bt iAbS";
      stringArray0[1] = "frmj_$RBxRT:MDm";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "))2Z?yGG+5qGp6", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("sel^Ne#bt iAbS");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (sel^Ne#bt iAbS, frmj_$RBxRT:MDm, sel^Ne#bt iAbS, ))2Z?yGG+5qGp6, sel^Ne#bt iAbS, )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ";PV";
      stringArray0[1] = " join ";
      stringArray0[3] = " join ";
      stringArray0[4] = " join ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ";PV", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(" join ");
      StringBuilder stringBuilder1 = stringBuilder0.append(";PV");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder2.append((CharSequence) stringBuilder1, 3695, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 3695, end 12, s.length() 24
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute`qze=vuufl");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "execute`qze=vuufl";
      stringArray0[1] = "j7?hTr@t8h\"jM\"";
      stringArray0[2] = null;
      stringArray0[3] = "j7?hTr@t8h\"jM\"";
      stringArray0[4] = "j7?hTr@t8h\"jM\"";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "inner", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBPrimaryKeyConstraint0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute`qze=vuufl", defaultDBTable0, (DBDataType) null, integer0);
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT inner PRIMARY KEY (execute`qze=vuufl, j7?hTr@t8h\"jM\", , j7?hTr@t8h\"jM\", j7?hTr@t8h\"jM\")", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SQLUtil.join("pOe", "pOe", stringArray0, "pOe", "pOe", stringArray0);
      SQLUtil.normalize("pOe", true);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = SQLUtil.removeComments("OXchZCrT5");
      assertEquals("OXchZCrT5", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("select intoexception rolling back failed!tx:");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (DBDataType) null, (Integer) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(32, "execute");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute", (DBTable) null, dBDataType0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("execute EXECUTE NULL", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SRtLastIndxKeyResultSet");
      DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      boolean boolean0 = SQLUtil.isDDL("BLOB");
      assertFalse(boolean0);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "BLOB", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT BLOB PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.9389355707834581
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = SQLUtil.normalize("enF;9*:", false);
      assertEquals("enF ; 9 * :", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "enF;9*:");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("enF;9*:");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter table", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("o3", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "N8p7 R)2", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string1);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-:rV4slG");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "-:rV4slG", false, stringArray0);
      boolean boolean0 = new Boolean(false);
      String string0 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("-:rV4slG.-:rV4slG", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[18];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Zgzyty0\"\"";
      stringArray0[1] = "Zgzyty0\"\"";
      stringArray0[2] = "Zgzyty0\"\"";
      stringArray0[3] = "Zgzyty0\"\"";
      stringArray0[4] = "Zgzyty0\"\"";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Zgzyty0\"\"", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("'hNm.XO ");
      stringBuilder0.append("Zgzyty0\"\"");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) "Zgzyty0\"\"", 3695, 3695);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 3695, end 3695, s.length() 9
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = "sel^";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) "sel^");
      int int0 = 1673;
      // Undeclared exception!
      try { 
        stringBuilder2.insert(1673, (CharSequence) null, 1673, 1673);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 1673
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SQLUtil.join("pOWeD", "pOWeD", stringArray0, "pOWeD", "pOWeD", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("pOWeD join pOWeD as pOWeD on pOWeD.null = pOWeD.null and pOWeD.null = pOWeD.null and pOWeD.null = pOWeD.null and pOWeD.null = pOWeD.null and pOWeD.null = pOWeD.null and pOWeD.null = pOWeD.null", (String) null, "pOWeD join pOWeD as pOWeD on pOWeD.null = pOWeD.null and pOWeD.null = pOWeD.null and pOWeD.null = pOWeD.null and pOWeD.null = pOWeD.null and pOWeD.null = pOWeD.null and pOWeD.null = pOWeD.null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c013800d-00fb-2648-07ec-000000134f30", (DBTable) null, (DBDataType) null);
      String string0 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("c013800d-00fb-2648-07ec-000000134f30", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("_uM6VO/ Vv@y~6lw?f");
      assertNull(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "index (1..");
      SQLUtil.addRequiredCondition("index (1..", stringBuilder0);
      assertEquals("index (1.. and index (1..", stringBuilder0.toString());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.7598407318671061
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLUtil.normalize("U4F74-%H*+p<t", false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[12];
      String string0 = SQLUtil.renderColumnListWithTableName("org.postgresql.jdbc2.AbstractJdbc2Blob", stringArray0);
      String string1 = SQLUtil.leftJoin("org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null", stringArray0, "org.postgresql.jdbc2.AbstractJdbc2Blob", "org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null, org.postgresql.jdbc2.AbstractJdbc2Blob.null", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = SQLUtil.normalize("o,L@9Fg'$V04]]iNd[=", true);
      assertEquals("o, L @ 9Fg '$V04]]iNd[='", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderValue("+,,@");
      stringBuilder0.append((CharSequence) "'+,,@'");
      SQLUtil.addRequiredCondition("drop index", stringBuilder0);
      assertEquals("'+,,@' and drop index", stringBuilder0.toString());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("select intS", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<4");
      SQLUtil.addOptionalCondition("<4", stringBuilder0);
      assertEquals("<4 or <4", stringBuilder0.toString());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      FromBaseTable fromBaseTable0 = new FromBaseTable();
      fromBaseTable0.getTableDescriptor();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTriggerDescriptors((TableDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = SQLUtil.innerJoin("", stringArray0, "", (String) null, stringArray0);
      assertEquals(" as null on ", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("|9}[Z)uxx lO", stringArray0, "|9}[Z)uxx lO", "!}h@u", stringArray0);
      assertEquals("|9}[Z)uxx lO as !}h@u on ", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("select intoselect ints", (String[]) null, "delete", "delete", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "call";
      stringArray0[1] = "wA0,K01";
      SQLUtil.join("inner", "drop mat9rializ/d view", stringArray0, "create materialized view(9m52f8/", "wA0,K01", stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("f");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("drop index", "sel^Nebt iAbS", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.removeTable("create materialized view(9m52f8/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'create materialized view(9m52f8/'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = SQLUtil.isQuery(".}kD\"j.>}#:JnFbO`");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.substituteMarkers(".}kD\"j.>}#:JnFbO`", ".}kD\"j.>}#:JnFbO`", stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("drop index", "D;{@.2IO3", "D;{@.2IO3");
      assertEquals("drop index", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = SQLUtil.renderValue("");
      assertEquals("''", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      TableContainer tableContainer0 = new TableContainer(";PV");
      tableContainer0.getTable("(uyQlv`Wzy@");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "(uyQlv`Wzy@";
      stringArray0[1] = ";PV";
      stringArray0[2] = ";PV";
      stringArray0[3] = ";PV";
      stringArray0[5] = ";PV";
      stringArray0[6] = "(uyQlv`Wzy@";
      stringArray0[7] = ";PV";
      stringArray0[8] = ";PV";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[17];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLUtil.isDDL("sel^Ne#bzt iAbS");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("fM5Nv8lN)!|\u0004W4>");
      defaultDBTable0.getIndex("sel^Ne#bzt iAbS");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("g<iF,>D");
      assertFalse(boolean0);
      
      DBSchema dBSchema0 = new DBSchema("'`%4@p\"8L\"x");
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("'`%4@p\"8L\"x", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "se_eYtm3w";
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.7598407318671061
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "+-*sto&~X_?";
      SQLUtil.normalize("+-*sto&~X_?", true);
      System.setCurrentTimeMillis((-822L));
      String string1 = null;
      DBSchema dBSchema0 = new DBSchema("+ - * sto & ~ X_ ?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[10];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("bF");
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema bF", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-:rV4slG");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "-:rV4slG", false, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT -:rV4slG ", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select intS");
      assertTrue(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select intS");
      assertFalse(boolean1);
      assertNotNull(boolean1);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery(" or ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intS");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create tabledrop tablezelectivt2q");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.parseColumnTypeAndSize("alter sessionalter materialized viewexce");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionalter materialized viewexce");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "cll()";
      stringArray0[2] = "cll()";
      stringArray0[4] = "cll()";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "cll()";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("cll()", stringArray0, stringArray0[5], "cll()", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[12];
      // Undeclared exception!
      try { 
        SQLUtil.join("kEU8*D7%fiEB!2%]f", "&U@`", stringArray0, "kEU8*D7%fiEB!2%]f", "&U@`", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[0];
      String string0 = SQLUtil.join("Mm:G4s^*%|", "Mm:G4s^*%|", stringArray0, "Mm:G4s^*%|", "Mm:G4s^*%|", stringArray1);
      assertEquals("Mm:G4s^*%| join Mm:G4s^*%| as Mm:G4s^*%| on ", string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String[] stringArray0 = new String[10];
      SQLUtil.join("alter table9{ykmwkpk3_\"k~],aa", "drop index9{ykmwkpk3_\"k~],aa", stringArray0, "alter table9{ykmwkpk3_\"k~],aa", "drop index9{ykmwkpk3_\"k~],aa", stringArray0);
      Boolean boolean0 = new Boolean("alter table9{ykmwkpk3_\"k~],aa");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("#j\"q/:;", "#j\"q/:;", stringArray0, "its", "#j\"q/:;", stringArray0);
      assertEquals("#j\"q/:; join its as #j\"q/:; on ", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[20];
      String string0 = SQLUtil.join(".WWVX9]'1Ds=L", ".WWVX9]'1Ds=L", stringArray0, (String) null, (String) null, stringArray0);
      assertEquals(".WWVX9]'1Ds=L join null as null on .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null and .WWVX9]'1Ds=L.null = null.null", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.join((String) null, "alter indexexcepti", stringArray0, "alter indexexcepti", "alter indexexcepti", stringArray0);
      Integer integer0 = RawTransaction.COMMIT;
      assertEquals(0, (int)integer0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "~3|_";
      stringArray0[2] = "0ox -Bxq/%s";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("~3|_", (String[]) null, "~3|_", "~3|_", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("x10$iUo:", (String[]) null, "drop table;pv", " on ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create tabledrop tablezelectivt2q");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("_uM6VO/ Vv@y~6lw?f");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("SYSTEM_USER");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("FO3;N@pi[#{2");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("ELECTIVT2Q");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = SQLUtil.normalize("//", true);
      assertEquals("", string0);
  }
}
