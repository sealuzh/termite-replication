/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 06:32:32 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.event.ContainerListener;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Predicate;
import javax.swing.JList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ReliefFAttributeEval;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.ConditionalDensityEstimator;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.KStar;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.PART;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.REPTree;
import weka.clusterers.MakeDensityBasedClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.estimators.PoissonEstimator;
import weka.filters.AllFilter;
import weka.filters.Filter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CostMatrix costMatrix0 = null;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.07500000298023224, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("@data");
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      testInstances0.setNumRelationalNominalValues(4);
      Vote vote0 = new Vote();
      testInstances0.setNumRelationalNominal(6);
      instances0.containsAll(instances1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = Evaluation.MIN_SF_PROB;
      double double1 = evaluation0.m_TotalSizeOfRegions;
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      evaluation0.recall(3);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.49855072463768113
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumClasses(119);
      Instances instances0 = testInstances0.generate("setUseSupervisedDiscretization");
      capabilities0.toSource(".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      // Undeclared exception!
      evaluation0.unweightedMacroFmeasure();
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("@data");
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      testInstances0.setNumRelationalNominalValues(4);
      Vote vote0 = new Vote();
      testInstances0.setNumRelationalNominal(6);
      Vote.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = Evaluation.MIN_SF_PROB;
      double double1 = evaluation0.m_TotalSizeOfRegions;
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      textDirectoryLoader1.getDataSet();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'S';
      charArray0[2] = 'P';
      evaluation0.num2ShortID(18, charArray0, 2291);
      try { 
        evaluation0.crossValidateModel((Classifier) vote0, instances0, 6, (Random) mockRandom1, (Object[]) vote0.TAGS_RULES);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Capabilities capabilities0 = naiveBayes0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorAbsErr;
      double double1 = evaluation0.m_Unclassified;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double2 = evaluation1.m_SumPriorAbsErr;
      double double3 = evaluation1.m_Unclassified;
      evaluation0.SFPriorEntropy();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = " ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "seedTipText");
      stringArray0[2] = "graph";
      TestInstances.main(stringArray0);
      evaluation0.falsePositiveRate((-1560));
      double double4 = evaluation1.m_SumSqrPredicted;
      evaluation1.weightedAreaUnderPRC();
      evaluation1.weightedAreaUnderROC();
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      evaluation0.num2ShortID(20, charArray0, 20);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR zeroR0 = (ZeroR)wrapperSubsetEval0.getClassifier();
      Evaluation.wekaStaticWrapper(zeroR0, " ");
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4945054945054945
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      capabilities0.enableAllAttributeDependencies();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getCapabilities();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = 5.0;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation1.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.generate("RB^#yXJ");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = (-2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 1;
      double double0 = evaluation0.m_TotalCost;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostMatrix costMatrix0 = new CostMatrix(0);
      evaluation0.errorRate();
      // Undeclared exception!
      try { 
        evaluation0.weightedPrecision();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      testInstances0.setNumNumeric(122);
      testInstances0.generate("RB^#yXJ");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = (-2);
      intArray0[3] = 2;
      // Undeclared exception!
      try { 
        evaluation0.trueNegativeRate(1887);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4947368421052632
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      capabilities0.enableAllAttributeDependencies();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Capabilities capabilities1 = simpleKMeans0.getCapabilities();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = 5.0;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      capabilities0.or(capabilities1);
      try { 
        evaluation1.updateStatsForConditionalDensityEstimator(gaussianProcesses0, sparseInstance0, (-936.8));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4945054945054945
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Instances instances1 = testInstances0.generate("RB^#yXJ");
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      instances1.spliterator();
      // Undeclared exception!
      try { 
        evaluation1.kappa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.49056603773584906
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      TestInstances.forCapabilities(capabilities0);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.generate("getTokenizer");
      AbstractClassifier.runClassifier(regressionByDiscretization0, testInstances1.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.falseNegativeRate((-17));
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      testInstances0.generate("RB^#yXJ");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = (-2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 1;
      double double0 = evaluation0.m_TotalCost;
      // Undeclared exception!
      try { 
        evaluation0.precision(2757);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1840562714690361
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Instances instances1 = new Instances(instances0, 2, 1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[2] = (-2);
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = (-1995138716);
      SparseInstance sparseInstance0 = new SparseInstance((-1071.7), doubleArray0, intArray0, (-832));
      try { 
        evaluation0.evaluateModelOnce((-908.0501357411874), (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setOutputFilename(false);
      Instances instances0 = textDirectoryLoader1.getStructure();
      instances0.setRelationName("Wu!?");
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      instances0.toArray();
      textDirectoryLoader1.setDebug(false);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".bsi";
      stringArray0[2] = "@data";
      stringArray0[2] = "@relation";
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.recall(493);
      evaluation1.fMeasure(493);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 493;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 493;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@data");
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      testInstances0.getOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vote vote0 = new Vote();
      Classifier classifier0 = AbstractClassifier.makeCopy(vote0);
      TestInstances testInstances1 = new TestInstances();
      Evaluation.makeOptionString(classifier0, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MissingClass;
      Evaluation evaluation1 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominal(6);
      evaluation0.trueNegativeRate(1);
      evaluation1.KBRelativeInformation();
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      PART pART0 = new PART();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-2);
      double double0 = evaluation0.m_SumSqrPredicted;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances1 = testInstances0.generate("@data");
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.rootMeanPriorSquaredError();
      evaluation1.unweightedMicroFmeasure();
      try { 
        evaluation0.updateStatsForPredictor(0.125, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = reliefFAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("@data");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1796.29725;
      doubleArray0[1] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.relativeAbsoluteError();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation2.m_SumSchemeEntropy;
      Evaluation evaluation3 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.equals(evaluation2);
      assertTrue(boolean0);
      assertEquals(Double.NaN, evaluation2.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation2.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      Instances instances0 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      testInstances0.generate("RB^#yXJ");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = (-2);
      intArray0[3] = 2;
      intArray0[4] = 1;
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      // Undeclared exception!
      try { 
        evaluation0.falsePositiveRate((-162));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = reliefFAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("@data");
      Attribute attribute0 = new Attribute(" ");
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getCapabilities();
      capabilities0.testWithFail(attribute0, true);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorSqrErr;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Evaluation.makeOptionString(naiveBayes0, false);
      double double1 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.falseNegativeRate(3);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setRelationName("");
      textDirectoryLoader0.setCharSet("\"U?X{CK");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      boolean boolean0 = evaluation1.equals(evaluation0);
      assertTrue(boolean0);
      
      evaluation0.SFSchemeEntropy();
      assertTrue(evaluation0.equals((Object)evaluation1));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.590919980975802
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Capabilities capabilities0 = naiveBayes0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      reliefFAttributeEval0.setWeightByDistance(true);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_MinTarget;
      double double1 = evaluation0.m_Unclassified;
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.numTrueNegatives((-1));
      evaluation0.toMatrixString();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.SFMeanEntropyGain();
      evaluation1.unweightedMacroFmeasure();
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName("Wu!?");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      evaluation0.areaUnderPRC(103);
      evaluation0.makeDistribution(Double.NaN);
      String string0 = evaluation0.toClassDetailsString(";RDe");
      assertEquals(";RDe\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.evaluateModelOnce(5.70001, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1714.8;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.95;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-2);
      doubleArray0[7] = 1714.8;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1714.8, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setMultiInstance(false);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.stream();
      KStar kStar0 = new KStar();
      Instance instance0 = null;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) kStar0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Capabilities capabilities0 = new Capabilities(filteredClassifier0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities1 = inputMappedClassifier0.getCapabilities();
      capabilities1.enableAllAttributeDependencies();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities2 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities2);
      capabilities2.enableAllClassDependencies();
      Instances instances0 = testInstances0.generate("seedTipTeXxt");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-3227));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("!.$Ev.{PJ8Y");
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.equals(testInstances0);
      assertFalse(boolean0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(".bsi");
      SerializedClassifier[] serializedClassifierArray0 = new SerializedClassifier[5];
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifierArray0[1] = serializedClassifier0;
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      serializedClassifierArray0[2] = serializedClassifier1;
      SerializedClassifier serializedClassifier2 = new SerializedClassifier();
      serializedClassifierArray0[3] = serializedClassifier2;
      JList<SerializedClassifier> jList0 = new JList<SerializedClassifier>();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Correct;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      Evaluation evaluation2 = new Evaluation(instances1);
      double double1 = evaluation2.numTruePositives(1);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation1.m_SumSqrErr;
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Capabilities capabilities0 = naiveBayes0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorAbsErr;
      double double1 = evaluation0.m_Unclassified;
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      reliefFAttributeEval0.setWeightByDistance(false);
      testInstances0.generate("l:}D}bKl#W(K");
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double2 = evaluation2.m_SumClassPredicted;
      double double3 = evaluation2.m_Unclassified;
      Instances instances1 = new Instances(instances0);
      naiveBayes0.setDebug(false);
      double double4 = evaluation2.falseNegativeRate(10);
      assertEquals(0.0, double4, 0.01);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      TestInstances testInstances1 = new TestInstances();
      Evaluation.makeOptionString(naiveBayes0, true);
      double double5 = evaluation2.avgCost();
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = evaluation1.unclassified();
      assertEquals(0.0, double6, 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      instances0.setRelationName("Wu!?");
      Object[] objectArray0 = instances0.toArray();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      Capabilities capabilities0 = reliefFAttributeEval1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("@data");
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      KStar kStar0 = new KStar();
      MockRandom mockRandom0 = new MockRandom((-2));
      try { 
        evaluation1.crossValidateModel((Classifier) kStar0, instances0, 108, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8847837871017636
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      BayesNet bayesNet0 = new BayesNet();
      Capabilities capabilities0 = bayesNet0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("YKvW3$:/w2OLLe\"i");
      LogitBoost logitBoost0 = new LogitBoost();
      JList<SerializedClassifier> jList0 = new JList<SerializedClassifier>((SerializedClassifier[]) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability0);
      Instances instances0 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("@data", true);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.numFalsePositives(2);
      String string0 = evaluation0.toClassDetailsString("@data\nTotal Number of Instances                0     \n");
      assertEquals("@data\nTotal Number of Instances                0     \n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\n                 0        0        0          0       0          0     ?         ?         class3\n                 0        0        0          0       0          0     ?         ?         class4\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      testInstances0.getRelationalClassFormat();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      testInstances0.setNumRelationalNominalValues((-3983));
      Vote vote0 = new Vote();
      testInstances0.setNumRelationalNominal(1);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = Evaluation.MIN_SF_PROB;
      double double1 = evaluation0.m_TotalSizeOfRegions;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom(1L);
      MockRandom mockRandom1 = new MockRandom();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) testInstances0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) testInstances0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) textDirectoryLoader0;
      objectArray0[5] = (Object) mockRandom1;
      objectArray0[6] = (Object) vote0;
      objectArray0[7] = (Object) instances0;
      try { 
        evaluation0.crossValidateModel((Classifier) vote0, (Instances) null, 3779, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4946236559139785
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName("@data");
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      capabilities0.enableDependency(capabilities_Capability0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.setPriors(instances1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        evaluation0.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      Instances instances0 = testInstances0.generate();
      instances0.setRelationName("VhFCIBO6t)/hdVn");
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.relativeAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(1049, (char[]) null, (-3725));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("combinationRuleTipText");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int[] intArray0 = new int[2];
      intArray0[1] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2227.3413), intArray0, (-1));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getCapabilities();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      String string0 = Evaluation.makeOptionString((Classifier) null, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      evaluation0.SFSchemeEntropy();
      ConditionalDensityEstimator conditionalDensityEstimator0 = null;
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, sparseInstance0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 754.7;
      int[] intArray0 = new int[6];
      intArray0[0] = 86;
      SparseInstance sparseInstance0 = new SparseInstance((-1328.0), doubleArray0, intArray0, 727);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, sparseInstance0, (-1328.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setRelationName("");
      int[] intArray0 = new int[0];
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation0.m_Unclassified;
      double double2 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      naiveBayes0.getCapabilities();
      Capabilities capabilities0 = naiveBayes0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      reliefFAttributeEval0.setWeightByDistance(true);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorAbsErr;
      double double1 = evaluation0.m_Unclassified;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double2 = evaluation1.m_SumPriorAbsErr;
      double double3 = evaluation1.m_Unclassified;
      double double4 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double4, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = " ";
      stringArray0[2] = "graph";
      TestInstances.main(stringArray0);
      double double5 = evaluation0.falsePositiveRate((-1560));
      assertEquals(0.0, double5, 0.01);
      
      double double6 = evaluation1.m_SumSqrPredicted;
      double double7 = evaluation1.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double7, 0.01);
      
      double double8 = evaluation1.numFalseNegatives((-1));
      assertEquals(0.0, double8, 0.01);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(4, doubleArray0.length);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_Unclassified;
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.getDiscardPredictions();
      evaluation0.confusionMatrix();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      evaluation0.unweightedMacroFmeasure();
      testInstances0.setNumString((-2));
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      Instances instances1 = new Instances(instances0);
      try { 
        CostMatrix.parseMatlab(".arff");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      naiveBayes0.getCapabilities();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Bagging bagging0 = new Bagging();
      Capabilities capabilities1 = bagging0.getCapabilities();
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      TestInstances.forCapabilities(capabilities2);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName("-v\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = (double) 16;
      evaluation0.updateMargins(doubleArray0, 5, 5);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.toSummaryString(false);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      LogitBoost logitBoost0 = new LogitBoost();
      JList<SerializedClassifier> jList0 = new JList<SerializedClassifier>((SerializedClassifier[]) null);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumErr;
      evaluation0.setDiscardPredictions(false);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Capabilities capabilities0 = naiveBayes0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities1 = reliefFAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setDiscardPredictions(true);
      double double0 = evaluation0.m_SumSqrErr;
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[13];
      Evaluation.main(stringArray0);
      try { 
        Evaluation.evaluateModel((Classifier) naiveBayes0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("@data");
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vote vote0 = new Vote();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = Evaluation.MIN_SF_PROB;
      double double1 = evaluation0.m_TotalSizeOfRegions;
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getDataSet();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) vote0, instances0, (-1), (Random) mockRandom0, (Object[]) vote0.TAGS_RULES);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setRelationName("Wu!?");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".arff";
      stringArray0[1] = "Wu!?";
      stringArray0[2] = "@data";
      Evaluation.main(stringArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2294.1);
      doubleArray0[1] = (-2294.1);
      doubleArray0[2] = (-2294.1);
      doubleArray0[3] = (-2294.1);
      doubleArray0[4] = 4186.664529;
      ArrayList<BinarySparseInstance> arrayList0 = new ArrayList<BinarySparseInstance>();
      instances0.addAll((Collection<? extends Instance>) arrayList0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      try { 
        evaluation0.evaluateModel((Classifier) classificationViaRegression0, instances0, (Object[]) stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      instances0.setRelationName("Wu!?");
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      Object[] objectArray0 = instances0.toArray();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@data";
      stringArray0[1] = "@data";
      stringArray0[2] = "@relation";
      stringArray0[4] = "Wu!?";
      stringArray0[6] = "Wu!?";
      stringArray0[7] = "@data";
      stringArray0[8] = "Can't compute correlation coefficient: class is nominal!";
      TextDirectoryLoader.main(stringArray0);
      double double0 = evaluation0.correct();
      assertEquals(0.0, double0, 0.01);
      
      instances0.stratify(1587);
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.areaUnderROC((-1));
      double double2 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double2, 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.areaUnderROC(3004);
      evaluation0.numFalsePositives(5059);
      double double3 = evaluation0.rootMeanSquaredError();
      double double4 = evaluation0.weightedFMeasure();
      assertEquals(double4, double3, 0.01);
      
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double5 = evaluation1.numTrueNegatives((-1));
      assertEquals(0.0, double5, 0.01);
      
      evaluation0.evaluateModel((Classifier) serializedClassifier0, instances0, objectArray0);
      evaluation0.toMatrixString();
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName("Hc,ZMt}mzB,U8xSP");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = (-2.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = (-2.0);
      doubleArray0[2] = (-2.0);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Classifier classifier0 = null;
      try { 
        evaluation0.evaluateModel((Classifier) cVParameterSelection0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("@data");
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      testInstances0.setNumRelationalNominalValues(4);
      Vote vote0 = new Vote();
      testInstances0.setNumRelationalNominal(6);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = Evaluation.MIN_SF_PROB;
      double double1 = evaluation0.m_TotalSizeOfRegions;
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      MockRandom mockRandom0 = new MockRandom(2507L);
      MockRandom mockRandom1 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) vote0, instances0, 6, (Random) mockRandom1, (Object[]) vote0.TAGS_RULES);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int int0 = (-195225789);
      evaluation0.numFalsePositives((-195225789));
      evaluation0.rootMeanSquaredError();
      evaluation0.weightedFMeasure();
      evaluation0.rootRelativeSquaredError();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      MockRandom mockRandom0 = new MockRandom(292L);
      String string0 = "FxJg\\CJ~VG0$9Z(m";
      // Undeclared exception!
      try { 
        ConverterUtils.DataSource.read("FxJgCJ~VG0$9Z(m");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class weka.core.converters.ConverterUtils
         //
         verifyException("weka.core.converters.ConverterUtils$DataSource", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      naiveBayes0.getCapabilities();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Bagging bagging0 = new Bagging();
      Capabilities capabilities1 = bagging0.getCapabilities();
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      TestInstances.forCapabilities(capabilities2);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.weightedTruePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      instances0.toSummaryString();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      reliefFAttributeEval0.setWeightByDistance(true);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.priorEntropy();
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals("Testdata", testInstances0.getRelation());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("!.$Ev.{PJ8Y");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      instances0.setRelationName("-v\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = (double) 16;
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[][] doubleArray1 = evaluation0.confusionMatrix();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0, doubleArray1.length);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AbstractClassifier.makeCopy((Classifier) null);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName(" ");
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      instances0.toArray();
      Evaluation evaluation0 = new Evaluation(instances0);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      Capabilities capabilities0 = reliefFAttributeEval1.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("xdvzQs^:*a+C=h?");
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.m_TotalCost;
      double double1 = evaluation0.precision(5);
      assertEquals(0.0, double1, 0.01);
      
      evaluation1.getHeader();
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      instances0.setRelationName("Wu!?");
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      instances0.toArray();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = reliefFAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation1.m_TotalCost;
      double double1 = evaluation0.precision((-1));
      assertEquals(0.0, double1, 0.01);
      
      evaluation1.getHeader();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int[] intArray0 = new int[0];
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      double double0 = evaluation0.trueNegativeRate((-1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setConfidenceFactor");
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      PoissonEstimator poissonEstimator0 = new PoissonEstimator();
      Capabilities capabilities0 = poissonEstimator0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.getOptions();
      testInstances1.setClassIndex(5);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vote vote0 = new Vote();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Classifier classifier1 = AbstractClassifier.makeCopy(votedPerceptron0);
      TestInstances testInstances2 = new TestInstances();
      AbstractClassifier.runClassifier(votedPerceptron0, testInstances1.DEFAULT_WORDS);
      Evaluation.makeOptionString(classifier1, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MissingClass;
      double[] doubleArray0 = new double[0];
      double double1 = (-1067.609);
      try { 
        evaluation0.evaluationForSingleInstance(classifier0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setNumericPriorsFromBuffer();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      TestInstances testInstances0 = new TestInstances();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.m_SumSqrErr = (double) (-1);
      double double0 = evaluation2.numTrueNegatives((-2));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedTruePositiveRate();
      double double2 = evaluation1.weightedMatthewsCorrelation();
      assertEquals(double2, double1, 0.01);
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double3 = evaluation2.numInstances();
      assertEquals(0.0, double3, 0.01);
      
      evaluation1.kappa();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Capabilities capabilities0 = simpleKMeans0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate((String) null);
      Instances instances0 = testInstances1.getData();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vote vote0 = new Vote();
      Classifier classifier0 = AbstractClassifier.makeCopy(bayesNet0);
      TestInstances testInstances0 = new TestInstances();
      Evaluation.makeOptionString(classifier0, false);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities1 = adaBoostM1_0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(317);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      naiveBayesUpdateable0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = reliefFAttributeEval0.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Instances instances1 = new Instances(instances0);
      testInstances0.setNumInstancesRelational((-1));
      naiveBayesUpdateable0.setDebug(false);
      Attribute attribute0 = new Attribute("@data");
      capabilities0.testWithFail(attribute0, false);
      double double0 = evaluation0.m_SumPriorSqrErr;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.getRevision();
      evaluation0.weightedTrueNegativeRate();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.clone();
      double double0 = evaluation0.m_SumSqrClass;
      double double1 = evaluation0.m_TotalCost;
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.truePositiveRate(744);
      assertEquals(0.0, double0, 0.01);
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      CostMatrix costMatrix0 = new CostMatrix(0);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation0.toMatrixString();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = reliefFAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) vector0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("V", list0, (-1));
      capabilities0.test(attribute0, false);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_ClassIsNominal = false;
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = evaluation0.makeDistribution(2);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = null;
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("!.$Ev.{PJ8Y");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CostMatrix costMatrix0 = null;
      NaiveBayes naiveBayes0 = new NaiveBayes();
      naiveBayes0.getCapabilities();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Bagging bagging0 = new Bagging();
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "y9Gz.");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setRelationName("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Utils.log2 = (double) 0;
      evaluation0.errorRate();
      evaluation0.SFMeanSchemeEntropy();
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = '#';
      charArray0[2] = 'u';
      evaluation0.num2ShortID(0, charArray0, 20);
      org.evosuite.runtime.Random.setNextRandom(118);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName("@data");
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1), charArray0, 1790);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toMatrixString("@relation");
      double double0 = evaluation0.m_ConfLevel;
      try { 
        AbstractClassifier.forName("@relation", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @relation
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Instances instances0 = testInstances0.generate("RB^#yXJ");
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) capabilities0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      instances0.removeIf(predicate3);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = reliefFAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) vector0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("V", list0, (-1));
      capabilities0.test(attribute0, false);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = evaluation0.makeDistribution(2);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName(".arff");
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_Correct;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Capabilities capabilities0 = naiveBayes0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities1 = reliefFAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_Unclassified;
      double double2 = evaluation0.falseNegativeRate(465);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.unclassified();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Capabilities capabilities0 = naiveBayes0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.getOtherCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.setHandler(naiveBayes0);
      AbstractClassifier.runClassifier(naiveBayes0, testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.falseNegativeRate(5);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Correct;
      evaluation0.falseNegativeRate((-2));
      instances0.setRelationName("classifiersTipText");
      CostMatrix costMatrix0 = null;
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      instances0.setRelationName("Wu!?");
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      instances0.toArray();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".bsi";
      stringArray0[2] = "@data";
      stringArray0[2] = "@relation";
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = reliefFAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      double double0 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      evaluation0.areaUnderROC(1041);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setRelationName("@data");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.falseNegativeRate((-7));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      double double0 = evaluation0.totalCost();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("@data");
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      testInstances0.setNumRelationalNominalValues(4);
      Vote vote0 = new Vote();
      testInstances0.setNumRelationalNominal(145);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.priorEntropy();
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
      
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getDataSet();
      MockRandom mockRandom0 = new MockRandom(2507L);
      MockRandom mockRandom1 = new MockRandom((-1241L));
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      double double2 = evaluation1.weightedAreaUnderROC();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation1.incorrect();
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName("Hc,ZMt}mzB,U8xSP");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-15.721277775846135);
      doubleArray0[1] = (-15.721277775846135);
      doubleArray0[2] = (-15.721277775846135);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-15.721277775846135), doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = reliefFAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("@data");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_Unclassified;
      Instances instances1 = new Instances(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double1 = evaluation0.matthewsCorrelationCoefficient(2);
      assertEquals(0.0, double1, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassNames = testInstances0.DEFAULT_WORDS;
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double0 = evaluation0.numFalseNegatives(135);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.falsePositiveRate((-1));
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_SumSqrPredicted;
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = reliefFAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("@data");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_Unclassified;
      Instances instances1 = new Instances(instances0);
      TestInstances.forCapabilities(capabilities0);
      instances0.deleteWithMissingClass();
      testInstances0.getWords();
      evaluation0.numTrueNegatives(280106549);
      AllFilter allFilter0 = new AllFilter();
      try { 
        Filter.useFilter(instances0, allFilter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.AllFilter", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      Instances instances0 = testInstances0.generate(".bsi");
      instances0.setRelationName(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4909090909090909
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      naiveBayes0.getCapabilities();
      Capabilities capabilities0 = naiveBayes0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      reliefFAttributeEval0.setWeightByDistance(true);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorAbsErr;
      double double1 = evaluation0.m_Unclassified;
      evaluation0.SFPriorEntropy();
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      double double2 = evaluation0.falsePositiveRate((-2));
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.weightedFMeasure();
      double double4 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double4, double3, 0.01);
      
      double double5 = evaluation0.numFalseNegatives((-2));
      assertNotEquals(double5, double3, 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      naiveBayes0.getCapabilities();
      Capabilities capabilities0 = naiveBayes0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      instances0.setRelationName(" ");
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.errorRate();
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.weightedPrecision();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1714.8;
      testInstances0.clone();
      SMOreg sMOreg0 = new SMOreg();
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      testInstances2.clone();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.precision(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      naiveBayesUpdateable0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("allowUnclassifiedInstancesTipText");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalseNegatives((-1));
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("!.$Ev.{PJ8Y");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.falsePositiveRate(1112551770);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.deleteAttributeType(1840);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int int0 = (-138);
      evaluation0.numFalsePositives((-138));
      double double0 = evaluation0.m_ConfLevel;
      try { 
        AbstractClassifier.forName("@relation", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @relation
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("!.$Ev.{PJ8Y");
      LogitBoost logitBoost0 = new LogitBoost();
      JList<SerializedClassifier> jList0 = new JList<SerializedClassifier>((SerializedClassifier[]) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      jList0.removeContainerListener((ContainerListener) null);
      jList0.getSelectedValuesList();
      instances0.retainAll(instances1);
      Evaluation.makeOptionString(logitBoost0, false);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.numTruePositives((-1));
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.1901886006782885
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances0 = testInstances0.generate("@data");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toClassDetailsString(".bsi");
      assertEquals(".bsi\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-z <class name>\n\tOutputs the sorce code repesnting the trained filter.\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(6);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setRelationName("");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.errorRate();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.meanPriorAbsoluteError();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      instances0.stratify(1587);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      textDirectoryLoader0.reset();
      evaluation0.areaUnderROC(5059);
      evaluation0.rootMeanPriorSquaredError();
      double double1 = evaluation0.m_TotalCoverage;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      Version.MAJOR = 1587;
      evaluation0.toMatrixString("-not-unary-class");
      double double2 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double2, 0.01);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName("k4D%:9");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.errorRate();
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      instances0.setRelationName(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.setNumRelationalDate((-3794));
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setRelationName("");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.errorRate();
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName("Hc,ZMt}mzB,U8xSP");
      CostMatrix costMatrix0 = null;
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int int0 = 78;
      evaluation0.numFalseNegatives(78);
      evaluation0.toClassDetailsString();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel(".bsi", instances0, 78, (String[]) null, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .bsi
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setClassType(4286);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumSqrErr;
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = reliefFAttributeEval0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      reliefFAttributeEval0.setSigma(495);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double1 = evaluation0.SFMeanPriorEntropy();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      evaluation0.setPriors(instances0);
      double double2 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.rootMeanSquaredError();
      assertEquals(double3, double1, 0.01);
      
      double double4 = evaluation0.numTruePositives((-1));
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("*q8wjEeS6fJ/_Uy*slS", arrayList0, 31);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[3];
      DenseInstance denseInstance0 = new DenseInstance(0);
      instances0.add((Instance) denseInstance0);
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("=ZtbPJjw7lw>~4jq]X4");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      MockRandom mockRandom0 = new MockRandom();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Evaluation.makeOptionString(votedPerceptron0, false);
      double double0 = evaluation0.meanAbsoluteError();
      double double1 = evaluation0.falseNegativeRate((-2324));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setRelationName("");
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 325, 325);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      naiveBayes0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      try { 
        Evaluation.evaluateModel((Classifier) naiveBayes0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.bayes.NaiveBayes:
         // 
         // -K
         // \tUse kernel density estimator rather than normal
         // \tdistribution for numeric attributes
         // -D
         // \tUse supervised discretization to process numeric attributes
         // 
         // -O
         // \tDisplay model in old format (good when there are many classes)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName(".arff");
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.SFMeanPriorEntropy();
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopies(jRip0, 479);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 479;
      doubleArray0[1] = (double) 479;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 479;
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, (-49.73025809173));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-49.73025809173), (int[]) null, 811);
      try { 
        evaluation1.evaluateModelOnce((Classifier) jRip0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "distributionForInstance");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int int0 = 78;
      MockRandom mockRandom0 = new MockRandom();
      textDirectoryLoader0.getDirectory();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      try { 
        evaluation0.evaluateModelOnce((Classifier) simpleLogistic0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0E-6), intArray0, (-1));
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) classificationViaRegression0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      naiveBayes0.getCapabilities();
      naiveBayes0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      reliefFAttributeEval0.setWeightByDistance(true);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      reliefFAttributeEval1.getOptions();
      reliefFAttributeEval1.getCapabilities();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(18);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setClassType(4286);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumSqrErr;
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4286;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) 4286;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 2.0);
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("getRevision");
      Evaluation evaluation0 = new Evaluation(instances1);
      try { 
        evaluation0.toClassDetailsString("Al_");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setRelationName("-v\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int int0 = 454;
      evaluation0.toClassDetailsString("-v\n");
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName(".arff");
      CostMatrix costMatrix0 = null;
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.SFMeanPriorEntropy();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      AbstractClassifier.makeCopy(multiClassClassifierUpdateable0);
      evaluation0.numTrueNegatives(496);
      evaluation0.toMatrixString();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Capabilities capabilities0 = naiveBayes0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      reliefFAttributeEval0.setWeightByDistance(true);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorAbsErr;
      double double1 = evaluation0.m_Unclassified;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      capabilities0.enableDependency(capabilities_Capability0);
      Instances instances1 = new Instances(instances0);
      instances0.stratify(1319);
      evaluation0.SFEntropyGain();
      Bagging bagging0 = new Bagging();
      bagging0.getCapabilities();
      JRip jRip0 = new JRip();
      Capabilities capabilities1 = jRip0.getCapabilities();
      capabilities1.getOtherCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate("}o?!kbDJey&Qa");
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      try { 
        sVMLightLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      Instances instances0 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.m_SumSqrPredicted;
      TestInstances testInstances1 = new TestInstances();
      testInstances0.clone();
      double double1 = evaluation0.m_SumSqrClass;
      double double2 = evaluation0.m_ClassPriorsSum;
      // Undeclared exception!
      try { 
        evaluation0.precision(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 5, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName("-v\n");
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalseNegatives((-651));
      evaluation0.fMeasure(480);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-1042));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.recall((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.truePositiveRate((-713));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("combinationRuleTipText");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 61
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      try { 
        evaluation0.updateStatsForPredictor(2445.92, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 93;
      CSVLoader cSVLoader0 = new CSVLoader();
      int[] intArray0 = new int[1];
      intArray0[0] = 93;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(93, intArray0, 101);
      try { 
        evaluation0.updateStatsForPredictor(2445.92, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName("Percentage split value needs be >0 and <100.");
      MockFile mockFile0 = new MockFile("ert");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("U{&-,/D_lF");
      testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toSummaryString("KNNTipText", false);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      instances0.setRelationName("Wu!?");
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      instances0.toArray();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@data";
      stringArray0[2] = "@relation";
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = reliefFAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("0JGr4 ;Y]>~|F");
      TestInstances testInstances1 = new TestInstances();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName("Hc,ZMt}mzB,U8xSP");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int int0 = 78;
      evaluation0.numFalseNegatives(78);
      evaluation0.toCumulativeMarginDistributionString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.correct();
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setRelationName("Wu!?");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)99;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".arff";
      stringArray0[1] = "Wu!?";
      stringArray0[2] = "@data";
      Evaluation.main(stringArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2294.1);
      doubleArray0[1] = (-2294.1);
      doubleArray0[2] = (-2294.1);
      doubleArray0[3] = (-2294.1);
      doubleArray0[4] = (-2294.1);
      doubleArray0[5] = (-2294.1);
      SparseInstance sparseInstance0 = new SparseInstance(1.2000000029802322, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName("Hc,ZMt}mzB,U8xSP");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.22499999403953552;
      doubleArray0[1] = 0.22499999403953552;
      doubleArray0[2] = 0.22499999403953552;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.22499999403953552, doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Capabilities capabilities0 = new Capabilities(filteredClassifier0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getCapabilities();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities1 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("seedTipTeXxt");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Capabilities capabilities0 = naiveBayes0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities1 = reliefFAttributeEval0.getCapabilities();
      reliefFAttributeEval0.listOptions();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedAreaUnderROC();
      evaluation0.addNumericTrainClass((-1.0), 3164.0);
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CostMatrix costMatrix0 = null;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 754.7;
      int[] intArray0 = new int[6];
      int int0 = 86;
      intArray0[0] = 86;
      evaluation0.addNumericTrainClass(10.0, 2434.9685);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        pipedWriter0.append('F');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      PART pART0 = new PART();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      testInstances0.setNumString((-1));
      intArray0[3] = (-1);
      intArray0[4] = (-2);
      intArray0[5] = (-2);
      intArray0[6] = (-2);
      intArray0[7] = (-2);
      SparseInstance sparseInstance0 = new SparseInstance(0.07500000298023224, doubleArray0, intArray0, (-2));
      evaluation0.addNumericTrainClass(0.7, (-2329.9752824765383));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      Instances instances0 = testInstances0.generate();
      instances0.setRelationName("VhFCIBO6t)/hdVn");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.correct();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setRelationName("");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1598.42;
      doubleArray0[1] = 1598.42;
      doubleArray0[2] = 1598.42;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = 1598.42;
      doubleArray0[5] = 1598.42;
      doubleArray0[5] = 1598.42;
      double double0 = evaluation0.falsePositiveRate(2);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_SumSqrPredicted;
      evaluation0.weightedAreaUnderPRC();
      double double2 = evaluation0.numFalseNegatives(2);
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.unweightedMacroFmeasure();
      double double3 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      IBk iBk0 = new IBk((-1112551771));
      String string0 = Evaluation.getGlobalInfo(iBk0);
      assertEquals("\nSynopsis for weka.classifiers.lazy.IBk:\n\nK-nearest neighbours classifier. Can select appropriate value of K based on cross-validation. Can also do distance weighting.\n\nFor more information, see\n\nD. Aha, D. Kibler (1991). Instance-based learning algorithms. Machine Learning. 6:37-66.", string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel(".bsi", instances0, (-2), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .bsi
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "P|0]G_k1trQ\">S";
      stringArray0[1] = "P|0]G_k1trQ\">S";
      stringArray0[3] = "P|0]G_k1trQ\">S";
      try { 
        Evaluation.evaluateModel("weka.classifiers.meta.ClassificationViaRegression", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      Evaluation.handleCostOption("", 0);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[1];
      evaluation0.m_NumFolds = (-2831);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      doubleArray0[0] = 754.715217428179;
      int[] intArray0 = new int[6];
      intArray0[0] = (-2);
      intArray0[1] = (-2);
      intArray0[2] = (-1);
      intArray0[3] = (-2);
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.m_SumSqrPredicted;
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.meanPriorAbsoluteError();
      boolean boolean0 = evaluation0.equals((Object) null);
      assertFalse(boolean0);
      
      double double3 = evaluation0.pctIncorrect();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[5];
      try { 
        Evaluation.evaluateModel(stringArray0[3], stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.handleCostOption(" ", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
