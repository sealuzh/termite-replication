/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 06:23:04 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("A JSONArray text must start with '['", "A JSONArray text must start with '['");
      JSONObject jSONObject2 = jSONObject1.put("A JSONArray text must start with '['", 0.0);
      jSONObject2.optDouble("A JSONArray text must start with '['");
      JSONObject.valueToString(jSONObject2);
      long long0 = jSONObject0.getLong("A JSONArray text must start with '['");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      hashMap0.put((Double) null, (Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      jSONObject0.optInt("ixj;}V^C[/m%", 5);
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0992338308014475
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("h VJA8cf", hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("]]b%2", (-5.8710707013700585));
      jSONObject1.optLong("]]b%2");
      String string0 = jSONObject0.toString((-203), (-203));
      assertNotNull(string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = "{T<q";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{T<q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {T<q
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5917629735996164
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "{z7>:^lo*:0v4<Q\"y";
      JSONObject jSONObject0 = new JSONObject((Object) "{z7>:^lo*:0v4<Q\"y");
      jSONObject0.toJSONArray((JSONArray) null);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 65, 1175);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((Short) null, jSONObject0);
      JSONObject jSONObject1 = jSONObject0.putOpt("i+u$7", hashMap0);
      jSONObject0.put("_.,_~", (-5.8710707013700585));
      // Undeclared exception!
      try { 
        jSONObject1.toString((-242), (-136));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{bzmW;^5GWyv6R{GC8N3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {bzmW;^5GWyv6R{GC8N3
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("", object0);
      boolean boolean0 = jSONObject1.isNull("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0951521981483863
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("JSONArray[", 2233.117901);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.getInt("JSONArray[");
      jSONObject1.put("4Z!^4<utHQ=u4K\"v?J", 1);
      jSONObject1.isNull("\t");
      JSONObject jSONObject2 = jSONObject0.put("getgetClass", 1476L);
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "to";
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("to", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Double.min((-279.3297234), (-279.3297234));
      Double.isFinite(Double.NaN);
      Double.max((-93.8), Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Boolean boolean0 = new Boolean(true);
      jSONObject0.putOpt("A JSONObject text must begin with '{'", boolean0);
      boolean boolean1 = jSONObject0.optBoolean("A JSONObject text must begin with '{'");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4997889404812157
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1181, (Object) null);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1181] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Hew\"q]_+moc~-", (-1186.40127972037));
      jSONObject0.isNull("getvalueOf");
      jSONObject1.getInt("Hew\"q]_+moc~-");
      String string0 = null;
      try { 
        jSONObject1.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1809520586087259
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("i+u$7", hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("_.,_~", 0.0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('Y');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0);
      jSONObject1.write(stringWriter2);
      Short short0 = new Short((short)70);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("false");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "false";
      stringArray0[1] = "false";
      stringArray0[2] = "false";
      stringArray0[3] = "false";
      stringArray0[4] = "";
      stringArray0[5] = "false";
      stringArray0[6] = "false";
      stringArray0[7] = "false";
      stringArray0[8] = "false";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", (-342L));
      long long0 = jSONObject1.optLong((String) null);
      assertEquals(0L, long0);
      
      JSONObject jSONObject2 = jSONObject0.putOpt("false", (Object) null);
      long long1 = jSONObject2.getLong("");
      assertEquals((-342L), long1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(",:]}/\"[{;=#", 2233.117901);
      boolean boolean0 = jSONObject0.isNull(",:]}/\"[{;=#");
      assertFalse(boolean0);
      
      double double0 = new Float(2233.117901);
      String string0 = JSONObject.quote("-d</");
      assertEquals("\"-d<\\/\"", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1192.1692672849);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.accumulate("Substring bounds error", jSONArray1);
      assertEquals(1, jSONObject0.length());
      
      JSONArray jSONArray2 = jSONObject0.getJSONArray("Substring bounds error");
      assertNotSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      
      Double double0 = new Double(0.0);
      Double.max(1.0, 0.0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("(2][ug<,", 0.0);
      jSONObject1.getDouble("(2][ug<,");
      try { 
        jSONObject1.getJSONObject("(2][ug<,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(2][ug<,\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.quote("wheel.json.JSONTokener");
      JSONObject jSONObject1 = jSONObject0.accumulate("\"wheel.json.JSONTokener\"", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("r\b5~\"Jl59", stringWriter0);
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.append("r\b5~\"Jl59", float0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("H]e", hashMap0);
      boolean boolean0 = jSONObject1.isNull("H]e");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getputOpt", (Map) null);
      Long long0 = new Long((-2487L));
      JSONObject.numberToString(long0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("getputOpt");
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("lon", "lon");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = jSONObject0.putOpt("lon", jSONObject1);
      JSONObject jSONObject3 = jSONObject0.getJSONObject("lon");
      assertSame(jSONObject3, jSONObject2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "loqn";
      jSONObject0.putOpt("loqn", "loqn");
      try { 
        jSONObject0.getLong("loqn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"loqn\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("aSgQ\"BMtB:<av l<", (Collection) linkedList0);
      Byte byte0 = new Byte((byte) (-52));
      JSONObject jSONObject2 = jSONObject1.accumulate("aSgQ\"BMtB:<av l<", byte0);
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "Expected a ',' or ']'";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or ']'", (Collection) linkedList0);
      try { 
        jSONObject1.getJSONObject("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.put("getpush", 0.0);
      long long0 = jSONObject0.getLong("getpush");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("NyIgD", "NyIgD");
      try { 
        jSONObject0.getBoolean("NyIgD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"NyIgD\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("] is not a JSONObject.", "] is not a JSONObject.");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((-2462.5F));
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONObject.", float0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject.getNames((Object) hashMap0);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.2857353728425127
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-387));
      JSONObject jSONObject1 = jSONObject0.putOpt("s", short0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject1.put("0", (Collection) linkedList0);
      String[] stringArray0 = new String[6];
      stringArray0[1] = "iM2SP4]E";
      stringArray0[2] = "[y{zG},U(%Mg1";
      stringArray0[4] = "iM2SP4]E";
      JSONObject jSONObject2 = jSONObject0.put(")6dES,-av", (-380.08689));
      jSONObject2.toString();
      jSONObject2.toString((-4099));
      jSONObject0.put("", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("0");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      boolean boolean0 = jSONObject0.optBoolean("Btn_", true);
      assertTrue(boolean0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("getvalues", 2504.6706);
      double double0 = jSONObject1.optDouble("getvalues");
      assertEquals(2504.6706, double0, 0.01);
      
      long long0 = jSONObject1.getLong("getvalues");
      assertEquals(2504L, long0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject.valueToString(jSONArray0, (-2889), (-2241));
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("B6!g/=)rX^bC!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of B6!g/=)rX^bC!
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      HashMap<Short, Object> hashMap1 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.put("getgetChars", 1.0);
      long long0 = new Long(4108L);
      boolean boolean0 = jSONObject0.has("getgetChars");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)92);
      JSONObject jSONObject1 = jSONObject0.accumulate("en", byte0);
      jSONObject1.getDouble("en");
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-387));
      JSONObject jSONObject1 = jSONObject0.putOpt("is", short0);
      jSONObject1.remove("is");
      String string0 = JSONObject.valueToString(jSONObject1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      Float float0 = new Float(1.0F);
      hashMap0.put(float0, float0);
      hashMap0.keySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      Long long0 = new Long((-1696L));
      hashMap0.put("DJ1Lr ng", long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a number.";
      stringArray0[1] = "] is not a number.";
      stringArray0[0] = "] is not a number.";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = "] is not a number.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = jSONObject1.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-387));
      jSONObject0.putOpt("is", short0);
      Object object0 = jSONObject0.opt("is");
      assertEquals((short) (-387), object0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String string0 = jSONObject0.toString(1270, 58);
      JSONObject jSONObject1 = new JSONObject(string0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0, (-3359), (-1932));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      HashMap<Short, Object> hashMap1 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(":kJE# ku", 1942);
      jSONObject1.optInt(":kJE# ku");
      String[] stringArray0 = JSONObject.getNames((Object) hashMap1);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean((String) null);
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("JSONArray[", 1.0);
      Short short0 = new Short((short)21);
      Double double0 = new Double(0.0);
      try { 
        jSONObject0.append("JSONArray[", "JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[JSONArray[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      Short short0 = new Short((short) (-2620));
      hashMap0.put(short0, short0);
      JSONObject.getNames((Object) hashMap0);
      JSONObject.valueToString(hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.Short@0000000002\":java.lang.Short@0000000002}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{z7>:^l*:0v4<Q\"y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 9 of {z7>:^l*:0v4<Q\"y
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("y[.trAI+!nT97", false);
      jSONObject0.accumulate("geCtoUnsignedLong", "y[.trAI+!nT97");
      Byte byte0 = new Byte((byte) (-40));
      boolean boolean0 = jSONObject1.optBoolean("y[.trAI+!nT97", true);
      assertEquals(2, jSONObject1.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.doubleToString(2147483645);
      assertEquals("2.147483645E9", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((-2462.5F));
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONObject.", float0);
      jSONObject0.getString("] is not a JSONObject.");
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject.valueToString(boolean0, 16, 16);
      try { 
        jSONObject1.getInt("java.lang.Float@0000000003");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@0000000003\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("kDF.4dcNem+5", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      HashMap<Short, Object> hashMap1 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.put("\n", (Map) hashMap0);
      int int0 = jSONObject0.optInt("\n", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("23%Lm6&@b5H|C", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      String string0 = jSONObject1.optString("23%Lm6&@b5H|C");
      assertNotNull(string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      HashMap<Short, Object> hashMap1 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Short short0 = new Short((short)2482);
      Short.compare((short)2482, (short)2482);
      Object object0 = new Object();
      double double0 = jSONObject0.optDouble("%YQ@H3}y", (double) (short)21);
      assertEquals(21.0, double0, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getgetChars", 1.0);
      String string0 = jSONObject1.optString("getgetChars", "&QaeL/X");
      assertNotNull(string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      HashMap<Short, Object> hashMap1 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      hashMap1.put((Short) null, (Object) null);
      Long long0 = new Long(0L);
      hashMap1.put((Short) null, long0);
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0, (-3376), 22);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("val");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of val
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)69);
      hashMap0.put(short0, jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("_.,_~", (-5.8710707013700585));
      double double0 = jSONObject1.optDouble("_.,_~");
      assertEquals((-5.8710707013700585), double0, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (-813));
      jSONObject1.optDouble("Bad value from toJSONString: ", (double) (-813));
      String string0 = "E!M>{n`gw24k_(!";
      try { 
        jSONObject1.getLong("E!M>{n`gw24k_(!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"E!M>{n`gw24k_(!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("u", true);
      jSONObject1.append(")Z9.uo4G,%", (Object) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      Writer writer0 = jSONObject0.write(stringWriter0);
      JSONObject.testValidity(writer0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("JSONArray[", 3479.274567641481);
      try { 
        jSONObject1.getBoolean("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray[\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(boolean0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("getparseUnsignedLong");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      HashMap<Short, Object> hashMap1 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)432);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      jSONObject0.put("cbgPBS@{?9", (Collection) linkedList0);
      linkedList1.add(jSONObject0);
      Short short1 = new Short((short)0);
      Byte byte0 = new Byte((byte)96);
      hashMap1.put(short1, byte0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("cbgPBS@{?9");
      JSONObject.getNames((Object) jSONArray0);
      HashMap<Integer, Short> hashMap2 = new HashMap<Integer, Short>();
      assertTrue(hashMap2.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      short short0 = (short) (-387);
      Short short1 = new Short((short) (-387));
      jSONObject0.putOpt("is", short1);
      try { 
        jSONObject0.getJSONArray("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      Short short0 = new Short((short)16);
      hashMap0.put(short0, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      Float float0 = new Float(0.0F);
      Float.sum(0.0F, 0.0F);
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put(float0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean("is");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.8734738482993778
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double double0 = new Double(340.046422);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "java.lang.Float@0000000001.";
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000001.", (-2403L));
      jSONObject1.optInt("java.lang.Float@0000000001.");
      JSONObject.quote("LcZ-HH:E^qm8i");
      String string1 = "";
      JSONTokener jSONTokener0 = new JSONTokener("J[`]51&f(@LLp");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of J[`]51&f(@LLp
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("23Q", (-486.5));
      assertEquals((-486.5), double0, 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-12), (-12));
      Short.toUnsignedInt((short) (-2458));
      Short.toUnsignedInt((short)12);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("null", object0);
      try { 
        jSONObject1.getDouble("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-387));
      Short.toUnsignedInt((short) (-1044));
      Short.toUnsignedInt((short)12);
      JSONObject jSONObject1 = jSONObject0.putOpt("s", short0);
      jSONObject1.getDouble("s");
      JSONObject.doubleToString((short) (-387));
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("isnotifyAll");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("unP]; `f[CMAxJ5S8>q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"unP]; `f[CMAxJ5S8>q\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString((-1296), 58);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "cHP>I\\";
      jSONObject0.optLong("cHP>I", (-1357L));
      int int0 = (-3195);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject((-3195));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3195] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("bq|g%s\"_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"bq|g%s\\\"_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.1044874173845955
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", (double) 32);
      jSONObject0.optLong("");
      jSONObject1.optLong("", 0L);
      jSONObject0.toString();
      Double double0 = new Double(1825.71733075508);
      Double.sum(0.0, 32L);
      Double.sum(0.0, 0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.8413336879264581
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = JSONObject.quote("9/)JBl<n4dZpU{");
      assertEquals("\"9/)JBl<n4dZpU{\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Map) null);
      long long0 = jSONObject0.optLong("\"9/)JB\\l<n4dZpU{\"");
      assertEquals(0L, long0);
      
      String string1 = JSONObject.valueToString((Object) null, (-1000), (-1000));
      assertEquals("null", string1);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-6100L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((Integer) null, (Double) null);
      jSONObject0.optInt(",:]}/\"[{;=#");
      JSONObject jSONObject1 = jSONObject0.optJSONObject("!q6s?gs@H)#%tS");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Float float0 = new Float(0.0);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean(",", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("is", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("loqn", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "loqn");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("i+u$7", hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("_.,_~", 0.0);
      jSONObject1.getInt("_.,_~");
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject1.getLong("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      StringWriter stringWriter0 = new StringWriter();
      hashMap0.remove((Object) stringWriter0, (Object) stringWriter0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or ']'", (Collection) linkedList0);
      try { 
        jSONObject1.getInt("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("gethashCode");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("] i` not a n!mber.", "JSONArray[");
      assertEquals("JSONArray[", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("mNull key.", "mNull key.");
      assertEquals("mNull key.", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(2061);
      Float float0 = new Float(344.9F);
      JSONObject.valueToString(float0, 2061, 2061);
      boolean boolean0 = jSONObject0.has("java.lang.Float@0000000002");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("|L`\">X", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble("isfloatToIntBits");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isfloatToIntBits\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1057.095602));
      assertEquals("-1057.095602", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.quote("y\"3/g4n9p|[@7F3_s^");
      assertEquals("\"y\\\"3/g4n9p|[@7F3_s^\"", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
      
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("1", (-714));
      assertEquals((-714), int0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = JSONObject.quote("Jt!nhgql9VID/&Mo");
      assertEquals("\"Jt!nhgql9VID/&Mo\"", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("getgetChars", 32);
      assertEquals(32, int0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~j
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.accumulate((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(0L);
      try { 
        jSONObject0.append((String) null, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("c2C%y5j^:er@OI", (Object) null);
      Short short0 = new Short((short)92);
      String string0 = JSONObject.valueToString(short0, (short)92, (short)92);
      assertNotNull(string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.1064016171444855
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject.quote("(s'3O @CIgH[gU");
      JSONObject jSONObject0 = new JSONObject((Object) "\"(s'3O @CIgH[gU\"");
      jSONObject0.put("(s'3O @CIgH[gU", 1L);
      jSONObject0.toString();
      Long long0 = new Long(1L);
      JSONObject.testValidity(long0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("getreverse", 2820L);
      try { 
        jSONObject0.getJSONArray("Expected a ',' or '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      Byte byte0 = new Byte((byte) (-33));
      hashMap0.put(byte0, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(235, (-3175));
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote("iscompare");
      assertEquals("\"iscompare\"", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = JSONObject.valueToString("put", (-59), (-59));
      assertNotNull(string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = JSONObject.valueToString(linkedList0, (-634), 62);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Double double0 = new Double((-3363));
      String string0 = JSONObject.valueToString(double0, (-3363), (-3363));
      assertNotNull(string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      // Undeclared exception!
      jSONObject0.toString(4564, 4564);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.2171019241705447
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = new JSONObject((Object) "\",\n\"");
      JSONObject.getNames(jSONObject0);
      // Undeclared exception!
      jSONObject0.toString(1485);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-2093064), (-2093064));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.9850550847754815
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = JSONObject.quote("9/)JBl<n4dZpU{");
      assertEquals("\"9/)JBl<n4dZpU{\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.toString(34);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)122);
      hashMap0.put("for", ",:]}/\"[{;=#");
      hashMap0.put("Expected '", byte0);
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("{\"java.lang.String@0000000003\":\"java.lang.String@0000000004\",\"java.lang.String@0000000005\":java.lang.Byte@0000000006}", false);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Double double0 = new Double(1.0);
      hashMap0.put(double0, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.keySet();
      jSONObject0.remove("Null key.");
      String string0 = JSONObject.quote("/8");
      assertEquals("\"/8\"", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = JSONObject.quote("has");
      assertEquals("\"has\"", string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("}$#.oQGTES&V&=f)", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Object) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1185.6186218115997);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("ZGPn`Nv*g(W+zo", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = jSONObject0.opt("] is not a number.");
      assertNull(object0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Long long0 = new Long(1L);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Integer integer0 = new Integer((-866));
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short) (-1320));
      jSONObject0.keys();
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("getpush", 1185.6186218115997);
      long long0 = jSONObject0.getLong("getpush");
      assertEquals(1185L, long0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONObject text must begin with '{'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.put("i", (Object) "i");
      Object object0 = jSONObject0.get("i");
      assertEquals("i", object0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"i\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("a$|");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of a$|
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{UTPz?:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 6 of {UTPz?:
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
