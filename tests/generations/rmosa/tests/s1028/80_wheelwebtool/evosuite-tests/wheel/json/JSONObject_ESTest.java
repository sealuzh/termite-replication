/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 09 19:51:11 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      String string0 = JSONObject.valueToString(hashMap0, 4, 2268);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.543082936399969
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      String string0 = jSONObject1.toString((-4969), (-2713));
      assertNotNull(string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{<+RGEP.>VKCL");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 13 of {<+RGEP.>VKCL
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONArray[", false);
      Object object0 = jSONObject1.remove("JSONArray[");
      assertEquals(false, object0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("A JSONObject text must begin with '{'", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      long long0 = jSONObject0.optLong("isspliterator", 444L);
      assertEquals(444L, long0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      long long0 = jSONObject0.optLong("brkETeh", (-690L));
      assertEquals((-690L), long0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("Expected a ',' or '}'");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5936174605927704
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("brkETeh", 0L);
      jSONObject0.optInt("brkETeh", (-2635));
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("Expected '", (-1936));
      assertEquals((-1936), int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9722469794234418
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short) (-2978));
      jSONObject0.put("Unterminated string", (Object) short0);
      int int0 = jSONObject0.optInt("Unterminated string");
      assertEquals((-2978), int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("71^!C8mS0p", (-1.9881595436133546));
      assertEquals((-1.9881595436133546), double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 1505L);
      double double0 = jSONObject0.optDouble("");
      assertEquals(1505.0, double0, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("FSfH", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("\"@(B\"", "lO+e.VLtwB/hJ8");
      jSONObject0.opt("\"@(B\"");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\"java.lang.Object@0000000002\"", (double) 20);
      boolean boolean0 = jSONObject0.has("\"java.lang.Object@0000000002\"");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONTokener", 0L);
      String string0 = jSONObject1.getString("wheel.json.JSONTokener");
      assertNotNull(string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 2260);
      long long0 = jSONObject1.getLong("");
      assertEquals(2260L, long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("!", (-395.9439092095));
      long long0 = jSONObject0.getLong("!");
      assertEquals((-395L), long0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getwait", 0L);
      int int0 = jSONObject1.getInt("getwait");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("@", (-837L));
      int int0 = jSONObject0.getInt("@");
      assertEquals((-837), int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("brkETeh", 0L);
      jSONObject0.getDouble("brkETeh");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",1/V", (-3700L));
      double double0 = jSONObject1.getDouble(",1/V");
      assertEquals((-3700.0), double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9433483923290391
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 7, (-1045));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.71467244957808
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 5406, 5406);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1786549963416462
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      hashMap0.putIfAbsent((Boolean) null, (JSONArray) null);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 8, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7846300761330085
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      // Undeclared exception!
      jSONObject0.toString(2988, 2988);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.849916406680119
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("isiterator", (Object) "isiterator");
      // Undeclared exception!
      jSONObject0.toString(4051);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      hashMap0.put((JSONArray) null, (JSONArray) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-1204));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.2798542258336674
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("FSf'7", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Float, JSONArray> hashMap1 = new HashMap<Float, JSONArray>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-3301L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-923), (-923));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("", (Collection) linkedList0);
      String string0 = jSONObject0.optString("", "co");
      assertNotNull(string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3996281119286729
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "*SDeI07PA8P&d:Qm{h-");
      jSONObject0.put("wheel.json.JSONObject$1", (double) 58);
      double double0 = jSONObject0.optDouble("wheel.json.JSONObject$1", (double) 0);
      assertEquals(4, jSONObject0.length());
      assertEquals(58.0, double0, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("\"@(B\"");
      assertNull(object0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Byte byte0 = new Byte((byte)55);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("val", 0.0);
      long long0 = jSONObject0.getLong("val");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("@", 1534L);
      int int0 = jSONObject1.getInt("@");
      assertEquals(1534, int0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3718061232922234
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getsplit", (Map) hashMap0);
      try { 
        jSONObject1.getDouble("getsplit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getsplit\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("brkETeh", 0L);
      jSONObject1.get("brkETeh");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{<+RGEP.>VKCL");
      jSONTokener0.nextClean();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of {<+RGEP.>VKCL
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("B]x>>$H*{cI~7%V)du<", 34);
      assertEquals(34, int0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("JSONArray[");
      assertNull(object0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3986496111888456
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(65);
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.846230464785453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      jSONObject0.put("9n&Jn", (Map) hashMap0);
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.784617558418788
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(34, 34);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = JSONObject.valueToString(linkedList0, 4, 4);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0, 284, 1503);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 1341, 59);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-995), (-995));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1534547943999285
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      Double double0 = new Double(0.0);
      hashMap0.put(double0, (JSONArray) null);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2722L);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate("ha", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = JSONObject.quote("4/ezSaWK1th\u0003");
      assertEquals("\"4/ezSaWK1th\\u0003\"", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("{</");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{<\\/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.8717814824679821
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = JSONObject.quote("\"\"");
      assertEquals("\"\\\"\\\"\"", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.167723997949895
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Byte byte0 = new Byte((byte)49);
      jSONObject0.putOpt("brkETeh", byte0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("8( 7^ll|IO6NHNMTe'", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(825);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, integer0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("brkETeh", 0L);
      jSONObject1.optString("brkETeh");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("/o@UfG.G?[e3:jV?@b");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("=e", "=e");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("=e");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.9251211907908186
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.put("i0[>:MUlxG;'-/`e", (double) 0.0F);
      double double0 = jSONObject0.optDouble("i0[>:MUlxG;'-/`e");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.4311119194329758
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("false", (Collection) linkedList0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.338872053314866
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getmin", 1.0);
      long long0 = jSONObject1.optLong("getmin");
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) jSONObject0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("");
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", 560L);
      try { 
        jSONObject1.getJSONObject("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 0L);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("RDc:tCj^h1", true);
      try { 
        jSONObject0.getInt("RDc:tCj^h1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"RDc:tCj^h1\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", 560L);
      double double0 = jSONObject1.getDouble("Unterminated string");
      assertEquals(560.0, double0, 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\b", (Object) jSONObject0);
      try { 
        jSONObject1.getLong("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.9338099989206319
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("", (Collection) linkedList0);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.8200759753606217
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\r", true);
      boolean boolean0 = jSONObject1.getBoolean("\r");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.553848341566947
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("FSfH", "FSfH");
      try { 
        jSONObject1.getBoolean("FSfH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"FSfH\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("FSf'7", false);
      boolean boolean0 = jSONObject1.getBoolean("FSf'7");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1647.07534511));
      assertEquals("-1647.07534511", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONTokener jSONTokener0 = new JSONTokener("\n");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Expected a ',' or '}'", (Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.append("Expected a ',' or '}'", jSONTokener0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.4218956404837546
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("brkETeh", 0L);
      Integer integer0 = new Integer(65);
      try { 
        jSONObject0.append("brkETeh", integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[brkETeh] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ExpectedQa ',' 5r '}'", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.accumulate("ExpectedQa ',' 5r '}'", jSONObject1);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("4:cd{F?G8", jSONArray0);
      assertEquals(1, jSONObject0.length());
      
      JSONArray jSONArray1 = jSONObject0.getJSONArray("4:cd{F?G8");
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("FSf'7", "FSf'7");
      JSONObject jSONObject2 = jSONObject1.put("", (Object) jSONObject1);
      jSONObject2.toString((-773), (-4969));
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getmin", 1.0);
      jSONObject1.accumulate("getmin", "getmin");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Float float0 = new Float((float) (byte)79);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertFalse(jSONTokener0.more());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.9443532497746079
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.toString(47, 4473);
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.006214565944081
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Bh9F&Lc!qr`=s9o;");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 16 of {Bh9F&Lc!qr`=s9o;
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{?5a`Yi\"T");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {?5a`Yi\"T
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", (Collection) linkedList0);
      boolean boolean0 = jSONObject1.isNull("Expected a ',' or '}'");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(780);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("getmin");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("[");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1748));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.981102200701706
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("/t.SA7B#");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("[]", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("getformat", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("@yKT^ T");
      assertEquals("", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("@");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}rP=&H:ZS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }rP=&H:ZS
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.8008293981022103
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "W");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (double) (-923));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("<Vra QBS@sD[jcD 9", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[", 976L);
      int int0 = jSONObject1.optInt("[");
      assertEquals(1, jSONObject0.length());
      assertEquals(976, int0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("wheel.json.JSONTokener");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONTokener\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.has("' and instead saw '");
      assertFalse(boolean0);
  }
}
