/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 10:12:55 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = new Instances((String) null, arrayList0, 37);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(37);
      instances0.add((Instance) binarySparseInstance0);
      int int0 = 1879048192;
      Attribute attribute0 = new Attribute(".arff", (List<String>) null, 1879048192);
      JRip jRip0 = new JRip();
      Attribute attribute1 = new Attribute("@attribute", (List<String>) null, 3646);
      JRip jRip1 = new JRip();
      Consumer<Attribute> consumer0 = (Consumer<Attribute>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      instances0.setClass(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 0, 1.0E-12);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      attribute0.addStringValue("date");
      SparseInstance sparseInstance0 = new SparseInstance(1);
      Attribute attribute2 = null;
      try {
        attribute2 = new Attribute("", instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header for relation-valued attribute should not contain any instances
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = new Instances((String) null, arrayList0, 42);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(42, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      int int0 = 0;
      Attribute attribute0 = new Attribute(".arff", (List<String>) null, 0);
      JRip jRip0 = new JRip();
      arrayList0.add(attribute0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.setClass(attribute0);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: Cannot handle string class!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = null;
      Instances instances0 = new Instances((String) null, arrayList0, 42);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(42, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      int int0 = 0;
      Attribute attribute0 = new Attribute((String) null, 42);
      JRip jRip0 = new JRip();
      arrayList0.add(attribute0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.setClass(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(4);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 42
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = new Instances((String) null, arrayList0, 37);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(37);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(959);
      instances0.add((Instance) binarySparseInstance1);
      instances0.add((Instance) binarySparseInstance0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " doesn't seem to exist!");
      Attribute attribute0 = new Attribute("u", (List<String>) null, 11);
      attribute0.setWeight(1549.7443464081618);
      JRip jRip0 = new JRip();
      instances0.setClass(attribute0);
      instances0.setClass(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.splitData(instances0, 959, 11);
      SparseInstance sparseInstance0 = new SparseInstance(15000);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = new Instances((String) null, arrayList0, 37);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(37);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute(".arff", (List<String>) null, 1879048192);
      JRip jRip0 = new JRip();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      instances0.setClass(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 4, 37);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(0.0, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 0.75, 0);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jRip_NominalAntd1.splitData(instances0, 2143.102625932398, 2143.102625932398);
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = null;
      Instances instances0 = new Instances((String) null, arrayList0, 37);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(37);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute("installed", (List<String>) null, 11);
      JRip jRip0 = new JRip();
      arrayList0.add(attribute0);
      instances0.setClass(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1);
      jRip_RipperRule0.grow(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedData(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8493853896864545
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = new Instances((String) null, arrayList0, 37);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(37);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute(".arff", (List<String>) null, 1879048192);
      JRip jRip0 = new JRip();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.add(attribute0);
      arrayList0.forEach(consumer0);
      instances0.setClass(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(6.7);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1879048192
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 42);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(42, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      Attribute attribute0 = new Attribute(".arff", (List<String>) null, 0);
      JRip jRip0 = new JRip();
      arrayList0.add(attribute0);
      Consumer<Attribute> consumer0 = (Consumer<Attribute>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.setClass(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-1205.178838931));
      jRip_RipperRule0.grow(instances0);
      assertEquals((-1205.178838931), jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = new Instances((String) null, arrayList0, 42);
      double[] doubleArray0 = new double[1];
      SparseInstance sparseInstance0 = new SparseInstance(42, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      int int0 = 0;
      Attribute attribute0 = new Attribute(".arff", (List<String>) null, 0);
      JRip jRip0 = new JRip();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.setClass(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(4);
      jRip_RipperRule0.grow(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedData(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 37);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(37);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute(".arff", (List<String>) null, 1879048192);
      JRip jRip0 = new JRip();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      instances0.setClass(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-5.20945336562895));
      jRip_RipperRule0.grow(instances0);
      assertEquals((-5.20945336562895), jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = new Instances((String) null, arrayList0, 37);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(37);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      Attribute attribute0 = new Attribute(".arff", (List<String>) null, 1879048192);
      JRip jRip0 = new JRip();
      instances0.setClass(attribute0);
      instances0.setClass(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, (-1191.322618343847), 0);
      jRip_NominalAntd0.splitData(instances0, 0, (-1191.322618343847));
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = new Instances((String) null, arrayList0, 37);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(37);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      Attribute attribute0 = new Attribute(".arff", (List<String>) null, 1879048192);
      JRip jRip0 = new JRip();
      instances0.setClass(attribute0);
      arrayList0.add(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 2.0, (-1185.111290231005));
      jRip_NominalAntd0.splitData(instances0, 2.0, 2);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = new Instances((String) null, arrayList0, 37);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(37);
      binarySparseInstance0.toString();
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      Attribute attribute0 = new Attribute(".arff", (List<String>) null, 1879048192);
      JRip jRip0 = new JRip();
      instances0.setClass(attribute0);
      instances0.setClass(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.accuRate = (double) 37;
      jRip_NumericAntd0.splitData(instances0, 2, 37);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      jRip0.setDebug(true);
      boolean boolean0 = jRip0.getDebug();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 37);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(37);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute(".arff", (List<String>) null, 1879048192);
      instances0.setClass(attribute0);
      Attribute attribute1 = new Attribute("", (List<String>) null, 0);
      arrayList0.add(attribute1);
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass((-382.16538290707155), instances0, 300.0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1879048192, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 37);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(37);
      Attribute attribute0 = new Attribute(".arff", (List<String>) null, 1879048192);
      JRip jRip0 = new JRip();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      instances0.setClass(attribute0);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      instances0.add((Instance) binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, true);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-2146866368));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("\nNo pruning: growing a rule ...");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      jRip_NominalAntd0.value = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-P";
      stringArray0[1] = "rNkK";
      stringArray0[2] = "";
      stringArray0[3] = "zx5e0";
      stringArray0[4] = "\nPruning the rule ...";
      stringArray0[5] = "Nv8/<<;~-";
      stringArray0[6] = "d^N5 ^";
      stringArray0[7] = "aspects it seems to be quite comparable to the original ripper ";
      stringArray0[8] = "packageListWithVersion.txt";
      jRip0.setOptions(stringArray0);
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getCheckErrorRate());
      
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setUsePruning(false);
      jRip0.getCapabilities();
      jRip0.getOptions();
      jRip0.toString();
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nOne condition: size = ", arrayList0, 59);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(59);
      jRip_RipperRule0.grow(instances0);
      assertEquals(59.0, jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      jRip0.getTechnicalInformation();
      jRip0.getCheckErrorRate();
      Instances instances0 = null;
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-6));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = "zx1<= ";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("zx1<= ", arrayList0, 1345);
      Attribute attribute0 = new Attribute(".bsi");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 0, 2);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-43));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Attribute attribute0 = new Attribute("LF6X&e");
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(408);
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip_NumericAntd0.splitData(instances0, 4, 3243.3431);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, linkedList0);
      Attribute attribute1 = new Attribute((String) null, 2);
      attribute1.getRevision();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_NominalAntd0.accu = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(3);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute(".bsi", (List<String>) null, 4);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(70);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(boolean0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4705441679528448
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = new Instances((String) null, arrayList0, 37);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(37);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute(".arff", (List<String>) null, 1879048192);
      JRip jRip0 = new JRip();
      instances0.setClass(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Attribute attribute1 = new Attribute("", (List<String>) null, 0);
      arrayList0.add(attribute1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd1.splitData(instances0, (-413.0), 2);
      jRip_NominalAntd1.splitData(instances0, 37, 0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1686, intArray0, 0);
      instances1.add((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-2045.3517);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1686;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 1686;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1686;
      doubleArray0[8] = (double) 1686;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.dataset();
      try { 
        jRip0.rulesetForOneClass(0, (Instances) null, 890.543675, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, linkedList0);
      Attribute attribute1 = new Attribute((String) null, 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.toString();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_NominalAntd0.accu = (double) 1;
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.debugTipText();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("Whether debug information is output to the console.", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      Attribute attribute0 = new Attribute("alamin: ", (-1410));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getMaxInfoGain();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute(",");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      sparseInstance0.setMissing(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = new Instances((String) null, arrayList0, 37);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(37);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute(".arff", 11);
      JRip jRip0 = new JRip();
      instances0.setClass(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      Attribute attribute1 = new Attribute("", (List<String>) null, 0);
      arrayList0.add(attribute1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAttrValue();
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4705441679528448
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = new Instances((String) null, arrayList0, 37);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(37);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute(".arff", (List<String>) null, 1879048192);
      JRip jRip0 = new JRip();
      instances0.setClass(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      Attribute attribute1 = new Attribute("", (List<String>) null, 0);
      arrayList0.add(attribute1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd1.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      jRip_NominalAntd1.splitData(instances0, (-413.0), 2);
      jRip_NominalAntd1.splitData(instances0, 37, 0);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getUsePruning();
      assertTrue(boolean0);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1633, intArray0, 1683);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances1.add((Instance) binarySparseInstance1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("J7owo1Dw=H[WXuD", linkedList0, 11);
      instances0.sort(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, true);
      Attribute attribute1 = null;
      try {
        attribute1 = new Attribute("\nSet with attribute deleted:\n", ".enable(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'e'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-668));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      Attribute attribute0 = new Attribute(".arff", 1263);
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.measureExtraArcs();
      jRip0.setMinNo(0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      bayesNet1.measureMDLScore();
      jRip_NumericAntd0.toString();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      assertEquals(11, stringArray0.length);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = (-665);
      jRip0.setFolds((-2139505586));
      Instances instances0 = null;
      try {
        instances0 = new Instances("-P", arrayList0, (-665));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -665
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.value = 851.9268864350322;
      jRip_NumericAntd0.accu = 4.6;
      SparseInstance sparseInstance0 = new SparseInstance(79);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.value = (-1.0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      jRip0.setDebug(true);
      BayesNet bayesNet0 = new BayesNet();
      jRip0.getCapabilities();
      Instances instances0 = bayesNet0.m_Instances;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip0.getOptions();
      assertTrue(jRip0.getDebug());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      jRip0.setUsePruning(true);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", "", protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAccuRate();
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      long long0 = jRip0.getSeed();
      assertEquals(1L, long0);
      
      jRip0.enumerateMeasures();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.optimizationsTipText();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("The number of optimization runs.", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4642567260559776
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptions((String[]) null);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      
      JRip jRip1 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("wHxPakFvi^KHDz7", list0, (-103));
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertFalse(jRip1.getDebug());
      assertTrue(jRip1.getUsePruning());
      assertEquals("wHxPakFvi^KHDz7 <= NaN", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // N not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("\nNo pruning: growing a rule ...");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      
      jRip0.setOptions((String[]) null);
      Attribute attribute0 = new Attribute("{5:_F8as.GK");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(true);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 511.2627156733929;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-966.0);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      sparseInstance0.toStringMaxDecimalDigits(729);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      Attribute attribute0 = new Attribute("", "");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.accuRate = (double) 729;
      jRip_NominalAntd0.getAccu();
      jRip_NominalAntd0.getRevision();
      double double0 = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = 11;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 11;
      intArray0[4] = 121;
      intArray0[5] = 3;
      intArray0[6] = 729;
      intArray0[7] = 0;
      intArray0[8] = 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3084.3171148), intArray0, 2184);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.seedTipText();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals("The seed used for randomizing the data.", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("`GMfVG:LT_E", (String) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed(1502L);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1257);
      // Undeclared exception!
      try { 
        binarySparseInstance0.classAttribute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      jRip0.globalInfo();
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptimizations();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("R,n8wL_", list0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.att = attribute0;
      jRip_NominalAntd0.getCover();
      ClassOrder classOrder0 = new ClassOrder();
      linkedList1.add("R,n8wL_");
      attribute0.setStringValue("R,n8wL_");
      // Undeclared exception!
      try { 
        classOrder0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances1 = new Instances(instances0);
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass(3, instances1, 4, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.usePruningTipText();
      assertEquals("Whether pruning is performed.", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertTrue(boolean0);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.4273916305367944
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      jRip0.setOptions(stringArray0);
      SparseInstance sparseInstance0 = new SparseInstance(1960);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("N:X-kh[AiY/0-?>", arrayList0, 2140);
      attribute0.getRevision();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertTrue(boolean0);
      
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      Attribute attribute1 = new Attribute((String) null, "", protectedProperties1);
      Attribute attribute2 = new Attribute("@attribute", "", 11);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute2);
      Attribute attribute3 = new Attribute("relational", protectedProperties1);
      attribute1.setStringValue("@end");
      jRip_NumericAntd1.getAttr();
      jRip_NumericAntd0.getRevision();
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("N:X-kh[AiY/0-?> <= NaN", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      String string1 = jRip_RipperRule1.getRevision();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals("8118", string1);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals("8118", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("type", (-2618));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals("type = ", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.0652173913644494
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute(".bsi", (List<String>) null, 4);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      jRip_NominalAntd0.splitData(instances0, 1015.6794348421894, 4);
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 2, 4);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1, instancesArray0.length);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      
      jRip0.listOptions();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.8300841311252594
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = new Instances((String) null, arrayList0, 37);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(37);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute("@relation", (List<String>) null, 11);
      arrayList0.add(attribute0);
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList1.forEach(consumer0);
      instances0.setClass(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.accu = 1816.9994063429;
      jRip_NumericAntd0.splitData(instances0, 1.0E-8, 1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-366.53), (int[]) null, 3);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers(binarySparseInstance0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      jRip0.foldsTipText();
      jRip_NumericAntd0.getRevision();
      assertEquals(1.0, jRip_NumericAntd0.getSplitPoint(), 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JRip jRip0 = new JRip();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      int[] intArray0 = new int[5];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1480.2, intArray0, (-393));
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null, arrayList0, protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Object object0 = jRip_NumericAntd0.copy();
      // Undeclared exception!
      try { 
        protectedProperties0.put(object0, jRip0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ProtectedProperties cannot be modified!
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JRip jRip0 = new JRip();
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getDebug();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(boolean0);
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      DenseInstance denseInstance0 = new DenseInstance(78);
      // Undeclared exception!
      try { 
        denseInstance0.toString(800);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 800
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.getRevision();
      assertEquals("8118", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(72);
      Random.setNextRandom((-3719));
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute((String) null, (String) null);
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(" => null=", string0);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("T7|QE]=26Vq21y");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 0;
      int[] intArray0 = new int[0];
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(0, doubleArray0, intArray0, 211);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "NDYj^d]eQ";
      stringArray0[3] = "NDYj^d]eQ";
      JRip.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1230);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.340130811198818
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = new Instances((String) null, arrayList0, 25);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(25);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_X6xc?p#{VRc]");
      Attribute attribute0 = new Attribute("@relation", (List<String>) null, 1879048192);
      attribute0.setWeight(1879048192);
      JRip jRip0 = new JRip();
      instances0.setClass(attribute0);
      instances0.setClass(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.splitData(instances0, 2, 0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      SparseInstance sparseInstance0 = new SparseInstance(1);
      jRip0.getFolds();
      jRip0.getOptions();
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double double0 = jRip_RipperRule0.getConsequent();
      assertFalse(jRip0.getDebug());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[1];
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }
}
