/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 03:13:45 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.NotActiveException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player((-119));
      player0.setMoney((-119));
      player0.pack();
      float float0 = player0.getMoney();
      assertEquals((-119.0F), float0, 0.01F);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player(695, "Player.unpack(): *** WARNING *** data is not of proper type!", "AUn:J8(S8%hP", 5575);
      Player player1 = new Player(14080, "", "Player.unpack(): *** WARNING *** data is not of proper type!", 695, 5);
      player0.setJoinOK(player1, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2PA%l_B(WGl");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player1.setX((-1013.9076F));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Player.unpack(): *** WARNING *** data is not of proper type!");
      player0.setConnected(false);
      player1.getX();
      float float0 = Player.TOLERANCE;
      player0.gangStrength();
      player0.pack();
      player1.gangStrength();
      player0.isJoinOK(player1, false);
      player1.pack();
      assertEquals((-1013.9076F), player1.getX(), 0.01F);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(2733);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9?RVYtUEDnZE#");
      player0.setConnected(false);
      player0.getX();
      player0.pack();
      float float0 = Player.TOLERANCE;
      Player player1 = new Player(2733, "", "", (short)4919);
      player1.setDead();
      player0.gangStrength();
      player1.pack();
      player1.isJoinOK(player0, false);
      player0.gangStrength();
      player0.getX();
      player0.isConnected();
      int int0 = Packable.GAME_STATE;
      // Undeclared exception!
      try { 
        player1.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player(2733);
      player0.setJoinOK(player0, false);
      Player player1 = new Player(2733);
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertFalse(player1.isDead());
      assertEquals(0, player1.getPictureId());
      assertEquals("0.0.0.0", player1.getIP());
      assertTrue(player1.isConnected());
      assertTrue(boolean0);
      assertEquals("Player2733", player1.toString());
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(1, player1.getStrength());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player(2733);
      player0.setJoinOK(player0, false);
      boolean boolean0 = player0.isJoinOK(player0, true);
      assertFalse(boolean0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0, player0.getPictureId());
      assertEquals("Player2733", player0.getName());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(2733);
      player0.setJoinOK(player0, true);
      boolean boolean0 = player0.isJoinOK(player0, true);
      assertTrue(boolean0);
      assertEquals("Player2733", player0.getName());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((-4));
      byte[] byteArray0 = player0.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 16831);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7853437136837007
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player((byte)15, "3[_ ", "3[_ ", 0, 0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)15;
      player0.reset(false);
      player0.unpack(byteArray0);
      player0.setDead((long) (byte)0);
      Player player1 = new Player((byte)15, "3[_ ", 1245);
      player1.type();
      player0.getIP();
      int int0 = player0.getStrength();
      assertTrue(player0.isDead());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player();
      player0.setMoney(1503.6146F);
      float float0 = player0.getMoney();
      assertEquals(1503.6146F, float0, 0.01F);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5688032438074955
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(0, "okP[%pQwV%Md", "NMQ.}B6<:QH3", 4919);
      Player player1 = new Player(1, (String) null, "okP[%pQwV%Md", (short)4919);
      byte[] byteArray0 = new byte[0];
      player0.unpack(byteArray0);
      player1.unpack(byteArray0);
      player1.setDead((long) (byte)106);
      player0.setDead(3687L);
      player1.isDead();
      FileSystemHandling.shouldAllThrowIOExceptions();
      player1.type();
      player1.type();
      player1.getIP();
      player1.getIP();
      Player player2 = new Player(4919, "", (-1100));
      Player player3 = new Player(1);
      boolean boolean0 = player0.isJoinOK(player3, true);
      assertEquals(3687L, player0.getTimeOfDeath());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(10, ".*[.]class$", "", 0, 0);
      int int0 = player0.gangStrength();
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(".*[.]class$", player0.getIP());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player(1, (String) null, (-3032));
      player0.getName();
      player0.gangStrength();
      System.setCurrentTimeMillis(627L);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((-1189));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-50);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1158), (byte)108);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.679983198025875
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(4919, "okP[%pQwV%Md", "NMQ.}B6<:QH3", 4919);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-50);
      player0.unpack(byteArray0);
      player0.setDead((long) (short)4919);
      player0.isDead();
      player0.setY(10.0F);
      player0.getY();
      player0.isDead();
      Player player1 = new Player();
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.881766240540306
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((-902), "c:dm", "", 4, (-1715));
      Party party0 = player0.boss;
      player0.setDead((-334L));
      player0.getPictureId();
      Player player1 = new Player(0);
      player0.setJoinOK(player1, false);
      player0.getName();
      player0.setDead((-1287L), true);
      player0.setY((short)4919);
      player1.getPictureId();
      player0.reset(true);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.197846119469557
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player();
      player0.gangStrength();
      Player player1 = new Player();
      Player player2 = new Player((short)4919, "", (-30592));
      player0.pack();
      player0.setY(1);
      player0.setX(0.1F);
      player1.setY((-3958.1353F));
      player2.toString();
      player1.getPictureId();
      player0.setX((short)4919);
      player1.setY(0.2F);
      player2.type();
      Player player3 = new Player(1, "", "0Br", (-1347));
      player3.setJoinOK(player1, true);
      player2.getStrength();
      player1.getIP();
      assertEquals(0.2F, player1.getY(), 0.01F);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player(1462, ".gGy", "c:dm", 12800, 12800);
      Party party0 = player0.boss;
      player0.setDead(0L);
      assertTrue(player0.isDead());
      
      Player player1 = new Player(12800, "5>7ICd[/!^", "", 10);
      int int0 = player1.getPictureId();
      assertFalse(player1.isDead());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player((-30720), "", "", 4919);
      Player player1 = new Player((short)4919);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)4;
      player1.unpack(byteArray0);
      player1.setDead(0L);
      assertTrue(player1.isDead());
      
      boolean boolean0 = player0.isDead();
      assertFalse(boolean0);
      
      player0.type();
      player0.getIP();
      assertEquals(5, player0.type());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player((-672), "AUNwX!9W7P%dG", "AUNwX!9W7P%dG", (-672), (-672));
      int int0 = player0.gangStrength();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals((-672), int0);
      assertTrue(player0.isConnected());
      assertEquals((-672), player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Party party0 = new Party((short)4919);
      player0.head = party0;
      player0.setDead(2661L, false);
      player0.type();
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.gangStrength();
      assertEquals(1, int0);
      
      Player player1 = new Player((byte)10);
      String string0 = player0.getIP();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("0.0.0.0", string0);
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals("Player-1", player0.toString());
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player();
      int int0 = Packable.ACTION;
      Player player1 = new Player();
      player0.head = (Party) player1;
      player0.add(player1);
      player0.prev = (Party) player1;
      // Undeclared exception!
      player0.gangStrength();
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead();
      player0.setZ(1705.3754F);
      Player player1 = new Player(2109);
      Party party0 = player1.head;
      player0.prev = null;
      player0.getZ();
      player0.getPictureId();
      Party party1 = new Party();
      party1.remove(player0);
      party1.getSubparty();
      party1.add(player0);
      party1.next = (Party) player0;
      party1.add(player0);
      player0.add(party1);
      player0.isDead();
      MockPrintStream mockPrintStream0 = new MockPrintStream("state.Player$JoinInfo");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      mockPrintStream0.println(0);
      objectOutputStream0.write(0);
      try { 
        objectOutputStream0.defaultWriteObject();
        fail("Expecting exception: NotActiveException");
      
      } catch(NotActiveException e) {
         //
         // not in call to writeObject
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player(3);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-50);
      player0.unpack(byteArray0);
      player0.setDead(2696L);
      player0.isDead();
      player0.type();
      player0.getIP();
      assertEquals(2696L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player(5476);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(1, player0.getStrength());
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertFalse(boolean0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player5476", player0.getName());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player((-2777));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertFalse(player0.isDead());
      assertFalse(boolean0);
      assertEquals("Player-2777", player0.toString());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.425910149055313
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player(2937, "E}DO*yFwF?dUxPiO", "E}DO*yFwF?dUxPiO", 0, 154);
      player0.reset(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("C@J&zF9}+.<IWDss");
      PrintStream printStream0 = mockPrintStream0.append('e');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      Party party0 = player0.head;
      mockPrintStream1.print('`');
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      dataOutputStream0.close();
      player0.pack(dataOutputStream0);
      int int0 = player0.gangStrength();
      assertEquals(154, int0);
      
      float float0 = player0.getMoney();
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, player0.getPictureId());
      
      Player player1 = new Player(2519, "E}DO*yFwF?dUxPiO", "!;TNH)Uo:J==", 2519);
      long long0 = player1.getTimeOfDeath();
      assertEquals(1, player1.getStrength());
      assertEquals(2519, player1.getPictureId());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$w;Lq!~DzIo0O}xPR");
      Player player0 = new Player((-18686));
      player0.gangStrength();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-57);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.786456060735981
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(0, "a|xpC]@]h|?Ayrr}", "*F?=p", 0, 0);
      Player player1 = new Player(10, "a|xpC]@]h|?Ayrr}", "*F?=p", 2516, 3);
      player0.remove(player1);
      player0.setDead();
      player0.setConnected(true);
      player0.isConnected();
      player0.toString();
      boolean boolean0 = player1.isJoinOK(player0, false);
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player(0);
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player((-3832), (String) null, (-3832));
      Player player1 = new Player();
      player0.head = (Party) player1;
      assertEquals(0, player1.getPictureId());
      assertEquals("Player-1", player0.head.toString());
      
      player0.toString();
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals((-3832), player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player((-2), (String) null, (-2));
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player(3);
      player0.reset(false);
      Party party0 = player0.next;
      player0.head = null;
      player0.gangStrength();
      int int0 = Packable.ACTION;
      System.setCurrentTimeMillis((-511L));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player((-2777));
      player0.setZ((-2777));
      int int0 = 4275;
      String string0 = "module.ModuleBrowserDialog$ModuleFilter";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player((-1549), "@6P69+1A", "-K5LA|$G}qal?p", (-1549), (-1549));
      player0.pack();
      player0.setMoney((-1549));
      player0.setDead(2796L, true);
      int int0 = player0.getStrength();
      assertEquals(2796L, player0.getTimeOfDeath());
      assertEquals((-1549), int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.0497978423100225
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player((-1549), "@6P69+1A", "@6P69+1A", (-1549), (-1549));
      player0.pack();
      int int0 = Packable.UNDEFINED;
      player0.getZ();
      player0.setDead((-15L));
      player0.getY();
      player0.setDead();
      player0.getTimeOfDeath();
      player0.getName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2732409507095364
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player(5);
      Party party0 = player0.prev;
      player0.setZ(0.0F);
      player0.setY(0.2F);
      Party party1 = player0.prev;
      player0.remove((Party) null);
      player0.gangStrength();
      player0.setZ((-249.80069F));
      player0.setY(5);
      player0.isDead();
      player0.gangStrength();
      player0.getMoney();
      player0.getZ();
      player0.setY((-2856.121F));
      player0.getY();
      player0.setY((-89.0F));
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player((byte)0);
      int int0 = Packable.GAME_EVENT;
      player0.getZ();
      player0.setZ((-2777));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4919, (byte)5);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead(2508L, true);
      player0.isDead();
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player(0, "t%@{", "", (-1));
      assertEquals(0L, player0.getTimeOfDeath());
      
      player0.setDead((-1L), true);
      player0.getPictureId();
      long long0 = player0.getTimeOfDeath();
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player(1974);
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      player0.setX((byte)0);
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player(1);
      boolean boolean0 = player0.isConnected();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player1", player0.toString());
      assertEquals(1, player0.getStrength());
      assertTrue(boolean0);
      assertEquals(0, player0.getPictureId());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player((-1865));
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-50);
      player0.unpack(byteArray0);
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals("Player-1865", player0.toString());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player(1);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player((-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-107);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player(1761);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((short)4919);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      player0.pack(dataOutputStream0);
      assertEquals(31, byteArrayOutputStream0.size());
      
      player0.pack();
      player0.pack();
      assertEquals("Player1761", player0.toString());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player((-1), "", (-1));
      player0.pack();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertEquals((-1), player0.getPictureId());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Player player0 = new Player(5, "", "c[&FcQk", 28, 13776);
      int int0 = player0.gangStrength();
      assertEquals(13776, int0);
      
      int int1 = player0.getStrength();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals(13776, int1);
      assertEquals("", player0.getIP());
      assertEquals(28, player0.getPictureId());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player(1974);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream((short)4919);
      int int0 = Packable.GAME_STATE;
      player0.getName();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      try { 
        dataInputStream0.readInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ");
      Player player0 = new Player((-1479));
      // Undeclared exception!
      try { 
        player0.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Player player0 = new Player(0);
      int int0 = player0.gangStrength();
      assertEquals(1, int0);
      
      int int1 = player0.type();
      assertEquals(5, int1);
      
      float float0 = player0.getY();
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("Player0", player0.getName());
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Player player0 = new Player(32533);
      player0.setMoney(0.0F);
      player0.type();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Player player0 = new Player(3);
      Party party0 = player0.next;
      int int0 = player0.gangStrength();
      int int1 = player0.getStrength();
      assertEquals(0, player0.getPictureId());
      assertEquals("Player3", player0.toString());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(1, int1);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(int1 == int0);
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Player player0 = new Player((-1772));
      player0.setDead(16077L);
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Player player0 = new Player(2733);
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }
}
