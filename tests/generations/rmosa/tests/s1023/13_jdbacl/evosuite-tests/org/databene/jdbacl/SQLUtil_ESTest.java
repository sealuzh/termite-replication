/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 03:14:06 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance("CLOB");
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance("CLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8734738482993778
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view`$ y~po>w");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "alter materialized view`$ y~po>w";
      stringArray0[1] = "";
      stringArray0[2] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter materialized view`$ y~po>w", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter materialized view`$ y~po>w", false, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter materialized view`$ y~po>w");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "alter materialized view`$ y~po>w");
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, printWriter0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT \"alter materialized view`$ y~po>w\" ", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.max(1005, 1005);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0, integer0);
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DBDataType.getInstance(335544776, "CLOB");
      arrayList0.add((DBColumn) defaultDBColumn0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("CLOB, CLOB", string0);
      
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CLOB", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(4268, "updateCharacterStream(");
      dBDataType0.isAlpha();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "updateCharacterStream(";
      stringArray0[1] = "updateCharacterStream(";
      stringArray0[2] = "updateCharacterStream(";
      stringArray0[3] = "updateCharacterStream(";
      stringArray0[4] = "updateCharacterStream(";
      stringArray0[5] = "updateCharacterStream(";
      stringArray0[6] = "updateCharacterStream(";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE updateCharacterStream( = 'updateCharacterStream(' AND updateCharacterStream( = 'updateCharacterStream(' AND updateCharacterStream( = 'updateCharacterStream(' AND updateCharacterStream( = 'updateCharacterStream(' AND updateCharacterStream( = 'updateCharacterStream(' AND updateCharacterStream( = 'updateCharacterStream(' AND updateCharacterStream( = 'updateCharacterStream('", string0);
      
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = new Integer(4268);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer1);
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string1 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("CLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CLOB");
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer0 = RawTransaction.ABORT;
      Integer.toUnsignedLong(368);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0, integer0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "CLOB";
      stringArray0[1] = "CLOB";
      stringArray0[2] = "D?s.UfC#V {JAG!)";
      stringArray0[3] = "CLOB";
      stringArray0[4] = "CLOB";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " <=BE SSLRefused", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \" <=BE SSLRefused\" ", string0);
      
      String string1 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint  <=BE SSLRefused", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[5] = "callse";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("callse");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "callse", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("callse", true, dBPrimaryKeyConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.addIndex(dBUniqueIndex0);
      dBPrimaryKeyConstraint0.addColumnName("callse");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getDeclaredGlobalTemporaryTablesSchemaDescriptor();
      SQLUtil.isProcedureCall("update");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      assertEquals("CONSTRAINT callse ", stringBuilder1.toString());
      assertEquals("CONSTRAINT callse ", stringBuilder0.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'");
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertEquals("SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "hyls~U{Zc>";
      stringArray0[1] = "hyls~U{Zc>";
      stringArray0[2] = "SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'";
      stringArray0[3] = "SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'";
      String string1 = SQLUtil.join("hyls~U{Zc>", "hyls~U{Zc>", stringArray0, "SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'", "hyls~U{Zc>", stringArray0);
      assertEquals("hyls~U{Zc> join SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%' as hyls~U{Zc> on hyls~U{Zc>.hyls~U{Zc> = hyls~U{Zc>.hyls~U{Zc> and hyls~U{Zc>.hyls~U{Zc> = hyls~U{Zc>.hyls~U{Zc> and hyls~U{Zc>.SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%' = hyls~U{Zc>.SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%' and hyls~U{Zc>.SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%' = hyls~U{Zc>.SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'", string1);
      
      Character character0 = Character.valueOf('+');
      String string2 = SQLUtil.renderValue(character0);
      assertEquals("'+'", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.reverse();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execbzb?47rfn,d^kj");
      SQLUtil.removeComments("execbzb?47rfn,d^kj");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 296, "attempt to add child list to itself");
      defaultDBColumn0.setNullable(true);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLUtil.substituteMarkers("", "_>&eo*^t@", "_>&eo*^t@");
      DBSchema dBSchema0 = new DBSchema("selectexeb4z");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "selectexeb4z");
      long long0 = (-3274L);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(700, (-3274L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 700
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop materialized view", false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder("exeb4z[?47rfn,N7kj");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("exeb4z[?47rfn,N7kj", stringBuilder1);
      SQLUtil.addOptionalCondition("exeb4z[?47rfn,N7kj", stringBuilder2);
      assertEquals("exeb4z[?47rfn,N7kj and exeb4z[?47rfn,N7kj or exeb4z[?47rfn,N7kj", stringBuilder2.toString());
      assertEquals("exeb4z[?47rfn,N7kj and exeb4z[?47rfn,N7kj or exeb4z[?47rfn,N7kj", stringBuilder0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("CLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0, integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Obp");
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("}t>PEA&QpNwuC9", defaultDBTable0, dBDataType0, integer3, integer2);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Obp");
      mockPrintWriter0.print(1075L);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("CLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0, integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CLOB");
      mockPrintWriter0.print(1L);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      jMXPrincipal0.equals(constraintDescriptorList0);
      constraintDescriptorList0.add((Object) jMXPrincipal0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.management.remote.JMXPrincipal cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLUtil.normalize("8-:\u0007)(", true);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'";
      stringArray0[1] = "SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%', SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%') REFERENCES null(SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%', SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%')", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Boolean boolean0 = new Boolean("callselect");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("callselect");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SQLUtil.isDML("callselect");
      dataDictionaryImpl0.getDeclaredGlobalTemporaryTablesSchemaDescriptor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      JdbcConnectionPool.create("SYSFUN", "c013800d-00fb-2647-07ec-000000134f30", "c013800d-00fb-2648-07ec-000000134f30");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SYSCS_DIAG";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SYSSTAT", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1039);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter1);
      assertEquals("foreign key constraint", dBForeignKeyConstraint0.getObjectType());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("CLOB");
      DBCatalog dBCatalog0 = new DBCatalog();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      String string0 = "=V3Y1VbKM";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("=V3Y1VbKM");
      String[] stringArray0 = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("=V3Y1VbKM", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "callorg.h2.command.ddl.droprole", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("CLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0, integer0);
      dBDataType0.isAlpha();
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      String[] stringArray0 = new String[5];
      stringArray0[2] = "Obp";
      stringArray0[3] = "Obp";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.isDML("alter materialized view`$ y~po>w");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(")");
      DBDataType dBDataType0 = DBDataType.getInstance(1297, "alter materialized view`$ y~po>w");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("36d5", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("ALTER MATERIALIZED VIEW`$ Y~PO>W(3,3)", stringBuilder0.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "CLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "execbzb?47rfn,d^kj";
      stringArray0[1] = "";
      defaultDBTable0.getReferrers();
      String string0 = SQLUtil.join("NULLIF", (String) null, stringArray0, "truncate_o 78v-vyt_9", "", stringArray0);
      assertEquals("NULLIF join truncate_o 78v-vyt_9 as  on null.execbzb?47rfn,d^kj = .execbzb?47rfn,d^kj and null. = .", string0);
      
      boolean boolean0 = SQLUtil.isQuery("truncate_o 78v-vyt_9");
      assertFalse(boolean0);
      
      Random.setNextRandom(974);
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "CLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CLOB");
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("cas", defaultDBTable0, dBDataType0, integer0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "create tableb8'a~f(@j<r(%y";
      stringArray0[1] = "create tableb8'a~f(@j<r(%y";
      stringArray0[2] = "CHECKPOINT";
      stringArray0[3] = "create tableb8'a~f(@j<r(%y";
      stringArray0[4] = "create tableb8'a~f(@j<r(%y";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "CHECKPOINT";
      stringArray1[1] = "CHECKPOINT";
      stringArray1[2] = "CHECKPOINT";
      stringArray1[3] = "CHECKPOINT";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("create tableb8'a~f(@j<r(%y", stringArray0, "alter index", "create tableb8'a~f(@j<r(%y", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("alper index", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Xwt6", false, "Xwt6", "insert");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK insert", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CLOB", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("6h&^QX(Md)LCm");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Md\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"adbin\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLUtil.normalize("VzOfh.", false);
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.normalize("MTa_6JqSd0`^/*", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "dcYQ7m-`)";
      stringArray0[1] = "sD,Bp^<8Miu8+oGDQ9";
      stringArray0[2] = "MTa_6JqSd0 ` ^ /*";
      stringArray0[3] = "yrpt|ic\fi]x";
      stringArray0[4] = "VzOfh.";
      stringArray0[5] = "g299O}4AuF+OdTo3V3%";
      SQLUtil.join("create table ", "MTa_6JqSd0 ` ^ /*", stringArray0, "VzOfh.", "dcYQ7m-`)", stringArray0);
      DBCatalog dBCatalog1 = new DBCatalog();
      dBCatalog0.getSchema("dcYQ7m-`)");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("deleteexecbb?47rfnd^kj", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'deleteexecbb?47rfnd^kj' has no foreign key with the columns (dcYQ7m-`), sD,Bp^<8Miu8+oGDQ9, MTa_6JqSd0 ` ^ /*, yrpt|ic\fi]x, VzOfh., g299O}4AuF+OdTo3V3%)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[5], false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(stringArray0[5], false, dBPrimaryKeyConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      dBPrimaryKeyConstraint0.addColumnName("|Y:I=SpRCl)");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getDeclaredGlobalTemporaryTablesSchemaDescriptor();
      Object object0 = new Object();
      Character character0 = new Character(')');
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      assertEquals("", stringBuilder1.toString());
      
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      String[] stringArray1 = new String[0];
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
      
      boolean boolean0 = SQLUtil.isDML(")}>,s?-e\"ig$zb^[bqt");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[5], true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(stringArray0[5], true, dBPrimaryKeyConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      dBPrimaryKeyConstraint0.addColumnName("callse");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getDeclaredGlobalTemporaryTablesSchemaDescriptor();
      Object object0 = new Object();
      Character character0 = new Character(')');
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      assertNull(pGConnectionPoolDataSource0.getSslfactory());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("execbzb?47rfn,d^kj", false, defaultDBTable0, stringArray0);
      defaultDBTable0.addIndex(dBNonUniqueIndex0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "#_G=J:E^w)gs5m_bt[w", true, stringArray0);
      dBUniqueConstraint0.addColumnName("execbzb?47rfn,d^kj");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getDeclaredGlobalTemporaryTablesSchemaDescriptor();
      Object object0 = new Object();
      Character.valueOf('~');
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      assertEquals(2, (int)integer0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "CLOB");
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType.getInstance("CLOB");
      Integer integer1 = new Integer(40);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NCLOB");
      mockPrintWriter0.print((long) 40);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-214), "~$Lmk?5G{iJlK`$TDRP");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("executesqlj", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("~$LMK?5G{IJLK`$TDRP", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = SQLUtil.normalize("&R-hY54zsA\" !y", false);
      assertEquals("& R - hY54zsA \" !y\"", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "CLOB");
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "p1YGJf";
      stringArray0[1] = "p1YGJf";
      stringArray0[2] = "wcyS`AxJZ\"(1LJ*8H@";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "p1YGJf", true, stringArray0);
      dBPrimaryKeyConstraint0.addColumnName("p1YGJf");
      StringBuilder stringBuilder1 = new StringBuilder();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getDeclaredGlobalTemporaryTablesSchemaDescriptor();
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBDataType dBDataType0 = DBDataType.getInstance((-590), " = ");
      Integer integer0 = new Integer((-1789859325));
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = new Integer((-1307));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c013800d-00fb-2641-07ec-000000134f30", defaultDBTable0, dBDataType0, integer1, integer2);
      defaultDBColumn0.addUkConstraint(dBPrimaryKeyConstraint0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "_imFRl\\uIKn`EYn{t";
      DBDataType dBDataType0 = DBDataType.getInstance((-1006), string0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create table", (DBTable) null, dBDataType0, integer0, integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("create table _IMFRL\\UIKN`EYN{T(3,3) NULL", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "(";
      String string1 = "/xe3N*B%3aLhF8g!";
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = (-1090607451);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/xe3N*B%3aLhF8g!");
      int int1 = 1218;
      DBDataType dBDataType0 = DBDataType.getInstance(1218, "delete");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(", defaultDBTable0, dBDataType0, integer0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1090607451), (Object) defaultDBColumn0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1090607451
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("db\"lxvsfh3", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = SQLUtil.normalize("4M1Z(UbA>cjqIyY0.~", true);
      assertEquals("4M1Z (UbA > cjqIyY0.~", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = SQLUtil.normalize("Eh,-ZC*MFw*$z9_", false);
      assertEquals("Eh, - ZC * MFw * $ z9_", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = SQLUtil.normalize("ml;)%8VnL8=", false);
      assertEquals("ml ;) % 8VnL8 =", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "select into";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("select into", stringArray0, "select into", "select into", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.parseColumnTypeAndSize("wu_8)wzzw]vb");
      Character character0 = Character.valueOf('T');
      Character.highSurrogate((-85717687));
      String string0 = SQLUtil.substituteMarkers("wu_8)wzzw]vb", "r|k?", character0);
      assertEquals("wu_8)wzzw]vb", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("cas", defaultDBTable0, dBDataType0, integer0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("cas", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'";
      SQLUtil.isQuery("SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'");
      String[] stringArray1 = new String[9];
      stringArray1[0] = "SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'";
      stringArray1[1] = "SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'";
      stringArray1[2] = "SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'";
      stringArray1[3] = "SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'";
      stringArray1[4] = "SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'";
      stringArray1[5] = "SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'";
      stringArray1[6] = "SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'";
      stringArray1[7] = "SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'";
      stringArray1[8] = "SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'", stringArray1, "TRACE_MAX_FILE_SIZE", "SELECT 1  FROM pg_catalog.pg_attrdef KWHEE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " NOT NULL");
      Boolean boolean0 = SQLUtil.mutatesStructure("callselect");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "callselect";
      stringArray0[1] = "callselect";
      stringArray0[2] = " NOT NULL";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ".", false, stringArray0);
      dBPrimaryKeyConstraint0.setName((String) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (callselect, callselect,  NOT NULL, , )", string0);
      
      String string1 = SQLUtil.normalize("Cost of cheapest plan is ", true);
      assertEquals("Cost of cheapest plan is", string1);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      TableContainer tableContainer0 = new TableContainer("callselect", defaultDBTable0);
      tableContainer0.getTable("/gR`(Eh");
      DBCatalog dBCatalog0 = new DBCatalog();
      String string2 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint constraint", string2);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[35];
      SQLUtil.renderColumnListWithTableName(stringArray0[0], stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLUtil.isProcedureCall("\u0001\u0126");
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("nclob");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "nclob");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("nclob");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("nclob");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'nclob' not found in table 'nclob'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = SQLUtil.normalize("WM2m b|/LZ(", true);
      assertEquals("WM2m b | / L  Z (", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("lC%T<_E", stringBuilder0);
      assertEquals("lC%T<_E", stringBuilder0.toString());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("r)x;t 6T");
      SQLUtil.addOptionalCondition("r)x;t 6T", stringBuilder0);
      assertEquals("r)x;t 6T or r)x;t 6T", stringBuilder0.toString());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = SQLUtil.normalize("SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'", false);
      assertEquals("SELECT 1 FROM pg_catalog.pg_attrdef WHERE adrelid = ? AND adnum = ? AND pg_catalog.pg_get_expr (adbin, adrelid) LIKE '%nextval(%'", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ct4=wxx&p");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintWriter0.print(1L);
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "BLOB";
      stringArray0[1] = "ct4=wxx&p";
      stringArray0[2] = "BLOB";
      stringArray0[3] = "ct4=wxx&p";
      stringArray0[4] = "BLOB";
      stringArray0[5] = "ct4=wxx&p";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "BLOB", true, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      defaultDBTable0.toString();
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[35];
      String string0 = SQLUtil.renderColumnListWithTableName(stringArray0[0], stringArray0);
      assertEquals("null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null\" PRIMARY KEY (, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , )", string1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "execbzb?47rfn,d^kj", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("nclob");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "nclob";
      stringArray0[1] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("nclob");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      char[] charArray0 = new char[0];
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      // Undeclared exception!
      try { 
        stringBuilder2.deleteCharAt(111);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 111
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("WM2m b|/LZ(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: WM2m b|/LZ(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("exeb4z[?47rfn,N7kj");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "update";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("update", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      assertEquals("update.update", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      StringBuilder stringBuilder0 = new StringBuilder(" oyZDsRO8yyGC");
      SQLUtil.addRequiredCondition(" oyZDsRO8yyGC", stringBuilder0);
      assertEquals(" oyZDsRO8yyGC and  oyZDsRO8yyGC", stringBuilder0.toString());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = SQLUtil.normalize("_L.j`&`v}|E=}@@;", true);
      assertEquals("_L.j ` & ` v } | E = } @ @ ;", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLUtil.isDDL("alper index");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "callorg.h2.command.ddl.droprole", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT callorg.h2.command.ddl.droprole ", string0);
      
      String string1 = SQLUtil.leftJoin("callorg.h2.command.ddl.droprole", stringArray0, "PRIMARY KEY ", "drop materialized viewalper index", stringArray0);
      assertEquals("left join PRIMARY KEY  as drop materialized viewalper index on callorg.h2.command.ddl.droprole.null = drop materialized viewalper index.null", string1);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT callorg.h2.command.ddl.droprole UNIQUE ()", string2);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "CLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CLOB");
      Integer integer0 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer1 = new Integer(397);
      DBDataType.jdbcTypeFor("CLOB");
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = new Integer(132);
      Integer integer4 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "logmirror.ctrl");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("callgetbyte(string)");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "callgetbyte(string)";
      stringArray0[1] = "callgetbyte(string)";
      stringArray0[2] = "callgetbyte(string)";
      stringArray0[3] = "nA`";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "callgetbyte(string)", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (callgetbyte(string), callgetbyte(string), callgetbyte(string), nA`)", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.7981925974573865
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLUtil.normalize("8-:\u0007)(", true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "8 - :  7) (";
      stringArray0[1] = "8 - :  7) (";
      stringArray0[2] = "8-:\u0007)(";
      stringArray0[3] = "8-:\u0007)(";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      StringBuilder stringBuilder0 = new StringBuilder("6>_2+2}g&");
      SQLUtil.renderColumnTypeWithSize(dBColumnArray0[0], stringBuilder0);
      assertEquals("6>_2+2}g&CLOB", stringBuilder0.toString());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(6, "]S");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("]S", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("]S ]S NULL", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, stringArray0[0], stringArray0[0], stringArray0);
      assertEquals("null as null on null.null = null.null and null.null = null.null", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[2];
      stringArray1[0] = "select into";
      stringArray1[1] = "select into";
      // Undeclared exception!
      try { 
        SQLUtil.join("select into", "isDistinctSelect=[", stringArray1, "drop table", "getColumnCount", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[1];
      String string0 = SQLUtil.join("zk", "zk", stringArray0, "zk", "- ", stringArray1);
      assertEquals("zk join zk as -  on ", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "execbzb?47rfn,d^kj");
      String[] stringArray0 = new String[4];
      stringArray0[1] = "A-:%],a";
      stringArray0[2] = "execbzb?47rfn,d^kj";
      stringArray0[3] = "execbzb?47rfn,d^kj";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("execbzb?47rfn,d^kj", (String[]) null, "", "execbzb?47rfn,d^kj", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", true, "SQLException", " WHERE ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  ", stringBuilder0.toString());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("exec");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "VlvXq2**";
      stringArray0[1] = "VlvXq2**";
      stringArray0[2] = "VlvXq2**";
      stringArray0[3] = "VlvXq2**";
      stringArray0[4] = "VlvXq2**";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VlvXq2**";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "y1|-*6m7=|&s";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("insertnclob");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("updatec");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("execbzb?47rfn,d^kj", stringBuilder0);
      assertEquals("execbzb?47rfn,d^kj", stringBuilder0.toString());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("org.firebirdsql.jdbc.field.FBCachedLongVarCharField");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("FOREIGN KEY () REFERENCES null()");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[5] = "callse";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("callse");
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("drop materialized viewclobsetstring", true, defaultDBTable0, stringArray0);
      defaultDBTable0.removeIndex(dBNonUniqueIndex0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "callse", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("callse", true, dBPrimaryKeyConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.addIndex(dBUniqueIndex0);
      dBPrimaryKeyConstraint0.addColumnName("callse");
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.reverse();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT callse ", stringBuilder1.toString());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance("CLOB");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "]ecj$vlB";
      stringArray0[1] = "CLOB";
      stringArray0[2] = "org.h2.index.PageData";
      stringArray0[3] = "alter materi";
      stringArray0[4] = "org.h2.index.PageData";
      stringArray0[5] = "CLOB";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "CLOB";
      stringArray1[1] = "CLOB";
      stringArray1[2] = "]ecj$vlB";
      stringArray1[3] = "]ecj$vlB";
      stringArray1[4] = "]ecj$vlB";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.h2.index.PageData", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "CLOB");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals(0, stringBuffer0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "callsel<'t", true, (String[]) null);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT callsel<'t ", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "]S";
      int int0 = 6;
      DBDataType.getInstance(6, "]S");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = true;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop tabledrop indexconstraint", true, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder(6);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      char char0 = '<';
      // Undeclared exception!
      try { 
        stringBuilder1.insert(401, '<');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{*4E}BwQ";
      stringArray0[1] = "call:ea1/p.";
      stringArray0[2] = "{*4E}BwQ";
      stringArray0[3] = "{*4E}BwQ";
      stringArray0[4] = "{*4E}BwQ";
      stringArray0[5] = "{*4E}BwQ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("{*4E}BwQ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY ({*4E}BwQ, call:ea1/p., {*4E}BwQ, {*4E}BwQ, {*4E}BwQ, {*4E}BwQ) REFERENCES null({*4E}BwQ, call:ea1/p., {*4E}BwQ, {*4E}BwQ, {*4E}BwQ, {*4E}BwQ)", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("fM_o:8\"7W=", "YRpt|iC\f]xVx", "fM_o:8\"7W=");
      assertEquals("fM_o:8\"7W=", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = SQLUtil.normalize("y[g2c-;dr45$<", true);
      assertEquals("y [ g2c - ; dr45 $ <", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("alter materialized view`$ y~po>w", stringBuilder0);
      assertEquals("alter materialized view`$ y~po>w", stringBuilder0.toString());
      
      Boolean boolean0 = SQLUtil.mutatesStructure("alter materialized view`$ y~po>w");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("alter index");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into]s");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.7699417419681163
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("hr!vtlk", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      stringBuilder0.reverse();
      SQLUtil.normalize("y1|-*6m7=|&s", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("vht#yTv4G;&SS=4M", (DBSchema) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "y1|-*6m7=|&s";
      stringArray0[1] = "vht#yTv4G;&SS=4M";
      stringArray0[2] = "y1|-*6m7=|&s";
      stringArray0[3] = "drop index";
      stringArray0[4] = "y1 | - * 6m7 = | & s";
      stringArray0[5] = "drop index";
      stringArray0[6] = " AND ";
      stringArray0[7] = "drop index";
      stringArray0[8] = "(";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " AND ", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop index", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("y1 | - * 6m7 = | & s", dBTable0, 2891, "--");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.renderValue(dBCatalog0);
      Integer integer0 = RawTransaction.ABORT;
      assertEquals(1, (int)integer0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = SQLUtil.renderValue("$|di");
      assertEquals("'$|di'", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'";
      stringArray0[1] = "a66=k8W1AH50";
      stringArray0[2] = "a66=k8W1AH50";
      stringArray0[3] = "a66=k8W1AH50";
      String string0 = SQLUtil.leftJoin("a66=k8W1AH50", stringArray0, "SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'", (String) null, stringArray0);
      assertEquals("left join SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%' as null on a66=k8W1AH50.SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%' = null.SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%' and a66=k8W1AH50.a66=k8W1AH50 = null.a66=k8W1AH50 and a66=k8W1AH50.a66=k8W1AH50 = null.a66=k8W1AH50 and a66=k8W1AH50.a66=k8W1AH50 = null.a66=k8W1AH50", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderColumnListWithTableName(stringArray0[0], stringArray0);
      assertEquals("null.null, null.null", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.7689528313755152
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLUtil.normalize("8-:\u0007)(", true);
      DBCatalog dBCatalog0 = new DBCatalog("8-:\u0007)(");
      DBSchema dBSchema0 = new DBSchema("alter mater", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized viewalter materialized viewnclob", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("4M1Z(UbA>cjqIyY0.~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: 4M1Z(UbA>cjqIyY0.~
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = SQLUtil.isDML("deleteexecbb?47rfn\"");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Integer integer0 = new Integer((-392846765));
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcConnectionPool.create("execbzb?47rfn,d^kj", "execbzb?47rfn,d^kj", "execbzb?47rfn,d^kj");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable("alter tableclob", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tableclob", (DBTable) null, (DBDataType) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("org.apache.derby.impl.sql.compile.QueryTreeNodeVector");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("deleteexecbb?47rfn\"^kj");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("M");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[1];
      Boolean boolean0 = SQLUtil.mutatesStructure("alter materialized view`$ y~po>w");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[36];
      String string0 = SQLUtil.renderColumnListWithTableName(stringArray0[0], stringArray0);
      String string1 = SQLUtil.innerJoin("/YS0kR.gml*6", stringArray0, "/YS0kR.gml*6", "/YS0kR.gml*6", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("ZfMBCoh6j{y");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("ZfMBCoh6j{y", stringArray0, "ZfMBCoh6j{y", "ZfMBCoh6j{y", stringArray0);
      assertEquals("left join ZfMBCoh6j{y as ZfMBCoh6j{y on ", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = new String[35];
      String string0 = SQLUtil.join("delete", "delete", stringArray0, "delete", "create ", stringArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join((String) null, "F=?m6_Usn^lY>NKY", stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("null as null on F=?m6_Usn^lY>NKY.null = null.null", string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("deleteexec", "deleteexec", stringArray0, "s^pZ\"D9\"(gL+pds", "deleteexec", stringArray0);
      assertEquals("deleteexec join s^pZ\"D9\"(gL+pds as deleteexec on ", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.join("nclob", "xmlpar", stringArray0, "xmlpar", "xmlpar", stringArray0);
      assertEquals("nclob join xmlpar as xmlpar on xmlpar.null = xmlpar.null and xmlpar.null = xmlpar.null and xmlpar.null = xmlpar.null and xmlpar.null = xmlpar.null and xmlpar.null = xmlpar.null and xmlpar.null = xmlpar.null and xmlpar.null = xmlpar.null and xmlpar.null = xmlpar.null and xmlpar.null = xmlpar.null", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join((String) null, "updatec", stringArray0, "updatec", "updatec", stringArray0);
      assertEquals("updatec as updatec on ", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.innerJoin("!YCm+r3&x_xM", stringArray0, "selectzfmbco6j{y", "alter mateeialized viewclob", stringArray0);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "$eS|3r8&1,U_";
      stringArray0[1] = "SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'";
      stringArray0[2] = "xmlpar";
      stringArray0[3] = "$eS|3r8&1,U_";
      stringArray0[4] = "$eS|3r8&1,U_";
      stringArray0[5] = "xmlpar";
      stringArray0[6] = "SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'";
      stringArray0[7] = "inner";
      String string0 = SQLUtil.join("inner", "inner", stringArray0, " REFERENCES ", "|F^s-5;U", stringArray0);
      assertEquals(" REFERENCES  as |F^s-5;U on inner.$eS|3r8&1,U_ = |F^s-5;U.$eS|3r8&1,U_ and inner.SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%' = |F^s-5;U.SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%' and inner.xmlpar = |F^s-5;U.xmlpar and inner.$eS|3r8&1,U_ = |F^s-5;U.$eS|3r8&1,U_ and inner.$eS|3r8&1,U_ = |F^s-5;U.$eS|3r8&1,U_ and inner.xmlpar = |F^s-5;U.xmlpar and inner.SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%' = |F^s-5;U.SELECT 1  FROM pg_catalog.pg_attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%' and inner.inner = |F^s-5;U.inner", string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("deleteexecbb?47rfn\"^kj", "deleteexecbb?47rfn\"^kj", (String[]) null, "deleteexecbb?47rfn\"^kj", "deleteexecbb?47rfn\"^kj", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "exeb4z[47rfn,N7j";
      stringArray0[1] = "exeb4z[47rfn,N7j";
      String string0 = SQLUtil.innerJoin("exeb4z[47rfn,N7j", stringArray0, "exeb4z[47rfn,N7j", " ADD ", stringArray0);
      assertEquals("exeb4z[47rfn,N7j as  ADD  on exeb4z[47rfn,N7j.exeb4z[47rfn,N7j =  ADD .exeb4z[47rfn,N7j and exeb4z[47rfn,N7j.exeb4z[47rfn,N7j =  ADD .exeb4z[47rfn,N7j", string0);
  }
}
