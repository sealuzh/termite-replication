/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 03:16:00 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.100665982609539
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(8);
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject("{\n        \"java.lang.String@0000000004\": [],\n        \"java.lang.String@0000000007\": \"java.lang.Class@0000000008\",\n        \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2815553875954016
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O4AUga7jn{w\\y)";
      stringArray0[1] = "[";
      stringArray0[2] = "/9%IVGn;6?CG`";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("O4AUga7jn{w\\y)", false);
      jSONObject0.optBoolean("O4AUga7jn{w\\y)", false);
      JSONObject jSONObject1 = jSONObject0.put("[", 38);
      jSONObject1.toString((-323));
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of [
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString((-2541));
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5736944152430543
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("pu", true);
      Short short0 = new Short((short)123);
      JSONObject jSONObject2 = jSONObject0.append("get", short0);
      Byte byte0 = new Byte((byte) (-47));
      Byte.compare((byte)100, (byte) (-86));
      JSONObject jSONObject3 = jSONObject2.append("get", byte0);
      jSONObject3.put("get", (int) (short)123);
      jSONObject0.toString(70);
      JSONObject jSONObject4 = jSONObject0.put("JSONObject[", (-1L));
      jSONObject4.optLong("JSONObject[");
      jSONObject0.keys();
      Double double0 = new Double(186);
      jSONObject2.putOpt("{\n                                                                      \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                      \"java.lang.String@0000000005\": java.lang.Integer@0000000007\n}", double0);
      JSONObject.doubleToString(0.0);
      try { 
        jSONObject1.get("getvalues");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getvalues\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject((-2609));
      linkedList0.add((Object) "Expected '");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.append("Expected '", boolean0);
      JSONArray jSONArray1 = jSONObject0.getJSONArray("Expected '");
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4962962962962963
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Double double0 = new Double((-2054.094));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("", (Object) double0);
      assertEquals(9, jSONObject1.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1479);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", 70);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray0);
      
      jSONObject1.put("LP('Q%<wp", (long) 70);
      long long0 = jSONObject1.getLong("LP('Q%<wp");
      assertEquals(70L, long0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Float.max((-2861.263F), (-2861.263F));
      JSONTokener jSONTokener0 = new JSONTokener("{o0sbCk> ");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {o0sbCk> 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Ex)[\u0003'm*", (Collection) linkedList0);
      jSONObject1.getJSONArray("Ex)[\u0003'm*");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4377134277438377
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("{n6CCY1g", (-489.26581812084936));
      jSONObject1.optDouble("{n6CCY1g");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("{n6CCY1g", object0);
      JSONObject jSONObject2 = jSONObject1.put("{n6CCY1g", (Map) hashMap0);
      jSONObject0.optJSONObject("{n6CCY1g");
      jSONObject1.put("] not found.", 675);
      jSONObject2.put("", (double) 675);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, (-1117), 8448);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optDouble("Unterminated string");
      jSONObject0.put("sp", 2821);
      jSONObject0.optJSONArray("int");
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("", (Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.values();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", 2714);
      jSONObject1.getDouble("wheel.json.JSONObject");
      JSONObject.doubleToString((-4079.3556));
      boolean boolean0 = true;
      JSONObject jSONObject2 = jSONObject0.put("-4079.3556", true);
      jSONObject2.length();
      JSONObject.valueToString(hashMap0);
      Byte byte0 = new Byte((byte)4);
      try { 
        jSONObject2.append("wheel.json.JSONObject", byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[wheel.json.JSONObject] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("{}", (-1L));
      long long0 = jSONObject0.getLong("{}");
      assertEquals(3, jSONObject0.length());
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      HashMap<Float, String> hashMap1 = new HashMap<Float, String>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate(":", "JetvaleOf");
      jSONObject0.putOpt("JetvaleOf", object0);
      boolean boolean0 = jSONObject0.isNull("JetvaleOf");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("H^/", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.49987843423292
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) null);
      jSONArray0.put(2052, (Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2052] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.doubleToString(0.0);
      Float float0 = new Float((-1.0));
      JSONObject jSONObject1 = jSONObject0.putOpt("0", float0);
      jSONObject1.isNull("0");
      int int0 = jSONObject1.optInt("0");
      assertEquals(1, jSONObject0.length());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("wZYH(S(B", (-873));
      String string0 = JSONObject.quote("wZYH(S(B");
      assertEquals("\"wZYH(S(B\"", string0);
      
      double double0 = jSONObject0.optDouble("wZYH(S(B");
      assertEquals((-873.0), double0, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      String string0 = JSONObject.valueToString(hashMap0, 625, 821);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("isaddFirst", true);
      boolean boolean0 = jSONObject0.getBoolean("isaddFirst");
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject("{}");
      linkedList0.add(jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONObject jSONObject1 = jSONObject0.put("{}", false);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("{n6CCY1g", (-489.26581812084936));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("{n6CCY1g", object0);
      jSONObject1.put("{n6CCY1g", (Map) hashMap0);
      jSONObject0.optJSONObject("{n6CCY1g");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Float float0 = new Float(0.0);
      Integer integer0 = new Integer(125);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("isfloatToRawIntBits", (Map) hashMap0);
      Object object0 = new Object();
      JSONObject.valueToString(object0, 125, 4);
      Short short0 = new Short((short)42);
      JSONObject.getNames((Object) short0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("isfloatToRawIntBits");
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Unclosed comment", true);
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      Float float0 = new Float(32.0);
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject1 = jSONObject0.put("0", 544L);
      double double0 = jSONObject1.optDouble("0");
      assertEquals(3, jSONObject0.length());
      assertEquals(544.0, double0, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("\"\"", object0);
      jSONObject0.optJSONArray((String) null);
      String string0 = jSONObject1.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      hashMap0.put((Object) null, jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject.valueToString(hashMap0);
      try { 
        jSONObject0.getBoolean("-HPh!_JzIZm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-HPh!_JzIZm\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      hashMap0.put((Byte) null, "Dc,4{C");
      hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString("M4qOaY|f");
      String string0 = jSONObject0.toString();
      assertNull(string0);
      
      String string1 = JSONObject.quote("vKuTA2ucUlX0g3eK#K");
      assertEquals("\"vKuTA2ucUlX0g3eK#K\"", string1);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("spl", (Map) hashMap0);
      try { 
        jSONObject0.getLong("spl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"spl\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-4177984), (-4177984));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8727808476063772
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(2260, 2260);
      // Undeclared exception!
      jSONObject0.toString(2260);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0218020909681602
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.quote("og,i6i=/4O");
      Short short0 = new Short((short)5);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "og,i6i=/4O";
      stringArray0[1] = "\"og,i6i=/4O\"";
      stringArray0[2] = "og,i6i=/4O";
      stringArray0[3] = "{PR&z]@nJiq^(Q]Gpxj";
      stringArray0[4] = "og,i6i=/4O";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("[]", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject3 = jSONObject1.put("w/~^U&As;yY|", (Object) jSONObject2);
      jSONObject3.getJSONObject("w/~^U&As;yY|");
      try { 
        jSONObject3.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("w/~^U&As;yY|", (Object) jSONObject0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("w/~^U&As;yY|");
      try { 
        jSONObject2.getJSONObject("xw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"xw\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.49976602714085167
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("int", (Object) jSONObject0);
      Boolean boolean0 = Boolean.FALSE;
      Short short0 = new Short((short)83);
      JSONObject.getNames((Object) boolean0);
      Double double0 = new Double(2.719726001511953);
      Object object1 = JSONObject.NULL;
      jSONObject0.accumulate("EYJG", object1);
      StringWriter stringWriter0 = new StringWriter((short)2237);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "int");
      stringWriter1.write("vgs6$DlKLTx`UAz#-");
      // Undeclared exception!
      jSONObject1.write(stringWriter1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(1361.36593572477);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.putOpt("r?'PO,raDm=F8E", double0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      long long0 = jSONObject1.optLong("r?'PO,raDm=F8E");
      assertEquals(1, jSONObject0.length());
      assertEquals(1361L, long0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.quote("@ID/Iv</");
      assertEquals("\"@ID/Iv<\\/\"", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.2829875394034933
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{n6CCY1g", 0);
      Integer integer0 = new Integer(0);
      jSONObject1.toString((-20664796));
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      Object object0 = new Object();
      JSONObject jSONObject3 = jSONObject2.accumulate("] is not a Boolean.", "] is not a Boolean.");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject3.toJSONArray(jSONArray0);
      Float float0 = new Float((-857.1F));
      jSONObject1.accumulate("{n6CCY1g", float0);
      jSONObject2.has("] is not a Boolean.");
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Ex)[\u0003'm*", (Collection) linkedList0);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.testValidity(jSONObject1);
      JSONObject jSONObject2 = jSONObject1.append("Ex)[\u0003'm*", hashMap0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("istoJSONArray", 0);
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)0);
      JSONObject jSONObject1 = new JSONObject(byte0);
      jSONObject0.optJSONArray("\r");
      jSONObject0.getDouble("istoJSONArray");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("{n6CCY1g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {n6CCY1g
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{p>fqlF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {p>fqlF
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(" at character ", (-1218L));
      String string0 = jSONObject1.getString(" at character ");
      assertNotNull(string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Zt7N6cl+^tS", (double) 2145L);
      int int0 = jSONObject1.getInt("Zt7N6cl+^tS");
      assertEquals(2145, int0);
      
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      assertEquals(1, jSONObject2.length());
      
      Integer integer0 = new Integer((-10384350));
      String string0 = JSONObject.doubleToString((-10384350));
      assertEquals("-1.038435E7", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Z7N6cl+^tS", (double) 2145L);
      jSONObject1.getInt("Z7N6cl+^tS");
      Boolean boolean0 = new Boolean("Z7N6cl+^tS");
      Object object0 = jSONObject0.get("Z7N6cl+^tS");
      assertEquals(2145.0, object0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Short short0 = new Short((short) (-8));
      Short short1 = new Short((short)1);
      Short.toUnsignedInt((short)67);
      Double double0 = new Double(67);
      String[] stringArray0 = new String[4];
      stringArray0[1] = "] is not a JSONObject.";
      stringArray0[2] = "] is not a JSONObject.";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt((String) null);
      try { 
        jSONObject0.getInt("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 1432, (-3379));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1815192735832012
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject.getNames((Object) "");
      jSONObject0.toString();
      jSONObject0.put("", false);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.167609873590689
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      String string0 = JSONObject.doubleToString(4402.785056319681);
      assertEquals("4402.785056319681", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString();
      jSONObject0.keys();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      Boolean boolean0 = Boolean.valueOf("isnumberToString");
      Double double0 = new Double(0.0);
      hashMap0.put(boolean0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("Az#2bBR", 0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Az#2bBR";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.opt("Az#2bBR");
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(1361.36593572477);
      jSONObject0.put("Zt7Ngcl+^t>", (Object) double0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Zt7Ngcl+^t>", "Kit");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(3335.915002266461);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) jSONArray0);
      Boolean boolean0 = Boolean.valueOf("Wgkx,A");
      jSONObject1.accumulate("", boolean0);
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("", "");
      boolean boolean0 = jSONObject0.isNull("");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Float float0 = new Float((-882.78F));
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-92));
      JSONObject jSONObject0 = new JSONObject(byte0);
      String string0 = "Zt7N6cl+^tS";
      JSONObject jSONObject1 = jSONObject0.put("Zt7N6cl+^tS", (double) (byte) (-92));
      jSONObject1.getInt("Zt7N6cl+^tS");
      try { 
        Short.valueOf("Zt7N6cl+^tS", (-92));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -92 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-608));
      JSONObject jSONObject1 = jSONObject0.put("k>%|", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      HashMap<String, JSONArray> hashMap1 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("#&no", 1);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.getJSONArray("#&no");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#&no\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("no");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"no\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Zt7N6cl+^tS", (double) 2145L);
      Short short0 = new Short((short)53);
      int int0 = jSONObject0.optInt("Zt7N6cl+^tS");
      assertEquals(2145, int0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Zt7N6cl+^tS", 0.0);
      jSONObject1.put("6uN<#o", 1879.6758005);
      jSONObject1.getInt("Zt7N6cl+^tS");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("Zt7N6cl+^tS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Zt7N6cl+^tS
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "Zt7N6cl+^tS";
      jSONObject0.put("Zt7N6cl+^tS", (double) 2145L);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put("Zt7N6cl+^tS", jSONArray0);
      jSONObject0.optLong("Zt7N6cl+^tS", 0L);
      jSONObject0.remove("Zt7N6cl+^tS");
      try { 
        Integer.decode("Zt7N6cl+^tS");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Zt7N6cl+^tS\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.compare(false, false);
      String string0 = JSONObject.valueToString(boolean0, 1307, 1841);
      assertNotNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      Byte byte0 = new Byte((byte)57);
      hashMap0.put(byte0, (Long) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0295993619233261
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      Long long0 = new Long(2165L);
      JSONObject.quote("og,i6i=/4O");
      JSONObject jSONObject0 = new JSONObject((Object) "og,i6i=/4O");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.quote("\"og,i6i=/4O\"");
      assertEquals("\"\\\"og,i6i=/4O\\\"\"", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("getcompareTo", 0.0);
      String string0 = "wheel.json.JSONTokener";
      try { 
        jSONObject0.getInt("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "c:3";
      jSONObject0.append("c:3", "c:3");
      try { 
        jSONObject0.getInt("c:3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"c:3\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("!822tNg_ye'RkGP*|");
      JSONObject.getNames(jSONObject0);
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("!822tNg_ye'RkGP*|", object0);
      try { 
        jSONObject0.getDouble("!822tNg_ye'RkGP*|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!822tNg_ye'RkGP*|\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "no";
      jSONObject0.put("no", 1);
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = Boolean.TRUE;
      Double double0 = new Double(2855.3791348763);
      short short0 = (short) (-897);
      Double double1 = new Double(2855.3791348763);
      try { 
        jSONObject0.append("no", double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[no] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "B");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(0.0);
      hashMap0.put(double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.182508882687605
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-92));
      JSONObject jSONObject0 = new JSONObject(byte0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "1<F.1#3A`37Ln";
      stringArray0[2] = "1<F.1#3A`37Ln";
      stringArray0[3] = "Unclosed comment";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.toString((int) (byte) (-92));
      JSONObject.valueToString("1<F.1#3A`37Ln", (byte) (-92), 834);
      jSONObject1.toString((int) (byte) (-92), (int) (byte) (-92));
      JSONObject jSONObject2 = new JSONObject();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "Unclosed comment";
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject2, stringArray1);
      Long long0 = Long.getLong(" j:K@r^6>^", 0L);
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("Az#2bBR", 0);
      jSONObject1.optInt("Az#2bBR", 0);
      Long long0 = new Long(0);
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)53);
      assertEquals((short)53, (short)short0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 440;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("pa", (double) 440);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "#&no";
      JSONObject jSONObject1 = jSONObject0.put("#&no", 1);
      Object object0 = new Object();
      jSONObject1.optDouble("#&no", (double) 1);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      hashMap0.putAll(hashMap1);
      jSONObject0.put("gettoString", false);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((-1.0));
      JSONObject jSONObject1 = jSONObject0.put("<Xpg", (Object) "<Xpg");
      Boolean.valueOf((String) null);
      Long long0 = new Long(1L);
      JSONObject jSONObject2 = jSONObject1.accumulate("uf/G<", long0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      Writer writer0 = jSONObject2.write(stringWriter1);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) null, "1");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.toString(46, (-2786));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("lo");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("Zt7N6cl+^tS", 1007L);
      assertEquals(1007L, long0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      JSONObject.getNames((Object) double0);
      jSONObject0.optJSONObject(",l``9!");
      JSONObject jSONObject1 = jSONObject0.putOpt(",l``9!", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("m)w1!yKf=zvjk167BB,", (-3771));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Zt7N6cl+^tS", (Object) hashMap0);
      try { 
        jSONObject1.getBoolean("Zt7N6cl+^tS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Zt7N6cl+^tS\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gettoUnsignedInt", (Object) "gettoUnsignedInt");
      try { 
        jSONObject1.getBoolean("gettoUnsignedInt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoUnsignedInt\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("sp", (Object) jSONArray0);
      try { 
        jSONObject1.getJSONObject("sp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sp\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.quote(")/:R1p#OXF");
      assertEquals("\")/:R1p#OXF\"", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      boolean boolean0 = jSONObject0.has("{}");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("istoUnsignedLong", (-1723.58726695));
      Short short0 = new Short((short)2885);
      assertEquals((short)2885, (short)short0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)7);
      JSONObject jSONObject1 = jSONObject0.accumulate("Substring bounds error", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String string0 = JSONObject.valueToString(linkedList0, 202, 2884);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString(36, 36);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      jSONObject0.toString(2662, 2662);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.4310140263911755
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject.doubleToString(4402.785056319681);
      JSONObject jSONObject0 = new JSONObject((Object) "4402.785056319681");
      // Undeclared exception!
      jSONObject0.toString(1185, 26);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.remove((String) null);
      String string0 = "dq6bjm-G}~iVE6j";
      try { 
        jSONObject0.getInt("dq6bjm-G}~iVE6j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dq6bjm-G}~iVE6j\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("int", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0, 2254, 55);
      String string0 = jSONObject0.toString(55, 911);
      Float float0 = new Float((double) 55);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("fo", (Object) "fo");
      jSONObject1.get("fo");
      jSONObject0.toString(496, 75);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      Double double0 = new Double(1.0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(43);
      hashMap0.put(double0, (JSONObject) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(9, 9);
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      Integer integer0 = new Integer((-3623));
      hashMap0.put((JSONObject) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(368, 368);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(27);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>(18);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt(",-?s0`w@Mp+_*");
      try { 
        jSONObject0.getInt(",-?s0`w@Mp+_*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",-?s0`w@Mp+_*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.0934983913380338
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.quote("o5");
      assertEquals("\"o5\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"o5\"");
      jSONObject0.optLong("\"o5\"");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-1L));
      Long.compareUnsigned((-1L), (-476L));
      JSONObject jSONObject1 = jSONObject0.accumulate("1+mS|T", long0);
      jSONObject1.getDouble("1+mS|T");
      jSONObject1.optString("1+mS|T", "false");
      JSONObject jSONObject2 = jSONObject0.put("java.lang.Long@0000000003", (-4527.5162651348));
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      linkedList0.parallelStream();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.quote("p$bT-kwJ#");
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.optString("p$bT-kwJ#", "\"p$bT-kwJ#\"");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("Zt7N6cl+^tS", (-1L));
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(1361.36593572477);
      JSONObject jSONObject1 = jSONObject0.put("Zt7N6cl+^tS", (Object) double0);
      boolean boolean0 = jSONObject1.optBoolean("lm)", true);
      assertEquals(1, jSONObject0.length());
      
      Boolean boolean1 = Boolean.valueOf("Zt7N6cl+^tS");
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.quote("getaccumulate");
      JSONObject jSONObject1 = jSONObject0.put(",\n", (Object) "\"getaccumulate\"");
      jSONObject1.optString(",\n");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("G@j|O(NSFwL^Y");
      assertEquals("", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Boolean> function0 = (Function<Object, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Boolean> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Boolean>) function0);
      hashMap0.computeIfAbsent((JSONArray) null, function1);
      int int0 = jSONObject0.optInt("-1.00", 920);
      assertEquals(920, int0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("&oV4ctm6Q$wO,NhZ2h");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      String string0 = JSONObject.valueToString(byte0, (byte) (-1), 10);
      assertNotNull(string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Double double0 = new Double(1.0);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Double double0 = new Double(1.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("Zt7N6cl+^tS", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "X:d<\\u|";
      String string1 = JSONObject.quote(string0);
      assertEquals("\"X:d<\\\\u|\"", string1);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = JSONObject.quote("Mq/db?sK2\"VZRyY^");
      assertEquals("\"Mq/db?sK2\\\"VZRyY^\"", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("val", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.039345950617283
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject.quote("og,i6i=/4O");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"og,i6i=/4O\"";
      stringArray0[1] = "og,i6i=/4O";
      stringArray0[2] = "\"og,i6i=/4O\"";
      stringArray0[3] = "og,i6i=/4O";
      stringArray0[4] = "\"og,i6i=/4O\"";
      stringArray0[5] = "\"og,i6i=/4O\"";
      stringArray0[6] = "og,i6i=/4O";
      stringArray0[7] = "og,i6i=/4O";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("\"og,i6i=/4O\"", (Object) "og,i6i=/4O");
      boolean boolean0 = jSONObject2.optBoolean("\"og,i6i=/4O\"");
      assertEquals(1, jSONObject1.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("wheel.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$Null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{n6CCY1g");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {n6CCY1g
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("o`,i6i=/4O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of o`,i6i=/4O
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject((-1349));
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt((String) null, hashMap0);
      try { 
        jSONObject0.put((String) null, (Object) "F-S_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Double double0 = new Double(235.76580538809);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (double) 2145L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONException", false);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Short short0 = new Short((short)0);
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      
      Integer integer0 = new Integer((short)0);
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}f|NxL_wD9QY)\"[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }f|NxL_wD9QY)\"[
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 2884, 96);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-1061), 508);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = JSONObject.quote("{n6CCY1g");
      assertEquals("\"{n6CCY1g\"", string0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "wZYH(S(B";
      try { 
        jSONObject0.getString("wZYH(S(B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wZYH(S(B\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("d6U?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"d6U?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("S>/ILpBh*y", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 171
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((float) (-918));
      try { 
        jSONObject0.accumulate((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 172
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
