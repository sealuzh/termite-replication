/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 09 11:44:04 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{{lHt3x");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {{lHt3x
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("g_voZ9");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of g_voZ9
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9736489231972635
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9830877585747856
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Double double0 = new Double(92);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      hashMap0.put((JSONObject) null, double0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Byte byte0 = new Byte((byte)83);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      String string0 = jSONObject0.optString("?[*", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6113482429121737
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Float float0 = new Float(2816.982F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("istrim", (double) 2816.982F);
      long long0 = jSONObject1.optLong("istrim", (-1L));
      assertEquals(4, jSONObject0.length());
      assertEquals(2816L, long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("x,5K!`hHS", (-942L));
      assertEquals((-942L), long0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gettoString", (-1.0));
      long long0 = jSONObject0.optLong("gettoString");
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(92, (long) 92);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/:p38y", (Object) jSONArray1);
      JSONArray jSONArray2 = jSONObject0.optJSONArray("/:p38y");
      assertSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("r]z[=m=L", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Float float0 = new Float(2816.982F);
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.optInt("istrim", 125);
      assertEquals(125, int0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("!", 2800.89618);
      int int0 = jSONObject1.optInt("!");
      assertEquals(2800, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("C", (-1514.67));
      int int0 = jSONObject0.optInt("C");
      assertEquals((-1514), int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("r7t=1Q]R", 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("to", (-1368.4493834));
      assertEquals((-1368.4493834), double0, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-732L));
      jSONObject0.put("/&\")9aHi", (Object) long0);
      double double0 = jSONObject0.optDouble("/&\")9aHi");
      assertEquals((-732.0), double0, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8446831811117756
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      JSONObject jSONObject1 = jSONObject0.put("{{lHt3x", true);
      boolean boolean0 = jSONObject1.optBoolean("{{lHt3x");
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3441763374838773
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Float float0 = new Float(1126.3551F);
      JSONObject jSONObject1 = jSONObject0.putOpt("lR75$SU#!y8NylM`", float0);
      jSONObject1.opt("lR75$SU#!y8NylM`");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Float float0 = new Float(2816.982F);
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("null", 2118);
      boolean boolean0 = jSONObject0.has("null");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5088198909642434
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Float float0 = new Float(2816.982F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("istrim", (double) 2816.982F);
      jSONObject0.getString("istrim");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ull", 0);
      long long0 = jSONObject1.getLong("ull");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("null", 2118);
      long long0 = jSONObject1.getLong("null");
      assertEquals(2118L, long0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5600040073151407
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Float float0 = new Float(1126.3551F);
      JSONObject jSONObject1 = jSONObject0.putOpt("lR75$SU#!y8NylM`", float0);
      jSONObject1.getInt("lR75$SU#!y8NylM`");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("true", 0.0);
      double double0 = jSONObject1.getDouble("true");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5088198909642434
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Float float0 = new Float(2816.982F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("istrim", (double) 2816.982F);
      double double0 = jSONObject0.getDouble("istrim");
      assertEquals(4, jSONObject0.length());
      assertEquals(2816.98193359375, double0, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9433483923290391
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 4891, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.8239592165010823
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(92, false);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 45, 123);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9876923464048413
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("\b", hashMap0);
      Double double0 = new Double(Double.NaN);
      hashMap0.put(jSONObject0, double0);
      try { 
        jSONObject0.toString(0, (-902));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4860325981639935
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Float float0 = new Float(2816.982F);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(8192, 8192);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.836226374499039
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1.0));
      hashMap0.put((JSONObject) null, double0);
      jSONObject0.accumulate("\b", hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(0, (-902));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8308939447177783
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Float float0 = new Float(2816.982F);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(8192);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      Long long0 = new Long(4320L);
      hashMap0.put((String) null, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-2845));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.2677946372884996
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.putOpt("w!N~`?kfpQ", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<JSONArray, JSONObject> hashMap1 = new HashMap<JSONArray, JSONObject>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 2707L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(57);
      hashMap0.put(integer0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate("] is not a JSONObject.", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\n", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(3, 3);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = JSONObject.quote("?Sk49T>w*MPpI6</}Rb");
      assertEquals("\"?Sk49T>w*MPpI6<\\/}Rb\"", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = JSONObject.quote("/&\")9aHi");
      assertEquals("\"/&\\\")9aHi\"", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = JSONObject.quote("MK/;$ ;Y");
      assertEquals("\"MK/;$ ;Y\"", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = JSONObject.quote("\b");
      assertEquals("\"\\b\"", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "Az#2bBR");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("i .^^~", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.6094379124341003
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/&\")9aHi", 1.3679955400255803);
      String string0 = jSONObject0.optString("/&\")9aHi", "/&\")9aHi");
      assertNotNull(string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6094379124341
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isoptString", (double) 0.0F);
      double double0 = jSONObject1.optDouble("isoptString", (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Double double0 = new Double(3);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5311386121723252
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("java.lang.Float@0000000001", object0);
      try { 
        jSONObject1.getInt("java.lang.Float@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@0000000001\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.8200759753606217
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Unclosed comment", true);
      boolean boolean0 = jSONObject1.getBoolean("Unclosed comment");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6731947481222247
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>(103);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("6Fk.", "6Fk.");
      JSONObject jSONObject1 = jSONObject0.accumulate("6Fk.", "6Fk.");
      try { 
        jSONObject1.getBoolean("6Fk.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6Fk.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Unclosed comment", false);
      boolean boolean0 = jSONObject1.getBoolean("Unclosed comment");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.3996281119286729
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Float float0 = new Float(2816.982F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("istrim", (double) 2816.982F);
      Object object0 = jSONObject1.get("istrim");
      assertEquals(4, jSONObject0.length());
      assertEquals(2816.98193359375, object0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("joi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"joi\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("E-PNV?8=F");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of E-PNV?8=F
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.keys();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("w>-y$QOg");
      assertNull(object0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.3986496111888456
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put(",\n", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.3826070734809082
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>();
      jSONObject0.put("pzsAQ|YM8w1]", (Map) hashMap1);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, (-3421), 2222);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-1899), 217);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 14, 14);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 1062, 1835);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.8228804629889481
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "1120.150531");
      StringWriter stringWriter0 = new StringWriter(3927);
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.7870020467612302
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float float0 = new Float(2816.982F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(47, 47);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.6904546939944762
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float float0 = new Float(2816.982F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.193549604098133
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(5335, (-976.36306275614));
      jSONObject0.toJSONArray(jSONArray0);
      // Undeclared exception!
      jSONObject0.toJSONArray(jSONArray0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float float0 = new Float(722.9933002756915);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.4535334481019575
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Float float0 = new Float(2816.982F);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.getBoolean("DL?$s?:|\u0001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"DL?$s?:|\\u0001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("30J!LI^Y</");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"30J!LI^Y<\\/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("Az#2bBR", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.5088198909642434
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Float float0 = new Float(2816.982F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("istrim", (double) 2816.982F);
      jSONObject1.optString("istrim");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      jSONObject0.put("-1179.6471", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("-1179.6471");
      assertNotSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/:p38y", (Object) jSONArray0);
      JSONArray jSONArray1 = jSONObject0.optJSONArray("/:p38y");
      assertSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("1120.150531");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.5088198909642434
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Float float0 = new Float(2816.982F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("istrim", (double) 2816.982F);
      double double0 = jSONObject0.optDouble("istrim");
      assertEquals(4, jSONObject0.length());
      assertEquals(2816.98193359375, double0, 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.4320521600260854
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Float float0 = new Float(2816.982F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("istrim", (double) 2816.982F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.844621476365503
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("\n", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.823689430673356
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "] is not a JSONArray.");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("] is not a JSONArray.", stringArray0);
      jSONObject0.toString(4, 70);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "A JSONObject text must end with'}'");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.6702992181413672
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "ivalueOf");
      jSONObject0.putOpt("ivalueOf", "ivalueOf");
      try { 
        jSONObject0.getLong("ivalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ivalueOf\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("wheel.json.JSONException");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.276727835804178
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("H'{ u6j=/1qV$", 44);
      try { 
        jSONObject0.getJSONObject("H'{ u6j=/1qV$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"H'{ u6j=/1qV$\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.3718061232922234
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Unclosed comment", false);
      try { 
        jSONObject0.getJSONArray("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gettoString", (-1.0));
      int int0 = jSONObject0.getInt("gettoString");
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.6046703377349791
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"j WX8nwq<C\"t{A", true);
      int int0 = jSONObject1.optInt("\"j WX8nwq<C\"t{A");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.5088198909642434
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Float float0 = new Float((-599.0198F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("[*g8\"H,R}8/", (double) (-599.0198F));
      double double0 = jSONObject0.getDouble("[*g8\"H,R}8/");
      assertEquals(4, jSONObject0.length());
      assertEquals((-599.019775390625), double0, 0.01);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.257133793549772
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",", (Object) ",");
      try { 
        jSONObject0.getDouble(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.8206201586503932
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Float float0 = new Float(2816.982F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("istrim", (double) 2816.982F);
      boolean boolean0 = jSONObject0.optBoolean("istrim");
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.63752603513777
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("\b", "\b");
      try { 
        jSONObject0.getBoolean("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.9701814400260846
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject1 = jSONObject0.accumulate("Az#2bBR", boolean0);
      boolean boolean1 = jSONObject1.optBoolean("Az#2bBR", false);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",\n", false);
      boolean boolean0 = jSONObject0.optBoolean(",\n", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("null", (-857));
      assertEquals(1, jSONObject0.length());
      
      long long0 = jSONObject1.getLong("null");
      assertEquals((-857L), long0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.7873160424828711
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1120.150531);
      assertEquals("1120.150531", string0);
      
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(string0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("1120.150531", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-108916131));
      assertEquals("-1.08916131E8", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1054);
      assertEquals("1054", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("Missing value", (Collection) linkedList0);
      Long long0 = new Long(450L);
      jSONObject1.append("Missing value", long0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("max", "max");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.5740973368489726
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("rz)P%o", "rz)P%o");
      Double double0 = new Double((-1031.0));
      try { 
        jSONObject0.append("rz)P%o", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[rz)P%o] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONObject0.accumulate("] not found.", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.7045514452672972
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(59);
      jSONObject0.putOpt("Az#2bBR", integer0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Az#2bBR", "Az#2bBR");
      jSONObject1.accumulate("Az#2bBR", jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"wheel.json.JSONObject@0000000001\":java.lang.Double@0000000004,\"wheel.json.JSONObject@0000000002\":java.lang.Double@0000000004}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertFalse(jSONTokener0.more());
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{64O:lyY23~h^4");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 14 of {64O:lyY23~h^4
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("java.lang.Boolean@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of java.lang.Boolean@0000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{64OUlY23~h^4");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 13 of {64OUlY23~h^4
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Byte byte0 = new Byte((byte)83);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.863679987341
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("JSONObject[", "JSONObject[");
      boolean boolean0 = jSONObject1.isNull("JSONObject[");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(4);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("gettoString");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt(",", (-793));
      assertEquals((-793), int0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 2118);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("x,5K!`hHS", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("\n");
      assertEquals("", string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("EH");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("?|*", (Map) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.7854590853064456
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString((-2313), 1800);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("in", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("l)~Jr0\"/H;so_8E", 0L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getString("1120.150531");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1120.150531\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has(">z]\"Cr3e.m.3Au");
      assertFalse(boolean0);
  }
}
