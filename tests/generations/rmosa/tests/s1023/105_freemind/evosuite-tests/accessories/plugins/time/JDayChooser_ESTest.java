/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 09 12:54:45 GMT 2020
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.filemode.FileMode;
import freemind.modes.mindmapmode.MindMapController;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.DefaultFocusTraversalPolicy;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.awt.image.ImageObserver;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.FileNotFoundException;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.AttributedCharacterIterator;
import java.time.LocalTime;
import java.time.temporal.ChronoField;
import java.util.Date;
import java.util.Locale;
import java.util.Set;
import javax.help.ForwardAction;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JSlider;
import javax.swing.SwingConstants;
import javax.swing.plaf.metal.MetalComboBoxUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.InternationalFormatter;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      JButton[] jButtonArray0 = new JButton[0];
      jDayChooser0.weeks = jButtonArray0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getGregorianChange();
      // Undeclared exception!
      try { 
        jDayChooser0.init();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isOpaque();
      jDayChooser0.isPaintingForPrint();
      int int0 = SwingConstants.VERTICAL;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)68;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.getLocale();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 20, "RIq+OD}&Z5}EX@-~MIV");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6304702401606765
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JButton jButton0 = new JButton("28");
      jDayChooser0.selectedDay = jButton0;
      Locale locale0 = Locale.JAPANESE;
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.setDay(500);
      jDayChooser0.setMonth(500);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 35, 35, 35, 35, '8');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getSundayForeground();
      jDayChooser0.getSundayForeground();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      InternationalFormatter internationalFormatter0 = new InternationalFormatter();
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatter) internationalFormatter0);
      KeyEvent keyEvent0 = new KeyEvent(jFormattedTextField0, 37, 37, (-3073), 37, ',');
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JComponent.getDefaultLocale();
      jDayChooser0.days = null;
      jDayChooser0.getAutoscrolls();
      HierarchyListener hierarchyListener0 = null;
      // Undeclared exception!
      try { 
        jDayChooser0.setMonth(2606);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JComponent.getDefaultLocale();
      jDayChooser0.days = null;
      jDayChooser0.getAutoscrolls();
      // Undeclared exception!
      try { 
        jDayChooser0.updateUI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.ROOT;
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.drawDays();
      System.setCurrentTimeMillis((-2193L));
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getLocale();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 36, 20L, 36, 36, '3');
      keyEvent0.paramString();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser1.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.JAPANESE;
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-692), (-692), 27, 44, 36);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      LocalTime localTime0 = MockLocalTime.now();
      Time time0 = Time.valueOf(localTime0);
      jDayChooser0.setSelectableDateRange(time0, date0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      int int0 = 3;
      jDayChooser0.setMaxDayCharacters(3);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("16", 21);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.JAPANESE;
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.setDay(500);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 500, (-1226L), 3, 500, ' ');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = null;
      try {
        pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      JRadioButton jRadioButton0 = new JRadioButton("day", false);
      jDayChooser0.add((Component) jRadioButton0);
      jDayChooser0.setDay(0);
      jDayChooser0.getSundayForeground();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.add((Component) jRadioButton0);
      jDayChooser0.setDay(2714);
      jDayChooser1.getSundayForeground();
      KeyEvent keyEvent0 = new KeyEvent(jRadioButton0, 2714, 0L, (-172), 40, '?');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInputMap();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      JButton[] jButtonArray0 = new JButton[0];
      jDayChooser0.weeks = jButtonArray0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      // Undeclared exception!
      try { 
        jDayChooser0.setSelectableDateRange(date0, date0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7499727356053123
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, 20L, 34, 34, '3');
      keyEvent0.paramString();
      JDayChooser jDayChooser1 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = ImageObserver.ABORT;
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultBoundedRangeModel defaultBoundedRangeModel0 = new DefaultBoundedRangeModel(128, 39, 128, 1629);
      JSlider jSlider0 = new JSlider(128, 1629, 1629);
      jDayChooser0.add((Component) jSlider0);
      jDayChooser0.setDay(128);
      jDayChooser0.getSundayForeground();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 128, 10L, 2, 39, '?');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = SwingConstants.VERTICAL;
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      XmlDocument xmlDocument0 = new XmlDocument();
      xmlDocument0.chooseLocale((String[]) null);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = ImageObserver.FRAMEBITS;
      JDayChooser jDayChooser0 = new JDayChooser();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      DefaultBoundedRangeModel defaultBoundedRangeModel0 = new DefaultBoundedRangeModel(16, 39, 16, 1629);
      JSlider jSlider0 = new JSlider(16, 1629, 1629);
      jDayChooser0.add((Component) jSlider0);
      jDayChooser0.setDay(16);
      Color color0 = Color.red;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 16, 10L, 2, 39, '?');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(17, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7385791605222836
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      JRadioButton jRadioButton0 = new JRadioButton("day", false);
      jDayChooser0.add((Component) jRadioButton0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      Color color0 = jDayChooser0.getSundayForeground();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      KeyEvent keyEvent0 = new KeyEvent(jRadioButton0, (-1431655763), 0L, 2714, 38, '@', 0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setFocus();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.setSize(34, 34);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.setDay(5);
      Color color0 = jDayChooser0.getSundayForeground();
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 5;
      floatArray0[1] = (float) 5;
      floatArray0[2] = (float) 34;
      floatArray0[3] = (float) 34;
      floatArray0[4] = (float) 34;
      floatArray0[5] = (float) 5;
      floatArray0[6] = (float) 34;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (float) 5;
      color0.getRGBColorComponents(floatArray0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setMonth((-1523));
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7177454112665718
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3073), (-3073), 45, 33, 'a');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(810, 810, 16, 8596, 810, 0);
      mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.701765291241601
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      JRadioButton jRadioButton0 = new JRadioButton("day", false);
      jRadioButton0.setFocusTraversalKeys(0, (Set<? extends AWTKeyStroke>) null);
      jDayChooser0.add((Component) jRadioButton0);
      jDayChooser0.setDay(0);
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.setYear(0);
      jDayChooser0.getDayPanel();
      jDayChooser0.setForeground(color0);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getBaselineResizeBehavior();
      Color color0 = Color.BLUE;
      jDayChooser0.sundayForeground = color0;
      jDayChooser0.getBaseline(2337, 2337);
      jDayChooser0.getSundayForeground();
      jDayChooser0.getSundayForeground();
      jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.setFocus();
      jDayChooser0.addListeners(0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isOpaque();
      jDayChooser0.isPaintingForPrint();
      int int0 = SwingConstants.VERTICAL;
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.drawDays();
      System.setCurrentTimeMillis(1);
      int int1 = jDayChooser0.getMaxDayCharacters();
      assertEquals(1, int1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      JComponent.getDefaultLocale();
      jDayChooser0.setDayBordersVisible(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setEnabled(true);
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.669576756952125
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setEnabled(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)123;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      ActionEvent actionEvent0 = new ActionEvent(fileSystemHandling0, 43, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.testdata.FileSystemHandling cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.forLanguageTag("day");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.initDecorations();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.701765291241601
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5");
      JRadioButton jRadioButton0 = new JRadioButton("day", false);
      jDayChooser0.add((Component) jRadioButton0);
      jDayChooser0.setDay(0);
      jDayChooser0.getSundayForeground();
      jDayChooser0.setYear(0);
      jDayChooser0.getDayPanel();
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isOpaque();
      jDayChooser0.isPaintingForPrint();
      int int0 = SwingConstants.VERTICAL;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(225, 225, (-3362), 1, (-264));
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.drawDays();
      System.setCurrentTimeMillis(1);
      // Undeclared exception!
      try { 
        Timestamp.valueOf("SHOW_NOTATION");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JComponent.getDefaultLocale();
      jDayChooser0.getAutoscrolls();
      jDayChooser0.updateUI();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setMaxDayCharacters((-2817));
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.getAncestorListeners();
      Color color0 = jDayChooser0.getSundayForeground();
      color0.getColorSpace();
      jDayChooser0.setForeground(color0);
      jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate((-1), 1084, 238, 1084, (-1), (-1));
      jDayChooser0.setMaxSelectableDate(mockDate0);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(238);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.GRAY;
      jDayChooser0.setSundayForeground(color0);
      MockDate mockDate0 = new MockDate(1096, 1096, (-2099), 1096, (-2099), 7);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JComponent.getDefaultLocale();
      jDayChooser0.getAutoscrolls();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setMonth((-353));
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = SwingConstants.VERTICAL;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.getLocale();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(90, color0.getGreen());
      
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-46);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getX();
      jDayChooser0.setMaxDayCharacters((byte)56);
      jDayChooser0.setDay((-2867));
      jDayChooser0.removeAll();
      jDayChooser0.setAlignmentX(0.8F);
      jDayChooser0.focusLost((FocusEvent) null);
      jDayChooser0.isDayBordersVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6521158596065777
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setMaxDayCharacters(20);
      jDayChooser0.drawDays();
      jDayChooser0.drawDays();
      jDayChooser0.init();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      ForwardAction forwardAction0 = new ForwardAction(attributedCharacterIterator_Attribute0);
      AWTEventMulticaster.remove((MouseListener) null, (MouseListener) forwardAction0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.getDebugGraphicsOptions();
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.630470240160676
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      jDayChooser0.getSundayForeground();
      jDayChooser0.keyTyped((KeyEvent) null);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.getAncestorListeners();
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.setForeground(color0);
      Color color1 = jDayChooser0.getSundayForeground();
      assertEquals(0, color1.getBlue());
      
      jDayChooser0.getDayPanel();
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JComponent.getDefaultLocale();
      jDayChooser0.getAutoscrolls();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setMaxDayCharacters((-657));
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.630470240160676
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.getSundayForeground();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 1770L, 0, (-3350), '>');
      jDayChooser0.keyReleased(keyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.getComponentListeners();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ChronoField chronoField0 = ChronoField.YEAR_OF_ERA;
      jDayChooser0.getClientProperty(chronoField0);
      JOptionPane jOptionPane0 = new JOptionPane((Object) null);
      try { 
        jOptionPane0.createDialog((Component) jDayChooser0, "YJ");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = SwingConstants.VERTICAL;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.getLocale();
      jDayChooser0.setMonth(1);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Color color0 = Color.orange;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2448);
      Object object0 = jDayChooser0.getTreeLock();
      focusEvent0.setSource(object0);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6304702401606765
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.JAPANESE;
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.setDay(500);
      jDayChooser0.setMonth(500);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JComponent.getDefaultLocale();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JComponent.getDefaultLocale();
      jDayChooser0.getAutoscrolls();
      jDayChooser0.updateUI();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      boolean boolean1 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean1 == boolean0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.630470240160676
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      jDayChooser0.getSundayForeground();
      jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.593621512459067
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.setAlignmentY((-1.0F));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setDay(0);
      jDayChooser0.getSundayForeground();
      jDayChooser0.setDayBordersVisible(false);
      FileMode fileMode0 = new FileMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setRequestFocusEnabled(false);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getLocale();
      MockCalendar[] mockCalendarArray0 = new MockCalendar[0];
      JList<MockCalendar> jList0 = new JList<MockCalendar>(mockCalendarArray0);
      Color color0 = jList0.getSelectionBackground();
      jDayChooser0.setBackground(color0);
      jDayChooser0.repaint();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getComponentListeners();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundVisible(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5");
      JRadioButton jRadioButton0 = new JRadioButton("day", false);
      jDayChooser0.setFont((Font) null);
      jDayChooser0.drawDays();
      jDayChooser0.initDecorations();
      Frame frame0 = null;
      try {
        frame0 = new Frame("5");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      boolean boolean0 = true;
      jDayChooser0.setDecorationBackgroundVisible(true);
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      try { 
        fileUtil0.openInputStreamElement("day");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JComponent.getDefaultLocale();
      jDayChooser0.setFocusTraversalPolicyProvider(true);
      jDayChooser0.getAutoscrolls();
      jDayChooser0.updateUI();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getDaysInMonth();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JComponent.getDefaultLocale();
      jDayChooser0.getAutoscrolls();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.updateUI();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setMaxDayCharacters(809);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.608820614830946
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JComponent.getDefaultLocale();
      Color color0 = Color.DARK_GRAY;
      jDayChooser0.weekdayForeground = color0;
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.drawDays();
      System.setCurrentTimeMillis((-2193L));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.setOpaque(false);
      jDayChooser0.getAncestorListeners();
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.setForeground(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals((-6029312), color0.getRGB());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JComponent.getDefaultLocale();
      jDayChooser0.getAutoscrolls();
      jDayChooser0.updateUI();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.getDaysInMonth();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.662701752014223
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(16, 0, 56, 0, 0, 0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "day");
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setSelectableDateRange(date0, date0);
      System.setCurrentTimeMillis(0L);
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.677371952581733
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JComponent.getDefaultLocale();
      jDayChooser0.getAutoscrolls();
      jDayChooser0.updateUI();
      jDayChooser0.setDay((-1437625606));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 1073741824L, (-422), (-422), ' ', 0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setFocus();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.getAncestorListeners();
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.setForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(5219);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Su}?`j-");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setVerifyInputWhenFocusTarget(true);
      jDayChooser0.initDecorations();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getUI();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Windows");
      jDayChooser0.initDecorations();
      jDayChooser0.updateUI();
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        Timestamp.valueOf("8\"0S@/EqGL'bM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      jDayChooser0.getMouseWheelListeners();
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D((Document) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // domFactory should not be null
         //
         verifyException("org.apache.batik.svggen.SVGGeneratorContext", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isPaintingTile();
      JComponent.getDefaultLocale();
      jDayChooser0.getAutoscrolls();
      jDayChooser0.updateUI();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertEquals(14, jDayChooser0.getDay());
  }
}
