/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 04:03:58 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.ContainerOrderFocusTraversalPolicy;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.io.FileNotFoundException;
import java.text.DateFormatSymbols;
import java.util.Date;
import java.util.Locale;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSpinner;
import javax.swing.JTextPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicCheckBoxUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.GapContent;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.lib.FileUtil;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.896090218646746
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ExportAsTIFF.title");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.days = null;
      jDayChooser0.setOpaque(false);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getDayPanel();
      // Undeclared exception!
      try { 
        jDayChooser0.drawWeeks();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 2060, "day", 2060);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775799L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(2, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-502));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5778642546135897
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.day = 210;
      jDayChooser0.setMonth(45);
      jDayChooser0.updateUI();
      jDayChooser0.setMonth(210);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.14246308463095
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = ImageObserver.WIDTH;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      jDayChooser0.setMaxDayCharacters(1);
      int int1 = jDayChooser0.getMaxDayCharacters();
      assertEquals(1, int1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      menuSelectionManager0.clearSelectedPath();
      JCheckBox jCheckBox0 = new JCheckBox("Windows", false);
      jCheckBox0.getMnemonic();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jCheckBox0, 12, 37, 7, 40, '<', (MenuElement[]) null, (MenuSelectionManager) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setFocus();
      assertEquals(21, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5775828056203562
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775792L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      StyleContext styleContext0 = new StyleContext();
      // Undeclared exception!
      try { 
        defaultStyledDocument0.getForeground((AttributeSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.StyleConstants", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("P![I", false);
      jCheckBoxMenuItem0.firePropertyChange("P![I", 0.0, 0.0);
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFont();
      jDayChooser0.setFont((Font) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0966166083347697
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis((-89L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultIcon();
      JButton jButton0 = new JButton("Vnx", (Icon) null);
      jDayChooser0.selectedDay = jButton0;
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.setMonth((-2563));
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day", false);
      jCheckBoxMenuItem0.firePropertyChange("day", 0.0, 0.0);
      jDayChooser0.setMaxDayCharacters(4);
      Locale locale0 = Locale.GERMAN;
      jDayChooser0.setLocale(locale0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8008307070291334
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getComponentListeners();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(")|6^/gT");
      jCheckBoxMenuItem0.firePropertyChange(")|6^/gT", (double) (-89L), 0.0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 9, (-89L), 4, 35, '5', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-2147483648L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getComponentListeners();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("Yr4pc_rt!.E?X");
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jCheckBoxMenuItem0.firePropertyChange("14", 0.0, 0.0);
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DefaultEditor jSpinner_DefaultEditor0 = new JSpinner.DefaultEditor(jSpinner0);
      menuSelectionManager0.removeChangeListener(jSpinner_DefaultEditor0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 228, 0L, 30, 38, '+', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(7, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis((-89L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getComponentListeners();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("5DlidjD");
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jCheckBoxMenuItem0.firePropertyChange("5DlidjD", 0.0, (double) (-89L));
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 39, 887L, 9, 39, 'w', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getLeafIcon();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("14", icon0, true);
      jCheckBoxMenuItem0.firePropertyChange("$n7A@jS^x`!6[qS", (double) (-1L), 0.0);
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DefaultEditor jSpinner_DefaultEditor0 = new JSpinner.DefaultEditor(jSpinner0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jSpinner_DefaultEditor0, 38, (-756L), (-1), 38, '+', (MenuElement[]) null, menuSelectionManager0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      menuSelectionManager0.clearSelectedPath();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (byte)6, (byte)6, (byte)6, 37, 'x', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jCheckBoxMenuItem0, 49, (-3303L), 49, 33, '<', (MenuElement[]) null, menuSelectionManager0);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(menuKeyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawDays();
      jDayChooser0.isWeekOfYearVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis((-89L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-2563), (-637L), (-2563), (-2563), 'L', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(41, 786, 29, 29, 786);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=41,MONTH=786,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=29,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=29,HOUR_OF_DAY=29,MINUTE=786,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = ImageObserver.WIDTH;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 518, "day", 1422);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = ImageObserver.WIDTH;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMinSelectableDate((Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isFocusOwner();
      java.sql.Date date0 = new java.sql.Date(1047L);
      jDayChooser0.setMinSelectableDate(date0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5775828056203562
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      System.setCurrentTimeMillis((-89L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.black;
      jDayChooser0.setForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2206), (-2206), 32, (-2206), 'C');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.801667661801385
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getHeight();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setDay(0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8961770597399514
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2448);
      jDayChooser0.getTreeLock();
      focusEvent0.setSource(jDayChooser0);
      focusEvent0.setSource(jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setMonth(232);
      jDayChooser0.setFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1432, 9223372036854775807L, 31, 31, 'U');
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.addListeners(1);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.validate();
      jDayChooser0.init();
      jDayChooser0.setDay(0);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      jDayChooser0.getClientProperty("day");
      Class<DefaultEditorKit.PasteAction> class0 = DefaultEditorKit.PasteAction.class;
      jDayChooser0.getListeners(class0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.setDay(0);
      jDayChooser0.setWeekOfYearVisible(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 0, 'd');
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      System.setCurrentTimeMillis((-89L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      java.sql.Date date0 = new java.sql.Date((-2563));
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      GapContent gapContent0 = new GapContent();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.cut();
      FocusEvent focusEvent0 = new FocusEvent(jTextPane0, 41, false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.darkGray;
      jDayChooser0.setSundayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth((-2543));
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setYear((-100));
      jDayChooser0.setEnabled(false);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("", true);
      assertFalse(jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.GERMAN;
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      System.setCurrentTimeMillis((-89L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      GapContent gapContent0 = new GapContent();
      jDayChooser0.isDayBordersVisible();
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8961887881567323
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2448);
      Object object0 = jDayChooser0.getTreeLock();
      focusEvent0.setSource(object0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setMonth(275);
      Color color0 = Color.orange;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      mockSimpleDateFormat0.get2DigitYearStart();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(false);
      MockDate mockDate0 = new MockDate(1498L);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.801715527776654
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      jDayChooser_DecoratorButton0.requestFocusInWindow();
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser_DecoratorButton0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser_DecoratorButton0.isBorderPainted();
      jDayChooser1.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.getVetoableChangeListeners();
      System.setCurrentTimeMillis((-1029L));
      jDayChooser0.drawDays();
      jDayChooser0.getDaysInMonth();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "16";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "accessories.plugins.time.JDayChooser";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      UnmarshallingContext unmarshallingContext0 = null;
      try {
        unmarshallingContext0 = new UnmarshallingContext(28, (String[]) null, (String[]) null, stringArray0, (String[]) null, iBindingFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setMonth(518);
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, color0.getGreen());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.adjustWidthToMaximumValue();
      Color color0 = jYearChooser0.darkGreen;
      Color.getColor("28", color0);
      jDayChooser0.setWeekdayForeground(color0);
      System.setCurrentTimeMillis((-9223372036854775808L));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2030));
      focusEvent0.setSource(jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setMonth(232);
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawDays();
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      boolean boolean0 = true;
      jDayChooser0.setDecorationBackgroundVisible(true);
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      try { 
        fileUtil0.openInputStreamElement("day");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(1690);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-1981));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = SwingConstants.VERTICAL;
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = ImageObserver.WIDTH;
      ImageIcon imageIcon0 = new ImageIcon();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem((String) null, imageIcon0, false);
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem(imageIcon0);
      jCheckBoxMenuItem0.firePropertyChange("zp)T02w<4", 0.0, 0.0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-88);
      int int0 = jDayChooser0.getDay();
      assertEquals(2, int0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-240));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = ImageObserver.WIDTH;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(1);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-2359));
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(37);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getLocale();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.getVisibleRect();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.oldYear = 20;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jYearChooser0.setDayChooser(jDayChooser0);
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      jYearChooser0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }
}
