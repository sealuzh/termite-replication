/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 09 12:39:15 GMT 2020
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.AbstractIscStmtHandle;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBResultSetNotUpdatableException;
import org.firebirdsql.jdbc.FBSQLException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[5][3];
      byte[] byteArray1 = new byte[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.remove((Object) fileSystemHandling0);
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      
      byteArray1[2] = (byte)63;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean2 = fBCachedFetcher0.absolute(100);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean2);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean3 = fBCachedFetcher0.isEmpty();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean3);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      fBCachedFetcher0.setFetchSize((-567));
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals((-567), fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals((-567), int0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals((-567), fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7890221622909377
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[5][3];
      byte[] byteArray1 = new byte[9];
      byteArray1[3] = (byte) (-89);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = linkedList0.remove((Object) fileSystemHandling0);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      
      byteArray1[2] = (byte)63;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      
      fBResultSet0.checkCursorMove();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      
      fBCachedFetcher0.updateRow(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean1 = fBCachedFetcher0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[3][3];
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      
      fBResultSet0.checkCursorMove();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      
      boolean boolean0 = linkedList0.offerFirst(byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      
      fBCachedFetcher0.setFetchSize(4803);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(4803, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(4803, int0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(4803, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      
      try { 
        fBResultSet0.updateRow();
        fail("Expecting exception: FBResultSetNotUpdatableException");
      
      } catch(FBResultSetNotUpdatableException e) {
         //
         // Underlying ResultSet is not updatable.
         //
         verifyException("org.firebirdsql.jdbc.AbstractResultSet", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[7][3];
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      
      boolean boolean0 = fBCachedFetcher0.absolute(1);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      
      boolean boolean1 = fBCachedFetcher0.isLast();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertTrue(boolean1);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[5][3];
      byte[] byteArray1 = new byte[9];
      byteArray1[2] = (byte)63;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      
      boolean boolean0 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[6][3];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-89);
      byteArray1[3] = (byte)67;
      byteArray1[4] = (byte)78;
      byteArray1[5] = (byte) (-17);
      byteArray1[6] = (byte)71;
      byteArray1[7] = (byte) (-41);
      byteArray1[8] = (byte)2;
      byteArray0[0] = byteArray1;
      linkedList0.addLast(byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[1] = (byte) (-89);
      byteArray2[2] = (byte)66;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      boolean boolean0 = fBCachedFetcher0.absolute(6);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean0);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(4, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      
      fBResultSet0.checkCursorMove();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(6, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(4, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(4, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      
      boolean boolean1 = fBCachedFetcher0.previous();
      assertFalse(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[][] byteArray0 = new byte[13][0];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte) (-44);
      byteArray1[2] = (byte) (-2);
      byteArray1[3] = (byte)38;
      byteArray1[4] = (byte) (-44);
      byteArray1[1] = (byte) (-40);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[7];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte) (-2);
      byteArray3[1] = (byte) (-112);
      byteArray3[2] = (byte) (-2);
      byteArray3[3] = (byte)38;
      byteArray3[4] = (byte) (-2);
      byteArray3[5] = (byte) (-2);
      byteArray3[6] = (byte)38;
      byteArray0[2] = byteArray3;
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      boolean boolean1 = linkedList0.add(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(13, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean2 = fBCachedFetcher0.relative((-1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean2);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9780477621365078
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[6][3];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)66;
      byteArray1[3] = (byte)67;
      byteArray1[4] = (byte)78;
      byteArray1[5] = (byte) (-17);
      byteArray1[6] = (byte)71;
      byteArray1[7] = (byte) (-41);
      byteArray1[8] = (byte)2;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)71;
      byteArray2[1] = (byte)121;
      byteArray2[2] = (byte)66;
      byteArray2[3] = (byte) (-89);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean0 = fBCachedFetcher0.absolute(6);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      fBResultSet0.checkCursorMove();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean1 = fBCachedFetcher0.previous();
      assertFalse(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertTrue(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7890221622909377
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[5][3];
      byte[] byteArray1 = new byte[9];
      byteArray1[3] = (byte) (-89);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = linkedList0.remove((Object) fileSystemHandling0);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      
      byteArray1[2] = (byte)63;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      
      fBResultSet0.checkCursorMove();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      
      boolean boolean2 = fBCachedFetcher0.isEmpty();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isAfterLast());
      
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[6][3];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)71;
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)66;
      byteArray1[3] = (byte) (-89);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      
      boolean boolean1 = fBCachedFetcher0.last();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertTrue(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, int0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      
      boolean boolean2 = fBCachedFetcher0.isFirst();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertTrue(boolean2);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      
      boolean boolean3 = fBCachedFetcher0.previous();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean3);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7890221622909375
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[5][3];
      byte[] byteArray1 = new byte[9];
      byteArray1[3] = (byte) (-89);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = linkedList0.remove((Object) fileSystemHandling0);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      
      byteArray1[2] = (byte)63;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      
      fBResultSet0.checkCursorMove();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      
      boolean boolean1 = fBCachedFetcher0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      
      boolean boolean2 = fBCachedFetcher0.isLast();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean2);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[6][3];
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)63;
      byteArray1[1] = (byte)66;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      
      boolean boolean1 = fBCachedFetcher0.absolute(6);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      
      boolean boolean2 = fBCachedFetcher0.isEmpty();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean2);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      
      boolean boolean3 = fBCachedFetcher0.isBeforeFirst();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean3);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      
      System.setCurrentTimeMillis((byte)2);
      int int0 = fBCachedFetcher0.getRowNum();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(2, int0);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7890221622909375
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[5][3];
      byte[] byteArray1 = new byte[9];
      byteArray1[3] = (byte) (-89);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = linkedList0.remove((Object) fileSystemHandling0);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      
      byteArray1[2] = (byte)63;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      fBResultSet0.checkCursorMove();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean1 = fBCachedFetcher0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      
      int int0 = fBCachedFetcher0.getRowNum();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(1, int0);
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[3][3];
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertNotNull(fBCachedFetcher1);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertTrue(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isFirst());
      assertTrue(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      
      boolean boolean0 = fBCachedFetcher0.previous();
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean1 = fBCachedFetcher0.isEmpty();
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[1][5];
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      
      boolean boolean1 = fBCachedFetcher0.relative((-1637));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      
      boolean boolean2 = fBCachedFetcher0.isEmpty();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean2);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.904191197340068
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[5][3];
      byte[] byteArray1 = new byte[9];
      byteArray1[3] = (byte) (-89);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = linkedList0.remove((Object) fileSystemHandling0);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      
      byteArray1[2] = (byte)63;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      fBResultSet0.checkCursorMove();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      
      boolean boolean1 = fBCachedFetcher0.first();
      assertFalse(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertTrue(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      boolean boolean2 = fBCachedFetcher0.isEmpty();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[3][3];
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      
      boolean boolean0 = linkedList0.offerFirst(byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean1 = fBCachedFetcher0.last();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean2 = fBCachedFetcher0.isEmpty();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean2);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7890221622909375
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[5][3];
      byte[] byteArray1 = new byte[9];
      byteArray1[3] = (byte) (-89);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = linkedList0.remove((Object) fileSystemHandling0);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      
      byteArray1[2] = (byte)63;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean1 = fBCachedFetcher0.next();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      
      fBResultSet0.checkCursorMove();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      
      boolean boolean2 = fBCachedFetcher0.isEmpty();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean2);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[7][1];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-53);
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)78;
      byteArray1[3] = (byte)78;
      byteArray0[0] = byteArray1;
      byteArray0[1] = byteArray1;
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-53);
      byteArray2[1] = (byte)119;
      byteArray2[2] = (byte)119;
      byteArray2[3] = (byte)119;
      byteArray0[2] = byteArray2;
      byte[] byteArray3 = new byte[9];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[1] = (byte)119;
      byteArray3[2] = (byte) (-53);
      byteArray3[4] = (byte)119;
      byteArray3[5] = (byte)78;
      byteArray3[6] = (byte)78;
      byteArray3[7] = (byte)119;
      byteArray3[8] = (byte)9;
      byteArray0[3] = byteArray3;
      byte[] byteArray4 = new byte[7];
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      
      byteArray4[0] = (byte)78;
      byteArray3[4] = (byte) (-53);
      byteArray4[3] = (byte)78;
      byteArray4[4] = (byte) (-53);
      byteArray4[5] = (byte)9;
      byteArray2[2] = (byte) (-53);
      byteArray0[4] = byteArray4;
      byte[] byteArray5 = new byte[0];
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      
      byteArray0[5] = byteArray5;
      byte[] byteArray6 = new byte[0];
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray1));
      
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      byte[][] byteArray7 = new byte[3][3];
      assertFalse(byteArray7.equals((Object)byteArray0));
      
      byte[] byteArray8 = new byte[9];
      assertFalse(byteArray8.equals((Object)byteArray1));
      assertFalse(byteArray8.equals((Object)byteArray2));
      assertFalse(byteArray8.equals((Object)byteArray4));
      assertFalse(byteArray8.equals((Object)byteArray5));
      assertFalse(byteArray8.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray3));
      
      byteArray8[0] = (byte) (-88);
      byteArray8[1] = (byte) (-1);
      byteArray8[2] = (byte) (-53);
      byteArray8[3] = (byte)66;
      byteArray8[4] = (byte)44;
      byteArray8[5] = (byte) (-63);
      byteArray8[7] = (byte) (-87);
      byteArray8[8] = (byte) (-82);
      byteArray7[0] = byteArray8;
      byte[] byteArray9 = new byte[0];
      assertFalse(byteArray9.equals((Object)byteArray3));
      assertFalse(byteArray9.equals((Object)byteArray5));
      assertFalse(byteArray9.equals((Object)byteArray8));
      assertFalse(byteArray9.equals((Object)byteArray4));
      assertFalse(byteArray9.equals((Object)byteArray2));
      assertFalse(byteArray9.equals((Object)byteArray1));
      assertFalse(byteArray9.equals((Object)byteArray6));
      
      byteArray7[1] = byteArray9;
      byte[] byteArray10 = new byte[5];
      assertFalse(byteArray10.equals((Object)byteArray9));
      assertFalse(byteArray10.equals((Object)byteArray6));
      assertFalse(byteArray10.equals((Object)byteArray1));
      assertFalse(byteArray10.equals((Object)byteArray5));
      assertFalse(byteArray10.equals((Object)byteArray8));
      assertFalse(byteArray10.equals((Object)byteArray4));
      assertFalse(byteArray10.equals((Object)byteArray3));
      assertFalse(byteArray10.equals((Object)byteArray2));
      
      byteArray10[0] = (byte)66;
      byteArray10[1] = (byte) (-1);
      byteArray10[2] = (byte)12;
      byteArray10[4] = (byte) (-63);
      boolean boolean1 = linkedList0.add(byteArray7);
      assertNotSame(byteArray7, byteArray0);
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, byteArray7.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(2, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(2, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean2 = fBCachedFetcher0.absolute(712);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean2);
      assertEquals(2, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean3 = fBCachedFetcher0.isEmpty();
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean3);
      assertEquals(2, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean4 = fBCachedFetcher0.isAfterLast();
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean4);
      assertEquals(2, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      
      boolean boolean1 = fBCachedFetcher0.relative((byte)38);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      
      boolean boolean2 = fBCachedFetcher0.isEmpty();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean2);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean1 = fBCachedFetcher0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add((byte[][]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      
      boolean boolean2 = linkedList0.add((byte[][]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(3, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(3, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      linkedList0.clear();
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[1][5];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte)28;
      byteArray1[2] = (byte) (-88);
      byteArray1[3] = (byte)95;
      byteArray1[4] = (byte)41;
      byteArray0[0] = byteArray1;
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      byte[][] byteArray2 = new byte[0][8];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      boolean boolean1 = linkedList0.add(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, byteArray2.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(2, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[4][0];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte)35;
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte) (-44);
      byteArray1[4] = (byte) (-61);
      byteArray1[5] = (byte) (-53);
      byteArray1[6] = (byte)35;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[7];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)35;
      byteArray2[1] = (byte)35;
      byteArray2[2] = (byte) (-61);
      byteArray2[3] = (byte)35;
      byteArray2[4] = (byte) (-112);
      byteArray2[5] = (byte)35;
      byteArray2[6] = (byte)6;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[1];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte)6;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[9];
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      
      byteArray4[0] = (byte) (-112);
      byteArray4[1] = (byte)6;
      byteArray4[2] = (byte)6;
      byteArray4[3] = (byte)6;
      byteArray4[4] = (byte)35;
      byteArray4[5] = (byte)35;
      byteArray4[6] = (byte) (-112);
      byteArray4[7] = (byte) (-61);
      byteArray4[8] = (byte)35;
      byteArray0[3] = byteArray4;
      boolean boolean0 = linkedList0.offerFirst(byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative((-273));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7677614722893293
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[5][1];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte) (-39);
      byteArray1[2] = (byte) (-123);
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte) (-55);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)8;
      byteArray1[7] = (byte) (-42);
      byteArray1[8] = (byte)51;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[5];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte)5;
      byteArray3[1] = (byte) (-39);
      byteArray3[2] = (byte)5;
      byteArray3[3] = (byte)24;
      byteArray3[4] = (byte)51;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[0];
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[2];
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray1));
      
      byteArray5[0] = (byte) (-55);
      byteArray5[1] = (byte) (-112);
      byteArray0[4] = byteArray5;
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative(64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4708084763221112
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      
      boolean boolean1 = linkedList0.offerFirst((byte[][]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertNotNull(fBCachedFetcher1);
      assertEquals(2, linkedList0.size());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isAfterLast());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher1.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[6][8];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-79);
      byteArray1[1] = (byte) (-100);
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)43;
      byteArray1[4] = (byte)72;
      byteArray1[5] = (byte)113;
      byteArray1[6] = (byte)91;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[3];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)91;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)91;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[5];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)43;
      byteArray3[1] = (byte)91;
      byteArray3[2] = (byte)79;
      byteArray3[3] = (byte)113;
      byteArray3[4] = (byte) (-100);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[4];
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      
      byteArray4[0] = (byte)43;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte) (-100);
      byteArray4[3] = (byte)1;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[7];
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray4));
      
      byteArray5[0] = (byte)43;
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte)72;
      byteArray5[3] = (byte) (-79);
      byteArray5[4] = (byte)79;
      byteArray5[5] = (byte)1;
      byteArray5[6] = (byte)113;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[2];
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray2));
      
      byteArray6[0] = (byte) (-100);
      byteArray6[1] = (byte)72;
      byteArray0[5] = byteArray6;
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean1 = fBCachedFetcher0.isLast();
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8392967479776605
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[6][2];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte)23;
      byteArray1[2] = (byte) (-56);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)3;
      byteArray2[1] = (byte)23;
      byteArray2[2] = (byte) (-56);
      byteArray2[3] = (byte)3;
      byteArray2[4] = (byte)23;
      byteArray2[5] = (byte)23;
      byteArray2[6] = (byte)3;
      byteArray2[7] = (byte)3;
      byteArray2[8] = (byte)23;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[9];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)3;
      byteArray3[1] = (byte) (-56);
      byteArray3[2] = (byte) (-43);
      byteArray3[3] = (byte)3;
      byteArray3[4] = (byte)3;
      byteArray3[5] = (byte)3;
      byteArray3[6] = (byte) (-56);
      byteArray3[7] = (byte)3;
      byteArray3[8] = (byte) (-56);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[2];
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      
      byteArray4[0] = (byte) (-35);
      byteArray4[1] = (byte) (-43);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[6];
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray4));
      
      byteArray5[0] = (byte) (-56);
      byteArray5[1] = (byte)3;
      byteArray5[2] = (byte) (-77);
      byteArray5[3] = (byte) (-43);
      byteArray5[4] = (byte) (-43);
      byteArray5[5] = (byte)3;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[0];
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray3));
      
      byteArray0[5] = byteArray6;
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.540305825226517
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.push((byte[][]) null);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      
      boolean boolean1 = fBCachedFetcher0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((List<byte[][]>) null, (FBObjectListener.FetcherListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4941751382893083
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[5][0];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-112);
      byteArray1[2] = (byte)2;
      byteArray1[0] = (byte)2;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.540305825226517
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean1 = fBCachedFetcher0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      
      fBCachedFetcher0.afterLast();
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean2 = fBCachedFetcher0.last();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean3 = fBCachedFetcher0.isEmpty();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean1 = fBCachedFetcher0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean2 = fBCachedFetcher0.next();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean1 = fBCachedFetcher0.absolute(468);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean2 = fBCachedFetcher0.isEmpty();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7677614722893293
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[1][7];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)124;
      byteArray1[1] = (byte)122;
      byteArray1[2] = (byte) (-117);
      byteArray1[3] = (byte) (-113);
      byteArray1[4] = (byte) (-112);
      byteArray1[5] = (byte)7;
      byteArray1[6] = (byte) (-37);
      byteArray0[0] = byteArray1;
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6094379124341003
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      
      boolean boolean1 = fBCachedFetcher0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      
      fBCachedFetcher0.beforeFirst();
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      byte[][] byteArray0 = new byte[4][4];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-2);
      byteArray1[1] = (byte) (-112);
      byteArray1[2] = (byte) (-44);
      byteArray1[3] = (byte) (-40);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[0];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[6];
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      
      byteArray4[0] = (byte) (-2);
      byteArray4[1] = (byte) (-44);
      byteArray4[2] = (byte) (-44);
      byteArray4[3] = (byte)38;
      byteArray4[4] = (byte) (-112);
      byteArray4[5] = (byte) (-112);
      byteArray0[3] = byteArray4;
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = fBCachedFetcher0.relative((-2766));
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean2 = fBCachedFetcher0.isEmpty();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean2);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      fBCachedFetcher0.close();
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.4878167164014493
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[3][1];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)88;
      byteArray1[1] = (byte)15;
      byteArray1[2] = (byte)47;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)28;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[3];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)28;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-1);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[5];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte)127;
      byteArray3[1] = (byte)88;
      byteArray3[2] = (byte)88;
      byteArray3[3] = (byte)15;
      byteArray3[4] = (byte)15;
      byteArray0[2] = byteArray3;
      boolean boolean0 = linkedList0.offerFirst(byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4142790651247086
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute((-311));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][1];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)88;
      byteArray1[2] = (byte)47;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)28;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)28;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-1);
      byteArray0[1] = byteArray2;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      try { 
        fBCachedFetcher0.absolute((byte) (-1));
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isBeforeFirst();
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4708084763221112
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)88;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isAfterLast();
      boolean boolean0 = fBCachedFetcher0.isAfterLast();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[6][3];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)66;
      byteArray1[3] = (byte)67;
      byteArray1[4] = (byte)78;
      byteArray1[5] = (byte) (-17);
      byteArray1[6] = (byte)71;
      byteArray1[7] = (byte) (-41);
      byteArray1[8] = (byte)2;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)71;
      byteArray2[1] = (byte)66;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)71;
      byteArray3[1] = (byte)121;
      byteArray3[2] = (byte)66;
      byteArray3[3] = (byte) (-89);
      byteArray3[4] = (byte)67;
      byteArray3[5] = (byte)78;
      byteArray3[6] = (byte) (-41);
      byteArray3[7] = (byte)121;
      byteArray3[8] = (byte)71;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte)78;
      byteArray4[1] = (byte)66;
      byteArray4[2] = (byte)71;
      byteArray4[3] = (byte)71;
      byteArray4[4] = (byte) (-41);
      byteArray4[5] = (byte)66;
      byteArray4[6] = (byte)2;
      byteArray4[7] = (byte)71;
      byteArray4[8] = (byte)67;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[1];
      byteArray5[0] = (byte) (-89);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[3];
      byteArray6[0] = (byte)71;
      byteArray6[1] = (byte) (-89);
      byteArray6[2] = (byte)121;
      byteArray0[5] = byteArray6;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isBeforeFirst();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      int int0 = fBCachedFetcher0.getRowNum();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean0 = fBCachedFetcher0.previous();
      assertFalse(boolean0);
      
      fBCachedFetcher0.isEmpty();
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isFirst();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((GDSHelper) null, 297, 297, (AbstractIscStmtHandle) null, (FBObjectListener.FetcherListener) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }
}
