/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 03:26:41 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9784131432944947
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.of(930L);
      Range range0 = Range.of((-1L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9780573347195083
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      range1.complementFrom(list0);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.059067004520361
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(810L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Object object0 = new Object();
      Range range1 = Range.of(range_CoordinateSystem0, 810L, 810L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(396L, 4294967286L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Long.getLong("&Th$g+fX=m\"zKMGr4");
      range0.equals((Object) null);
      Long long0 = new Long(3089L);
      Long.min(127L, (-35L));
      range0.equals("&Th$g+fX=m\"zKMGr4");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("%cp%+{*57&", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse %cp%+{*57& into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967294L, 6562710026760L);
      Long long0 = new Long(4294967294L);
      Long long1 = new Long(4294967294L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.633955754390688
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(68L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(68L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 68L, 68L);
      String string0 = range2.toString();
      //  // Unstable assertion: assertEquals("[ 67 .. 67 ]/0B", string0);
      
      Object object0 = new Object();
      range1.equals(range2);
      boolean boolean0 = range2.equals(range1);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1346325508541963
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(9223372036854775807L);
      String string0 = range0.toString();
      assertEquals("[ 9223372036854775807 .. 9223372036854775807 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 9223372036854775807 .. 9223372036854775807 ]/0B", range_CoordinateSystem0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      range0.equals("ARRIVAL");
      Long long0 = new Long((-3419L));
      boolean boolean0 = range0.equals("ARRIVAL");
      //  // Unstable assertion: assertFalse(boolean0);
      
      Object object1 = new Object();
      Long long1 = new Long(3689L);
      range0.equals(range0);
      range0.iterator();
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.20450410181143
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(32768L, long0);
      
      Range range1 = Range.of(32767L);
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-1209L), 9223372032559808544L);
      boolean boolean0 = range2.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7946485850575375
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(824L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals(range0);
      Long long0 = new Long((-128L));
      Long.min(4262L, 4262L);
      range0.equals(long0);
      Object object0 = new Object();
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.798825694497805
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Object object0 = new Object();
      Range range1 = Range.of(894L);
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      Range.of(895L);
      range1.getEnd();
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("WMwtDg\"MDquD8E|Aox+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.WMwtDg\"MDquD8E|Aox+
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967294L, 6562710026760L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.796702740052869
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(4294967286L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(4294967286L, long0);
      
      Range range1 = Range.of(4294967286L);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6884526475116584
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.ofLength(824L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals(range0);
      Long long0 = new Long((-128L));
      long long1 = 4262L;
      try { 
        Long.parseUnsignedLong((String) null, 1808);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0600949885294986
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.toString();
      Range range1 = Range.parseRange("[ 0 .. 9223372036854775806 ]/0B", range_CoordinateSystem0);
      range0.equals(range1);
      Long long0 = new Long(1503L);
      Object object0 = new Object();
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4406221852733103
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7981603142329834
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.toString();
      Range range1 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372036854775807 .. 9223372036854775807 ]/0B", string0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 32767L, 32767L);
      long long0 = range1.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertEquals(32767L, long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3884109735824395
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      Range range1 = Range.of(65535L, 65535L);
      range1.complement(range0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.329396550163086
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.of(32767L);
      long long0 = new Long(32767L);
      Range.of(32768L, 32767L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(4294967286L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of(68L);
      Range range1 = Range.ofLength(255L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(68L);
      Range range1 = Range.ofLength(68L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-551L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1337941717205218
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((-563L));
      Range range1 = Range.of(3298L);
      long long0 = range0.getEnd();
      assertEquals((-563L), long0);
      
      range1.intersects(range0);
      Range.Comparators.values();
      long long1 = range0.getLength();
      assertEquals(1L, long1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.059067004520361
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-563L));
      Range range1 = Range.of((-563L), (-563L));
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2679158250435196
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775216L, 9223372036854775216L);
      long long0 = (-2147483326L);
      Range range1 = Range.of((-2147483326L));
      // Undeclared exception!
      try { 
        range1.intersection(range0);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483326 would make range [9223372036854775216 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967301L, 4294967301L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.equals((Object) null);
      Object object0 = new Object();
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1648L, 4294967294L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.976432073516815
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1383L, 1383L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = range0.toString();
      assertEquals("[ 1383 .. 1382 ]/0B", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Long long0 = new Long(0L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      long long0 = range0.getEnd();
      assertEquals(2147483646L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      long long1 = new Long(2147483647L);
      assertFalse(long1 == long0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, (-9223372036854775808L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9720861369674885
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2495L, 2495L);
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.980052280855962
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(395L, 4294967301L);
      Range range1 = Range.of(388L, 4294967301L);
      boolean boolean0 = range1.startsBefore(range0);
      range1.startsBefore(range0);
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0631311756433557
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1908L), (-17L));
      List<Range> list0 = range0.split(387L);
      assertEquals(5, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of((-1971L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.equals(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775553L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2691873616955633
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.getEnd();
      Range range1 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      // Undeclared exception!
      try { 
        range1.complement(range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.979856144737496
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      Object object0 = new Object();
      Long long0 = new Long(1L);
      range1.equals(long0);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.687420655767592
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Residue Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Residue Based
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.386495788903917
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.ofLength(2147483648L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483648L, 2147483648L);
      range0.intersection(range1);
      range0.split(4294967295L);
      Range range2 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals(2147483646L, long0);
      
      String string0 = range1.toString();
      //  // Unstable assertion: assertEquals("[ 2147483648 .. 2147483647 ]/0B", string0);
      
      range2.equals(range0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967300L, 6562710026760L);
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("dx/R=+MBigwHP&u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.dx/R=+MBigwHP&u
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(4294967294L);
      Long.getLong((String) null);
      Long.toUnsignedString(4294967294L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(4294967286L);
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1L));
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(9223365476292232708L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.329396550163086
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(166L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 441L, 4294967295L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 3613L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.3848772524016595
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(4294967286L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(4294967286L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 4294967286L, 4294967286L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-127L), long0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 1000L, 9223372036854773510L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1000L, 9223372036854773510L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.1345528251107537
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      long long0 = range0.getEnd();
      assertEquals((-1L), long0);
      
      Range range1 = Range.parseRange("[ 1 .. 0 ]/RB");
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ 2 .. 1 ]/RB", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(9223372036854772062L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of((-3880L), 32767L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2495L, 2495L);
      Object object0 = new Object();
      range0.equals(object0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.983358662171902
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(68L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.of(4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("0B", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.060276460265276
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.1337941717205218
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(731L);
      List<Range> list0 = range0.split(1L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.797208748908024
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of((-563L));
      Range range1 = Range.of((-563L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals("+");
      boolean boolean1 = range1.intersects(range0);
      assertFalse(boolean1 == boolean0);
      assertSame(range1, range0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      List<Range> list0 = range0.split(4294967295L);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.79438837168257
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem1);
      Object object1 = new Object();
      boolean boolean1 = range0.intersects(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.794110516722859
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(4294967286L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.059686199566801
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.parseRange("[ 1 .. 0 ]/RB", range_CoordinateSystem2);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.9784131432944947
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("[ 9223372036854775807 .. 9223372036854775806 ]/0B", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.329396550163086
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(817L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(817L, long0);
      
      Range range1 = Range.of((-1769L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.134006824564753
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(1L);
      Range range2 = range1.intersection(range0);
      range1.toString();
      range0.endsBefore(range2);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.1328844901090855
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      Long long0 = new Long(1665L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      range0.equals(object1);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      //  // Unstable assertion: assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(68L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 68L, 68L);
      range1.isSubRangeOf(range0);
      range0.equals(range1);
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1506L), 2147483648L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-17L), 9223372036854775033L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 312L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.split(1015L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$LongStartIntLengthRange", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$LongStartIntLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.ofLength(525L);
      long long0 = range0.getLength();
      assertEquals(525L, long0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-2147483648L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483649 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.891722433292198
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(27L);
      Range range1 = Range.ofLength(65535L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.9819126378119534
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.ofLength(22L);
      Range range1 = Range.ofLength(1047L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 1047 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, 22L, 127L);
      boolean boolean0 = range2.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of((-1L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.7964122534878726
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      range1.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      assertTrue(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Long long0 = new Long(982L);
      range0.equals(long0);
      Object object1 = new Object();
      Long long1 = new Long(0L);
      range0.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-32792L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-563L));
      long long0 = range0.getEnd();
      assertEquals((-563L), long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.1365697674262036
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range range2 = Range.parseRange("[ 1 .. 0 ]/RB");
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      String string1 = range2.toString(range_CoordinateSystem2);
      assertEquals("[ 1 .. 1 ]/SB", string1);
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      range2.getEnd();
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem4);
      Range range3 = Range.of(range_CoordinateSystem3, 0L, 0L);
      assertTrue(range3.isEmpty());
      
      boolean boolean0 = range1.isSubRangeOf(range2);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem5 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem5);
      assertSame(range1, range0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(4294967286L);
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.6881336682453103
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(367L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of((-563L));
      long long0 = range0.getBegin();
      assertEquals((-563L), long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(4294967286L);
      range0.getBegin();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range_Builder0.expandBegin(9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-1801L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.6910517378300467
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775799L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.425910149055313
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      long long0 = (-919L);
      range_Builder0.contractBegin((-919L));
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_Builder1.expandEnd((-919L));
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 2147483647L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3613L, 3613L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(4294967288L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.8894206965271843
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-165L);
      range_Builder0.shift((-165L));
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.toString();
      range_Builder0.contractBegin((-165L));
      long long1 = (-1769L);
      // Undeclared exception!
      try { 
        range0.split((-1769L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.2815553875954016
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1213L), 2760L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.contractEnd(2760L);
      range_Builder2.contractEnd((-7780L));
      Range.Builder range_Builder3 = range_Builder2.copy();
      range_Builder3.contractEnd((-1577L));
      // Undeclared exception!
      try { 
        Range.of(2760L, (-1213L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = Range.ofLength(0L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = (-2172L);
      Range.Builder range_Builder0 = new Range.Builder((-2172L), (-2172L));
      range_Builder0.expandEnd((-2172L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = 1000L;
      Range.Builder range_Builder0 = new Range.Builder(1000L, 1000L);
      range_Builder0.contractEnd(1L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(353L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.895591125332933
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Object object0 = new Object();
      Range range1 = Range.of(894L);
      range1.equals(range0);
      Range range2 = Range.of(32767L);
      range2.intersection(range0);
      Range.of(678L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 32767L, 68L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of((-1666L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.3305955430090957
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      range0.complement(range0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.133310203178477
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967296L, 4294967296L);
      List<Range> list0 = range0.split(4294967296L);
      range0.complementFrom(list0);
      range0.split(4294967296L);
      Range.Comparators.values();
      Range.Comparators.values();
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      String string0 = "org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream";
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("cluster distance can not be negative", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse cluster distance can not be negative into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.0610733884692896
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      Range range1 = Range.ofLength(9223372036854743041L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertFalse(list1.contains(range1));
      assertTrue(list1.contains(range0));
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = range_Builder0.build();
      assertSame(range2, range0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.137679919146939
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of((-32768L), 255L);
      Range range1 = Range.of((-1952L));
      range0.complement(range1);
      Long long0 = new Long(255L);
      Object object0 = new Object();
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.1360270265849555
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of(9223372036854775533L, 9223372036854775533L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.8940784789052407
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.ofLength(216L);
      Range range1 = Range.ofLength(216L);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.ofLength(212L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of((-43L), (-43L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(4994L, (-2777L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775532L, (-2925L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2925 would make range [9223372036854775532 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-383L), (-383L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 1L;
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-361L), (-361L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.7938131631694842
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      range0.intersection(range0);
      range0.toString();
      range0.endsBefore(range0);
      long long1 = 0L;
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of((-71L));
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775553L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 4294967300L, 6562710026760L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("dx/R=+MBigwHP&u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.dx/R=+MBigwHP&u
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.ofLength(367L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals(range_CoordinateSystem0);
      range0.getBegin(range_CoordinateSystem0);
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.7969671154659554
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      Range range1 = Range.of(32767L);
      long long0 = new Long(32767L);
      boolean boolean1 = range1.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.9787338102818284
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(2147483647L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.ofLength(62L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.isEmpty();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-563L));
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.6870204957035666
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.endsBefore(range0);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      range0.equals(object1);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Long long0 = new Long(1013L);
      range0.equals(long0);
      Object object1 = new Object();
      Long long1 = new Long(0L);
      range0.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of((-3128L));
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-128L), long0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 4294967294L, 6562710026760L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2760L, 673L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, 1000L, 1000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.0951521981483863
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(1000L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractEnd(1000L);
      long long0 = (-1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem1, 1000L, 3227L);
      long long1 = 1L;
      range_Builder2.contractEnd(1L);
      // Undeclared exception!
      try { 
        Range.of(3227L, 624L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-7780L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(441L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775554L, (-1142L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1143 would make range [9223372036854775554 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      long long0 = (-847L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-847L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
