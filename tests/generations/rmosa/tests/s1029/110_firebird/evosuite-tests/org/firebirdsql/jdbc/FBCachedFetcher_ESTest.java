/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 12:15:29 GMT 2019
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.concurrent.LinkedBlockingDeque;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.field.FBLongVarCharField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      linkedList0.push((byte[][]) null);
      assertEquals(2, linkedList0.size());
      
      boolean boolean1 = linkedList0.add((byte[][]) null);
      assertTrue(boolean1);
      assertEquals(3, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(3, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(3, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      
      boolean boolean2 = fBCachedFetcher0.first();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean2);
      assertEquals(3, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean3);
      assertEquals(3, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(3, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      
      boolean boolean4 = fBCachedFetcher0.isEmpty();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean4);
      assertEquals(3, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      
      fBCachedFetcher0.setFetchSize(2459);
      assertEquals(0, linkedList0.size());
      assertEquals(2459, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      
      boolean boolean0 = fBCachedFetcher0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(2459, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      
      boolean boolean1 = fBCachedFetcher0.isEmpty();
      assertTrue(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals(2459, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(boolean1 == boolean0);
      
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(2459, int0);
      assertEquals(0, linkedList0.size());
      assertEquals(2459, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1859008037483512
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add((byte[][]) null);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = linkedList0.add((byte[][]) null);
      assertTrue(boolean2);
      assertEquals(3, linkedList0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(3, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(3, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      fBCachedFetcher0.beforeFirst();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(3, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean3 = fBCachedFetcher0.first();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean3);
      assertEquals(3, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = fBCachedFetcher0.last();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean4);
      assertEquals(3, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(3, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean5 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean5);
      assertEquals(3, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      
      boolean boolean6 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean6);
      assertEquals(3, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      
      try { 
        fBResultSet0.getBinaryStream("/5j(");
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // The resultSet is not in a row, use next
         //
         verifyException("org.firebirdsql.jdbc.AbstractResultSet", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      
      boolean boolean1 = fBCachedFetcher0.absolute((-1));
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1849504592484699
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add((byte[][]) null);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = linkedList0.add((byte[][]) null);
      assertTrue(boolean2);
      assertEquals(3, linkedList0.size());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(3, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(3, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      fBCachedFetcher0.beforeFirst();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(3, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      boolean boolean3 = fBCachedFetcher0.first();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean3);
      assertEquals(3, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(3, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      
      boolean boolean4 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean4);
      assertEquals(3, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      
      boolean boolean5 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean5);
      assertEquals(3, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      
      try { 
        fBResultSet0.getBinaryStream("/5j(");
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // The resultSet is not in a row, use next
         //
         verifyException("org.firebirdsql.jdbc.AbstractResultSet", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.addLast((byte[][]) null);
      assertEquals(1, linkedList0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      boolean boolean1 = linkedList0.add((byte[][]) null);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(2, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(2, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean2 = fBCachedFetcher0.relative(1);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean2);
      assertEquals(2, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean1 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean2);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean3 = fBCachedFetcher0.isLast();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean3);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      linkedList0.push((byte[][]) null);
      assertEquals(2, linkedList0.size());
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(2, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(2, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      
      boolean boolean1 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      boolean boolean1 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(boolean1 == boolean0);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1829430989272922
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.addLast((byte[][]) null);
      assertEquals(1, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(2, linkedList0.size());
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      fBCachedFetcher0.beforeFirst();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean1 = fBCachedFetcher0.first();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean1 == boolean0);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean2 = fBCachedFetcher0.isFirst();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean2);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      
      int int0 = fBCachedFetcher0.getRowNum();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, int0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      
      boolean boolean2 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean2);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      
      boolean boolean3 = fBCachedFetcher0.isLast();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean3);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      boolean boolean0 = fBCachedFetcher0.isEmpty();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      boolean boolean1 = linkedList0.add((byte[][]) null);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(2, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(2, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean2 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean2);
      assertEquals(2, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean3);
      assertEquals(2, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      linkedList0.push((byte[][]) null);
      assertEquals(2, linkedList0.size());
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(2, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(2, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      
      boolean boolean1 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean1 == boolean0);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.addLast((byte[][]) null);
      assertEquals(1, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      
      fBCachedFetcher0.beforeFirst();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      
      boolean boolean0 = fBCachedFetcher0.first();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      
      boolean boolean1 = fBCachedFetcher0.last();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = fBCachedFetcher0.isAfterLast();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean2);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      
      boolean boolean1 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean2);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean1 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.addLast((byte[][]) null);
      assertEquals(1, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      
      boolean boolean0 = fBCachedFetcher0.relative(400);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.addLast((byte[][]) null);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      boolean boolean1 = fBCachedFetcher0.relative((-978));
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[0][6];
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      
      boolean boolean1 = linkedList0.offerLast(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean1 == boolean0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(2, linkedList0.size());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(linkedList0.contains(byteArray0));
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.addLast((byte[][]) null);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.addLast((byte[][]) null);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertFalse(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spliterator<byte[][]> spliterator0 = linkedList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, linkedList0.size());
      
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque0);
      
      boolean boolean0 = linkedBlockingDeque0.add("");
      assertTrue(boolean0);
      assertTrue(linkedBlockingDeque0.contains(""));
      
      boolean boolean1 = linkedList0.retainAll(linkedBlockingDeque0);
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedBlockingDeque0.contains(""));
      assertFalse(boolean1 == boolean0);
      
      LinkedList linkedList1 = new LinkedList<FBLongVarCharField>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      assertTrue(linkedList2.equals((Object)linkedList0));
      
      byte[][] byteArray0 = new byte[3][7];
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(linkedList0.contains(byteArray0));
      assertTrue(linkedList0.equals((Object)linkedList2));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(linkedList0.contains(byteArray0));
      assertTrue(linkedList0.equals((Object)linkedList2));
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(linkedList0.contains(byteArray0));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertNotSame(linkedList0, linkedList2);
      
      boolean boolean2 = fBCachedFetcher0.isBeforeFirst();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean2);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(linkedList0.contains(byteArray0));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(linkedList0, linkedList2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.addLast((byte[][]) null);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean0 = fBCachedFetcher0.isFirst();
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.addLast((byte[][]) null);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute((-1566));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.addLast((byte[][]) null);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean0 = fBCachedFetcher0.isAfterLast();
      assertFalse(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.addLast((byte[][]) null);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.addLast((byte[][]) null);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative(335544539);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((List<byte[][]>) null, (FBObjectListener.FetcherListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow((byte[][]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean0 = fBCachedFetcher0.absolute((-1870));
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, int0);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      int int0 = fBCachedFetcher0.getRowNum();
      assertEquals(0, int0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      fBCachedFetcher0.afterLast();
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      
      fBCachedFetcher0.close();
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      
      fBCachedFetcher0.beforeFirst();
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      boolean boolean0 = fBCachedFetcher0.previous();
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean0 = fBCachedFetcher0.relative((-461));
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl0);
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((GDSHelper) null, 335740943, 335740943, isc_stmt_handle_impl0, (FBObjectListener.FetcherListener) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.addLast((byte[][]) null);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean0 = fBCachedFetcher0.next();
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[0][2];
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.addLast((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isBeforeFirst();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isAfterLast();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isBeforeFirst();
      assertFalse(boolean0);
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(boolean0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.last();
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBResultSet0.getRow());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[0][6];
      linkedList0.offerLast(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.addLast((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative((-2555));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      try { 
        fBCachedFetcher0.absolute((-1));
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }
}
