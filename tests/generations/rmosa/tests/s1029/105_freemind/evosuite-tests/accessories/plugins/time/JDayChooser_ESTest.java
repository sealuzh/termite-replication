/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 11:58:44 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.beans.VetoableChangeListener;
import java.sql.Time;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.Action;
import javax.swing.DebugGraphics;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.TransferHandler;
import javax.swing.border.Border;
import javax.swing.event.MenuKeyEvent;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1326303323964093
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JButton[] jButtonArray0 = new JButton[0];
      jDayChooser0.days = jButtonArray0;
      SystemColor systemColor0 = SystemColor.control;
      // Undeclared exception!
      try { 
        jDayChooser0.setDecorationBackgroundColor(systemColor0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(3);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.days = null;
      // Undeclared exception!
      try { 
        jDayChooser0.setMaxDayCharacters(228);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 36, 36, 36, 36, 'E');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1832), 48, 48, 40, ']');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8008307070291334
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1), 42, (-241), (-1), 'T');
      jDayChooser0.keyPressed(keyEvent0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(42, (-241), (-1));
      mockGregorianCalendar0.setFirstDayOfWeek((-241));
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar(mockGregorianCalendar0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0918164583074423
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDoubleBuffered();
      jDayChooser0.setDay((-1212));
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate((Date) null);
      Color color0 = Color.magenta;
      assertEquals(255, color0.getBlue());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Action action0 = TransferHandler.getPasteAction();
      JButton jButton0 = new JButton(action0);
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 1875, "day", 31);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"paste\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 37, 37, 37, 37, 'c');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(4);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(4, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.getMinSelectableDate();
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(69);
      MockDate mockDate0 = new MockDate(0, 34, 69, 11, (-1063));
      jDayChooser0.setSelectableDateRange(date1, mockDate0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertSame(date1, date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 1, "day", 1);
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1287520271022573
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(49);
      System.setCurrentTimeMillis(604800000L);
      jDayChooser0.setMonth(44);
      jDayChooser0.requestFocusInWindow();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-713), 2857L, 838, 36, '/');
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.isDayBordersVisible();
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      Color color0 = Color.magenta;
      assertEquals(255, color0.getRed());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      pDFDocument0.setCreator("day");
      jDayChooser0.defaultMaxSelectableDate = null;
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.drawWeeks();
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8009564284989317
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "&N";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      jDayChooser0.dayNames = stringArray0;
      Locale locale0 = new Locale("day", "day");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getDayPanel();
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setMaxDayCharacters(464);
      jDayChooser0.getLocale();
      jDayChooser0.drawDays();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      PDFGraphics2D pDFGraphics2D0 = null;
      try {
        pDFGraphics2D0 = new PDFGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.695482417057474
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = new Color((-2017), false);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2017), (-3273L), '$', 35, '$');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.addListeners(35);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      locale0.getUnicodeLocaleAttributes();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = new Color(45, true);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setSundayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis(4294967295L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(19, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-1433), "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis((-289L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3202), (-2589L), (-3202), (-491), '3');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2708465619610356
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(false);
      jDayChooser0.getMaxDayCharacters();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.add((Component) jPanel0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getMinSelectableDate();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ")1JaN?4lV";
      stringArray0[1] = ")1JaN?4lV";
      stringArray0[2] = ")1JaN?4lV";
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-96);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-13);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[3] = ")1JaN?4lV";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.577674757227539
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      System.setCurrentTimeMillis((-4503L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(1239);
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-574), 48, 10170, 34, '#');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8961031581030303
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponentListeners();
      jDayChooser0.focusGained((FocusEvent) null);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getHierarchyListeners();
      JButton[] jButtonArray0 = new JButton[0];
      jDayChooser0.days = jButtonArray0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1031), 3745, (-1031), 90, 7, (-1431655763));
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2);
      jDayChooser0.focusLost(focusEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.init();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.983211734533764
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.contains((-3387), (-3387));
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-3387));
      focusEvent0.getOppositeComponent();
      jDayChooser0.resetKeyboardActions();
      focusEvent0.getOppositeComponent();
      focusEvent0.setSource("day");
      jDayChooser0.getComponentListeners();
      jDayChooser0.focusGained(focusEvent0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      
      jDayChooser0.getHierarchyListeners();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3387), (-3387), (-3387), (-3387), (-3387), (-3387));
      jDayChooser0.setBorder((Border) null);
      focusEvent0.setSource((Object) null);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setMonth((-3387));
      MockDate mockDate0 = new MockDate((-3387), (-3387), (-3387));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      DebugGraphics debugGraphics0 = new DebugGraphics((Graphics) null, jDayChooser0);
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5777233286214165
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.removeNotify();
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(515);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Time time0 = Time.valueOf(localTime0);
      jDayChooser0.setSelectableDateRange(time0, time0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate();
      mockDate0.clone();
      mockDate0.getTime();
      jDayChooser0.setMinSelectableDate(mockDate0);
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 14, 14, 14, 14, '\"');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      System.setCurrentTimeMillis((-2586L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, '#', 0L, 39, 39, '#');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekdayForeground((Color) null);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.578527464897386
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMaxDayCharacters((-1));
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setYear(1286);
      Color color0 = Color.white;
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.getFont();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setMaxDayCharacters((-1));
      jDayChooser0.drawWeeks();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.green;
      jDayChooser0.setForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.setDay((-527));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getClientProperty((Object) null);
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, (-1433), (String) null, (-1433));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getClientProperty((Object) null);
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, (-1433), "*cnHk<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.1374286651201446
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.contains((-3387), (-3387));
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-3387));
      jDayChooser0.resetKeyboardActions();
      focusEvent0.getOppositeComponent();
      focusEvent0.setSource(jDayChooser0);
      focusEvent0.setSource("day");
      jDayChooser0.getComponentListeners();
      jDayChooser0.focusGained(focusEvent0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.getHierarchyListeners();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3387), (-3387), (-3387), (-3387), (-3387), (-3387));
      jDayChooser0.setBorder((Border) null);
      focusEvent0.setSource((Object) null);
      jDayChooser0.init();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.init();
      color0.brighter();
      jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getLocale();
      jDayChooser0.keyReleased((KeyEvent) null);
      jDayChooser0.setMaxDayCharacters((-2216));
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.decorationBackgroundColor;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.init();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(753);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-16754012), color0.getRGB());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 677, 677, 0, 0, '3', (MenuElement[]) null, (MenuSelectionManager) null);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(4385);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }
}
