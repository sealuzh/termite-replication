/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 00:44:45 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1888736762864411
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Float float0 = new Float((-4619.824F));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      Object object0 = null;
      BiFunction<Object, Object, JSONObject> biFunction0 = (BiFunction<Object, Object, JSONObject>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge((Object) null, jSONObject0, biFunction0);
      jSONObject0.put("{}", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(663);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("{ Y5997&0hKW:Tov_", jSONObject0);
      jSONObject1.getJSONObject("{ Y5997&0hKW:Tov_");
      try { 
        jSONObject0.getBoolean("{ Y5997&0hKW:Tov_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{ Y5997&0hKW:Tov_\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{Q Y=997&0hKW:Tov_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 14 of {Q Y=997&0hKW:Tov_
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{~wnMsoG=dsCM8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 14 of {~wnMsoG=dsCM8
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", true);
      boolean boolean0 = jSONObject1.optBoolean("Unterminated string");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4999743392353092
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString((-218), 2750);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONArray0.put(4863, (Collection) linkedList0);
      jSONArray0.put(13, 13);
      JSONArray jSONArray1 = jSONArray0.put(2283.15);
      JSONArray jSONArray2 = jSONArray1.put(13, (long) 13);
      jSONArray1.optBoolean((-692), false);
      String string0 = JSONObject.valueToString(jSONArray0, (-692), (-692));
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) stringArray0[0]);
      jSONArray0.put((Collection) linkedList1);
      jSONArray1.put((Object) jSONArray2);
      jSONArray0.optBoolean((-1865), false);
      stringArray0[1] = string0;
      JSONObject jSONObject0 = new JSONObject(jSONArray1, stringArray0);
      // Undeclared exception!
      jSONObject0.getInt(stringArray0[1]);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("w", "true");
      boolean boolean0 = jSONObject1.optBoolean("w", false);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("e(![>;</V}Htd5':!", object0);
      boolean boolean0 = jSONObject0.optBoolean("e(![>;</V}Htd5':!", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = jSONObject0.accumulate("*:)}", boolean0);
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getBoolean("*:)}");
      String[] stringArray0 = JSONObject.getNames((Object) "*:)}");
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject.quote("");
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 79, 1160);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2811211713557142
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      Byte byte0 = new Byte((byte) (-128));
      jSONObject0.putOpt("op", byte0);
      Object object0 = JSONObject.NULL;
      jSONObject0.optInt("op");
      Boolean boolean0 = new Boolean("");
      jSONObject1.toString(13, (-2901));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("getiterator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of getiterator
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("bt$xy]?I", (Map) hashMap0);
      jSONObject0.put("bt$xy]?I", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("bt$xy]?I");
      JSONObject jSONObject3 = jSONObject2.put("bt$xy]?I", true);
      assertNotSame(jSONObject3, jSONObject1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("islongValue", linkedList0);
      JSONObject.getNames((Object) "islongValue");
      jSONObject0.accumulate("UO%", hashMap0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{ Y5997&0hKW:Tov_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 17 of { Y5997&0hKW:Tov_
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-128));
      Byte.compare((byte)59, (byte)59);
      JSONObject jSONObject1 = jSONObject0.putOpt("op", byte0);
      jSONObject1.getDouble("op");
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("op");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of op
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 0.0);
      Byte byte0 = new Byte((byte) (-128));
      JSONObject jSONObject1 = jSONObject0.putOpt("op", byte0);
      jSONObject1.optDouble("op");
      Byte.compare((byte)38, (byte)16);
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("");
      jSONObject0.names();
      int int0 = jSONObject1.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{ Y5997&0hKWTov_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 16 of { Y5997&0hKWTov_
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2108, false);
      jSONArray0.optJSONObject(5026);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 5026, 5026);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("null", "null");
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.put("null", true);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.getBoolean("null");
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject1);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("h@z^;Ct(ZRFDug", 0.0);
      jSONObject1.optInt("h@z^;Ct(ZRFDug", 46);
      JSONObject.valueToString(jSONObject0);
      try { 
        jSONObject0.getBoolean("h@z^;Ct(ZRFDug");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"h@z^;Ct(ZRFDug\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("g]+jr", (Object) "g]+jr");
      jSONObject0.accumulate("g]+jr", "g]+jr");
      Double double0 = new Double(265.25586577291386);
      Double.sum((-1.0), (-1.0));
      JSONObject.getNames((Object) double0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("g]+jr");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject1 = jSONObject0.put(",>%Fe1a[JNJnv X~_ok", (Collection) linkedList0);
      linkedList0.clear();
      jSONObject1.putOpt("}!;YI.-ultR+]PgngQ", linkedList0);
      jSONObject0.optJSONArray(",>%Fe1a[JNJnv X~_ok");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Byte byte0 = new Byte((byte)123);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Short, JSONArray> hashMap1 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.putOpt("islongValue", hashMap1);
      JSONObject.getNames((Object) jSONObject0);
      Short short0 = new Short((byte)123);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("UyiXqd]{", object0);
      jSONObject1.isNull("istoString");
      JSONObject.doubleToString((byte)123);
      boolean boolean0 = jSONObject1.isNull("UyiXqd]{");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Short, JSONArray> hashMap1 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      double double0 = Double.NaN;
      Double double1 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("islongValue", double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.offer((Byte) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.845325034315053
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Double double0 = new Double(766.001073740296);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString(8192);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Double.min(Double.NaN, (-4128.5));
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(" {}Ti 2.%Il(>");
      JSONObject jSONObject0 = new JSONObject(" {}Ti 2.%Il(>");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("Missing value");
      Integer integer0 = new Integer((-873));
      JSONObject jSONObject1 = jSONObject0.put("Missing value", (Object) integer0);
      jSONObject0.optString("Missing value");
      JSONObject jSONObject2 = jSONObject1.optJSONObject("");
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("t7?dL\"RKv@:,N/yx~G", (Collection) linkedList0);
      jSONObject1.getJSONArray("t7?dL\"RKv@:,N/yx~G");
      try { 
        jSONObject0.get("&Dw6zbDa>xl0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&Dw6zbDa>xl0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt((String) null);
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)11);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.putOpt(" at character ", jSONObject1);
      Short short0 = new Short((short) (-4814));
      JSONObject.getNames((Object) short0);
      Short short1 = new Short((short) (-4814));
      jSONObject1.optDouble("int", Double.NaN);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject2.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Short short0 = new Short((short)117);
      Byte byte0 = new Byte((byte)47);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("getvalueOf", byte0);
      jSONObject0.append("getvalueOf", "getvalueOf");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      Object object0 = new Object();
      Byte byte0 = new Byte((byte) (-113));
      JSONObject jSONObject2 = jSONObject0.putOpt("w7o&|rN", byte0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject1.put("getgetJSONObject", (Collection) linkedList0);
      jSONObject2.opt("getgetJSONObject");
      jSONObject2.optJSONObject("");
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<String, JSONObject> hashMap1 = new HashMap<String, JSONObject>();
      jSONObject0.put(":*A[@8K8U*", (Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.getJSONObject(":*A[@8K8U*");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", 0.0);
      jSONObject1.optString("1.0", "");
      Object object0 = new Object();
      jSONObject1.accumulate("1.0", "");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.doubleToString((-869.192724));
      JSONObject jSONObject1 = jSONObject0.put("-869.192724", (-1001L));
      jSONObject1.getInt("-869.192724");
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Expected a ',' or ']'", 0L);
      double double0 = jSONObject0.optDouble("Expected a ',' or ']'");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "g]+8~");
      JSONObject jSONObject0 = new JSONObject("g]+8~", stringArray0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("g]+8~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of g]+8~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Long long0 = new Long((-1261L));
      hashMap0.put(long0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      String string0 = JSONObject.valueToString(hashMap0, 28, 123);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = Byte.valueOf((byte)94);
      JSONObject jSONObject1 = jSONObject0.accumulate("g]+jr", byte0);
      jSONObject1.optInt("g]+jr");
      Integer integer0 = Integer.getInteger("g]+jr", (int) (byte)94);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "A JSONArray text must start with '['";
      jSONObject0.put("", 1539);
      stringArray0[3] = "";
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "=BBF";
      String string1 = jSONObject0.optString("=BBF", stringArray0[0]);
      Object object0 = new Object();
      Byte byte0 = new Byte((byte) (-21));
      try { 
        jSONObject1.accumulate(string1, byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "?v|S74";
      jSONObject0.optLong("?v|S74", (-654L));
      try { 
        jSONObject0.get("?v|S74");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?v|S74\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(" {}Ti 2.%Il(>");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{bOYH?%b4v5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {bOYH?%b4v5
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Expected a ',' or ']'", 23L);
      double double0 = jSONObject0.optDouble("Expected a ',' or ']'");
      assertEquals(23.0, double0, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|3?jR.$f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |3?jR.$f
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(" {}Ti 2.%Il(>");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("int", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 8192);
      jSONObject0.optLong("");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = null;
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.095924398920587
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject();
      long long0 = new Integer(8192);
      JSONObject jSONObject1 = jSONObject0.put(":/t,8J+jT^b_e!d", 123);
      jSONObject0.names();
      Object object0 = new Object();
      boolean boolean0 = new Boolean(":/t,8J+jT^b_e!d");
      jSONObject1.names();
      JSONObject.testValidity((Object) null);
      Long long1 = new Long((-585L));
      Long.compareUnsigned((-1L), 972L);
      jSONObject0.putOpt("g+jr", long1);
      JSONObject.quote("isparseBoolean");
      jSONObject0.optInt("g+jr", (-1090));
      boolean boolean1 = jSONObject0.has("g+jr");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("fP)i9|ch<YefAWU1Nk");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "g]+Mr";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("g]+Mr", "g]+Mr");
      try { 
        jSONObject1.getJSONArray("g]+Mr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g]+Mr\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string0 = "islongValue";
      JSONObject jSONObject1 = jSONObject0.putOpt("islongValue", linkedList0);
      JSONObject.getNames((Object) jSONObject0);
      Long long0 = new Long(3297L);
      jSONObject1.accumulate("islongValue", long0);
      String string1 = "(cy";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("isputOpt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of isputOpt
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put(",>%Fe1a[JNJnv X~_ok", (Collection) linkedList0);
      jSONObject0.accumulate(",>%Fe1a[JNJnv X~_ok", linkedList0);
      boolean boolean0 = new Boolean(",>%Fe1a[JNJnv X~_ok");
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = JSONObject.quote("<K,?&d/R6u>&9HHOJ");
      assertEquals("\"<K,?&d/R6u>&9HHOJ\"", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = JSONObject.quote("C&bg:$/Bi35h8l");
      assertEquals("\"C&bg:$/Bi35h8l\"", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONTokener", 0.0);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.putOpt("", "");
      jSONObject2.keys();
      jSONObject1.has("me");
      Byte byte0 = new Byte((byte)57);
      JSONObject.doubleToString(0.0);
      JSONTokener jSONTokener0 = new JSONTokener("getkeySet");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of getkeySet
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.5756821431835952
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      JSONObject jSONObject1 = jSONObject0.put("null", 0.0);
      Double double0 = new Double(0.0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.putOpt("is", object0);
      jSONObject0.optLong("\b");
      jSONObject1.remove("toH");
      JSONObject jSONObject3 = new JSONObject((Object) "null");
      jSONObject3.isNull("Gz:6d");
      jSONObject2.toString(1870, (-18627781));
      jSONObject2.remove("{\n\"java.lang.String@0000000017\": java.lang.Double@0000000018,\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000057,\njava.lang.Byte@0000000058,\njava.lang.Byte@0000000059,\njava.lang.Byte@0000000060\n],\n\"java.lang.String@0000000034\": null,\n\"java.lang.String@0000000015\": \"java.lang.Class@0000000016\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      jSONObject2.optDouble("isdoubleToLongBits", (-6202.2909648634));
      JSONObject.doubleToString((-18627781));
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString((-1834), (-1834));
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject.testValidity(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-2931), (-2289));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a Boolean.", 0.0);
      String string0 = jSONObject0.optString("] is not a Boolean.", "islongBitsToDouble");
      assertNotNull(string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("6ij3i\\N2P 6s$Yau");
      assertEquals("\"6ij3i\\\\N2P 6s$Yau\"", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("\"6ij3i\\\\N2P 6s$Yau\"", (-676.9795081388));
      jSONObject1.getString("\"6ij3i\\\\N2P 6s$Yau\"");
      long long0 = jSONObject1.getLong("\"6ij3i\\\\N2P 6s$Yau\"");
      assertEquals((-676L), long0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.8768603988557397
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte byte0 = (byte)83;
      Byte byte1 = new Byte((byte)83);
      JSONObject jSONObject0 = new JSONObject(byte1);
      String string0 = "}lD[";
      Byte.toUnsignedLong((byte)83);
      JSONObject jSONObject1 = jSONObject0.put("}lD[", (long) (byte)83);
      jSONObject0.getDouble("}lD[");
      JSONObject jSONObject2 = jSONObject0.put("}lD[", 12);
      Byte.toUnsignedInt((byte)83);
      Byte.toUnsignedInt((byte)83);
      jSONObject2.getLong("}lD[");
      jSONObject0.optBoolean("}lD[", true);
      jSONObject2.toJSONArray((JSONArray) null);
      try { 
        jSONObject1.getDouble("!|L:z9*bUXs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!|L:z9*bUXs\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("UO%", hashMap0);
      boolean boolean0 = jSONObject0.isNull("UO%");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (double) (short) (-1460));
      jSONObject0.optLong("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = JSONObject.valueToString(jSONObject0, (-529), 2849);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("}", true);
      try { 
        jSONObject0.put((String) null, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = JSONObject.quote("Missing value");
      assertEquals("\"Missing value\"", string0);
      
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      double double0 = jSONObject0.optDouble("VQ~~}T;j\"Gm|g~'", 4704.236776889333);
      assertEquals(4704.236776889333, double0, 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "islongValue");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("istoLowerCase", (Object) "istoLowerCase");
      jSONObject1.remove("istoLowerCase");
      jSONObject0.optLong("istoLowerCase");
      try { 
        jSONObject0.getBoolean("istoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("B85", (-1.0));
      assertEquals((-1.0), double0, 0.01);
      
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList1);
      Float float0 = new Float(1995.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(3086, 3086);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Long long0 = new Long(1339L);
      String string0 = JSONObject.valueToString(long0, 60, 60);
      assertNotNull(string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject1 = jSONObject0.put(",>%Fe1a[JNJnv X~_ok", (Collection) linkedList0);
      linkedList0.clear();
      jSONObject1.putOpt("}!;YI.-ultR+]PgngQ", linkedList0);
      jSONObject1.toString(47, 47);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "hh!@ATv";
      jSONObject0.put("hh!@ATv", (Object) "hh!@ATv");
      try { 
        jSONObject0.getJSONObject("hh!@ATv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"hh!@ATv\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("] is not a JSONArray.", (Object) null);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-896));
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Short short0 = new Short((short)2051);
      Long long0 = new Long(4022L);
      hashMap0.put(short0, long0);
      String string0 = JSONObject.quote("toJ");
      assertEquals("\"toJ\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("toJ", (Object) null);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.quote("6ij3i\\N2P 6s$Yau");
      JSONObject jSONObject1 = jSONObject0.put("\"6ij3i\\\\N2P 6s$Yau\"", (-676.9795081388));
      String string1 = jSONObject1.getString("\"6ij3i\\\\N2P 6s$Yau\"");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer(950);
      Byte byte0 = new Byte((byte)47);
      hashMap0.put(integer0, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Byte byte0 = new Byte((byte)123);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Short, JSONArray> hashMap1 = new HashMap<Short, JSONArray>();
      Short short0 = new Short((short)9);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap1.put(short0, jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4888888888888889
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Short, JSONArray> hashMap1 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.putOpt("islongValue", hashMap1);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.accumulate("UyiXqd]{", hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      Writer writer1 = jSONArray0.write(writer0);
      assertSame(writer0, writer1);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.toJSONObject((JSONArray) null);
      Short short0 = new Short((short)529);
      hashMap0.put((Object) null, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-3502), (-3074));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      jSONObject0.toString(8192, 0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      linkedList0.clear();
      jSONObject0.putOpt(",>%Fe1a[JNJnv X~_ok", linkedList0);
      String string0 = jSONObject0.toString((-1598), 736);
      assertNotNull(string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.putIfAbsent(boolean0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0295993619233261
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject.quote("C&bg:/Bi35h8l");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"C&bg:/Bi35h8l\"";
      stringArray0[1] = "\"C&bg:/Bi35h8l\"";
      stringArray0[2] = "getreverseBytes";
      stringArray0[3] = "\"C&bg:/Bi35h8l\"";
      stringArray0[4] = "wai";
      JSONObject jSONObject0 = new JSONObject("C&bg:/Bi35h8l", stringArray0);
      jSONObject0.optInt("hn;?-m@Q,T[F");
      try { 
        jSONObject0.getJSONArray("getreverseBytes");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getreverseBytes\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.09110890507758
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject.quote("Missing value");
      String string0 = JSONObject.quote("getclear");
      assertEquals("\"getclear\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"Missing value\"");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.0878882931613159
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = JSONObject.quote("+Jr}Y51lzq~5R");
      assertEquals("\"+Jr}Y51lzq~5R\"", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"+Jr}Y51lzq~5R\"";
      JSONObject jSONObject0 = new JSONObject("+Jr}Y51lzq~5R", stringArray0);
      jSONObject0.put("+Jr}Y51lzq~5R", 2032.0349069997);
      int int0 = jSONObject0.optInt("get", (-527));
      assertEquals((-527), int0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "islongValue";
      jSONObject0.putOpt("islongValue", linkedList0);
      try { 
        jSONObject0.getInt("islongValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"islongValue\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)128);
      JSONObject jSONObject1 = jSONObject0.put("e|\"", (Object) short0);
      int int0 = jSONObject1.getInt("e|\"");
      assertEquals(128, int0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put("5696.87503380", boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer.getInteger("ishashCode");
      Integer.divideUnsigned(9, 9);
      Byte byte0 = new Byte((byte)93);
      hashMap0.put((Integer) null, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Short short0 = new Short((short) (-1023));
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Double double0 = new Double((-1.0));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.quote("=4mx\"+");
      assertEquals("\"=4mx\\\"+\"", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("true");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("i'LvJEao&nS!|F", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("isopt", "isopt");
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = JSONObject.valueToString("tb&wE");
      assertNotNull(string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "par";
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject.valueToString("Missing value", (short) (-4226), (short) (-4226));
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      assertEquals(0, hashMap0.size());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(linkedList0, 128, 128);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.018706115735962
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject.quote("C&bg:/Bi35h8l");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "C&bg:/Bi35h8l";
      stringArray0[1] = "\"C&bg:/Bi35h8l\"";
      stringArray0[2] = "C&bg:/Bi35h8l";
      stringArray0[3] = "C&bg:/Bi35h8l";
      stringArray0[4] = "\"C&bg:/Bi35h8l\"";
      stringArray0[5] = "C&bg:/Bi35h8l";
      stringArray0[6] = "C&bg:/Bi35h8l";
      JSONObject jSONObject0 = new JSONObject("\"C&bg:/Bi35h8l\"", stringArray0);
      jSONObject0.toString(1618);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("isdoubleToRawLongBits");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Double double0 = new Double((-1.0F));
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, 1920.527581224);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("0YU^FQbZF0o6p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0YU^FQbZF0o6p\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "sE?`~=FuQKN x+ah";
      jSONObject0.optLong("sE?`~=FuQKN x+ah", 2503L);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("sE?`~=FuQKN x+ah");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of sE?`~=FuQKN x+ah
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte) (-33));
      try { 
        jSONObject0.append((String) null, byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 594, 594);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      Long long0 = Long.getLong("] is not a number.", 0L);
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(long0, boolean0);
      String string0 = JSONObject.valueToString(hashMap0, 28, 28);
      assertNotNull(string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.optJSONObject(2728);
      Integer integer0 = new Integer(101);
      hashMap0.put((JSONObject) null, integer0);
      HashMap<String, JSONObject> hashMap1 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(92, 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(19, 19);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.quote("\f");
      assertEquals("\"\\f\"", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("[D4l,1QDfU,8jg?", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "sH4,H";
      jSONObject0.put("sH4,H", (-269.18));
      try { 
        jSONObject0.getBoolean("sH4,H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sH4,H\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object1);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt(" at character ", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Hg,]=.NN[GK:Jj4[J8f", (-14530064));
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, 21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("DH1g> aXk:", "DH1g> aXk:");
      assertEquals("DH1g> aXk:", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean("int", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "UyiXqd]{";
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Short, JSONArray> hashMap1 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.putOpt("islongValue", hashMap1);
      try { 
        jSONObject0.getLong("islongValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"islongValue\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("issplit", "issplit");
      try { 
        jSONObject1.getDouble("issplit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issplit\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)92);
      jSONObject0.put("", (Object) byte0);
      double double0 = jSONObject0.getDouble("");
      assertEquals(92.0, double0, 0.01);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("*I$h", "*I$h");
      try { 
        jSONObject0.getBoolean("*I$h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*I$h\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("4vNb*'{UWKY$?>/_H>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4vNb*'{UWKY$?>/_H>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      Short short0 = new Short((short)62);
      hashMap0.put("o8DG@", short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.get("o8DG@");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate("g]+Mr", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("S>;qe!n+S", 0L);
      JSONObject.quote("getnames");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("getnames");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("Missing value");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.getLong("i__dau[l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"i__dau[l\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("M", 32);
      assertEquals(32, int0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("8tN*AJ\"{bb6&]w9+", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("se");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("par");
      assertNull(object0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "wheel.json.JSONTokener";
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("wheel.json.JSONTokener");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONTokener\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      Float.max(2464.43F, 2464.43F);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Float float0 = new Float(0.0);
      float float1 = Float.sum(0.0F, (-199.41562F));
      JSONObject.testValidity(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
  }

  /**
  //Test case number: 171
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      Short short0 = new Short((short)498);
      Short.compare((short)48, (short)498);
      hashMap0.putIfAbsent("\f", short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append("\f", "\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\f] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 172
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 173
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONObject$Null");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONObject$Null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 174
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
