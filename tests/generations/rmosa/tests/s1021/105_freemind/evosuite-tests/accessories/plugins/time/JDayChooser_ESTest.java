/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 01:06:17 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.BrowseMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.awt.image.IndexColorModel;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.sql.Timestamp;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JEditorPane;
import javax.swing.plaf.metal.MetalComboBoxUI;
import javax.swing.plaf.multi.MultiComboBoxUI;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.CachedImageHandlerBase64Encoder;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.xerces.parsers.IntegratedParserConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.063341640419737
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getLocale();
      jDayChooser0.setFocus();
      jDayChooser0.defaultMinSelectableDate = null;
      jDayChooser0.setMonth((-1621));
      jDayChooser0.setInheritsPopupMenu(true);
      jDayChooser0.getDayPanel();
      jDayChooser0.enableInputMethods(true);
      jDayChooser0.getX();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setMonth((-1621));
      jDayChooser0.drawWeeks();
      jDayChooser0.getDay();
      // Undeclared exception!
      try { 
        jDayChooser0.setMinSelectableDate((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(63713);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 7, 2432L, (-1989), 39, '{');
      jDayChooser0.keyPressed(keyEvent0);
      SymbolTable symbolTable0 = new SymbolTable(39);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 35, 35, 35, 35, '{');
      jDayChooser0.keyPressed(keyEvent0);
      SymbolTable symbolTable0 = new SymbolTable(35);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-716), 0L, 8823, 39, 'q');
      jDayChooser0.keyPressed(keyEvent0);
      SymbolTable symbolTable0 = new SymbolTable(39);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 33;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, 33, 33, 33, '{');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.invalidate();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.drawDays();
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6955063642778003
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      jDayChooser0.getGraphics();
      jDayChooser0.setDay(2622);
      jDayChooser0.setMonth(5);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.BLUE;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setWeekOfYearVisible(false);
      Color color0 = Color.orange;
      jDayChooser0.setForeground(color0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(28);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(1304);
      jDayChooser0.setMonth(1304);
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      IntegratedParserConfiguration integratedParserConfiguration0 = new IntegratedParserConfiguration();
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.800923963425939
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setIgnoreRepaint(true);
      jDayChooser0.getAlignmentY();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.getComponents();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.updateUI();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDay((-998));
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.696611080403704
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMinSelectableDate();
      java.sql.Date date1 = new java.sql.Date((-1155L));
      jDayChooser1.setSelectableDateRange(date0, date1);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      Font.getFont("4", (Font) null);
      jDayChooser2.setFont((Font) null);
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(2);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.696358026209703
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(4032);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = jDayChooser1.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5777466264255984
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate(13, 2267, 947);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.setDay(2267);
      jDayChooser0.setMonth(2267);
      jDayChooser0.setFocus();
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      PDFDocument pDFDocument0 = new PDFDocument("CA");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.setDay((-3317));
      SymbolTable symbolTable0 = new SymbolTable(18434);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "31");
      SymbolTable symbolTable0 = new SymbolTable();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      java.sql.Date date0 = new java.sql.Date(941L);
      LocalDate localDate0 = date0.toLocalDate();
      java.sql.Date date1 = java.sql.Date.valueOf(localDate0);
      jDayChooser0.setMinSelectableDate(date1);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.FRANCE;
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-172), 64800000L, (-172), (-172), '.');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, int0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5778021974175407
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.isDoubleBuffered();
      jDayChooser0.firePropertyChange("day", (double) 676, (double) 676);
      jDayChooser0.setMonth(676);
      jDayChooser0.repaint((long) 676);
      jDayChooser0.updateUI();
      jDayChooser0.setWeekOfYearVisible(true);
      Color color0 = Color.orange;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-86);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(676, (-1264), byteArray0, 8199, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Color color0 = Color.gray;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setMaxSelectableDate((Date) null);
      int int0 = 90;
      // Undeclared exception!
      try { 
        MockLocalTime.of(1751, 90, 49);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for HourOfDay (valid values 0 - 23): 1751
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 14;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.textHighlightText;
      jDayChooser0.setSundayForeground(systemColor0);
      CachedImageHandlerBase64Encoder cachedImageHandlerBase64Encoder0 = new CachedImageHandlerBase64Encoder();
      MultiComboBoxUI multiComboBoxUI0 = new MultiComboBoxUI();
      // Undeclared exception!
      try { 
        multiComboBoxUI0.getPreferredSize(jDayChooser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.896153112519625
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getTopLevelAncestor();
      jDayChooser0.setMonth(8195);
      jDayChooser0.createVolatileImage((-1248), 916);
      jDayChooser0.checkImage((Image) null, (ImageObserver) null);
      jDayChooser0.getComponentListeners();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1298, false);
      focusEvent0.paramString();
      jDayChooser0.focusGained(focusEvent0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = "unknown type,permanent,opposite=null";
      stringArray0[2] = "unknown type,permanent,opposite=null";
      stringArray0[3] = "day";
      stringArray0[4] = "unknown type,permanent,opposite=null";
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1298, (-1L), (-1248), 39, '1');
      jDayChooser0.keyReleased(keyEvent0);
      stringArray0[5] = "unknown type,permanent,opposite=null";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-1730));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(35);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.896211771114869
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getTopLevelAncestor();
      jDayChooser0.setMonth(8195);
      jDayChooser0.getComponentListeners();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1298, false);
      focusEvent0.paramString();
      jDayChooser0.focusGained(focusEvent0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = "unknown type,permanent,opposite=null";
      stringArray0[2] = "unknown type,permanent,opposite=null";
      stringArray0[3] = "day";
      stringArray0[2] = "unknown type,permanent,opposite=null";
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setMaxDayCharacters((-4504));
      JButton jButton0 = new JButton((Action) null);
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 8195, "unknown type,permanent,opposite=null");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.infoText;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)StrokingTextPainter.FLOW_REGIONS;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, 1, "standby");
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5776871557149237
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.init();
      jDayChooser0.getGraphics();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setToolTipText("optionVALIDATE");
      int int0 = 9;
      jDayChooser0.setDay(9);
      Font font0 = Font.decode("optionVALIDATE");
      font0.getAttributes();
      jDayChooser0.setFont(font0);
      String string0 = "jyjIU>[)W['[gu";
      HsqlProperties hsqlProperties0 = HsqlProperties.delimitedArgPairsToProps("jyjIU>[)W['[gu", "vZ4k{R*:9!V8soMS,", "B[X;x5Av)|g!LJ3", "B[X;x5Av)|g!LJ3");
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals((-16754012), color0.getRGB());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6955063642778003
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = new Color(0.0F, 0.0F, 0.0F, 0.0F);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setMonth(2265);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JEditorPane jEditorPane0 = new JEditorPane();
      float[] floatArray0 = new float[4];
      floatArray0[1] = 0.0F;
      jDayChooser0.doLayout();
      floatArray0[3] = 0.0F;
      Color.getColor("");
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(164, color0.getRed());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 2267, "day", 2267, 2267);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.selectedDay = null;
      jDayChooser0.isWeekOfYearVisible();
      Color color0 = Color.white;
      String string0 = "";
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      PropertyChangeListener propertyChangeListener0 = metalComboBoxUI0.createPropertyChangeListener();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte) (-104);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      JButton jButton0 = new JButton(imageIcon0);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(propertyChangeListener0, "day", jButton0, propertyChangeListener0);
      // Undeclared exception!
      try { 
        propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.plaf.metal.MetalComboBoxUI$MetalPropertyChangeListener cannot be cast to javax.swing.JComboBox
         //
         verifyException("javax.swing.plaf.basic.BasicComboBoxUI$Handler", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SymbolTable symbolTable0 = new SymbolTable(2312);
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(1);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-2961));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(159);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.5777350570381974
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      SystemColor systemColor0 = SystemColor.controlHighlight;
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.setMaxDayCharacters(210);
      jDayChooser0.setMonth(6);
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.8008057335634406
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1059), (-1059), 1558, (-1059), 'A');
      jDayChooser0.keyTyped(keyEvent0);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.addListeners(14);
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = 1275;
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1275);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(788);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1541, 788, 0, 0, '');
      KeyEvent.getExtendedKeyCodeForChar(8834);
      jDayChooser0.keyTyped(keyEvent0);
      // Undeclared exception!
      try { 
        Timestamp.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(13);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.896223031995695
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.repaint((-1134L));
      jDayChooser0.getInheritsPopupMenu();
      Color color0 = new Color(0);
      Color.getColor((String) null, color0);
      jDayChooser0.setFocus();
      Color.getColor("day", color0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.getHeight();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setYear(2496);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setDecorationBordersVisible(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      BrowseMode browseMode0 = new BrowseMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(788);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.firePropertyChange("7m", false, false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1541, 788, 0, 0, '');
      KeyEvent.getExtendedKeyCodeForChar(8834);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, (-534), (-850L), 8834, (-534), '');
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.getMinSelectableDate();
      Color color0 = null;
      try {
        color0 = new Color(40, 3654, 40);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Green
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.setMonth(228);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBorderSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }
}
