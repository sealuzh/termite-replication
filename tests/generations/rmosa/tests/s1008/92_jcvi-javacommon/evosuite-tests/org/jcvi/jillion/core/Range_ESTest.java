/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 08:18:34 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.866865907372542
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(255L, 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 255L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range range2 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-3L), 1L);
      Range range4 = range3.intersection(range0);
      assertTrue(range4.isEmpty());
      
      range_Builder0.expandEnd(32767L);
      Range range5 = Range.of(range_CoordinateSystem1, 1L, 1938L);
      assertFalse(range5.isEmpty());
      
      List<Range> list0 = range3.split(1L);
      List<Range> list1 = range2.complementFrom(list0);
      assertEquals(4, list0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.contains(range3));
      
      range2.iterator();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range1.toString(range_CoordinateSystem2);
      assertEquals("[ 255 .. 255 ]/SB", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.134384432418997
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.shift(2147483647L);
      Range range0 = range_Builder1.build();
      Long long0 = new Long(1047L);
      range0.equals((Object) null);
      range0.getLength();
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 2147483647 .. 2147483646 ]/0B", string0);
      
      Range range1 = range_Builder1.build();
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2714549353917084
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775288L, 9223372036854775288L);
      Range range1 = Range.of(9223372036854775288L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range0));
      assertEquals(1, list0.size());
      
      Long long0 = new Long((-32768L));
      range1.equals(range0);
      assertFalse(range1.equals((Object)range0));
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372036854775288 .. 9223372036854775288 ]/RB", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.33101070088441
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(9223372036854775794L, 9223372036854775794L);
      Long long0 = new Long(110L);
      range0.complement(range0);
      Range range1 = Range.of((-1971L));
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1971 would make range [9223372036854775794 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854775806L);
      Range range0 = range_Builder1.build();
      Long long0 = new Long(9223372036854775806L);
      Long long1 = new Long(9223372036854775806L);
      boolean boolean0 = range0.equals(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Long long0 = new Long((-441L));
      Long long1 = new Long(1633L);
      Range range0 = Range.of(1397L);
      Range range1 = Range.of(1397L, 1633L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.717693791771272
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offer(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = Range.of(255L);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.633886498887349
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Long long0 = new Long(24L);
      Range range0 = Range.ofLength(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 24L, 4294967295L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range0));
      assertEquals(1, list0.size());
      
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6923702084041805
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(91L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      range_Builder0.shift(91L);
      Range range2 = range_Builder0.build();
      Long long0 = new Long(1047L);
      boolean boolean0 = range0.equals(range2);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6903752622677266
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(91L);
      Range.Builder range_Builder1 = new Range.Builder(91L);
      Range range0 = range_Builder1.build();
      range_Builder1.shift(91L);
      Range range1 = range_Builder1.build();
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder2 = range_Builder1.shift(2147483647L);
      range_Builder2.contractEnd(2147483647L);
      Range range0 = range_Builder2.build();
      Range range1 = range_Builder0.build();
      range1.equals(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder2 = range_Builder0.shift(2943L);
      Range range0 = range_Builder2.build();
      Long long0 = new Long((-2516L));
      Long long1 = new Long((-2516L));
      Long long2 = new Long(2147483647L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5723992881587088
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      Range range1 = range_Builder1.build();
      Long long0 = new Long(1L);
      boolean boolean0 = range1.equals((Object) null);
      assertSame(range1, range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(526L);
      Range range0 = range_Builder1.build();
      Long long0 = new Long(73003L);
      Long long1 = new Long(1130L);
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0555153951973866
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder3 = range_Builder1.shift(2943L);
      Range range0 = range_Builder3.build();
      Long long0 = new Long((-2516L));
      Long long1 = new Long((-2516L));
      Long long2 = new Long(2147483647L);
      Long long3 = new Long(65535L);
      Long long4 = new Long(2147483647L);
      boolean boolean0 = range0.equals(long4);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      range_Builder0.shift(127L);
      range_Builder0.shift((-9223372036854775808L));
      range_Builder1.shift(91L);
      range_Builder0.shift((-1990L));
      Range range0 = range_Builder0.build();
      Long long0 = new Long(1098L);
      Long long1 = new Long((-1825L));
      Long.getLong("", long1);
      boolean boolean0 = range0.equals((Object) null);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483651L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483651L);
      Range.Builder range_Builder2 = new Range.Builder(2147483651L);
      Range.Builder range_Builder3 = range_Builder1.shift(2792L);
      Range range0 = range_Builder3.build();
      Long long0 = new Long(2147483647L);
      Long long1 = new Long(2147483647L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(4294967294L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(4294967294L);
      Long long1 = new Long(4294967294L);
      Long long2 = new Long(4294967294L);
      Long long3 = new Long(255L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.203776696828706
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder0.expandEnd(4294967295L);
      Range.Builder range_Builder3 = range_Builder2.expandEnd(91L);
      range_Builder0.shift(4294967295L);
      range_Builder3.shift((-22L));
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder2);
      assertFalse(boolean0);
      
      Range range1 = Range.of((-9223372036854775309L));
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775309 would make range [4294967273 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      Range.Builder range_Builder3 = range_Builder1.shift(2943L);
      Range range0 = range_Builder3.build();
      Long long0 = new Long((-2516L));
      Long long1 = new Long((-2516L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3279501861614795
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 131L, 131L);
      Range.Builder range_Builder0 = new Range.Builder(131L);
      long long0 = range0.getEnd();
      assertEquals(130L, long0);
      
      Range range1 = Range.ofLength(9223372032559808513L);
      range0.complement(range1);
      Long long1 = new Long(9223372032559808513L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6912004809506773
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.of((-9223372036854775808L));
      Object object0 = new Object();
      range1.equals(range0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(24L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(24L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("GV<J}F<4t{D]q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse GV<J}F<4t{D]q into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(6442453883L);
      range_Builder0.shift(6442453883L);
      Range range0 = range_Builder1.build();
      Long long0 = new Long(4294967294L);
      Long long1 = new Long(4294967294L);
      Long long2 = new Long(604L);
      Long long3 = new Long(4294967294L);
      boolean boolean0 = range0.equals(long2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(255L);
      Range range0 = range_Builder1.build();
      Long long0 = new Long(255L);
      Long long1 = new Long(255L);
      boolean boolean0 = range0.equals(long1);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2017L), 32767L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483647L);
      range_Builder1.shift(2792L);
      range_Builder0.shift((-9223372036854775808L));
      Range range0 = range_Builder1.build();
      Long long0 = new Long((-32768L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = new Range.Builder(9223372036854775168L);
      Range.Builder range_Builder3 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder1.build();
      Long long0 = new Long(9223372036854775807L);
      boolean boolean0 = range0.equals(range_Builder3);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(1551L);
      range_Builder0.shift(4294967268L);
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483651L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483651L);
      Range.Builder range_Builder2 = new Range.Builder(108L);
      range_Builder0.shift(2147483651L);
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long long0 = new Long((-157L));
      Long.getLong((String) null, long0);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Long long0 = new Long((-32768L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3303231706458116
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1989L), (-1989L));
      Range range1 = Range.of((-1989L));
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      Range range2 = Range.of(range_CoordinateSystem0, (-1989L), (-1989L));
      Long long0 = new Long(660L);
      boolean boolean0 = range2.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), 127L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.5873387496546107
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(55L);
      assertFalse(range1.isEmpty());
      
      Range range2 = range0.asRange();
      Range range3 = Range.ofLength(55L);
      Range range4 = range3.intersection(range2);
      assertTrue(range4.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range3.getEnd(range_CoordinateSystem0);
      assertEquals(55L, long0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1989L), (-1989L));
      Range range1 = Range.of((-1989L));
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.891722433292198
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775289L);
      Range.Builder range_Builder1 = new Range.Builder(91L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(4294967294L);
      range_Builder0.shift(4294967294L);
      Range range0 = range_Builder1.build();
      Long long0 = new Long(4294967294L);
      Long long1 = new Long(4294967294L);
      Long long2 = new Long(4294967294L);
      Long long3 = new Long(255L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.981030680795753
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(55L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(55L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.ofLength(1208L);
      assertNotSame(range2, range0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483651L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483651L);
      Range.Builder range_Builder2 = range_Builder1.shift(2792L);
      Range range0 = range_Builder2.build();
      Long long0 = new Long(1047L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 3734L, 3734L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(3734L);
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(526L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5672464197286162
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(526L);
      range_Builder0.shift((-65271L));
      Range range0 = range_Builder0.build();
      Long long0 = new Long((-65271L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1356090537531895
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range1 = range0.asRange();
      Range range2 = Range.ofLength(127L);
      range2.isSubRangeOf(range0);
      range1.isSubRangeOf(range2);
      long long0 = 2759L;
      long long1 = 3802L;
      Range.ofLength(3802L);
      // Undeclared exception!
      try { 
        range1.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9809696419139855
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(55L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-4094L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      range0.isSubRangeOf(range1);
      range_Builder0.build();
      Long long0 = new Long(55L);
      Long long1 = new Long((-1154L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("max cluster distance can not be negative", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse max cluster distance can not be negative into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1378166348261765
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(69L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(1L);
      Range range1 = Range.of(1L, 1L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.692462672574315
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(91L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Long long0 = new Long(1L);
      Long long1 = new Long(91L);
      Long long2 = new Long((-2556L));
      Range range2 = Range.ofLength(1900L);
      boolean boolean0 = range0.equals(range2);
      assertFalse(boolean0);
      assertFalse(range2.equals((Object)range1));
      assertSame(range0, range1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.573268702173663
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(91L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(91L);
      Range.Builder range_Builder2 = new Range.Builder(2675L);
      Range.Builder range_Builder3 = new Range.Builder(9223372036854775168L);
      Range range1 = range_Builder2.build();
      long long0 = range1.getEnd();
      assertEquals(2674L, long0);
      
      Long long1 = new Long((-2734L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      Range.Builder range_Builder2 = range_Builder0.shift(4207L);
      Range range0 = range_Builder2.build();
      Long long0 = new Long(1047L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854774889L, (-1989L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1990 would make range [9223372036854774889 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.978882553402459
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 32767L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-2919L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Long long0 = new Long((-785L));
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-22L));
      Range range0 = range_Builder1.build();
      Long long0 = new Long(2147483689L);
      Long long1 = new Long(2943L);
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-1L));
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = (-32768L);
      Range.of((-32768L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Ds", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Ds into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775794L, (-947L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -947 would make range [9223372036854775794 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(526L);
      range_Builder0.shift(526L);
      range_Builder0.expandEnd(526L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(1678L);
      Long long1 = new Long(526L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(526L);
      range_Builder0.shift(526L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(1656L);
      Long long1 = new Long(1656L);
      range0.equals(long1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long long0 = new Long(2147483647L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(2147483646L);
      Range range0 = range_Builder1.build();
      Long long0 = new Long(2147483646L);
      Long long1 = new Long(2147483646L);
      boolean boolean0 = range0.equals(long1);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.541528425747374
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(32767L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.ofLength(32767L);
      range1.intersection(range0);
      range1.toString();
      // Undeclared exception!
      try { 
        Range.of(2147483646L, 17L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.3378205947935027
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(2147483647L);
      Range range0 = range_Builder1.build();
      Long long0 = new Long(2147483647L);
      Long long1 = new Long(2147483647L);
      range0.equals(long1);
      Range range1 = Range.ofLength(2147483647L);
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(4294967295L);
      range_Builder1.shift(562L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(2147483647L);
      Long long1 = new Long(2147483647L);
      range0.equals(range_Builder0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(91L);
      range_Builder0.shift(9223372036854774168L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.shift(4294966182L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(1047L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.5672464197286162
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483645L);
      range_Builder0.shift((-656L));
      range_Builder0.shift((-1903L));
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.5672464197286162
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775794L);
      range_Builder0.shift((-1523L));
      Range range0 = range_Builder0.build();
      Long long0 = new Long(1678L);
      Long long1 = new Long(9223372036854775794L);
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.266970744711691
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(91L);
      range_Builder0.expandEnd(2518L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(4294967295L, 4294967295L);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("length can not be negative", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse length can not be negative into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range.Builder range_Builder1 = range_Builder0.shift(255L);
      Range range0 = range_Builder1.build();
      Long long0 = new Long(255L);
      Long long1 = new Long(255L);
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.3878076553320624
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range range1 = range0.asRange();
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertEquals(2, list1.size());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(255L);
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder1.build();
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(4, list1.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.5672464197286162
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      long long0 = 24L;
      Range.Builder range_Builder1 = new Range.Builder(24L);
      Range range0 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long[] longArray0 = new Long[8];
      Long long1 = new Long(24L);
      longArray0[0] = long1;
      Long long2 = new Long(long0);
      longArray0[1] = long2;
      Long long3 = new Long(9223372036854775807L);
      longArray0[2] = long3;
      Long long4 = new Long(long0);
      longArray0[3] = long4;
      Long.compareUnsigned((-1467L), 1L);
      Long long5 = new Long(2792L);
      longArray0[4] = long5;
      Long long6 = new Long(3729L);
      longArray0[5] = long6;
      Long long7 = new Long((-1855L));
      longArray0[6] = long7;
      Long long8 = new Long(1286L);
      Long.sum(205L, (-1073L));
      longArray0[7] = long8;
      linkedList0.toArray(longArray0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range0.complementFrom(linkedList1);
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.1357893557590493
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775303L));
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.89156615887432
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-22L));
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ -21 .. -22 ]/RB", string0);
      
      List<Range> list0 = range1.complement(range0);
      assertEquals(1, list0.size());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483651L);
      Range.Builder range_Builder1 = range_Builder0.shift(2792L);
      range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("\"4U$BF.Jr<xUk", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse \"4U$BF.Jr<xUk into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.79709058749954
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(55L);
      Range.Builder range_Builder1 = new Range.Builder(55L);
      Range range0 = range_Builder1.build();
      Range range1 = Range.of(55L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(54L, long0);
      
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Long long0 = new Long((-2147483648L));
      Range range0 = Range.ofLength(255L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.5721951648682415
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(91L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Long long0 = new Long(2147483687L);
      Long long1 = new Long(2147483687L);
      range1.equals(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.892740633623113
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = (-359L);
      Range range0 = Range.of((-359L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range1.equals(range0);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-359L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.566621028859323
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(5513L);
      Range.Builder range_Builder1 = range_Builder0.shift((-2626L));
      Range range0 = range_Builder1.build();
      Long long0 = new Long(3356L);
      Long long1 = new Long(1678L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(0L);
      Long long1 = new Long((-46L));
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      long long2 = range0.getLength();
      assertEquals(0L, long2);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.5688032438074955
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(91L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(1L);
      Long long1 = new Long(3282L);
      boolean boolean0 = range0.equals(long1);
      Long long2 = new Long(1L);
      boolean boolean1 = range0.endsBefore(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.9818763467576983
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      range_Builder0.build();
      range_Builder0.contractBegin(1L);
      Range range2 = Range.ofLength(32767L);
      boolean boolean1 = range0.startsBefore(range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.5678136347030915
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1634L);
      range_Builder0.expandBegin(1634L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.8836095585126564
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(1L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.8836095585126564
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(526L);
      Range range0 = range_Builder1.build();
      Long long0 = new Long(1678L);
      Long long1 = new Long(9223372036854775570L);
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(91L);
      Range.Builder range_Builder1 = range_Builder0.shift(2147483647L);
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = range0.getEnd();
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.0599988624120327
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.shift(4294967295L);
      range_Builder0.shift(9223372036854766363L);
      Range range0 = range_Builder1.build();
      Long long0 = new Long(4294967295L);
      Long long1 = new Long(1L);
      Range range1 = Range.of(821L);
      long long2 = range1.getBegin();
      assertEquals(821L, long2);
      
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      long long3 = range1.getLength();
      assertFalse(range1.isEmpty());
      assertEquals(1L, long3);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.7959184263273786
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 285L, 65557L);
      range_Builder0.build();
      Range range0 = range_Builder0.build();
      range0.getBegin();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        linkedList0.toArray((Long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.5706696118552745
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(9223372036854775807L);
      Long long1 = new Long(9223372036854775807L);
      Long long2 = new Long(9223372036854775807L);
      Long long3 = new Long(9223372036854775807L);
      boolean boolean0 = range0.equals(range_Builder1);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 0 .. 9223372036854775806 ]/0B", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.20423340720908
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(1401L);
      Range range1 = Range.of(2169L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(91L);
      range_Builder0.expandBegin(91L);
      Range range0 = range_Builder0.build();
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Zero Based", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("c(w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse c(w into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.5672464197286162
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1724L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1393L);
      range_Builder0.expandEnd(907L);
      Range.Builder range_Builder1 = new Range.Builder(1393L);
      range_Builder1.contractEnd(907L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 1393L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.060362201498235
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(91L);
      Long long0 = new Long(91L);
      long long1 = 9223372036854775806L;
      Range range0 = Range.ofLength(9223372036854775806L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775806L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -5 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.064828321392789
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(91L);
      range_Builder0.build();
      Range range0 = range_Builder0.build();
      Long long0 = new Long(1L);
      Range.of(1L, 1L);
      range0.split(1L);
      Long long1 = new Long(91L);
      Long long2 = new Long(91L);
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.parseRange(":<^s5e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse :<^s5e into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.981257014751505
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(91L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(91L, 91L);
      assertFalse(range1.isEmpty());
      
      List<Range> list0 = range0.split(91L);
      Long long0 = new Long(91L);
      boolean boolean0 = range0.equals(list0);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      assertFalse(boolean0);
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.5672464197286162
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2706L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1157L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1L));
      range_Builder1.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 3592L, (-434L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = 1157L;
      Range.Builder range_Builder0 = new Range.Builder(1157L);
      long long1 = (-1L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.566621028859323
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long long0 = 2147483647L;
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.split((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.5700075794156847
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483651L);
      Range.Builder range_Builder1 = range_Builder0.shift(4294967265L);
      range_Builder1.shift((-9223372036854774973L));
      Range range0 = range_Builder0.build();
      Long long0 = new Long(0L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Long long1 = Long.valueOf(9223372036854766363L);
      long long2 = 2153025767L;
      Long.getLong("2Eb`[tCz73", 2153025767L);
      range0.equals(long1);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.8960502543481863
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = 55L;
      Range.Builder range_Builder0 = new Range.Builder(55L);
      Range range0 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Z-8`E|tG5g/i(", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Z-8`E|tG5g/i( into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(526L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range range0 = range_Builder1.build();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.getLength();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.5706696118552745
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(526L);
      Range.Builder range_Builder1 = new Range.Builder(526L);
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 526 ]/RB", string0);
      
      List<Range> list0 = range0.split(1057L);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3729L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Long long0 = new Long(526L);
      Long long1 = new Long(526L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.copy();
      long long0 = 382L;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-2740L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.5696376201112083
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(91L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(91L);
      Long long1 = new Long(91L);
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(91L, long2);
      
      range0.getLength();
      long long3 = range0.getLength();
      assertEquals(91L, long3);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.5683304305687247
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(526L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(526L, long0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(526L);
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775553L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854775553L);
      // Undeclared exception!
      try { 
        range_Builder1.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.5672464197286162
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3816L);
      Range range0 = range_Builder0.build();
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals(3815L, long0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange("number of entries must be >=0", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse number of entries must be >=0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.split((-2042L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.366599120085422
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(526L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long((-1405L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 525 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 0 .. 525 ]/0B");
      assertSame(range1, range0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(91L);
      range_Builder0.shift((-1990L));
      range_Builder0.shift((-9223372036854775808L));
      Range range0 = range_Builder0.build();
      String string0 = "";
      Long long0 = new Long((-9223372036854775808L));
      Long.toUnsignedString(484L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3816L);
      range_Builder0.contractBegin(3816L);
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775523L);
      Range.Builder range_Builder1 = range_Builder0.shift(2147483647L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372034707292447 would make range [2147483647 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.799852852556887
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of((-359L));
      Range range1 = Range.of((-359L));
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem1);
      assertEquals((-359L), long0);
      
      Range range2 = range_Builder0.build();
      Range range3 = range2.intersection(range0);
      assertSame(range3, range2);
      assertFalse(range3.isEmpty());
      assertSame(range3, range0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.7977307240620064
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L));
      boolean boolean0 = range0.intersects(range1);
      Object object0 = new Object();
      String string0 = range0.toString();
      assertEquals("[ -128 .. -128 ]/0B", string0);
      
      boolean boolean1 = range0.equals("+{,$!\"^");
      assertSame(range0, range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.7990389937032654
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(526L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Long long0 = new Long((-1378L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 525 ]/0B", string0);
      
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.566621028859323
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(110L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(110L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.6903752622677266
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483645L);
      Range.Builder range_Builder1 = range_Builder0.shift((-1L));
      range_Builder1.shift((-1L));
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Long long0 = new Long(8589934635L);
      range_Builder0.expandEnd(4294967295L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ -2 .. 2147483642 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1L), long1);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = 526L;
      Range.Builder range_Builder0 = new Range.Builder(526L);
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.1350573296152584
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(255L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("[ 255 .. 255 ]/0B", range_CoordinateSystem0);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 255 .. 256 ]/SB", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      long long0 = 24L;
      Range.Builder range_Builder1 = new Range.Builder(24L);
      range_Builder0.expandBegin(907L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = 2147483647L;
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2721L), (-2721L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(range_Builder2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.shift(4294967295L);
      range_Builder0.shift(9223372036854766363L);
      Range range0 = range_Builder1.build();
      Long long0 = new Long(3346L);
      Long long1 = new Long((-9223372036854775308L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1L), 1L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.566621028859323
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2837L);
      range_Builder0.contractBegin((-1L));
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = (-1997L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(5L, (-1997L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.7946485850575375
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range range2 = range1.intersection(range0);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      //  // Unstable assertion: assertNotSame(range1, range2);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range2));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(24L);
      Range range0 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 3734L, 3734L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(3734L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.6884526475116584
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(91L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.5703506325889265
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(2147483647L);
      range0.getBegin();
      Long long1 = new Long(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2147483648L), (-1565L));
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of((-111L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      long long0 = 1L;
      // Undeclared exception!
      try { 
        Range.ofLength((-402L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3858L);
      range_Builder0.build();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1L, (-633L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(526L);
      Range.Builder range_Builder1 = range_Builder0.shift((-2162L));
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1726L), (-1726L));
      String string0 = "Oj-Jxzi^BopcQi8V";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Oj-Jxzi^BopcQi8V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Oj-Jxzi^BopcQi8V
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(2837L);
      range_Builder0.contractBegin(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2837L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1685L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
