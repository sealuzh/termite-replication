/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 07:15:42 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.view.mindmapview.MultipleImage;
import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.ColorModel;
import java.awt.image.IndexColorModel;
import java.beans.PropertyChangeListener;
import java.math.BigInteger;
import java.text.AttributedCharacterIterator;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.format.DateTimeParseException;
import java.time.temporal.TemporalAdjuster;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import javax.help.HelpSet;
import javax.help.JHelpContentViewer;
import javax.help.plaf.basic.BasicContentViewerUI;
import javax.help.plaf.basic.BasicHelpUI;
import javax.swing.AbstractButton;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTabbedPane;
import javax.swing.JToggleButton;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SpinnerListModel;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.tree.DefaultTreeSelectionModel;
import javax.swing.tree.VariableHeightLayoutCache;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.SVGTextElementBridge;
import org.apache.batik.bridge.SVGUseElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.dom.svg.SVGDOMImplementation;
import org.apache.batik.gvt.CompositeGraphicsNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.ImageHandler;
import org.apache.fop.pdf.PDFInfo;
import org.apache.xalan.templates.ElemCopy;
import org.apache.xalan.transformer.XalanTransformState;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.calendar = null;
      Color color0 = Color.blue;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getDecorationBackgroundColor();
      SystemColor systemColor0 = SystemColor.windowText;
      Color.getColor((String) null, (Color) systemColor0);
      // Undeclared exception!
      try { 
        jDayChooser0.setForeground(color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.695482417057474
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("VEoOO", false);
      MenuElement[] menuElementArray0 = new MenuElement[9];
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[2] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[3] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[4] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[5] = (MenuElement) jRadioButtonMenuItem0;
      JMenu jMenu0 = new JMenu();
      jMenu0.getDisabledSelectedIcon();
      menuElementArray0[6] = (MenuElement) jMenu0;
      menuElementArray0[7] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[8] = (MenuElement) jRadioButtonMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jRadioButtonMenuItem0, 3368, 1L, 1618, 1618, '-', menuElementArray0, (MenuSelectionManager) null);
      String string0 = AbstractButton.VERTICAL_TEXT_POSITION_CHANGED_PROPERTY;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.keyPressed(menuKeyEvent0);
      System.setCurrentTimeMillis(2409L);
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(3368);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<AttributedCharacterIterator.Attribute, MockGregorianCalendar> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, MockGregorianCalendar>();
      Font font0 = new Font(hashMap0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.setDayBordersVisible(true);
      // Undeclared exception!
      try { 
        MockInstant.parse("day");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'day' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("hd]]<{B%s5sO|");
      int int0 = 33;
      MenuElement[] menuElementArray0 = new MenuElement[9];
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[2] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[6] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[7] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[8] = (MenuElement) jCheckBoxMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jCheckBoxMenuItem0, 146, 146, 146, 33, 'e', menuElementArray0, (MenuSelectionManager) null);
      menuKeyEvent0.paramString();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(menuKeyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      HelpSet helpSet0 = new HelpSet(classLoader0);
      JHelpContentViewer jHelpContentViewer0 = new JHelpContentViewer(helpSet0);
      BasicContentViewerUI basicContentViewerUI0 = new BasicContentViewerUI(jHelpContentViewer0);
      jDayChooser0.addPropertyChangeListener((PropertyChangeListener) basicContentViewerUI0);
      jDayChooser0.setMonth((-4932));
      MockDate mockDate0 = new MockDate((-4932), (-4932), (-1097), 2048, (-1203));
      MockDate mockDate1 = new MockDate(8261, 1666, (-2442), (-1203), (-1097), 2665);
      mockDate1.clone();
      jDayChooser0.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.calendar = null;
      // Undeclared exception!
      try { 
        jDayChooser0.updateUI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|CZ?*z*U2Mj");
      jDayChooser0.day = (-868);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getDaysInMonth();
      int int0 = jDayChooser0.getDay();
      assertEquals((-868), int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("hd]]<{B%s5sO|");
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem();
      jCheckBoxMenuItem1.list();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jCheckBoxMenuItem1, 45, 0L, 146, 45, '4', menuElementArray0, (MenuSelectionManager) null);
      menuKeyEvent0.paramString();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.keyPressed(menuKeyEvent0);
      SpinnerListModel spinnerListModel0 = null;
      try {
        spinnerListModel0 = new SpinnerListModel(menuElementArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpinnerListModel(Object[]) expects non-null non-empty Object[]
         //
         verifyException("javax.swing.SpinnerListModel", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.577674757227539
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(1939);
      // Undeclared exception!
      try { 
        MockInstant.parse("day");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'day' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8008429327153
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDayPanel();
      java.sql.Date date0 = new java.sql.Date(1501L);
      date0.getTime();
      jDayChooser0.setSelectableDateRange(date0, date0);
      PDFInfo pDFInfo0 = new PDFInfo();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = ":?AYKm%K<'*";
      pDFInfo0.setSubject(":?AYKm%K<'*");
      pDFInfo0.getCreationDate();
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.getSundayForeground();
      jDayChooser0.setEnabled(false);
      // Undeclared exception!
      try { 
        Font.getFont((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-3259));
      jDayChooser0.getDaysInMonth();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.firePropertyChange("8o{'1", 0, 674);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-988), "day");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = jDayChooser_DecoratorButton0.getLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jDayChooser0.setName("");
      actionEvent0.setSource("8o{'1");
      actionEvent0.setSource(jDayChooser0);
      actionEvent0.setSource("8o{'1");
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setWeekdayForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.063277116658862
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      jDayChooser0.getToolkit();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.isDoubleBuffered();
      jDayChooser0.focusLost((FocusEvent) null);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.focusLost((FocusEvent) null);
      jDayChooser0.getDaysInMonth();
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.firePropertyChange("day", (double) (byte)42, (-117.6889412304704));
      Color color0 = jYearChooser0.darkGreen;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.getSundayForeground();
      jDayChooser0.setFocus();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 1, 1257L, 28, 18, '*', (byte)20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5776871557149237
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawDays();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(160);
      mockSimpleDateFormat0.parse("30", parsePosition0);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      Instant instant0 = MockInstant.ofEpochSecond(602L);
      Instant instant1 = MockInstant.with(instant0, (TemporalAdjuster) instant0);
      Date date0 = Date.from(instant1);
      jDayChooser0.setMinSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.revalidate();
      jDayChooser0.list();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z2p_9(Bh](lj;{");
      jDayChooser0.getY();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.removeAll();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setWeekOfYearVisible(true);
      Locale locale0 = Locale.ROOT;
      Locale locale1 = Locale.JAPANESE;
      CompositeGraphicsNode compositeGraphicsNode0 = new CompositeGraphicsNode();
      SVGUseElementBridge sVGUseElementBridge0 = new SVGUseElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0);
      XalanTransformState xalanTransformState0 = new XalanTransformState();
      // Undeclared exception!
      try { 
        xalanTransformState0.getMatchedTemplate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xalan.transformer.XalanTransformState", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.20761730066931
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      Color color0 = Color.BLACK;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Windows");
      jDayChooser1.getMaxSelectableDate();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Windows");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "day");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "1");
      jDayChooser1.setDayBordersVisible(false);
      Boolean boolean0 = new Boolean(false);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.getDay();
      jDayChooser1.isDayBordersVisible();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser2.calendar;
      jDayChooser2.setCalendar(mockGregorianCalendar0);
      jDayChooser0.isDecorationBordersVisible();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 14, 12);
      jDayChooser2.getMaxSelectableDate();
      jDayChooser1.setCalendar(mockGregorianCalendar0);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      Color.getColor("28");
      jDayChooser1.isDecorationBordersVisible();
      jDayChooser2.setDay(5502);
      jDayChooser1.updateUI();
      jDayChooser0.setMaxSelectableDate(date0);
      JDayChooser jDayChooser3 = new JDayChooser(false);
      jDayChooser3.setMonth(14);
      jDayChooser3.getSelectedDay();
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 1377;
      int int1 = 2790;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setWeekOfYearVisible(false);
      MouseEvent mouseEvent0 = null;
      try {
        mouseEvent0 = new MouseEvent(jDayChooser0, 1377, 0L, 2790, 228, (-733), (-1110), false, (-1110));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid button value :-1110
         //
         verifyException("java.awt.event.MouseEvent", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      Date date0 = null;
      jDayChooser0.maxSelectableDate = null;
      jDayChooser0.getInputVerifier();
      // Undeclared exception!
      try { 
        jDayChooser0.updateUI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(1589);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate(112, 31, (-2488), 31, 31, 14);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setYear(210);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8963472851822716
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate(112, 112, (-1437625606), (-4932), 2674, 1666);
      mockDate0.getTime();
      mockDate0.clone();
      jDayChooser0.setMinSelectableDate(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4494, 21, (-1545), 11, 661, (-1437625606));
      mockGregorianCalendar0.set((-4932), (-1545), 2674, 21, 4, 10);
      jDayChooser0.isDecorationBordersVisible();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-4932), (-944), 2076);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setCalendar(mockGregorianCalendar1);
      jDayChooser0.getMaxSelectableDate();
      Color.getColor("day");
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDay(39);
      jDayChooser0.updateUI();
      jDayChooser0.init();
      System.setCurrentTimeMillis(661);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = new Locale("day");
      jDayChooser0.initDecorations();
      jDayChooser0.setWeekOfYearVisible(false);
      System.setCurrentTimeMillis((-988));
      DebugGraphics debugGraphics0 = new DebugGraphics();
      // Undeclared exception!
      try { 
        debugGraphics0.getFont();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      NumberFormat.getIntegerInstance(locale0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = 1474;
      jDayChooser0.firePropertyChange("8o{'1", 1474, 1474);
      ActionEvent actionEvent0 = new ActionEvent("8o{'1", 1474, "day");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getLocale();
      Locale locale0 = Locale.ROOT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)SVGTextElementBridge.PAINT_INFO;
      actionEvent0.setSource(gVTAttributedCharacterIterator_TextAttribute0);
      jDayChooser0.setName("3GO*?d");
      actionEvent0.setSource("");
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      String string0 = "Windows";
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement((jdbcConnection) null, (String) null, (-988));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 674;
      jDayChooser0.firePropertyChange("8o{'1", (-988), 674);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-988), "day");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = jDayChooser_DecoratorButton0.getLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      actionEvent0.setSource(mockGregorianCalendar0);
      String string0 = "";
      jDayChooser0.setName("");
      actionEvent0.setSource("8o{'1");
      jDayChooser0.isWeekOfYearVisible();
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement((jdbcConnection) null, "day", (-988));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuElement[] menuElementArray0 = new MenuElement[2];
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("hd]]<{B%s5sO|");
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem0;
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem();
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem1;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jCheckBoxMenuItem1, (-1916), 146, (-1664), 798, '#', menuElementArray0, (MenuSelectionManager) null);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuElement[] menuElementArray0 = new MenuElement[2];
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 146, 0L, 15, 40, 'L', menuElementArray0, (MenuSelectionManager) null);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(21, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MenuElement[] menuElementArray0 = new MenuElement[1];
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      Class<AttributedCharacterIterator.Attribute> class0 = AttributedCharacterIterator.Attribute.class;
      BasicHelpUI.getIcon(class0, "day");
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Icon) null, true);
      JMenuItem jMenuItem0 = structuredMenuHolder0.addMenuItem(jRadioButtonMenuItem0, "{n[ld`/`':5RLu");
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1939, (-1L), (-3746), 39, ':', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMouseListeners();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      System.setCurrentTimeMillis((-1429L));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.calendar = null;
      MockDate mockDate0 = new MockDate(42, (-1908), (-1908), 469, 42);
      mockDate0.clone();
      // Undeclared exception!
      try { 
        jDayChooser0.setMinSelectableDate(mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-3740));
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6963333117390715
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWidth();
      MockDate mockDate0 = new MockDate(0, 210, 8913, 8913, (-3372), 0);
      mockDate0.clone();
      jDayChooser0.setMinSelectableDate(mockDate0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      boolean boolean0 = new Boolean(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.getSelectedObjects();
      jDayChooser_DecoratorButton0.setFocusCycleRoot(false);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.initDecorations();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.clone();
      jDayChooser1.setLocale(locale0);
      Color color0 = null;
      try {
        color0 = new Color(18, 8913, (-988));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Green Blue
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DebugGraphics debugGraphics0 = new DebugGraphics();
      DebugGraphics debugGraphics1 = new DebugGraphics();
      System.setCurrentTimeMillis(1298L);
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      DebugGraphics debugGraphics2 = new DebugGraphics();
      // Undeclared exception!
      try { 
        debugGraphics0.getFont();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.983245520219895
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = JComponent.getDefaultLocale();
      locale0.getDisplayName(locale1);
      jDayChooser0.setLocale(locale0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 349, 0, 7, 0);
      focusEvent0.setSource(mockGregorianCalendar0);
      jDayChooser0.focusGained(focusEvent0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setLocale(locale0);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Font font0 = Font.decode("day");
      jDayChooser0.setFont(font0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getSundayForeground();
      ColorModel.getRGBdefault();
      VariableHeightLayoutCache variableHeightLayoutCache0 = new VariableHeightLayoutCache();
      DefaultTreeSelectionModel defaultTreeSelectionModel0 = new DefaultTreeSelectionModel();
      defaultTreeSelectionModel0.getSelectionPath();
      int int0 = 44;
      JTabbedPane jTabbedPane0 = null;
      try {
        jTabbedPane0 = new JTabbedPane(44, 2004);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal tab placement: must be TOP, BOTTOM, LEFT, or RIGHT
         //
         verifyException("javax.swing.JTabbedPane", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setEnabled(true);
      jDayChooser0.init();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.BLACK;
      jDayChooser0.setSundayForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.UK;
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      sVGDOMImplementation0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDayBordersVisible();
      Color color0 = Color.CYAN;
      int[] intArray0 = new int[6];
      intArray0[0] = 960;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 960;
      intArray0[3] = 960;
      intArray0[0] = 960;
      intArray0[5] = 960;
      BigInteger bigInteger0 = BigInteger.ZERO;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(960, 960, intArray0, 960, 0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(281);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.calendar = null;
      MultipleImage multipleImage0 = new MultipleImage(0.0);
      JToggleButton jToggleButton0 = new JToggleButton("day", multipleImage0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jDayChooser0.setMaxDayCharacters(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAutoscrolls(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1920, 1920, 10, (-826), 'N');
      KeyEvent.getExtendedKeyCodeForChar(1);
      int int0 = 430;
      keyEvent0.setKeyCode(430);
      jDayChooser0.keyTyped(keyEvent0);
      ElemCopy elemCopy0 = new ElemCopy();
      ImageHandler imageHandler0 = null;
      // Undeclared exception!
      try { 
        elemCopy0.getDocumentElement();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(100);
      MockDate mockDate0 = new MockDate((-1908), 8261, (-1908), 100, 1666);
      mockDate0.clone();
      jDayChooser0.setMinSelectableDate(mockDate0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWidth();
      jDayChooser0.firePropertyChange("8o{'1", 39, 674);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-988), "day");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getRolloverIcon();
      Locale locale0 = Locale.ROOT;
      locale0.clone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-988), 674, 39, (-988), 0, 0);
      actionEvent0.setSource(mockGregorianCalendar0);
      jDayChooser0.setName("");
      JButton jButton0 = new JButton("s\"~]2VTxqmB-\"W ", (Icon) null);
      actionEvent0.setSource(jButton0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"s\"~]2VTxqmB-\"W \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.focusGained((FocusEvent) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent("JDayChooser", (-1303), "JDayChooser", (-1303), (-1303));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawDays();
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      System.setCurrentTimeMillis((-4600L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(210, color0.getRed());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.5777233286214165
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      mockSimpleDateFormat0.setNumberFormat(numberFormat0);
      mockSimpleDateFormat0.get2DigitYearStart();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(10);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(5075);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate(112, 112, (-1437625606), (-4932), 2674, 1666);
      mockDate0.getTime();
      jDayChooser0.setEnabled(false);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getPropertyChangeListeners("11");
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.getBorder();
      jDayChooser0.calendar = null;
      Color color0 = Color.blue;
      // Undeclared exception!
      try { 
        jDayChooser0.setForeground(color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInheritsPopupMenu();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 318L, 10161, 10, '\"');
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(164, color0.getBlue());
  }
}
