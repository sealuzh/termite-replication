/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 08 13:02:47 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      String string0 = JSONObject.valueToString(hashMap0, (-2106), (-47));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9715353770851873
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("$:`TP(YBLNzHX[P~#|", stringArray0);
      jSONObject0.put("$:`TP(YBLNzHX[P~#|", 99);
      String string0 = jSONObject0.toString((-970));
      assertNotNull(string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{W2");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {W2
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject.testValidity(",\n");
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9736489231972635
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("VgNF++P", false);
      Object object0 = jSONObject1.remove("VgNF++P");
      assertEquals(false, object0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("[]", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7326587201992076
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      jSONObject0.putOpt("", float0);
      String string0 = jSONObject0.optString("");
      assertNotNull(string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("wheel.json.JSONObject", (-1L));
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".", 1L);
      long long0 = jSONObject1.optLong(".");
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2055983590263937
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("Substring bounds error", (-2389));
      long long0 = jSONObject1.optLong("Substring bounds error");
      assertEquals((-2389L), long0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("get", 2);
      assertEquals(2, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("A JSONObject text must begin with '{'", (-26752530));
      assertEquals((-26752530), int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.784275033922914
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Float float0 = new Float((float) (short)14);
      jSONObject0.accumulate("\";mK~\\#:=f0\"F0;\"", float0);
      int int0 = jSONObject0.optInt("\";mK~\\#:=f0\"F0;\"");
      assertEquals(2, jSONObject0.length());
      assertEquals(14, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("-)AIKJMGi+Alg_h'wl*", (-29));
      int int0 = jSONObject1.optInt("-)AIKJMGi+Alg_h'wl*");
      assertEquals((-29), int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, (-2477.0314845883627));
      assertEquals((-2477.0314845883627), double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("$:`TP(YBLNzHX[P~#|", stringArray0);
      jSONObject0.put("$:`TP(YBLNzHX[P~#|", 99);
      double double0 = jSONObject0.optDouble("$:`TP(YBLNzHX[P~#|");
      assertEquals(99.0, double0, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-453));
      jSONObject0.accumulate("N8|s0Q", short0);
      double double0 = jSONObject0.optDouble("N8|s0Q");
      assertEquals(1, jSONObject0.length());
      assertEquals((-453.0), double0, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("cW{:ib;K3bU", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ad", 0.0);
      Object object0 = jSONObject0.opt("ad");
      assertEquals(0.0, object0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.2540536082248628
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = JSONObject.quote("E,g X48fHH=/$x{*|D");
      assertEquals("\"E,g X48fHH=/$x{*|D\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) string0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.2337380151460802
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("&lrF5@", true);
      jSONObject1.has("&lrF5@");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = Long.getLong("is", 0L);
      JSONObject jSONObject1 = jSONObject0.put("GKGa*A;vqwC(^jl", (Object) long0);
      String string0 = jSONObject1.getString("GKGa*A;vqwC(^jl");
      assertNotNull(string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ad", 0.0);
      long long0 = jSONObject1.getLong("ad");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((short) (-2636));
      jSONObject0.putOpt("JSON does not allow non-finite numbers.", integer0);
      long long0 = jSONObject0.getLong("JSON does not allow non-finite numbers.");
      assertEquals((-2636L), long0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6354502583387052
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, ";mK~#:=f0\"F0;");
      JSONObject jSONObject1 = jSONObject0.put("(-5#Fr,eV:LR.#g9Y,{", (Map) hashMap0);
      jSONObject1.getJSONObject("(-5#Fr,eV:LR.#g9Y,{");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      jSONObject0.put("GKGa*A;vqwC(^jl", (Object) long0);
      int int0 = jSONObject0.getInt("GKGa*A;vqwC(^jl");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("DVv!QqQZ!A-&@D", (-125L));
      int int0 = jSONObject0.getInt("DVv!QqQZ!A-&@D");
      assertEquals((-125), int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5733163646283495
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("getgetBytes", 0.0);
      double double0 = jSONObject1.getDouble("getgetBytes");
      assertEquals(2, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",", 953.6859);
      double double0 = jSONObject0.getDouble(",");
      assertEquals(953.6859, double0, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 2808, (-2573));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.95039989480675
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("[]", jSONArray0);
      jSONObject0.append("|N}Uk&", jSONObject1);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject1, 3, 1899);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7536082465362155
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(92);
      hashMap0.put((JSONArray) null, integer0);
      JSONObject jSONObject1 = jSONObject0.accumulate("getformat", hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(jSONObject1, 92, 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9430096637858085
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Ja}shKM2ul0|>-~}(7K");
      // Undeclared exception!
      jSONObject0.toString(1527);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.240684291953396
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("Expected a ',' or ']'", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-312L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.15374194270109
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate("~^H2RZ|vf>", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("588.1146825879", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7870020467612302
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(34, 34);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.7682192157531085
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(3721, 3721);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      Long long0 = new Long(0L);
      hashMap0.put(long0, (Boolean) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-62473106), (-62473106));
      assertNotNull(string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("null", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("de", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) "q{K6#po?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.4298983731002692
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("\";mK~\\#:=f0\"F0;\"", (double) (short)14);
      double double0 = jSONObject1.optDouble("\";mK~\\#:=f0\"F0;\"", 186.499365918);
      assertEquals(2, jSONObject0.length());
      assertEquals(14.0, double0, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("0AJ\"aI_mPU", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("getformat");
      assertNull(object0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = new Integer(619);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.991509361356614
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("", object0);
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5353632953768162
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)23);
      jSONObject0.putOpt("null", byte0);
      try { 
        jSONObject0.getBoolean("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(",+k(E", false);
      boolean boolean0 = jSONObject1.getBoolean(",+k(E");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      jSONObject0.put("[]", (Map) hashMap0);
      Object object0 = jSONObject0.get("[]");
      assertFalse(object0.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3842181172398815
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.get("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{c!ui(Z=1");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 9 of {c!ui(Z=1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("D{}");
      jSONTokener0.nextValue();
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("istoString", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.0058673872796113
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("Substring bounds error", (-2389));
      StringWriter stringWriter0 = new StringWriter(64);
      Object object0 = new Object();
      jSONObject0.accumulate("Substring bounds error", object0);
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.581573107414146
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      jSONObject0.put("r3 [~\"fD(nE@m*v')w@", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.7152863051349312
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.8883748344162048
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Float@0000000001");
      jSONObject0.toString((-1023), (-1));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(linkedList0, 123, (-32));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 0, 0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.6867831479680375
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray1 = jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float float0 = new Float(1.0F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = JSONObject.quote("\"PqMg /\"");
      assertEquals("\"\\\"PqMg /\\\"\"", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = JSONObject.quote("\r");
      assertEquals("\"\\r\"", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5532439101698579
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(-5#Fr,eV:LR.#g9Y,{";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, hashMap0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-45));
      jSONObject0.put("Expected a ',' or ']'", (Object) short0);
      String string0 = jSONObject0.optString("Expected a ',' or ']'", "A JSONObject text must begin with '{'");
      assertNotNull(string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      jSONObject0.put("r3 [~\"fD(nE@m*v')w@", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("r3 [~\"fD(nE@m*v')w@");
      assertNotSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("getsum");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("FNYaCQzWo");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (Object) long0);
      double double0 = jSONObject1.optDouble("] is not a Boolean.");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0579054247036734
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Short short0 = new Short((short)2292);
      String string0 = JSONObject.valueToString(short0, 1888, 0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.338872053314866
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Ja}shKM2ul0|>-~}(7K");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.4991849914077275
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = JSONObject.quote("E,g X48fHH=/$x{*|D");
      assertEquals("\"E,g X48fHH=/$x{*|D\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) string0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Float float0 = new Float(1.0F);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      hashMap0.put(float0, (String) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("true", 8);
      long long0 = jSONObject1.getLong("true");
      assertEquals(8L, long0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.5311386121723252
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("null", "null");
      try { 
        jSONObject1.getLong("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.5936174605927702
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      jSONObject0.put("] is not a JSONObject.", (Map) hashMap0);
      jSONObject0.getJSONObject("] is not a JSONObject.");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.4795008699302592
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Long long0 = Long.getLong("[]", (-11L));
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject jSONObject1 = jSONObject0.put("[]", (Object) "[]");
      try { 
        jSONObject1.getJSONObject("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("jXkXb?hcGT<n", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("jXkXb?hcGT<n");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.257133793549772
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isreplaceAll", (Object) hashMap0);
      try { 
        jSONObject1.getJSONArray("isreplaceAll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isreplaceAll\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(" of ", 973.50910881);
      int int0 = jSONObject0.getInt(" of ");
      assertEquals(973, int0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-~=N6;KI;0v~lOnk", (-336.5576900418));
      double double0 = jSONObject1.getDouble("-~=N6;KI;0v~lOnk");
      assertEquals((-336.5576900418), double0, 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.8200759753606217
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("cop", true);
      boolean boolean0 = jSONObject0.getBoolean("cop");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.553848341566947
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("null", "null");
      try { 
        jSONObject0.getBoolean("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.6005011139717424
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(" of ", 973.50910881);
      boolean boolean0 = jSONObject0.optBoolean(" of ", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.0947290475276494
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(",+k(E", false);
      boolean boolean0 = jSONObject0.optBoolean(",+k(E");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.6702992181413672
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.accumulate("_?}.RdRGvQ,Sdh", "_?}.RdRGvQ,Sdh");
      try { 
        jSONObject0.getInt("_?}.RdRGvQ,Sdh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_?}.RdRGvQ,Sdh\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-635.1));
      assertEquals("-635.1", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.4681399390162087
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("r_Omb#0@PQ>9)\"i:", object0);
      JSONObject jSONObject2 = jSONObject1.append("r_Omb#0@PQ>9)\"i:", (Object) null);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.6260206924207543
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      jSONObject0.putOpt("", double0);
      try { 
        jSONObject0.append("", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.8407487285692812
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      jSONObject0.putOpt("", float0);
      jSONObject0.accumulate("", "");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)59);
      jSONObject0.append("get", byte0);
      jSONObject0.accumulate("get", byte0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double double0 = new Double((-635.1));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.String@0000000004\":[java.lang.Byte@0000000048,java.lang.Byte@0000000049,java.lang.Byte@0000000050,java.lang.Byte@0000000051,java.lang.Byte@0000000052,java.lang.Byte@0000000053,java.lang.Byte@0000000054,java.lang.Byte@0000000055,java.lang.Byte@0000000056,java.lang.Byte@0000000057,java.lang.Byte@0000000058,java.lang.Byte@0000000059,java.lang.Byte@0000000060,java.lang.Byte@0000000061,java.lang.Byte@0000000062,java.lang.Byte@0000000063,java.lang.Byte@0000000064,java.lang.Byte@0000000065,java.lang.Byte@0000000066],\"java.lang.String@0000000045\":\"java.lang.Class@0000000046\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.2033320406994705
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{l=x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 4 of {l=x
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{)rL~");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {)rL~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("|jW*CAyX");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |jW*CAyX
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      String string0 = jSONObject0.toString(251, 251);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("zm0SVeBu", object0);
      boolean boolean0 = jSONObject1.isNull("zm0SVeBu");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.4598012994628564
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Long long0 = Long.getLong("[]", (-11L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.put("[]", (Object) "[]");
      boolean boolean0 = jSONObject0.isNull("[]");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(".");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 0, (short)8743);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.6291821433649187
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.optInt("qO'l64`DWe}z-n<B");
      assertEquals(3, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(" at character ", 1504L);
      assertEquals(1504L, long0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      String string0 = jSONObject0.optString("D)$g@N,");
      assertEquals(3, jSONObject0.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (double) 42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.4311119194329758
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put(">x0s@lQhWElS{0gz@", 605L);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "E,g X48fHH=/$x{*|D");
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("JSONArray initial value should be a string or collection or array.");
      assertFalse(boolean0);
  }
}
