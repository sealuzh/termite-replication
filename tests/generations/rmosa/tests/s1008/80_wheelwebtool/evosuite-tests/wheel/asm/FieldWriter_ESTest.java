/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 07:28:44 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Item;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5));
      String string0 = "EnclosingMethod";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-5), "EnclosingMethod", "EnclosingMethod", "EnclosingMethod", "EnclosingMethod");
      classWriter0.newClassItem("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(GPs/X]Q-xvZN _3";
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = classWriter0.pool;
      classWriter0.newInteger((-5));
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 40, "rYi[K 8@B1r%WXJ", "", "", "EnclosingMethod");
      FieldWriter fieldWriter2 = classWriter0.lastField;
      fieldWriter2.put(byteVector0);
      fieldWriter2.getSize();
      ByteVector byteVector2 = byteVector1.putUTF8("%-");
      FieldWriter fieldWriter3 = classWriter0.lastField;
      String string1 = "qH4t-4";
      byte[] byteArray0 = new byte[0];
      byteVector2.data = byteArray0;
      // Undeclared exception!
      try { 
        fieldWriter3.visitAnnotation("The FilenameFilter must not be null", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      ClassWriter classWriter1 = new ClassWriter((-5));
      ClassWriter classWriter2 = new ClassWriter((-2540));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter2, (-5), "uyIK9WsMf>Gek{5'", "EnclosingMethod", "\u0003H$e", "uyIK9WsMf>Gek{5'");
      classWriter0.newClassItem("");
      classWriter2.visit(49, 2, "Nk", "uyIK9WsMf>Gek{5'", "uyIK9WsMf>Gek{5'", (String[]) null);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putByte(13);
      byteVector1.putByte(2);
      fieldWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5));
      String string0 = "EnclosingMethod";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-5), "EnclosingMethod", "EnclosingMethod", "EnclosingMethod", "EnclosingMethod");
      String string1 = "%-";
      classWriter0.newClassItem("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(GPs/X]Q-xvZN _3";
      classWriter0.visit(40, 34, "%-", "(GPs/X]Q-xvZN _3", "Nk", stringArray0);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = classWriter0.pool;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)95;
      byteVector1.data = byteArray0;
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 40, "rYi[K 8@B1r%WXJ", "", "", "EnclosingMethod");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1962);
      classWriter0.newClassItem("Signature");
      classWriter0.visit(49, 1962, "RuntimeInvisibleAnnotations", "4]_,&", "Nk", (String[]) null);
      ByteVector byteVector0 = classWriter0.pool;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-622), "C];w@jeOxu&d", "Rn!y}T@x3@C=", "C];w@jeOxu&d", "Signature");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1444));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1444), "EnclosingMethod", "EnclosingMethod", "EnclosingMethod", "EnclosingMethod");
      Item item0 = classWriter0.key2;
      String[] stringArray0 = new String[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "%-";
      classWriter0.visit(50, 34, "%-", "EnclosingMethod", "Nk", stringArray0);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-29));
      classWriter0.newInteger((-29));
      classWriter0.version = (-29);
      classWriter0.newMethodItem("<init>", "<init>", "org.apache.commons.io.filefilter.SizeFileFilter", false);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-29), "!#", "!#", (String) null, "!#");
      int int0 = fieldWriter0.getSize();
      assertEquals(22, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-29));
      classWriter0.index = (-4034);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-29), "EnclosingMetod", "EnclosingMetod", "EnclosingMetod", "EnclosingMetod");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-5), "nGt", "nGt", (String) null, "nGt");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "ke7f", "ke7f", (String) null, "ke7f");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-5), "EnclosingMethod", "EnclosingMethod", "EnclosingMethod", "EnclosingMethod");
      fieldWriter0.visitAnnotation("EnclosingMethod", true);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "Ge)f", "Ge)f", (String) null, "Ge)f");
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-5), "\"tf", "\"tf", "\"tf", "\"tf");
      fieldWriter0.visitAnnotation("\"tf", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(30);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 30, "ke7Cf", "ke7Cf", "ke7Cf", "ke7Cf");
      Attribute attribute0 = new Attribute("ke7Cf");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5));
      classWriter0.index = (-5);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-5), "EnclosingMethod", "EnclosingMethod", "EnclosingMethod", "EnclosingMethod");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 15, "\"tf", "\"tf", "\"tf", "\"tf");
      fieldWriter0.visitAnnotation("\"tf", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 5, "t", "t", "t", "t");
      ByteVector byteVector0 = new ByteVector();
      byteVector0.length = 3490;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-5), "EnclosingMethod", "EnclosingMethod", "EnclosingMethod", "EnclosingMethod");
      fieldWriter0.visitAnnotation("EnclosingMethod", false);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 5, "", "", "", "");
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector();
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(40);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 40, "G-tf", "G-tf", "G-tf", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "ke7Cf", "ke7Cf", (String) null, "ke7Cf");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 5, "EnclosingMetod", "EnclosingMetod", "EnclosingMetod", "EnclosingMetod");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classWriter0.newMethodItem("JSR/RET are not supported with computeFrames option", "", "", true);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "|?Gmis*\u0004", "n}*>", "JSR/RET are not supported with computeFrames option", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitEnd();
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 10, "EJvwE >ux", "EJvwE >ux", "EJvwE >ux", "EJvwE >ux");
      Object object0 = new Object();
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 10, "EJvwE >ux", "EJvwE >ux", "EJvwE >ux", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@4d648305
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-5), "EnclosingMethod", "EnclosingMethod", "EnclosingMethod", "EnclosingMethod");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 49, "pg8", "pg8", (String) null, classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, 8, "The FilenameFilter must not be null", "The FilenameFilter must not be null", "The FilenameFilter must not be null", "The FilenameFilter must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "ke7Cf", "ke7Cf", "ke7Cf", "ke7Cf");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2929);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "~7a[f", "~7a[f", "~7a[f", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "ke7Cf", "ke7Cf", (String) null, (Object) null);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-29));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-29), "EnclosingMetod", "EnclosingMetod", "EnclosingMetod", "EnclosingMetod");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }
}
