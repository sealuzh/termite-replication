/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 08:04:29 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.trees.RandomTree;
import weka.core.Attribute;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TestInstances;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.stemmers.IteratedLovinsStemmer;
import weka.core.stemmers.NullStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.Tokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6952790520443908
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) vector0, locale_FilteringMode0);
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@data", list0, protectedProperties0);
      capabilities0.testWithFail(attribute0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      capabilities0.enableAllAttributes();
      Instance instance0 = instances0.remove(1);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      instances0.setClass(attribute0);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.distributionForInstance(instance0);
      try { 
        naiveBayesMultinomialText0.updateClassifier(instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4431168529659275
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instance instance0 = instances0.remove(0);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("The independent probability of a class\n--------------------------------------\nclass1\t11.0\nclass2\t10.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\t\n", linkedList0, 640);
      instances0.setClass(attribute0);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.distributionForInstance(instance0);
      try { 
        naiveBayesMultinomialText0.updateClassifier(instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0921965331237558
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      SGDText sGDText1 = new SGDText();
      SGDText sGDText2 = new SGDText();
      sGDText2.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.remove(1);
      Instance instance0 = instances0.remove(0);
      IBk iBk0 = new IBk((-19));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-19);
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) (-1);
      Instances instances1 = iBk0.pruneToK(instances0, doubleArray0, 0);
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.distributionForInstance(instance0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.setLNorm(0.0);
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.setTokenizer((Tokenizer) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      naiveBayesMultinomialText0.setNorm(0.0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.LNormTipText();
      Random.setNextRandom(1588);
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals(0.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6952482927512396
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      List<String> list0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@data", list0, protectedProperties0);
      capabilities0.testWithFail(attribute0);
      naiveBayesMultinomialText0.getLowercaseTokens();
      capabilities0.enableAllAttributes();
      Instance instance0 = instances0.remove(1);
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.pruneDictionary();
      double[] doubleArray0 = new double[0];
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.tokenizerTipText();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2627848006711537
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getCapabilities();
      SnowballStemmer.listStemmers();
      String[] stringArray0 = new String[0];
      SnowballStemmer.main(stringArray0);
      naiveBayesMultinomialText0.setMinWordFrequency((-1739.721641863));
      naiveBayesMultinomialText0.m_leplace = 624.7493854;
      SnowballStemmer.listStemmers();
      SnowballStemmer.listStemmers();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.getMinWordFrequency();
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getOptions();
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 624.7493854;
      doubleArray0[1] = (-1739.721641863);
      coverTree0.enumerateMeasures();
      doubleArray0[2] = 624.7493854;
      doubleArray0[3] = 624.7493854;
      SparseInstance sparseInstance0 = new SparseInstance((-289.0), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      try { 
        coverTree0.nearestNeighbour(sparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.26381679241522
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer((String) null);
      snowballStemmer0.stemmerTipText();
      naiveBayesMultinomialText0.getCapabilities();
      snowballStemmer0.stemmerTipText();
      snowballStemmer0.stemmerTipText();
      SnowballStemmer.listStemmers();
      String[] stringArray0 = new String[0];
      SnowballStemmer.main(stringArray0);
      naiveBayesMultinomialText0.setMinWordFrequency((-1739.721641863));
      naiveBayesMultinomialText0.m_leplace = 624.7493854;
      SnowballStemmer.listStemmers();
      snowballStemmer0.listOptions();
      snowballStemmer0.toString();
      SnowballStemmer.listStemmers();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.getMinWordFrequency();
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getOptions();
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 624.7493854;
      doubleArray0[1] = (-1739.721641863);
      doubleArray0[2] = 624.7493854;
      doubleArray0[3] = 624.7493854;
      SparseInstance sparseInstance0 = new SparseInstance((-289.0), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      try { 
        coverTree0.nearestNeighbour(sparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6952482927512396
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      naiveBayesMultinomialText0.setNorm(0);
      List<String> list0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@data", list0, protectedProperties0);
      capabilities0.testWithFail(attribute0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      capabilities0.enableAllAttributes();
      Instance instance0 = instances0.remove(1);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      instances0.setClass(attribute0);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.tokenizerTipText();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(instance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't normalize array. Sum is NaN.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0187116336575976
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      naiveBayesMultinomialText0.m_leplace = 2173.2803466301534;
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      capabilities0.enableAllAttributes();
      Instance instance0 = instances0.remove(0);
      instances0.lastIndexOf(capabilities0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      double[] doubleArray0 = naiveBayesMultinomialText0.distributionForInstance(instance0);
      assertArrayEquals(new double[] {0.6665871712166007, 0.3334128287833992}, doubleArray0, 0.01);
      
      Random.setNextRandom(0);
      naiveBayesMultinomialText0.getStopwords();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4438693327287826
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) vector0, locale_FilteringMode0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@data", list0, protectedProperties0);
      capabilities0.testWithFail(attribute0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      capabilities0.enableAllAttributes();
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      Instance instance0 = instances0.remove(1);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      instances0.setClass(attribute0);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.pruneDictionary();
      try { 
        naiveBayesMultinomialText0.updateClassifier(instance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.047707978151193
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.setDebug(true);
      naiveBayesMultinomialText0.setTokenizer((Tokenizer) null);
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.m_periodicP = 200;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.679983198025875
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "eZ64U^btzrKB";
      stringArray0[1] = "`S/1(wVY!qAEb";
      stringArray0[2] = "`S/1(wVY!qAEb";
      stringArray0[3] = "`S/1(wVY!qAEb";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals("The tokenizing algorithm to use on the strings.", string0);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setOptions(stringArray0);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText1.setStopwords(file0);
      File file1 = naiveBayesMultinomialText1.getStopwords();
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText1.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText1.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText1.getLowercaseTokens());
      assertEquals("kernelMatrix.matrix", file1.getName());
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = (-9);
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.getTokenizer();
      assertEquals((-9), naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      capabilities0.enableAllAttributes();
      instances0.remove(0);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instance instance0 = instances0.remove(18);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(instance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) vector0, locale_FilteringMode0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@data", list0, protectedProperties0);
      capabilities0.testWithFail(attribute0);
      testInstances0.setNumNominal(17);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Instance instance0 = instances0.remove(3);
      naiveBayesMultinomialText0.setUseStopList(true);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      instances0.lastIndexOf(iteratedLovinsStemmer0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(instance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8832640580895876
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instance instance0 = instances0.remove(1);
      Instance instance1 = instances0.remove(1);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      double[] doubleArray0 = naiveBayesMultinomialText0.distributionForInstance(instance0);
      assertArrayEquals(new double[] {0.6000000000000001, 0.39999999999999997}, doubleArray0, 0.01);
      
      naiveBayesMultinomialText0.updateClassifier(instance1);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1479965652771034
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      capabilities0.enableAllAttributes();
      Instance instance0 = instances0.remove(0);
      naiveBayesMultinomialText0.setUseStopList(true);
      instances0.lastIndexOf(capabilities0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.distributionForInstance(instance0);
      Random.setNextRandom(0);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.253662663668938
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) vector0, locale_FilteringMode0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@data", list0, protectedProperties0);
      capabilities0.testWithFail(attribute0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      capabilities0.enableAllAttributes();
      Instance instance0 = instances0.remove(1);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      instances0.setClass(attribute0);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.distributionForInstance(instance0);
      try { 
        naiveBayesMultinomialText0.updateClassifier(instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RKz:/*,\f-8+1");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      sparseInstance1.toStringNoWeight();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1062932583460503
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.remove(0);
      instances0.remove(0);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.toString();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("p", "p", protectedProperties1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'p'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.883404187709486
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      sGDText0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      sGDText0.setLearningRate((-1));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (-1562.609452);
      SparseInstance sparseInstance0 = new SparseInstance(1062.6295, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities1 = sGDText0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances1 = new TestInstances();
      Instance instance0 = instances0.remove(1);
      naiveBayesMultinomialText0.setUseStopList(true);
      sGDText0.toString();
      Stopwords stopwords0 = new Stopwords();
      naiveBayesMultinomialText0.m_stopwords = stopwords0;
      instances0.lastIndexOf(capabilities1);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(instance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) vector0, locale_FilteringMode0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      capabilities0.enableAllAttributes();
      Instance instance0 = instances0.remove(1);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setUseStopList(true);
      instances0.lastIndexOf(testInstances0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(instance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1064439004580526
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      Capabilities capabilities0 = sGDText0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instance instance0 = instances0.remove(0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.distributionForInstance(instance0);
      Random.setNextRandom(1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1073282077927504
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      capabilities0.enableAllAttributes();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      capabilities0.enableAllAttributes();
      Instance instance0 = instances0.remove(0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      double[] doubleArray0 = naiveBayesMultinomialText0.distributionForInstance(instance0);
      assertArrayEquals(new double[] {0.5714285714285714, 0.42857142857142866}, doubleArray0, 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_t = 0.964;
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      
      naiveBayesMultinomialText0.m_periodicP = 73;
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getStopwords();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.051435843948024
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.m_lowercaseTokens = false;
      naiveBayesMultinomialText0.getOptions();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1153));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 9.066150747503224;
      doubleArray0[1] = 9.066150747503224;
      doubleArray0[2] = 9.066150747503224;
      doubleArray0[3] = 9.066150747503224;
      doubleArray0[4] = 9.066150747503224;
      doubleArray0[5] = 9.066150747503224;
      doubleArray0[6] = 9.066150747503224;
      int[] intArray0 = new int[9];
      intArray0[0] = 1727;
      intArray0[1] = (-4652);
      intArray0[2] = (-458);
      intArray0[3] = 72;
      intArray0[4] = 98;
      intArray0[5] = 1;
      intArray0[6] = 18;
      intArray0[7] = (-1);
      intArray0[8] = (-396);
      SparseInstance sparseInstance0 = new SparseInstance(9.066150747503224, doubleArray0, intArray0, (-4652));
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9505809896476798
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      AbstractClassifier.makeCopy(sGDText0);
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      capabilities0.enableAllAttributes();
      Instance instance0 = instances0.remove(0);
      instances0.remove(0);
      instances0.lastIndexOf(capabilities0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.distributionForInstance(instance0);
      Random.setNextRandom(0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0497978423100225
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      File file1 = MockFile.createTempFile("\n\tleaf", "\n\tleaf", file0);
      naiveBayesMultinomialText0.m_stopwordsFile = file1;
      naiveBayesMultinomialText0.m_wordFrequencies = false;
      naiveBayesMultinomialText0.m_normalize = false;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\n\tleaf";
      sGDText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.m_lnorm = 0.0;
      naiveBayesMultinomialText0.m_lnorm = 0.0;
      naiveBayesMultinomialText0.listOptions();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "\"PXg=HEElO;\"\\y";
      stringArray1[1] = "Attribute type '";
      stringArray1[2] = "-G <num>";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "";
      stringArray1[6] = "2g7h3s|Qo7<b";
      naiveBayesMultinomialText0.setOptions(stringArray1);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getLNorm();
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertEquals(0.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 709.782712893384;
      naiveBayesMultinomialText0.setPeriodicPruning(200);
      doubleArray0[1] = 3.2377489177694603;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.setDebug(false);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "UD)[eyRvo fCrU";
      stringArray0[1] = "UD)[eyRvo fCrU";
      stringArray0[2] = "UD)[eyRvo fCrU";
      stringArray0[3] = "UD)[eyRvo fCrU";
      stringArray0[5] = "UD)[eyRvo fCrU";
      stringArray0[6] = "UD)[eyRvo fCrU";
      stringArray0[7] = "UD)[eyRvo fCrU";
      NaiveBayesMultinomialText.main(stringArray0);
      naiveBayesMultinomialText0.setNorm((-654.8));
      naiveBayesMultinomialText0.setNorm((-654.8));
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      nGramTokenizer0.nextElement();
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) nGramTokenizer0;
      naiveBayesMultinomialText0.m_minWordP = 0.0;
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.useStopListTipText();
      assertEquals((-654.8), naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1288532479826054
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.m_lnorm = (-890.97822);
      naiveBayesMultinomialText0.m_norm = (-890.97822);
      Stopwords stopwords0 = naiveBayesMultinomialText0.m_stopwords;
      naiveBayesMultinomialText0.m_stopwords = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.getLNorm();
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 1545);
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.useStopListTipText();
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertEquals((-890.97822), naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNoClass(true);
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      capabilities0.enableAllAttributes();
      instances0.remove(1);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "431aDMB0k$|\"w");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 2070;
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.m_periodicP = 115;
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.getMinWordFrequency();
      String[] stringArray0 = new String[5];
      stringArray0[3] = "";
      stringArray0[1] = "431aDMB0k$|\"w";
      stringArray0[2] = "431aDMB0k$|\"w";
      stringArray0[3] = "";
      stringArray0[4] = "431aDMB0k$|\"w";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9000150794805957
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-41);
      naiveBayesMultinomialText0.getCapabilities();
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)47;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      MockFile mockFile0 = new MockFile(file0, "Instance sets must be of the same size");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.m_leplace = 1.0;
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      
      naiveBayesMultinomialText0.m_periodicP = 73;
      naiveBayesMultinomialText0.getStopwords();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 73;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_norm = 15.0;
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getTokenizer();
      assertEquals(15.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.toString();
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.800698300541215
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@data", vector0, protectedProperties0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      capabilities0.enableAllAttributes();
      Instance instance0 = instances0.remove(1);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)18;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.distributionForInstance(instance0);
      naiveBayesMultinomialText0.updateClassifier(instance0);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getTokenizer();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.getStopwords();
      NullStemmer nullStemmer0 = new NullStemmer();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      assertFalse(naiveBayes0.getUseKernelEstimator());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.052128844641025
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-tokenizer";
      RandomTree randomTree0 = new RandomTree();
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2256.8136);
      doubleArray0[1] = (-2256.8136);
      doubleArray0[2] = (-2256.8136);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.getOptions();
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8832640580895876
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      capabilities0.enableAllAttributes();
      Instance instance0 = instances0.remove(0);
      instances0.lastIndexOf(capabilities0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.updateClassifier(instance0, false);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instance instance0 = instances0.remove(2);
      try { 
        naiveBayesMultinomialText0.updateClassifier(instance0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (-2253.67);
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      Instances instances0 = testInstances0.generate();
      Instance instance0 = instances0.remove(0);
      try { 
        naiveBayesMultinomialText0.updateClassifier(instance0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("YL-!8RI/duD:}M", arrayList0, 4);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      capabilities0.enableAllAttributes();
      Instance instance0 = instances0.remove(1);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(instance0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      sGDText0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instance instance0 = instances0.remove(1);
      Instance instance1 = instances0.remove(0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = new Instances(instances0);
      instances1.add(instance0);
      Instances instances2 = inputMappedClassifier0.getModelHeader(instances1);
      naiveBayesMultinomialText0.buildClassifier(instances2);
      naiveBayesMultinomialText0.distributionForInstance(instance0);
      double[] doubleArray0 = naiveBayesMultinomialText0.distributionForInstance(instance1);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertArrayEquals(new double[] {0.5, 0.5}, doubleArray0, 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.9713931362744876
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile(" L}p2'.4Q?3K", " L}p2'.4Q?3K");
      naiveBayesMultinomialText0.m_stopwordsFile = (File) mockFile0;
      naiveBayesMultinomialText0.getOptions();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      SparseInstance sparseInstance0 = new SparseInstance(3629);
      try { 
        principalComponents0.convertInstance(sparseInstance0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // convertInstance: Principal components not built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SparseInstance sparseInstance0 = new SparseInstance(3);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Random.setNextRandom((-47));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.m_stemmer = stemmer0;
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      boolean boolean0 = naiveBayesMultinomialText0.getUseStopList();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-W");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText0.setPeriodicPruning(666);
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      boolean boolean0 = naiveBayesMultinomialText0.getUseStopList();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ylJ;C.zK");
      naiveBayesMultinomialText0.periodicPruningTipText();
      Tokenizer tokenizer0 = naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.globalInfo();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "The LNorm to use for document length normalization.";
      stringArray0[1] = "The LNorm to use for document length normalization.";
      stringArray0[3] = "NaiveBayesMultinomialText: No model built yet.\n";
      stringArray0[4] = "Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification";
      stringArray0[5] = "Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      instances0.remove(0);
      File file0 = MockFile.createTempFile(".arff", ".arff");
      naiveBayesMultinomialText0.setStopwords(file0);
      boolean boolean0 = naiveBayesMultinomialText0.getLowercaseTokens();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.051435843948024
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Instance instance0 = instances0.remove(1);
      try { 
        naiveBayesMultinomialText0.updateClassifier(instance0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.normTipText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals("The norm of the instances after normalization.", string0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.stemmerTipText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals("The stemming algorithm to use on the words.", string0);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lnorm = 0.0;
      naiveBayesMultinomialText0.m_stopwords = null;
      naiveBayesMultinomialText0.setLNorm(1.0E10);
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer((String) null);
      SnowballStemmer.listStemmers();
      naiveBayesMultinomialText0.m_normalize = false;
      snowballStemmer0.stemmerTipText();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.setPeriodicPruning((-2396));
      naiveBayesMultinomialText0.getUseWordFrequencies();
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-2396);
      doubleArray0[3] = 1057.448;
      doubleArray0[4] = (-2492.2963175486);
      doubleArray0[5] = 1.0E10;
      doubleArray0[6] = 1.0E10;
      doubleArray0[7] = 1.0E10;
      doubleArray0[8] = (double) (-2396);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.setMinWordFrequency((-2396));
      naiveBayesMultinomialText0.globalInfo();
      NaiveBayesMultinomialText.main((String[]) null);
      naiveBayesMultinomialText0.setLNorm(2.147483647E9);
      assertEquals((-2396.0), naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      String string0 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.getRevision();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals("9122", string0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setReadable(false);
      naiveBayesMultinomialText0.setStopwords(mockFile1);
      mockFile1.setExecutable(false);
      mockFile1.setExecutable(true);
      mockFile1.delete();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      double double0 = naiveBayesMultinomialText0.m_lnorm;
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.setStopwords(mockFile1);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.getCapabilities();
      boolean boolean0 = naiveBayesMultinomialText0.getUseWordFrequencies();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      capabilities0.enableAllAttributes();
      Instance instance0 = instances0.remove(2);
      naiveBayesMultinomialText0.tokenizeInstance(instance0, false);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "Use word frequ\"ncies rather than binary bag of :ordsreDresentatio";
      stringArray1[1] = "-lnorm";
      LogitBoost logitBoost0 = new LogitBoost();
      String[] stringArray2 = new String[1];
      stringArray2[0] = "";
      AbstractClassifier.runClassifier(logitBoost0, stringArray2);
      stringArray1[2] = "";
      stringArray1[3] = "Use word frequ\"ncies rather than binary bag of :ordsreDresentatio";
      stringArray1[4] = "Use word frequ\"ncies rather than binary bag of :ordsreDresentatio";
      stringArray1[5] = "Use word frequ\"ncies rather than binary bag of :ordsreDresentatio";
      naiveBayesMultinomialText0.setOptions(stringArray1);
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_wordFrequencies = false;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka.core.matrix.EigenvalueDecomposition";
      stringArray0[1] = ")W_o#vS";
      stringArray0[2] = "gfiH'";
      stringArray0[3] = "`bQ0$fGi4gxy1y";
      stringArray0[4] = "-stopwords";
      stringArray0[5] = "-r~N4r";
      stringArray0[6] = "";
      stringArray0[7] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      
      naiveBayesMultinomialText0.m_lnorm = 3816.102222537372;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      String string0 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "-P";
      stringArray0[2] = "";
      stringArray0[3] = "`8odsypjwB4k.";
      stringArray0[4] = "\tUse word frequencies instead of binary bag of words.";
      stringArray0[5] = "IA\"Pp[pK(;y:9xo/PW";
      stringArray0[6] = "7*,:wCJUe=s4{x>`,";
      stringArray0[7] = "c.QgJ[kzxMKL;<<";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.6130783439811855
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      capabilities0.enableAllAttributes();
      instances0.remove(1);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t14.0\nclass2\t7.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\t\nover\t7.38905609893065\t7.38905609893065\t\nthe\t7.38905609893065\t7.38905609893065\t\nThe\t20.085536923187668\t2.718281828459045\t\nquick\t20.085536923187668\t7.38905609893065\t\nlazy\t7.38905609893065\t2.718281828459045\t\njumps\t20.085536923187668\t7.38905609893065\t\nbrown\t7.38905609893065\t7.38905609893065\t\ndog\t20.085536923187668\t2.718281828459045\t\nfox\t7.38905609893065\t7.38905609893065\t\n", string0);
      
      naiveBayesMultinomialText0.getStemmer();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(12, stringArray0.length);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.2697252139880932
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      capabilities0.enableAllAttributes();
      Instance instance0 = instances0.remove(1);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.distributionForInstance(instance0);
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(instance0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.185851463196929
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-tokenizer";
      stringArray0[1] = "[3TZcyvw6~w[bRIsG";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-lnorm";
      stringArray0[1] = "-lnorm";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "[3TZcyvw6~w[bRIsG";
      stringArray0[1] = "-tokenizer";
      stringArray0[2] = "-tokenizer";
      stringArray0[3] = "[3TZcyvw6~w[bRIsG";
      stringArray0[4] = "-norm";
      stringArray0[5] = "-tokenizer";
      stringArray0[6] = "-tokenizer";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.31400451463465
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.m_periodicP = 200;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(200, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-lnorm";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -lnorm option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      MockFile mockFile0 = new MockFile(file0, "The norm of the instances after normalization.");
      naiveBayesMultinomialText0.setStopwords((File) null);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }
}
