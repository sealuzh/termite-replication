/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 00:52:34 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Random;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.IntervalEstimator;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.functions.supportVector.RegOptimizer;
import weka.classifiers.functions.supportVector.StringKernel;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.REPTree;
import weka.clusterers.HierarchicalClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.EuclideanDistance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.Loader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.58641716671689
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.listOptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("gS0tLNorm");
      instances0.toSummaryString();
      textDirectoryLoader0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.SFMeanSchemeEntropy();
      try { 
        evaluation0.evaluateModelOnce(1.2000000029802322, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.112659005868638
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      CostMatrix costMatrix0 = new CostMatrix(13);
      LinearRegression linearRegression0 = new LinearRegression();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "iymo|(VX'~5");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedAreaUnderPRC();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      MockRandom mockRandom0 = new MockRandom(1405L);
      wrapperSubsetEval0.toString();
      double double0 = evaluation0.m_TotalCost;
      Object[] objectArray0 = new Object[0];
      evaluation0.crossValidateModel(classifier0, instances0, 3, (Random) mockRandom0, objectArray0);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.weightedFalseNegativeRate();
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Instances instances1 = testInstances0.generate(" c:KbVv0Z-");
      instances0.toSummaryString();
      textDirectoryLoader0.getRevision();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedMatthewsCorrelation();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.SFMeanSchemeEntropy();
      Evaluation evaluation3 = new Evaluation(instances1, (CostMatrix) null);
      Evaluation evaluation4 = new Evaluation(instances1);
      evaluation4.weightedTrueNegativeRate();
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.weightedFalseNegativeRate();
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setOptions");
      instances0.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumAbsErr = (double) (-1);
      evaluation0.setNumericPriorsFromBuffer();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      LWL lWL0 = new LWL();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      IBk iBk0 = new IBk();
      evaluation0.falsePositiveRate((-2));
      evaluation0.getHeader();
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1916087190214837
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      CostMatrix costMatrix0 = new CostMatrix(13);
      LinearRegression linearRegression0 = new LinearRegression();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "iymo|(VX'~5");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedAreaUnderPRC();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      MockRandom mockRandom0 = new MockRandom(1405L);
      wrapperSubsetEval0.toString();
      double double0 = evaluation0.m_TotalCost;
      Object[] objectArray0 = new Object[0];
      evaluation0.crossValidateModel(classifier0, instances0, 3, (Random) mockRandom0, objectArray0);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.SFPriorEntropy();
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2418.7101387434;
      doubleArray0[1] = 2418.7101387434;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2418.7101387434, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\tThe scaling factor for the output range.\n\t(default: 1.0)");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation1.m_SumKBInfo = (-763.5170420028383);
      evaluation1.weightedAreaUnderPRC();
      evaluation1.falseNegativeRate(2353);
      evaluation1.KBMeanInformation();
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      textDirectoryLoader0.getDataSet();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(116);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      instances0.clear();
      evaluation0.SFSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.recall((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5971958580732086
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(13);
      evaluation0.SFMeanPriorEntropy();
      LinearRegression linearRegression0 = new LinearRegression();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "iymo|(VX'~5");
      evaluation0.SFMeanEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalseNegativeRate();
      evaluation1.weightedAreaUnderPRC();
      evaluation0.toMatrixString("@relation");
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      MockRandom mockRandom0 = new MockRandom(1405L);
      wrapperSubsetEval0.toString();
      double double0 = evaluation1.m_TotalCost;
      Object[] objectArray0 = new Object[0];
      evaluation1.crossValidateModel(classifier0, instances0, 3, (Random) mockRandom0, objectArray0);
      System.setCurrentTimeMillis(0L);
      evaluation1.correct();
      evaluation1.kappa();
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.listOptions();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5971877872436082
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(13);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFMeanEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalseNegativeRate();
      evaluation1.weightedAreaUnderPRC();
      evaluation0.toMatrixString("@relation");
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR zeroR0 = new ZeroR();
      MockRandom mockRandom0 = new MockRandom();
      wrapperSubsetEval0.toString();
      double double0 = evaluation1.m_TotalCost;
      evaluation1.m_DiscardPredictions = true;
      Object[] objectArray0 = new Object[0];
      evaluation1.crossValidateModel((Classifier) zeroR0, instances0, 3, (Random) mockRandom0, objectArray0);
      evaluation1.m_ConfLevel = (double) 0;
      System.setCurrentTimeMillis(0L);
      evaluation1.correct();
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getOptions();
      Instances instances0 = testInstances0.generate("^*$bsc6k#R}:.");
      Instances instances1 = new Instances(instances0, 0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_WithClass = 0.025;
      evaluation0.correlationCoefficient();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.weightedTruePositiveRate();
      ClassificationViaRegression[] classificationViaRegressionArray0 = new ClassificationViaRegression[3];
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      classificationViaRegressionArray0[0] = classificationViaRegression0;
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      classificationViaRegressionArray0[2] = classificationViaRegression1;
      ClassificationViaRegression classificationViaRegression2 = new ClassificationViaRegression();
      classificationViaRegression1.getTechnicalInformation();
      classificationViaRegressionArray0[2] = classificationViaRegression2;
      instances0.toArray(classificationViaRegressionArray0);
      evaluation0.toClassDetailsString(".arff");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = 'p';
      charArray0[2] = 'G';
      charArray0[3] = 'c';
      charArray0[4] = '3';
      charArray0[5] = '#';
      charArray0[6] = 'm';
      charArray0[7] = 'k';
      evaluation1.num2ShortID(18, charArray0, 2928);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8552507637962807
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getOptions();
      Instances instances0 = testInstances0.generate("^*$bsc6k#R}:.");
      testInstances0.getData();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_WithClass = 0.02500000037252903;
      evaluation0.correlationCoefficient();
      evaluation0.correlationCoefficient();
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getHeader();
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.49230769230769234
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(13);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.truePositiveRate(1);
      evaluation0.trueNegativeRate(0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.unweightedMacroFmeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.falseNegativeRate(0);
      evaluation2.SFSchemeEntropy();
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getOptions();
      Instances instances0 = testInstances0.generate("^*$bsc6k#R}:.");
      testInstances0.getData();
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.trueNegativeRate((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.494949494949495
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getOptions();
      Instances instances0 = testInstances0.generate("^*$bsc6k#R}:.");
      testInstances0.getData();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-1055));
      // Undeclared exception!
      try { 
        evaluation1.matthewsCorrelationCoefficient((-4476));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("?+1Wo|l@<>m;5=3T");
      instances0.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.confusionMatrix();
      // Undeclared exception!
      try { 
        textDirectoryLoader0.getNextInstance(instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.converters.TextDirectoryLoader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      M5Rules m5Rules0 = new M5Rules();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      try { 
        evaluation0.crossValidateModel((Classifier) m5Rules0, instances0, 1279, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = new Instances(instances0, 0, (-1));
      instances1.toSummaryString();
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 2;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorEntropy;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(472);
      evaluation0.KBRelativeInformation();
      evaluation0.numInstances();
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.49640287769784175
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("'\n");
      Instances instances1 = testInstances0.getData();
      capabilities0.capabilities();
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.correlationCoefficient();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.errorRate();
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(".bsi", arrayList0, 3672);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = testInstances0.generate(".bsi");
      instances0.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      testInstances0.setRelationalClassFormat(instances0);
      int int0 = 14;
      evaluation0.numTrueNegatives(14);
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(570);
      try { 
        evaluation0.updateStatsForPredictor(5.0, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.updateStatsForPredictor((-2867.98986550542), (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      StringKernel stringKernel0 = new StringKernel();
      stringKernel0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      IBk iBk0 = new IBk();
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = (-53);
      intArray0[2] = 2;
      intArray0[3] = 2;
      Vector<CostSensitiveClassifier> vector0 = new Vector<CostSensitiveClassifier>();
      instances0.retainAll(vector0);
      intArray0[4] = 18;
      intArray0[5] = (-1136903108);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, (-53));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      LMT lMT0 = new LMT();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      M5Rules m5Rules0 = new M5Rules();
      evaluation0.equals(m5Rules0);
      evaluation0.confusionMatrix();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.pctUnclassified();
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setOptions");
      instances0.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      testInstances0.setRelationalClassFormat(instances0);
      evaluation0.numTrueNegatives(14);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, (Instance) null, (-2.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Can't open file ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.toString();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(706);
      IBk iBk0 = new IBk();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.kappa();
      assertEquals(1.0, double0, 0.01);
      
      evaluation1.getRevision();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".bsi");
      instances1.toSummaryString();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.makeOptionString((Classifier) null, true);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      IntervalEstimator intervalEstimator0 = null;
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XRFFLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom(486L);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      capabilities0.toSource(".bsi");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 486L;
      doubleArray0[1] = (double) 486L;
      doubleArray0[2] = 2998.5470177;
      doubleArray0[3] = (-10.0);
      doubleArray0[4] = (-0.5);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(93);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Cannot handle string ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      LinkedList<NaiveBayesMultinomial> linkedList0 = new LinkedList<NaiveBayesMultinomial>();
      instances0.containsAll(linkedList0);
      LWL lWL0 = new LWL();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      String string0 = evaluation0.toMatrixString(".bsi");
      assertEquals(".bsi\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double0 = evaluation0.falseNegativeRate(100);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.incorrect();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(35);
      Instances instances0 = testInstances0.generate("");
      instances0.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      testInstances0.setRelationalClassFormat(instances0);
      evaluation0.numTrueNegatives(50);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) simpleLinearRegression0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute("\nClass name: ", instances0, 0);
      instances0.deleteWithMissing(attribute0);
      evaluation0.useNoPriors();
      evaluation0.setDiscardPredictions(true);
      evaluation0.toMatrixString("string");
      evaluation0.toSummaryString("string\n   <-- classified as\n", true);
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) textDirectoryLoader0;
      objectArray0[1] = (Object) classifier0;
      objectArray0[2] = (Object) "string\n   <-- classified as\n";
      objectArray0[3] = (Object) "\nClass name: ";
      objectArray0[4] = (Object) classifier0;
      double[] doubleArray0 = evaluation0.m_TrainClassVals;
      double double0 = evaluation0.KBRelativeInformation();
      assertTrue(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.597073827129648
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      CostMatrix costMatrix0 = new CostMatrix(13);
      LinearRegression linearRegression0 = new LinearRegression();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "iymo|(VX'~5");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedAreaUnderPRC();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      MockRandom mockRandom0 = new MockRandom(1405L);
      wrapperSubsetEval0.toString();
      double double0 = evaluation0.m_TotalCost;
      Object[] objectArray0 = new Object[0];
      evaluation0.crossValidateModel(classifier0, instances0, 3, (Random) mockRandom0, objectArray0);
      System.setCurrentTimeMillis(0L);
      evaluation0.correct();
      double double1 = evaluation0.areaUnderROC(0);
      assertEquals(2.047815870330459, evaluation0.SFMeanPriorEntropy(), 0.01);
      assertEquals(0.43333333333333335, double1, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.correct();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      stringKernel0.setLambda((-2));
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.makeOptionString(zeroR0, true);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) zeroR0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".bsi");
      instances0.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      testInstances0.setRelationalClassFormat(instances0);
      evaluation0.trueNegativeRate((-2));
      evaluation0.unweightedMacroFmeasure();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4888888888888889
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "y'w+0Wvx";
      stringArray0[1] = "setSuppressMappingReport";
      stringArray0[2] = "OneAgainstOne";
      stringArray0[3] = "N-4C'K+5OMe}F{3";
      stringArray0[4] = "  public String getRevision() {\n";
      stringArray0[5] = "wg|(h0 [s}Ho";
      TextDirectoryLoader.main(stringArray0);
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("List not sorted correctly. first.distance: ");
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      evaluation0.SFMeanEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation1.weightedAreaUnderPRC();
      assertEquals(double1, double0, 0.01);
      
      String string0 = evaluation1.toMatrixString(" ");
      assertEquals(" \n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      xRFFLoader0.retrieveFile();
      double double2 = evaluation1.m_SumAbsErr;
      double[] doubleArray0 = evaluation1.makeDistribution(0.5294117647058824);
      assertEquals(2, doubleArray0.length);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1915991929438463
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      CostMatrix costMatrix0 = new CostMatrix(13);
      LinearRegression linearRegression0 = new LinearRegression();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "iymo|(VX'~5");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedAreaUnderPRC();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      MockRandom mockRandom0 = new MockRandom(1405L);
      wrapperSubsetEval0.toString();
      double double0 = evaluation0.m_TotalCost;
      Object[] objectArray0 = new Object[0];
      evaluation0.crossValidateModel(classifier0, instances0, 3, (Random) mockRandom0, objectArray0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getStructure();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      M5Rules m5Rules0 = new M5Rules();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) m5Rules0, instances0, 23, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 100.0;
      int[] intArray0 = new int[6];
      intArray0[0] = (-2);
      intArray0[1] = (-1);
      intArray0[2] = (-2);
      intArray0[3] = (-1);
      intArray0[4] = (-2);
      doubleArray0[0] = (double) (-2);
      double double0 = evaluation1.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".bsi");
      instances0.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getOptions();
      Instances instances0 = testInstances0.generate("^*$bsc6k#R}:.");
      testInstances0.getData();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_WithClass = 0.02500000037252903;
      evaluation0.correlationCoefficient();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      // Undeclared exception!
      try { 
        evaluation0.weightedPrecision();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      CostMatrix costMatrix0 = new CostMatrix(13);
      LinearRegression linearRegression0 = new LinearRegression();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "iymo|(VX'~5");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_TotalCoverage = 4.9E-324;
      evaluation1.m_NumClasses = 0;
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      
      evaluation0.areaUnderPRC((-1));
      evaluation0.addNumericTrainClass((-731.92229089), 3.4);
      double double1 = evaluation0.precision(2);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      StringKernel stringKernel0 = new StringKernel();
      stringKernel0.getCapabilities();
      J48 j48_0 = new J48();
      Capabilities capabilities0 = j48_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(1);
      evaluation0.SFMeanPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.595722115257705
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.m_SumSqrErr;
      String string0 = evaluation0.toClassDetailsString(".arff");
      assertEquals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(".arff");
      instances0.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances1);
      testInstances0.setRelationalClassFormat(instances0);
      evaluation0.setPriors(instances1);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      boolean boolean0 = evaluation1.equals(evaluation0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(491);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute(".arff", instances0, 0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[0] = (double) 1;
      doubleArray0[3] = 906.124073;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 2;
      evaluation0.updateMargins(doubleArray0, 2, 1.0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation0.truePositiveRate(2532);
      assertNotEquals(double1, double0, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n  0     Infinity\n", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      LinkedList<NaiveBayesMultinomial> linkedList0 = new LinkedList<NaiveBayesMultinomial>();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.truePositiveRate(14);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.unweightedMacroFmeasure();
      double double2 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      instances0.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.numTrueNegatives(24);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalseNegatives(101);
      CostMatrix costMatrix0 = Evaluation.handleCostOption("", 101);
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1864805138932786
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(13);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.m_SumSqrPredicted = (double) (-1);
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b c d   <-- classified as\n 0 0 0 0 | a = class1\n 0 0 0 0 | b = class2\n 0 0 0 0 | c = class3\n 0 0 0 0 | d = class4\n", string0);
      
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.numFalseNegatives(1);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      String string0 = evaluation0.num2ShortID(4375, charArray0, 0);
      assertEquals("", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute(".arff", instances0, 0);
      Evaluation evaluation0 = new Evaluation(instances0);
      attribute0.setWeight((-4514.248121779256));
      evaluation0.m_TotalCoverage = (-508.855836);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.truePositiveRate(1);
      evaluation0.areaUnderROC(1);
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumInstances(622);
      Instances instances0 = testInstances0.generate(".bsi");
      instances0.toSummaryString();
      testInstances0.setNumInstances(622);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision(488064466);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 488064466
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.confusionMatrix();
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation0.meanAbsoluteError();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("b");
      instances0.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      LMT lMT0 = new LMT();
      double double1 = evaluation0.m_SumPriorSqrErr;
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.errorRate();
      double double1 = evaluation0.pctIncorrect();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)47;
      evaluation0.m_WithClass = (double) (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)47;
      ZeroR zeroR0 = new ZeroR();
      evaluation0.falsePositiveRate(477);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(0.0, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      REPTree rEPTree0 = new REPTree();
      rEPTree0.getOptions();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "toSource");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom(531L);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-77);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((byte) (-15), (char[]) null, (byte) (-25));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.matthewsCorrelationCoefficient(1);
      assertEquals(0.0, double0, 0.01);
      
      evaluation1.m_MissingClass = (double) 1;
      String string0 = evaluation1.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \nIgnored Class Unknown Instances                  1     \n", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom(531L);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5449);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, binarySparseInstance0, (-2068.23));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-12);
      doubleArray0[2] = (double) (byte) (-12);
      doubleArray0[4] = (double) (byte) (-12);
      System.setCurrentTimeMillis(0L);
      evaluation0.weightedAreaUnderROC();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(20, (char[]) null, 1879);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = 'b';
      charArray0[2] = 'Q';
      charArray0[3] = 'I';
      charArray0[4] = '[';
      charArray0[5] = 's';
      charArray0[6] = 'w';
      charArray0[7] = '/';
      charArray0[8] = ']';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1), charArray0, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(477);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, sparseInstance0, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      AllFilter allFilter0 = new AllFilter();
      Capabilities capabilities0 = allFilter0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("numNodes");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      
      boolean boolean0 = evaluation0.equals(capabilities0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.errorRate();
      double double1 = evaluation0.pctUnclassified();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SGD sGD0 = new SGD();
      Capabilities capabilities0 = sGD0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("@relation");
      instances0.toSummaryString();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3671.526321506;
      doubleArray0[1] = (-1042.53745);
      doubleArray0[2] = 3671.526321506;
      doubleArray0[3] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-1042.53745), doubleArray0);
      instances1.checkInstance(denseInstance0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.numFalsePositives((-2));
      evaluation0.falsePositiveRate(1);
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)47;
      evaluation0.m_WithClass = (double) (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)47;
      ZeroR zeroR0 = new ZeroR();
      evaluation0.m_NumClasses = 491;
      // Undeclared exception!
      try { 
        evaluation0.falsePositiveRate(477);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      org.evosuite.runtime.Random.setNextRandom(19);
      evaluation0.SFPriorEntropy();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 19;
      doubleArray0[4] = (double) 19;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      try { 
        linearNNSearch0.nearestNeighbour(binarySparseInstance0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(false);
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.numTruePositives(2);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDirectory();
      textDirectoryLoader1.getDataSet();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(116);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = (double) (-1);
      instances0.clear();
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.reset();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      MockRandom mockRandom0 = new MockRandom();
      String[] stringArray0 = new String[0];
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.KBMeanInformation();
      double double1 = evaluation1.recall((-967));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation1.SFSchemeEntropy(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 5.3;
      doubleArray0[1] = (-1937.261336432);
      doubleArray0[2] = (-2581.04);
      doubleArray0[3] = 342.0;
      doubleArray0[4] = (-10.0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-3734.385828740534));
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 133.9297815113;
      doubleArray0[1] = 1222.07402;
      doubleArray0[2] = 5.3;
      doubleArray0[3] = 44.5;
      doubleArray0[4] = (-890.918025824717);
      doubleArray0[5] = 3125.150889450203;
      doubleArray0[6] = (-3298.099806319);
      doubleArray0[7] = 15.0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 133.9297815113);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumInstances(622);
      Instances instances0 = testInstances0.generate(";:Cs!^\"~=_");
      instances0.toSummaryString();
      testInstances0.setNumInstances(622);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      LMT lMT0 = new LMT();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.fMeasure(45);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.truePositiveRate(13);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.matthewsCorrelationCoefficient(502);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.assign(testInstances1);
      evaluation0.numTruePositives((-1));
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel(" ", instances0, (-1), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called:  
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.makeOptionString(zeroR0, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.49056603773584906
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("^*$bsc6k#R}:.");
      testInstances0.getData();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_WithClass = 0.025;
      evaluation0.correlationCoefficient();
      evaluation0.correlationCoefficient();
      evaluation0.getClassPriors();
      // Undeclared exception!
      try { 
        evaluation0.weightedMatthewsCorrelation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      Evaluation.makeOptionString(naiveBayesUpdateable0, true);
      LMT lMT0 = new LMT();
      assertEquals("Convert all nominal attributes to binary ones before building the tree. This means that all splits in the final tree will be binary.", lMT0.convertNominalTipText());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".bsi");
      String string0 = instances0.toSummaryString();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3671.526321506;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 3671.526321506;
      DenseInstance denseInstance0 = new DenseInstance(3671.526321506, doubleArray0);
      AbstractInstance.s_numericAfterDecimalPoint = (-2);
      instances0.checkInstance(denseInstance0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String string1 = Evaluation.makeOptionString(costSensitiveClassifier0, false);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom();
      instances0.resampleWithWeights((Random) mockRandom0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(2);
      org.evosuite.runtime.Random.setNextRandom(2);
      double double0 = evaluation0.totalCost();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("b");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "wJArxf{y1[d*Y");
      try { 
        Evaluation.handleCostOption("b", 87);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"wJArxf{y1[d*Y\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("b");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      try { 
        Evaluation.handleCostOption("b", 87);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Line 0: expected number of rows
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      LinkedList<NaiveBayesMultinomial> linkedList0 = new LinkedList<NaiveBayesMultinomial>();
      IBk iBk0 = new IBk();
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(9.0, intArray0, (-603));
      String string0 = evaluation0.toClassDetailsString("@relation");
      assertEquals("@relation\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.weightedRecall();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      LinkedList<NaiveBayesMultinomial> linkedList0 = new LinkedList<NaiveBayesMultinomial>();
      instances0.containsAll(linkedList0);
      LWL lWL0 = new LWL();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      evaluation0.toSummaryString(true);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(".arff");
      instances0.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances1);
      testInstances0.setRelationalClassFormat(instances0);
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setC");
      instances0.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.numTrueNegatives(108);
      evaluation0.numFalsePositives(17);
      try { 
        CostMatrix.parseMatlab("Relation Name:  Testdata\nNum Instances:  20\nNum Attributes: 2\n\n     Name                      Type  Nom  Int Real     Missing      Unique  Dist\n   1 setCNominal1               Nom 100%   0%   0%     0 /  0%     0 /  0%     2 \n   2 setCClass                  Nom 100%   0%   0%     0 /  0%     0 /  0%     2 \n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("2A,Jxi");
      instances1.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.setNumericPriorsFromBuffer();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3671.526321506;
      sMOreg0.setRegOptimizer((RegOptimizer) null);
      doubleArray0[1] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance((-2), doubleArray0);
      instances1.checkInstance(denseInstance0);
      double double0 = evaluation0.numTrueNegatives(0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.numFalsePositives(1);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Cannot handle string ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      LinkedList<NaiveBayesMultinomial> linkedList0 = new LinkedList<NaiveBayesMultinomial>();
      instances0.containsAll(linkedList0);
      LWL lWL0 = new LWL();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      LMT lMT0 = new LMT();
      ArffLoader arffLoader0 = new ArffLoader();
      double double0 = evaluation0.numFalsePositives((-2));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("sytOptions");
      instances0.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-10.0);
      SparseInstance sparseInstance0 = new SparseInstance((-10.0), doubleArray0);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom(531L);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 531L;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 531L;
      doubleArray0[4] = 1.0;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 19, (-2.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(9);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 1.2000000029802322;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@relation";
      Evaluation.main(stringArray0);
      instances0.sort(1856);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toMatrixString("FR^y0");
      Evaluation.main(stringArray0);
      double double0 = evaluation1.sizeOfPredictedRegions();
      evaluation0.meanPriorAbsoluteError();
      double double1 = evaluation0.numTrueNegatives(4);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.rootRelativeSquaredError();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute(" = ", instances0, 2392);
      instances0.deleteWithMissing(attribute0);
      instances0.deleteWithMissing(attribute0);
      evaluation0.useNoPriors();
      evaluation0.setDiscardPredictions(true);
      evaluation0.toMatrixString();
      evaluation0.toSummaryString("string", true);
      double double0 = evaluation0.SFEntropyGain();
      assertTrue(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TreeSet<AdditiveRegression> treeSet0 = new TreeSet<AdditiveRegression>();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_ComplexityStatisticsAvailable = false;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.toCumulativeMarginDistributionString();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Classifier classifier0 = AbstractClassifier.makeCopy(multiClassClassifierUpdateable0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(109);
      try { 
        evaluation1.evaluateModelOnce(classifier0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.remove((Object) textDirectoryLoader0);
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.setNumericPriorsFromBuffer();
      // Undeclared exception!
      try { 
        evaluation0.numTrueNegatives((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getOptions();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(25);
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.m_SumAbsErr;
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      LMT lMT0 = new LMT();
      evaluation0.areaUnderROC(703);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 703;
      doubleArray0[1] = (double) 703;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 703;
      doubleArray0[4] = (double) 703;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      int[] intArray0 = new int[4];
      intArray0[0] = 92;
      intArray0[1] = (-1987);
      intArray0[2] = 0;
      intArray0[3] = (-1987);
      Instance instance0 = BallNode.calcCentroidPivot(703, (-1987), intArray0, instances0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      IBk iBk0 = new IBk();
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[2] = 1;
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      double[] doubleArray0 = new double[5];
      evaluation0.addNumericTrainClass(Double.NaN, 3671.526321506);
      doubleArray0[0] = 3671.526321506;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-2036));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("|p@0{|vuSuo'w.");
      testInstances0.getData();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelationalClassFormat(instances0);
      evaluation0.setPriors(instances0);
      evaluation0.weightedAreaUnderROC();
      evaluation0.equals(testInstances0);
      evaluation0.addNumericTrainClass((-777.629468463), 2405.39923389);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.addNumericTrainClass(51, 51);
      double double0 = evaluation0.precision(51);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      LinkedList<NaiveBayesMultinomial> linkedList0 = new LinkedList<NaiveBayesMultinomial>();
      instances0.containsAll(linkedList0);
      LWL lWL0 = new LWL();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      evaluation0.useNoPriors();
      evaluation0.toSummaryString("@relation", true);
      CostMatrix costMatrix1 = null;
      try {
        costMatrix1 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CostMatrix costMatrix0 = new CostMatrix(62);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 62
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(491);
      try { 
        evaluation0.evaluateModelOnce((double) 491, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 491
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int[] intArray0 = new int[5];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(9.0, intArray0, (-603));
      evaluation0.weightedTruePositiveRate();
      try { 
        evaluation0.evaluationForSingleInstance((double[]) null, binarySparseInstance0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.m_SumSqrErr;
      try { 
        evaluation0.toClassDetailsString("weka/core/Capabilities.props");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.confusionMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 853.0;
      doubleArray0[1] = 1214.7;
      doubleArray0[2] = (-378.81557);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@data";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".bsi";
      stringArray0[4] = ".bsi";
      stringArray0[5] = "@data";
      stringArray0[6] = ".bsi";
      stringArray0[7] = ".bsi";
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      textDirectoryLoader0.setOptions(stringArray0);
      doubleArray0[3] = 0.02500000037252903;
      doubleArray0[4] = 3839.9;
      evaluation0.m_MarginCounts = doubleArray0;
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.areaUnderROC(2147483645);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom(531L);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.toMatrixString(".xml");
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      MockRandom mockRandom1 = new MockRandom(3670L);
      WrapperSubsetEval wrapperSubsetEval1 = new WrapperSubsetEval();
      wrapperSubsetEval1.toString();
      evaluation0.weightedAreaUnderROC();
      System.setCurrentTimeMillis((-4830L));
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute(".arff", instances0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      double double0 = evaluation0.m_Unclassified;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 73;
      doubleArray0[4] = 796.219;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 73;
      try { 
        evaluation1.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      J48 j48_0 = new J48();
      Capabilities capabilities0 = j48_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("]-~#Xf5:++v}");
      instances0.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      testInstances0.setRelationalClassFormat(instances1);
      double double0 = evaluation0.m_SumPriorSqrErr;
      double double1 = evaluation0.m_SumPriorEntropy;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[7] = (-1912.23);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.95;
      SparseInstance sparseInstance0 = new SparseInstance(14);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(116);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      boolean boolean0 = evaluation0.equals((Object) null);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      MockRandom mockRandom0 = new MockRandom((-1128L));
      instances0.randomize(mockRandom0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toMatrixString("@data");
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double0 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.rootRelativeSquaredError();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".bsi");
      instances0.toSummaryString();
      Instances instances1 = testInstances0.getData();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" ");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Evaluation.handleCostOption((String) null, 86);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      int int0 = 0;
      Attribute attribute0 = new Attribute(".arff", instances0, 0);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) votedPerceptron0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      IBk iBk0 = new IBk();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 120);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) iBk0, (Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      LinkedList<NaiveBayesMultinomial> linkedList0 = new LinkedList<NaiveBayesMultinomial>();
      instances0.containsAll(linkedList0);
      LWL lWL0 = new LWL();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      evaluation0.toSummaryString(".arff", false);
      CostMatrix costMatrix1 = null;
      try {
        costMatrix1 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(false);
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.m_SumSqrClass;
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      LinkedList<NaiveBayesMultinomial> linkedList0 = new LinkedList<NaiveBayesMultinomial>();
      instances0.containsAll(linkedList0);
      LWL lWL0 = new LWL();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      evaluation0.toSummaryString("@relation", true);
      CostMatrix costMatrix1 = null;
      try {
        costMatrix1 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      LinkedList<NaiveBayesMultinomial> linkedList0 = new LinkedList<NaiveBayesMultinomial>();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      ClassificationViaRegression[] classificationViaRegressionArray0 = new ClassificationViaRegression[8];
      classificationViaRegressionArray0[0] = classificationViaRegression0;
      classificationViaRegressionArray0[1] = classificationViaRegression0;
      classificationViaRegressionArray0[2] = classificationViaRegression0;
      classificationViaRegressionArray0[3] = classificationViaRegression0;
      classificationViaRegressionArray0[4] = classificationViaRegression0;
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      classificationViaRegressionArray0[5] = classificationViaRegression1;
      classificationViaRegressionArray0[6] = classificationViaRegression0;
      classificationViaRegressionArray0[7] = classificationViaRegression0;
      instances0.toArray(classificationViaRegressionArray0);
      evaluation0.numFalseNegatives((-1067));
      evaluation0.toSummaryString();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      try { 
        inputMappedClassifier0.getModelHeader((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getOptions();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      LinkedList<NaiveBayesMultinomial> linkedList0 = new LinkedList<NaiveBayesMultinomial>();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      assertTrue(boolean0);
      
      LWL lWL0 = new LWL();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      IBk iBk0 = new IBk();
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      textDirectoryLoader0.listOptions();
      Attribute attribute0 = new Attribute(".arff", instances0, 0);
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      Evaluation evaluation1 = new Evaluation(instances0);
      String[] stringArray0 = new String[6];
      textDirectoryLoader0.listOptions();
      evaluation0.unweightedMacroFmeasure();
      evaluation1.kappa();
      instances0.sort(1506);
      evaluation0.toMatrixString("@relation");
      Evaluation.main(stringArray0);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.meanPriorAbsoluteError();
      LMT lMT0 = new LMT();
      assertFalse(lMT0.getSplitOnResiduals());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      LinkedList<NaiveBayesMultinomial> linkedList0 = new LinkedList<NaiveBayesMultinomial>();
      instances0.containsAll(linkedList0);
      LWL lWL0 = new LWL();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Object object0 = new Object();
      try { 
        evaluation1.evaluateModel((Classifier) lWL0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        Evaluation.handleCostOption("B#E", (-1948));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.areaUnderROC((-1));
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.incorrect();
      evaluation0.setNumericPriorsFromBuffer();
      try { 
        evaluation0.crossValidateModel((Classifier) inputMappedClassifier0, instances0, 7, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Capabilities capabilities0 = principalComponents0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      instances0.toSummaryString();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation.makeOptionString((Classifier) null, false);
      ArffLoader arffLoader0 = new ArffLoader();
      ArffLoader arffLoader1 = new ArffLoader();
      try { 
        arffLoader1.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.avgCost();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute(".arff", instances0, 0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      CostMatrix costMatrix0 = new CostMatrix(0);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix1);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LinkedList<NaiveBayesMultinomial> linkedList0 = new LinkedList<NaiveBayesMultinomial>();
      instances0.containsAll(linkedList0);
      LWL lWL0 = new LWL();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) lWL0, instances0, objectArray0);
      double double0 = evaluation0.m_SumPriorEntropy;
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setDiscardPredictions(false);
      evaluation0.SFEntropyGain();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumClasses(4044);
      Instances instances0 = testInstances0.generate("numNodes");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toMatrixString(" ");
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      double double0 = evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "@data";
      stringArray0[2] = ".bsi";
      Evaluation evaluation1 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 101;
      doubleArray0[5] = (double) 101;
      double double1 = evaluation0.sizeOfPredictedRegions();
      Instances instances1 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation2 = new Evaluation(instances1);
      double double2 = evaluation1.meanPriorAbsoluteError();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.numTrueNegatives((-696));
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.SFMeanEntropyGain();
      assertEquals(double4, double0, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.sizeOfPredictedRegions();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(".arff");
      try { 
        Evaluation.evaluateModel(".arff", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name .arff.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumInstances(622);
      Instances instances1 = testInstances0.generate(".bsi");
      instances1.toSummaryString();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3671.526321506;
      doubleArray0[4] = 3671.526321506;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      MultiScheme multiScheme0 = new MultiScheme();
      try { 
        evaluation0.evaluateModel((Classifier) multiScheme0, instances1, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      String string0 = Evaluation.getGlobalInfo(classificationViaRegression0);
      assertEquals("\nSynopsis for weka.classifiers.meta.ClassificationViaRegression:\n\nClass for doing classification using regression methods. Class is binarized and one regression model is built for each class value. For more information, see, for example\n\nE. Frank, Y. Wang, S. Inglis, G. Holmes, I.H. Witten (1998). Using model trees for classification. Machine Learning. 32(1):63-76.", string0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Stacking stacking0 = new Stacking();
      Evaluation.makeOptionString(stacking0, false);
      LMT lMT0 = new LMT();
      assertEquals(1, lMT0.graphType());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.makeOptionString(zeroR0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Stacking stacking0 = new Stacking();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "' is unknown!";
      try { 
        Evaluation.evaluateModel((Classifier) stacking0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.Stacking:
         // 
         // -M <scheme specification>
         // \tFull name of meta classifier, followed by options.
         // \t(default: \"weka.classifiers.rules.Zero\")
         // -X <number of folds>
         // \tSets the number of cross-validation folds.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -num-slots <num>
         // \tNumber of execution slots.
         // \t(default 1 - i.e. no parallelism)
         // -B <classifier specification>
         // \tFull class name of classifier to include, followed
         // \tby scheme options. May be specified multiple times.
         // \t(default: \"weka.classifiers.rules.ZeroR\")
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = new String[1];
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      J48 j48_0 = new J48();
      j48_0.setCollapseTree(false);
      try { 
        Evaluation.wekaStaticWrapper(j48_0, "b=;BggZB<vMIM_kT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, "getRevision");
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-1620));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3671.526321506;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      capabilities0.toSource("^9A'ws?OU~5+q3");
      evaluation0.weightedFalsePositiveRate();
      evaluation0.weightedTruePositiveRate();
      evaluation0.useNoPriors();
      costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = costSensitiveClassifier0.getCostMatrix();
      assertSame(costMatrix1, costMatrix0);
  }
}
