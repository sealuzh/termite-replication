/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 01:13:32 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of((-2147485061L));
      range0.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3844894049549885
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Long long0 = new Long(127L);
      Range range0 = Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 127L, 127L);
      range0.complement(range1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2688293237435406
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(524L, 524L);
      Range range1 = Range.of(524L, 524L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775533L);
      range2.equals(range0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0561774276369764
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-1L), 9223372036854775543L);
      range0.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin((-1L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.ofLength(230L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = null;
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1342954248533537
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(9223372036854775687L, 9223372036854775687L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(9223372036854775687L, 9223372036854775807L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(30L);
      Range range1 = Range.of(1L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(9223372036854775654L, 9223372036854775654L);
      Range range1 = Range.ofLength(9223372036854774780L);
      range1.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9796434918932646
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(9223372036854775687L, 9223372036854775687L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.equals(range1);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, 3682L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(4294966448L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2119L, 2119L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of((-1L), 127L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(4294966448L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775687L);
      boolean boolean0 = range0.equals((Object) null);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1310));
      boolean boolean1 = range0.equals(integer0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.of(65535L);
      Range range0 = Range.of(65535L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0600949885294986
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of((-2770L));
      Range range1 = Range.of(9223372036854775553L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2770 would make range [9223372036854775553 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.492773693672334
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2914L), (-128L));
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem1, (-1725L), (-128L));
      Range range0 = range_Builder2.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Range range1 = Range.of(0L, (-1L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem2.toString();
      Long long0 = new Long((-2914L));
      long long1 = range1.getBegin(range_CoordinateSystem1);
      assertEquals(1L, long1);
      
      Range.of((-1803L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      
      range1.toString(range_CoordinateSystem0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.494174641155237
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.of(255L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      //  // Unstable assertion: assertEquals(4, list2.size());
      
      Range range2 = Range.ofLength(255L);
      Range range3 = Range.ofLength(121L);
      boolean boolean0 = range2.equals(range3);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8930409038663316
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range range1 = Range.ofLength(255L);
      String string0 = range1.toString();
      assertEquals("[ 0 .. 254 ]/0B", string0);
      
      boolean boolean0 = range1.isSubRangeOf(range0);
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1334393520871684
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1261L, 1261L);
      Integer integer0 = new Integer(2142711462);
      String string0 = range0.toString();
      assertEquals("[ 1261 .. 1260 ]/0B", string0);
      
      Range range1 = Range.of(range_CoordinateSystem0, (long) 2142711462, (long) 2142711462);
      range0.equals(range1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of((-723L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.97613471996344
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getBegin();
      range0.equals((Object) null);
      Object object0 = new Object();
      range0.equals("c1f8lA2RW9qPidAXSw");
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(2684L);
      Range range1 = Range.of(2941L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(2684L);
      Range range1 = Range.of(2941L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of((-2147483677L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=4.025439714303088
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
      
      range_Builder0.contractBegin(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(630L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offer(range1);
      linkedList0.add(range0);
      List<Range> list0 = range1.complementFrom(linkedList0);
      Range range2 = Range.of(4865L);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range1.equals(list0);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0587765179553648
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of((-5L), (-4L));
      Range range1 = Range.of((-5L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-5L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), 32767L);
      range0.getLength();
      Integer integer0 = new Integer((-2434));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(";OXxX<HY:GwZAADLxO&", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ;OXxX<HY:GwZAADLxO& into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7964122534878726
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(9223372036854775687L);
      range0.equals(range0);
      Object object0 = new Object();
      Range range1 = Range.of(9223372036854775687L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.756567486033716
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractBegin(0L);
      Range.Builder range_Builder2 = range_Builder1.copy();
      range_Builder2.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 0L, (-1L));
      Range range0 = range_Builder3.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offer(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      Range range1 = Range.of(4294966447L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      boolean boolean1 = range1.equals(list0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertEquals(2, list0.size());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of((-1L), 65535L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      range0.equals((Object) null);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.205347498399507
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 1L);
      Range range0 = Range.of(53L);
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 647L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem1);
      range0.startsBefore(range1);
      Range.Comparators.values();
      range1.getEnd(range_CoordinateSystem1);
      range1.endsBefore(range0);
      range0.split(1L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 1L, (-564L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.97613471996344
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of((-1L), 9223372036854775543L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift(9223372036854775543L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -530 would make range [9223372036854775542 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.5876867486603277
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(2147483647L, long0);
      
      Object object0 = new Object();
      Range range1 = Range.of(2147483647L, 2147483647L);
      range1.complement(range0);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      
      range0.equals("");
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.4406221852733103
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Long long0 = new Long(32767L);
      Range range0 = Range.ofLength(32767L);
      Range range1 = Range.of(32767L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.059454851967032
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of((-5L), (-4L));
      Range range1 = Range.of((-5L));
      boolean boolean0 = range1.isSubRangeOf(range0);
      boolean boolean1 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.7949261191919432
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(248L, 250L);
      Range range1 = Range.of(250L);
      range1.spliterator();
      String string0 = range1.toString();
      assertEquals("[ 250 .. 250 ]/0B", string0);
      
      Object object0 = new Object();
      Range range2 = Range.of(248L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 248L, 2761L);
      Range range3 = Range.of(248L);
      List<Range> list0 = range1.complement(range3);
      List<Range> list1 = range1.complementFrom(list0);
      assertNotSame(range3, range0);
      assertTrue(list1.isEmpty());
      assertSame(range3, range2);
      
      Range range4 = Range.of(30L);
      range4.complement(range1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2672123781537596
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Comparators.values();
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 1872L, 1872L);
      Range range1 = Range.of((-2117L));
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.137315169336513
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(9223372036854775687L, 9223372036854775687L);
      Long long0 = new Long(9223372036854775687L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 9223372036854775786L);
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775786L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(9223372036854775687L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(9223372036854775543L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.ofLength(1780L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      Object object1 = new Object();
      Integer integer0 = new Integer((-1310));
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of((-1L));
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.061245653757834
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = 1261L;
      long long1 = 2147483647L;
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of((-1031L));
      range1.getEnd();
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1031 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of(30L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(4294966448L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.6916065998081296
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.of((-9223372036854775808L));
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
      
      long long0 = range0.getEnd();
      assertEquals((-9223372036854775808L), long0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.589250338662974
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of((-2311L), (-2311L));
      Range range1 = Range.of((-1172L), 0L);
      range1.spliterator();
      range1.spliterator();
      Range range2 = Range.of((-2151L));
      Range range3 = Range.of((-2151L), (-1172L));
      range0.iterator();
      range3.iterator();
      Range range4 = range0.intersection(range1);
      Object object0 = new Object();
      long long0 = range2.getLength();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      range2.intersects(range4);
      assertNotSame(range2, range3);
      
      List<Range> list0 = range4.complement(range0);
      assertFalse(list0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range4.getBegin(range_CoordinateSystem0);
      assertTrue(range4.isEmpty());
      assertTrue(long1 == long0);
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=4.025459623715262
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-2311L), (-2311L));
      Range range1 = Range.of((-1172L), 0L);
      range1.spliterator();
      range1.spliterator();
      Range.of((-2151L));
      Range range2 = Range.of(255L);
      range0.iterator();
      range2.iterator();
      Range range3 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, (-32768L), 2430L);
      List<Range> list0 = range0.complement(range3);
      range1.complementFrom(list0);
      Range.of(365L);
      List<Range> list1 = range2.complement(range4);
      //  // Unstable assertion: assertFalse(list1.contains(range2));
      //  // Unstable assertion: assertEquals(1, list1.size());
      
      range1.intersection(range3);
      //  // Unstable assertion: assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8896985514868954
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(4294967308L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of((-3216L));
      Object object0 = new Object();
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of(2684L, 4294967295L);
      Long long0 = new Long(2941L);
      range0.equals(long0);
      long long1 = 601L;
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 601L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(841L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(2684L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.1341068345657535
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(2947L);
      Range range1 = Range.of(9223372036854774443L);
      Long long0 = new Long((-825L));
      boolean boolean0 = range0.equals(long0);
      boolean boolean1 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.1345528251107537
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(53L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 53 .. 54 ]/SB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Object object0 = new Object();
      Range.Comparators.values();
      Range range1 = Range.parseRange("[ 53 .. 54 ]/SB", range_CoordinateSystem1);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.9847615119070143
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(849L, 65570L);
      range0.split(849L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.9805588237010445
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(0L, 9223372036854775468L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775468L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -681 would make range [9223372036854775468 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-903L), (-903L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.204601925240141
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 255 .. 256 ]/SB", string0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 255L, 1520L);
      Range range1 = Range.parseRange("[ 255 .. 256 ]/SB");
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.05725704976923
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("[ -1 .. 0 ]/SB", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.8929447777488657
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-1L), 9223372036854775543L);
      Range range1 = Range.of((-2147483677L), (-1L));
      boolean boolean0 = range1.isSubRangeOf(range0);
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-9223372036854775808L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.892632114903634
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of((-657L), (-1L));
      Range range1 = Range.of((-899L), 255L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(4294967308L);
      long long0 = range0.getEnd();
      assertEquals(4294967307L, long0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1261L, 1261L);
      Integer integer0 = new Integer(2142711462);
      boolean boolean0 = range0.endsBefore(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(1261L, 9223372036854775807L);
      range0.equals((Object) null);
      Long long0 = new Long(4294967295L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 9223372036854775543L);
      Integer integer0 = new Integer((-2434));
      boolean boolean0 = range0.equals(integer0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2218L, 9223372036854775554L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.7964122534878726
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(30L);
      Range range1 = Range.of(1L);
      long long0 = range1.getBegin();
      assertEquals(1L, long0);
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      Integer integer0 = new Integer(34);
      boolean boolean0 = range0.equals(integer0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 4294967295L, 4294967295L);
      long long0 = (-1426L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.2679158250435196
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1230L, 1230L);
      range0.toString(range_CoordinateSystem1);
      Range range1 = Range.of((-4768L));
      range1.equals(range0);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 1230 .. 1229 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 1230 .. 1229 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1261L, 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 3726L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.7964122534878726
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(121L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2422L, 2422L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.2670942167452757
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1872L, 1872L);
      Range range1 = Range.of((-2117L));
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.794110516722859
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775654L);
      Long long0 = new Long(9223372036854775654L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1259L));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.8930409038663316
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-657L), (-657L));
      Range range1 = Range.of((-2210L), 113L);
      range1.startsBefore(range0);
      Object object0 = new Object();
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.of(4294967322L, 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.892400767303865
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of((-657L), (-657L));
      Range range1 = Range.of((-2210L), 113L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-4218L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4218 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.892740633623113
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of((-657L), (-657L));
      Range range1 = Range.of((-115L), 2059L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      boolean boolean1 = range1.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.689532269643912
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(2941L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 2941 ]/RB", string0);
      
      range0.startsBefore(range0);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(4294966448L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(4294966448L, long0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.201877361596037
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = range0.getEnd();
      assertEquals((-1L), long0);
      
      Range range1 = Range.of(0L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range1));
      
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(524L, 9223372036854775807L);
      range_Builder0.contractEnd(524L);
      Range range0 = range_Builder0.build();
      long long0 = range0.getLength();
      assertEquals(9223372036854774760L, long0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = 2147483647L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      long long1 = 0L;
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854775807L);
      range_Builder1.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.ofLength(716L);
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = 10090L;
      Range range0 = Range.ofLength(10090L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.9778643962668743
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-4L), 0L);
      Range range0 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      linkedList0.add(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-894L), (-894L));
      range0.intersects(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(1174L);
      List<Range> list0 = range0.split(1174L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2331L), 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.135701624917272
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-1259L));
      Range range1 = Range.of((-324L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.toString(range_CoordinateSystem0);
      range1.getEnd();
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.ofLength(157L);
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.05979471828628
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.iterator();
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
      
      Object object0 = new Object();
      Range range1 = Range.of(0L);
      Range range2 = range1.asRange();
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse d into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.9782399831213344
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-903L), (-903L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
      
      range1.intersection(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.796702740052869
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = 2941L;
      Range range0 = Range.of(2941L);
      Range range1 = Range.of(1393L);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("}fjbc+[(eBPb#'q", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse }fjbc+[(eBPb#'q into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.893222375602109
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of((-272L), (-272L));
      Range range1 = Range.of((-2244L), (-666L));
      range1.endsBefore(range0);
      Object object0 = new Object();
      range0.isSubRangeOf(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-120L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.toString();
      Long long0 = new Long(2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.793494183903136
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      Integer integer0 = new Integer(34);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.6884526475116584
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      range0.toString();
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-32768L));
      range0.equals(object0);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-3755L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(86L);
      long long0 = range0.getLength();
      assertEquals(86L, long0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.976432073516815
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-903L), (-903L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      String string0 = range0.toString();
      assertEquals("[ -903 .. -904 ]/0B", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2748L), (-119L));
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.parseRange("M!", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse M! into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of((-128L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.327189247670674
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Long long0 = new Long(1565L);
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      List<Range> list0 = range0.complement(range1);
      assertTrue(range1.isEmpty());
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      String string0 = "KP^";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("KP^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.KP^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-9223372036854775196L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775197 would make range [4294967295 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.8940784789052407
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range0.intersection(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.3305955430090957
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of((-1876L), (-1876L));
      Long long0 = new Long((-1876L));
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.2015566946087035
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin(0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, (-1849L), (-1849L));
      Range range0 = range_Builder2.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(range0.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.063623097514588
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-657L), (-657L));
      Range range1 = Range.of((-2210L), 113L);
      boolean boolean0 = range1.startsBefore(range0);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      range1.equals(range0);
      List<Range> list0 = range1.complement(range0);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.9787338102818284
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-903L), (-903L));
      Range range1 = Range.of(range_CoordinateSystem0, (-903L), (-903L));
      range0.complement(range1);
      Object object0 = new Object();
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.798520052343639
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L));
      range0.intersection(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(2684L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(2684L, long0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of((-1519L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin(0L);
      String string0 = "Z.%!B";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Z.%!B", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Z.%!B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of(4294968073L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. -1 ]/0B", string0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.976432073516815
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-60L));
      range0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-127L), long0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = 9223372036854775687L;
      Range range0 = Range.ofLength(9223372036854775687L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775011L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.ofLength(230L);
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.ofLength(4294967308L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.687420655767592
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of((-1L));
      String string0 = range0.toString();
      assertEquals("[ -1 .. -1 ]/0B", string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of((-274L));
      Spliterator<Long> spliterator0 = range0.spliterator();
      assertNotNull(spliterator0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.ofLength(1639L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin((-1L));
      range_Builder0.expandBegin((-1L));
      range_Builder0.expandEnd((-1L));
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long long0 = 255L;
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long long0 = 1261L;
      Range.Builder range_Builder0 = new Range.Builder(1333L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(9223372036854774433L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long long0 = 1354L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1354L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      long long0 = 0L;
      long long1 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      String string0 = "";
      range_Builder0.shift(0L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-1L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.6910517378300467
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range range0 = Range.of((-32771L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range range0 = Range.of((-3234L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-32768L), (-32768L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854772867L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775543L, (-915L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -916 would make range [9223372036854775542 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
