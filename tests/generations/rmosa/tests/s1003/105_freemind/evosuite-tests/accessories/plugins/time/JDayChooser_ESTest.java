/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 08 05:15:57 GMT 2020
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.filemode.FileMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentListener;
import java.awt.event.FocusEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.DirectColorModel;
import java.beans.PropertyChangeListener;
import java.sql.Time;
import java.util.Date;
import java.util.Locale;
import javax.help.ForwardAction;
import javax.swing.ActionMap;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicLabelUI;
import javax.swing.plaf.basic.BasicScrollBarUI;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.script.InterpreterPool;
import org.apache.fop.image.FopImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertNotNull(jDayChooser0);
      
      DirectColorModel directColorModel0 = (DirectColorModel)jDayChooser0.getColorModel();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(3, directColorModel0.getTransparency());
      assertTrue(directColorModel0.hasAlpha());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertEquals(4, directColorModel0.getNumComponents());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals(255, directColorModel0.getBlueMask());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertNotNull(directColorModel0);
      
      jDayChooser0.setMaxDayCharacters(1);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertNull(jButton0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setDay(2156);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      Container container0 = jDayChooser0.getTopLevelAncestor();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNull(container0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, 1338L, 1149, 37, '|');
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(1088, keyEvent0.getModifiersEx());
      assertEquals(1338L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(33, keyEvent0.getID());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(37, keyEvent0.getKeyCode());
      assertEquals('|', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(61, keyEvent0.getModifiers());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(27, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(1088, keyEvent0.getModifiersEx());
      assertEquals(1338L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(33, keyEvent0.getID());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(37, keyEvent0.getKeyCode());
      assertEquals('|', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(61, keyEvent0.getModifiers());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      jDayChooser0.dayNames = stringArray0;
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jDayChooser0.setDayBordersVisible(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      Locale locale0 = jDayChooser0.getLocale();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNull(color0);
      
      jDayChooser0.setEnabled(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      Color color1 = jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNull(color1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7408472649052253
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      DirectColorModel directColorModel0 = (DirectColorModel)jDayChooser0.getColorModel();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals(255, directColorModel0.getBlueMask());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals(3, directColorModel0.getTransparency());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(4, directColorModel0.getNumComponents());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertTrue(directColorModel0.hasAlpha());
      assertNotNull(directColorModel0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.setDay(2156);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1369, 2156, 1149, 36, 'l');
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(1369, keyEvent0.getID());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(36, keyEvent0.getKeyCode());
      assertEquals(61, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(1088, keyEvent0.getModifiersEx());
      assertEquals(2156L, keyEvent0.getWhen());
      assertEquals('l', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isControlDown());
      assertNotNull(keyEvent0);
      
      String string0 = KeyEvent.getKeyText(1369);
      assertEquals("Unknown keyCode: 0x559", string0);
      assertNotNull(string0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(1369, keyEvent0.getID());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(36, keyEvent0.getKeyCode());
      assertEquals(61, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(1088, keyEvent0.getModifiersEx());
      assertEquals(2156L, keyEvent0.getWhen());
      assertEquals('l', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isControlDown());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.setDay(10155);
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.drawDays();
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 20, 1535L, 39, 39, 'C');
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals('C', keyEvent0.getKeyChar());
      assertEquals(8640, keyEvent0.getModifiersEx());
      assertEquals(39, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(20, keyEvent0.getID());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(39, keyEvent0.getModifiers());
      assertEquals(1535L, keyEvent0.getWhen());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals('C', keyEvent0.getKeyChar());
      assertEquals(8640, keyEvent0.getModifiersEx());
      assertEquals(39, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(20, keyEvent0.getID());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(39, keyEvent0.getModifiers());
      assertEquals(1535L, keyEvent0.getWhen());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      assertNotNull(basicLabelUI0);
      
      jDayChooser0.removePropertyChangeListener((PropertyChangeListener) basicLabelUI0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      DirectColorModel directColorModel0 = (DirectColorModel)jDayChooser0.getColorModel();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(3, directColorModel0.getTransparency());
      assertEquals(4, directColorModel0.getNumComponents());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals(255, directColorModel0.getBlueMask());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertTrue(directColorModel0.hasAlpha());
      assertNotNull(directColorModel0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      ActionEvent actionEvent0 = new ActionEvent("0", 953, "0", 953, 953);
      assertEquals(953, actionEvent0.getModifiers());
      assertEquals("0", actionEvent0.getActionCommand());
      assertEquals(953L, actionEvent0.getWhen());
      assertEquals(953, actionEvent0.getID());
      assertNotNull(actionEvent0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)35;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      assertArrayEquals(new byte[] {(byte)118, (byte)64, (byte)21, (byte)35}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(imageIcon0);
      
      JButton jButton0 = new JButton((String) null, imageIcon0);
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jButton0.isFocusCycleRoot());
      assertFalse(jButton0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertArrayEquals(new byte[] {(byte)118, (byte)64, (byte)21, (byte)35}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(jButton0);
      
      ActionEvent actionEvent1 = new ActionEvent(jButton0, 368, "day", 368);
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jButton0.isFocusCycleRoot());
      assertFalse(jButton0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertEquals(368, actionEvent1.getModifiers());
      assertEquals(0L, actionEvent1.getWhen());
      assertEquals(368, actionEvent1.getID());
      assertEquals("day", actionEvent1.getActionCommand());
      assertArrayEquals(new byte[] {(byte)118, (byte)64, (byte)21, (byte)35}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(actionEvent1);
      assertFalse(actionEvent1.equals((Object)actionEvent0));
      
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.778080565692354
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      DirectColorModel directColorModel0 = (DirectColorModel)jDayChooser0.getColorModel();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(directColorModel0.hasAlpha());
      assertEquals(3, directColorModel0.getTransparency());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(255, directColorModel0.getBlueMask());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals(4, directColorModel0.getNumComponents());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertNotNull(directColorModel0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDay(2156);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1149, 1338L, 10155, 33, '|');
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(10112, keyEvent0.getModifiersEx());
      assertEquals(43, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isAltDown());
      assertEquals(33, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('|', keyEvent0.getKeyChar());
      assertEquals(1338L, keyEvent0.getWhen());
      assertEquals(1149, keyEvent0.getID());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertNotNull(keyEvent0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.requestFocusInWindow();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(boolean0);
      
      MouseEvent mouseEvent0 = new MouseEvent(jDayChooser0, 2406, 3794L, (-693), 39, (-693), 1, true);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals((-693), mouseEvent0.getY());
      assertEquals((-2147483637), mouseEvent0.getModifiers());
      assertFalse(mouseEvent0.isMetaDown());
      assertTrue(mouseEvent0.isAltDown());
      assertEquals(2406, mouseEvent0.getID());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertFalse(mouseEvent0.isAltGraphDown());
      assertEquals(3794L, mouseEvent0.getWhen());
      assertEquals(1, mouseEvent0.getClickCount());
      assertTrue(mouseEvent0.isControlDown());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertTrue(mouseEvent0.isShiftDown());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(39, mouseEvent0.getX());
      assertEquals(0, mouseEvent0.getButton());
      assertFalse(mouseEvent0.isConsumed());
      assertNotNull(mouseEvent0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 47, (-913L), 799, 39, 'C');
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isAltDown());
      assertEquals((-913L), keyEvent0.getWhen());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(47, keyEvent0.getID());
      assertEquals(768, keyEvent0.getModifiersEx());
      assertEquals(39, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(31, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('C', keyEvent0.getKeyChar());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(15, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertTrue(keyEvent0.isAltDown());
      assertEquals((-913L), keyEvent0.getWhen());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(47, keyEvent0.getID());
      assertEquals(768, keyEvent0.getModifiersEx());
      assertEquals(39, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(31, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('C', keyEvent0.getKeyChar());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.746209545491266
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      DirectColorModel directColorModel0 = (DirectColorModel)jDayChooser0.getColorModel();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(3, directColorModel0.getTransparency());
      assertEquals(4, directColorModel0.getNumComponents());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals(255, directColorModel0.getBlueMask());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertTrue(directColorModel0.hasAlpha());
      assertNotNull(directColorModel0);
      
      jDayChooser0.setMaxDayCharacters(1);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(238, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(228, color0.getGreen());
      assertEquals(210, color0.getRed());
      assertEquals((-2956050), color0.getRGB());
      assertNotNull(color0);
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, '(', '(', 0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, keyEvent0.getID());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(0, keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(40, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(0L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals('(', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isControlDown());
      assertNotNull(keyEvent0);
      
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 0, (-1L), 90, 18, '(', 0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(keyEvent1.isMetaDown());
      assertEquals(64, keyEvent1.getModifiersEx());
      assertFalse(keyEvent1.isConsumed());
      assertEquals(18, keyEvent1.getKeyCode());
      assertEquals('(', keyEvent1.getKeyChar());
      assertEquals((-1L), keyEvent1.getWhen());
      assertTrue(keyEvent1.isControlDown());
      assertFalse(keyEvent1.isAltGraphDown());
      assertTrue(keyEvent1.isAltDown());
      assertFalse(keyEvent1.isActionKey());
      assertFalse(keyEvent1.isShiftDown());
      assertEquals(0, keyEvent1.getID());
      assertEquals(26, keyEvent1.getModifiers());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertNotNull(keyEvent1);
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      
      keyEvent1.consume();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(keyEvent1.isConsumed());
      assertFalse(keyEvent1.isMetaDown());
      assertEquals(64, keyEvent1.getModifiersEx());
      assertEquals(18, keyEvent1.getKeyCode());
      assertEquals('(', keyEvent1.getKeyChar());
      assertEquals((-1L), keyEvent1.getWhen());
      assertTrue(keyEvent1.isControlDown());
      assertFalse(keyEvent1.isAltGraphDown());
      assertTrue(keyEvent1.isAltDown());
      assertFalse(keyEvent1.isActionKey());
      assertFalse(keyEvent1.isShiftDown());
      assertEquals(0, keyEvent1.getID());
      assertEquals(26, keyEvent1.getModifiers());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertNotSame(keyEvent1, keyEvent0);
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(21, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, keyEvent0.getID());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(0, keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(40, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(0L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals('(', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isControlDown());
      assertNotSame(keyEvent0, keyEvent1);
      assertFalse(keyEvent0.equals((Object)keyEvent1));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "12");
      assertFalse(boolean0);
      
      InputMethodListener inputMethodListener1 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z](Y ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener1);
      assertSame(inputMethodListener2, inputMethodListener0);
      assertNotSame(inputMethodListener2, inputMethodListener1);
      assertNotNull(inputMethodListener2);
      assertFalse(inputMethodListener2.equals((Object)inputMethodListener1));
      
      InputMethodListener inputMethodListener3 = AWTEventMulticaster.add(inputMethodListener2, inputMethodListener2);
      assertSame(inputMethodListener2, inputMethodListener0);
      assertNotSame(inputMethodListener2, inputMethodListener1);
      assertNotNull(inputMethodListener3);
      assertFalse(inputMethodListener2.equals((Object)inputMethodListener1));
      
      jDayChooser0.removeInputMethodListener(inputMethodListener3);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertSame(inputMethodListener2, inputMethodListener0);
      assertNotSame(inputMethodListener2, inputMethodListener1);
      assertFalse(inputMethodListener2.equals((Object)inputMethodListener1));
      
      boolean boolean3 = jDayChooser0.isDayBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      Date date0 = jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, color0.getBlue());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-6029312), color0.getRGB());
      assertNotNull(color0);
      
      jDayChooser0.setDayBordersVisible(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, int0);
      
      jDayChooser0.setMonth(0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.removeAll();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertSame(date1, date0);
      assertSame(date0, date1);
      assertNotNull(date1);
      
      Date date2 = jDayChooser0.setMinSelectableDate(date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date2.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertSame(date2, date1);
      assertSame(date2, date0);
      assertSame(date0, date2);
      assertSame(date0, date1);
      assertNotNull(date2);
      
      int int1 = jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(31, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Locale locale0 = jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      jDayChooser0.setDay(2469);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(31, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      boolean boolean4 = jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(31, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(31, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(31, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      Locale locale1 = jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(31, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      jDayChooser0.setDay(2469);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(31, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      Color color1 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(31, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(164, color1.getRed());
      assertEquals((-6029312), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(0, color1.getGreen());
      assertEquals(0, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertSame(color1, color0);
      assertNotNull(color1);
      
      boolean boolean5 = jDayChooser0.isDayBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(31, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7329045285804874
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      DirectColorModel directColorModel0 = (DirectColorModel)jDayChooser0.getColorModel();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(3, directColorModel0.getTransparency());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertTrue(directColorModel0.hasAlpha());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(255, directColorModel0.getBlueMask());
      assertEquals(4, directColorModel0.getNumComponents());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertNotNull(directColorModel0);
      
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.setDay(10155);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 10155, 1535L, 10155, 42, 'C');
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals('C', keyEvent0.getKeyChar());
      assertEquals(42, keyEvent0.getKeyCode());
      assertEquals(10112, keyEvent0.getModifiersEx());
      assertEquals(10155, keyEvent0.getID());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(1535L, keyEvent0.getWhen());
      assertEquals(43, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isAltGraphDown());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals('C', keyEvent0.getKeyChar());
      assertEquals(42, keyEvent0.getKeyCode());
      assertEquals(10112, keyEvent0.getModifiersEx());
      assertEquals(10155, keyEvent0.getID());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(1535L, keyEvent0.getWhen());
      assertEquals(43, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isAltGraphDown());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(90, color0.getGreen());
      assertEquals(164, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals((-16754012), color0.getRGB());
      assertNotNull(color0);
      
      PropertyChangeListener[] propertyChangeListenerArray0 = jDayChooser0.getPropertyChangeListeners("23");
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, propertyChangeListenerArray0.length);
      assertNotNull(propertyChangeListenerArray0);
      
      jDayChooser0.setDay((-275));
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.setYear((-275));
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNotNull(jDayChooser0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1278, 2406, 40);
      assertNotNull(mockGregorianCalendar0);
      
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1278,MONTH=2406,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=40,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertNotNull(jPanel0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      DirectColorModel directColorModel0 = (DirectColorModel)jDayChooser0.getColorModel();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(directColorModel0.hasAlpha());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertEquals(3, directColorModel0.getTransparency());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals(4, directColorModel0.getNumComponents());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals(255, directColorModel0.getBlueMask());
      assertNotNull(directColorModel0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertNotNull(locale0);
      
      float float0 = jDayChooser0.getAlignmentX();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0.5F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      MouseEvent mouseEvent0 = new MouseEvent(jDayChooser0, (-275), 5270400000L, (-275), (-275), (-275), (-4264), true);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals((-4264), mouseEvent0.getClickCount());
      assertTrue(mouseEvent0.isAltDown());
      assertTrue(mouseEvent0.isShiftDown());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(5270400000L, mouseEvent0.getWhen());
      assertFalse(mouseEvent0.isControlDown());
      assertTrue(mouseEvent0.isMetaDown());
      assertEquals((-2147483603), mouseEvent0.getModifiers());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals((-275), mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals((-275), mouseEvent0.getX());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals((-275), mouseEvent0.getID());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertTrue(mouseEvent0.isAltGraphDown());
      assertNotNull(mouseEvent0);
      
      Point point0 = jDayChooser0.getToolTipLocation(mouseEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals((-4264), mouseEvent0.getClickCount());
      assertTrue(mouseEvent0.isAltDown());
      assertTrue(mouseEvent0.isShiftDown());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(5270400000L, mouseEvent0.getWhen());
      assertFalse(mouseEvent0.isControlDown());
      assertTrue(mouseEvent0.isMetaDown());
      assertEquals((-2147483603), mouseEvent0.getModifiers());
      assertFalse(mouseEvent0.isConsumed());
      assertEquals((-275), mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals((-275), mouseEvent0.getX());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals((-275), mouseEvent0.getID());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertTrue(mouseEvent0.isAltGraphDown());
      assertNull(point0);
      
      jDayChooser0.setDay((-275));
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setYear((-275));
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      PropertyChangeListener[] propertyChangeListenerArray0 = jDayChooser0.getPropertyChangeListeners("23");
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, propertyChangeListenerArray0.length);
      assertNotNull(propertyChangeListenerArray0);
      
      jDayChooser0.setDay((-275));
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setYear(2731);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters(15);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      jDayChooser1.setDecorationBackgroundVisible(false);
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      Color color0 = Color.BLUE;
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      assertEquals("http://www.w3.org/2000/svg", sVGColorProfileElementBridge0.getNamespaceURI());
      assertEquals("color-profile", sVGColorProfileElementBridge0.getLocalName());
      assertNotNull(sVGColorProfileElementBridge0);
      
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      assertEquals(0.26458332F, userAgentAdapter0.getPixelToMM(), 0.01F);
      assertFalse(userAgentAdapter0.isXMLParserValidating());
      assertEquals(0.26458332F, userAgentAdapter0.getPixelUnitToMillimeter(), 0.01F);
      assertEquals(12.0F, userAgentAdapter0.getMediumFontSize(), 0.01F);
      assertNull(userAgentAdapter0.getUserStyleSheetURI());
      assertEquals("Arial, Helvetica, sans-serif", userAgentAdapter0.getDefaultFontFamily());
      assertNull(userAgentAdapter0.getAlternateStyleSheet());
      assertEquals("all", userAgentAdapter0.getMedia());
      assertEquals("en", userAgentAdapter0.getLanguages());
      assertNotNull(userAgentAdapter0);
      
      InterpreterPool interpreterPool0 = new InterpreterPool();
      assertNotNull(interpreterPool0);
      
      int int0 = jDayChooser1.getDaysInMonth();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertNotSame(jDayChooser1, jDayChooser0);
      assertEquals(28, int0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      boolean boolean0 = jDayChooser1.isFocusOwner();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(boolean0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      jDayChooser0.unregisterKeyboardAction((KeyStroke) null);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      boolean boolean1 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(boolean1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertTrue(boolean1 == boolean0);
      
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      boolean boolean2 = jDayChooser1.isDecorationBackgroundVisible();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(boolean2);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      DirectColorModel directColorModel0 = (DirectColorModel)jDayChooser0.getColorModel();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(directColorModel0.hasAlpha());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals(4, directColorModel0.getNumComponents());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals(255, directColorModel0.getBlueMask());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals(3, directColorModel0.getTransparency());
      assertNotNull(directColorModel0);
      
      SystemColor systemColor0 = SystemColor.menu;
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getGreen());
      assertEquals((-4144960), systemColor0.getRGB());
      assertNotNull(systemColor0);
      
      ICC_ColorSpace iCC_ColorSpace0 = (ICC_ColorSpace)systemColor0.getColorSpace();
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getGreen());
      assertEquals((-4144960), systemColor0.getRGB());
      assertTrue(iCC_ColorSpace0.isCS_sRGB());
      assertEquals(3, iCC_ColorSpace0.getNumComponents());
      assertEquals(5, iCC_ColorSpace0.getType());
      assertNotNull(iCC_ColorSpace0);
      
      float[] floatArray0 = systemColor0.getRGBComponents((float[]) null);
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getGreen());
      assertEquals((-4144960), systemColor0.getRGB());
      assertArrayEquals(new float[] {0.7529412F, 0.7529412F, 0.7529412F, 1.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      Date date0 = jDayChooser1.setMinSelectableDate((Date) null);
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotSame(jDayChooser1, jDayChooser0);
      assertNotNull(date0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getGreen());
      assertEquals((-4144960), systemColor0.getRGB());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      MockDate mockDate0 = new MockDate(3449L);
      assertNotNull(mockDate0);
      
      jDayChooser1.setSelectableDateRange(date0, mockDate0);
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Thu Jan 01 00:00:03 GMT 1970", mockDate0.toString());
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      jDayChooser1.drawWeeks();
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      jDayChooser1.drawDays();
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      Locale locale0 = jDayChooser0.getLocale();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7622091045067054
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.firePropertyChange("{", false, true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(164, color0.getRed());
      assertNotNull(color0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = color0.getComponents(floatArray0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(164, color0.getRed());
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = color0.getRGBComponents(floatArray0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(164, color0.getRed());
      assertSame(floatArray0, floatArray2);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray2, floatArray0);
      assertSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray2.length);
      assertNotNull(floatArray2);
      
      float[] floatArray3 = color0.getColorComponents(floatArray0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(164, color0.getRed());
      assertSame(floatArray0, floatArray3);
      assertSame(floatArray0, floatArray2);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray3, floatArray0);
      assertSame(floatArray3, floatArray1);
      assertSame(floatArray3, floatArray2);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray3, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray3.length);
      assertNotNull(floatArray3);
      
      ColorSpace colorSpace0 = color0.getColorSpace();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(164, color0.getRed());
      assertTrue(colorSpace0.isCS_sRGB());
      assertEquals(5, colorSpace0.getType());
      assertEquals(3, colorSpace0.getNumComponents());
      assertNotNull(colorSpace0);
      
      jDayChooser0.sundayForeground = color0;
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(164, color0.getRed());
      assertEquals(0, jDayChooser0.sundayForeground.getBlue());
      assertEquals(164, jDayChooser0.sundayForeground.getRed());
      assertEquals((-6029312), jDayChooser0.sundayForeground.getRGB());
      assertEquals(1, jDayChooser0.sundayForeground.getTransparency());
      assertEquals(255, jDayChooser0.sundayForeground.getAlpha());
      assertEquals(0, jDayChooser0.sundayForeground.getGreen());
      
      floatArray0[1] = (-178.8393F);
      floatArray0[2] = 1950.0F;
      floatArray0[3] = (-1203.718F);
      float[] floatArray4 = jDayChooser0.sundayForeground.getRGBComponents(floatArray3);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(164, color0.getRed());
      assertSame(floatArray0, floatArray3);
      assertSame(floatArray0, floatArray2);
      assertSame(floatArray0, floatArray4);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray3, floatArray0);
      assertSame(floatArray3, floatArray4);
      assertSame(floatArray3, floatArray1);
      assertSame(floatArray3, floatArray2);
      assertSame(floatArray4, floatArray1);
      assertSame(floatArray4, floatArray0);
      assertSame(floatArray4, floatArray3);
      assertSame(floatArray4, floatArray2);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray4, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray3.length);
      assertEquals(7, floatArray4.length);
      assertNotNull(floatArray4);
      
      Date date0 = jDayChooser0.setMinSelectableDate((Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      jDayChooser0.setDecorationBackgroundColor(jDayChooser0.sundayForeground);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.setSelectableDateRange(date0, (Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7177454112665718
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, '\"', '\"', 0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(0L, keyEvent0.getWhen());
      assertEquals(34, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getID());
      assertEquals(0, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('\"', keyEvent0.getKeyChar());
      assertNotNull(keyEvent0);
      
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 0, (-1L), 90, 18, '\"', 0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, keyEvent1.getID());
      assertFalse(keyEvent1.isActionKey());
      assertFalse(keyEvent1.isAltGraphDown());
      assertTrue(keyEvent1.isControlDown());
      assertFalse(keyEvent1.isShiftDown());
      assertEquals(18, keyEvent1.getKeyCode());
      assertEquals('\"', keyEvent1.getKeyChar());
      assertFalse(keyEvent1.isConsumed());
      assertEquals(64, keyEvent1.getModifiersEx());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertFalse(keyEvent1.isMetaDown());
      assertEquals((-1L), keyEvent1.getWhen());
      assertEquals(26, keyEvent1.getModifiers());
      assertTrue(keyEvent1.isAltDown());
      assertNotNull(keyEvent1);
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      
      String string0 = keyEvent1.paramString();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, keyEvent1.getID());
      assertFalse(keyEvent1.isActionKey());
      assertFalse(keyEvent1.isAltGraphDown());
      assertTrue(keyEvent1.isControlDown());
      assertFalse(keyEvent1.isShiftDown());
      assertEquals(18, keyEvent1.getKeyCode());
      assertEquals('\"', keyEvent1.getKeyChar());
      assertFalse(keyEvent1.isConsumed());
      assertEquals(64, keyEvent1.getModifiersEx());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertFalse(keyEvent1.isMetaDown());
      assertEquals((-1L), keyEvent1.getWhen());
      assertEquals(26, keyEvent1.getModifiers());
      assertTrue(keyEvent1.isAltDown());
      assertNotSame(keyEvent1, keyEvent0);
      assertEquals("unknown type,keyCode=18,keyText=Alt,keyChar='\"',modifiers=Ctrl+Alt+Button1,extModifiers=Shift,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", string0);
      assertNotNull(string0);
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      
      keyEvent1.consume();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, keyEvent1.getID());
      assertFalse(keyEvent1.isActionKey());
      assertFalse(keyEvent1.isAltGraphDown());
      assertTrue(keyEvent1.isControlDown());
      assertFalse(keyEvent1.isShiftDown());
      assertEquals(18, keyEvent1.getKeyCode());
      assertEquals('\"', keyEvent1.getKeyChar());
      assertEquals(64, keyEvent1.getModifiersEx());
      assertEquals(0, keyEvent1.getKeyLocation());
      assertFalse(keyEvent1.isMetaDown());
      assertTrue(keyEvent1.isConsumed());
      assertEquals((-1L), keyEvent1.getWhen());
      assertEquals(26, keyEvent1.getModifiers());
      assertTrue(keyEvent1.isAltDown());
      assertNotSame(keyEvent1, keyEvent0);
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      Color color0 = Color.getHSBColor(0.0F, 0.0721F, 0.0F);
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      Color color1 = Color.getColor((String) null, color0);
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals((-16777216), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getGreen());
      assertEquals(0, color1.getBlue());
      assertEquals(0, color1.getRed());
      assertSame(color0, color1);
      assertSame(color1, color0);
      assertNotNull(color1);
      
      jDayChooser0.setForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertSame(color0, color1);
      
      int int0 = jDayChooser0.getDaysInMonth();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(28, int0);
      
      boolean boolean0 = jDayChooser0.isFocusOwner();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(boolean0);
      
      jDayChooser0.unregisterKeyboardAction((KeyStroke) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      boolean boolean1 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertSame(color0, color1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      float float0 = jDayChooser0.getAlignmentY();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0.5F, float0, 0.01F);
      
      jDayChooser0.setFont((Font) null);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      ComponentListener[] componentListenerArray0 = jDayChooser0.getComponentListeners();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, componentListenerArray0.length);
      assertNotNull(componentListenerArray0);
      
      jDayChooser0.setFont((Font) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      DirectColorModel directColorModel0 = (DirectColorModel)jDayChooser0.getColorModel();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals(4, directColorModel0.getNumComponents());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals(3, directColorModel0.getTransparency());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals(255, directColorModel0.getBlueMask());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertTrue(directColorModel0.hasAlpha());
      assertEquals(32, directColorModel0.getPixelSize());
      assertNotNull(directColorModel0);
      
      jDayChooser0.setMonth(1373);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6653015383886753
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.requestFocusInWindow();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(boolean0);
      
      DirectColorModel directColorModel0 = (DirectColorModel)jDayChooser0.getColorModel();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertTrue(directColorModel0.hasAlpha());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals(4, directColorModel0.getNumComponents());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(3, directColorModel0.getTransparency());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals(255, directColorModel0.getBlueMask());
      assertNotNull(directColorModel0);
      
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      jDayChooser0.setDay(10155);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      jDayChooser0.setMonth(10155);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(30, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      DirectColorModel directColorModel0 = (DirectColorModel)jDayChooser0.getColorModel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(3, directColorModel0.getTransparency());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(4, directColorModel0.getNumComponents());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertTrue(directColorModel0.hasAlpha());
      assertEquals(255, directColorModel0.getBlueMask());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertNotNull(directColorModel0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      ActionEvent actionEvent0 = new ActionEvent(integer0, 8193, "day", 8193, 8193);
      assertEquals(8193, actionEvent0.getID());
      assertEquals(8193L, actionEvent0.getWhen());
      assertEquals("day", actionEvent0.getActionCommand());
      assertEquals(8193, actionEvent0.getModifiers());
      assertNotNull(actionEvent0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.firePropertyChange("{", false, true);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, color0.getGreen());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-178.8393F);
      floatArray1[1] = (-178.8393F);
      float[] floatArray2 = color0.getRGBComponents(floatArray0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, color0.getGreen());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (-178.8393F);
      floatArray1[4] = (-178.8393F);
      float[] floatArray3 = color0.getColorComponents(floatArray1);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, color0.getGreen());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, (-178.8393F), (-178.8393F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, (-178.8393F), (-178.8393F)}, floatArray3, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray3.length);
      assertNotNull(floatArray3);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      jDayChooser0.sundayForeground = color0;
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, color0.getGreen());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, jDayChooser0.sundayForeground.getBlue());
      assertEquals(164, jDayChooser0.sundayForeground.getRed());
      assertEquals(0, jDayChooser0.sundayForeground.getGreen());
      assertEquals((-6029312), jDayChooser0.sundayForeground.getRGB());
      assertEquals(255, jDayChooser0.sundayForeground.getAlpha());
      assertEquals(1, jDayChooser0.sundayForeground.getTransparency());
      
      floatArray0[1] = (-178.8393F);
      floatArray0[2] = 1950.0F;
      floatArray0[3] = (-1203.718F);
      float[] floatArray4 = color0.getComponents(floatArray3);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, color0.getGreen());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertSame(floatArray4, floatArray1);
      assertNotSame(floatArray4, floatArray2);
      assertSame(floatArray4, floatArray3);
      assertNotSame(floatArray4, floatArray0);
      assertSame(floatArray1, floatArray4);
      assertSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertSame(floatArray3, floatArray4);
      assertSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, (-178.8393F)}, floatArray4, 0.01F);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, (-178.8393F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, (-178.8393F)}, floatArray3, 0.01F);
      assertEquals(5, floatArray4.length);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray3.length);
      assertNotNull(floatArray4);
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray0[4] = 1958.8638F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-2699.0625F);
      float[] floatArray5 = color0.getRGBComponents(floatArray0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, color0.getGreen());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertNotSame(floatArray0, floatArray4);
      assertSame(floatArray0, floatArray5);
      assertSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray5, floatArray3);
      assertNotSame(floatArray5, floatArray1);
      assertNotSame(floatArray5, floatArray4);
      assertSame(floatArray5, floatArray0);
      assertSame(floatArray5, floatArray2);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, 1958.8638F, (-1.0F), (-2699.0625F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, 1958.8638F, (-1.0F), (-2699.0625F)}, floatArray5, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray5.length);
      assertNotNull(floatArray5);
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      Date date0 = jDayChooser0.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{";
      stringArray0[1] = "";
      jDayChooser0.focusGained((FocusEvent) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.firePropertyChange("JDayChooser", false, true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertNotNull(color0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-178.8393F);
      floatArray1[1] = (-178.8393F);
      float[] floatArray2 = color0.getRGBComponents(floatArray0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (-178.8393F);
      floatArray1[4] = (-178.8393F);
      float[] floatArray3 = color0.getColorComponents(floatArray1);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, (-178.8393F), (-178.8393F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, (-178.8393F), (-178.8393F)}, floatArray3, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray3.length);
      assertNotNull(floatArray3);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      
      jDayChooser0.sundayForeground = color0;
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, jDayChooser0.sundayForeground.getBlue());
      assertEquals(164, jDayChooser0.sundayForeground.getRed());
      assertEquals(255, jDayChooser0.sundayForeground.getAlpha());
      assertEquals(0, jDayChooser0.sundayForeground.getGreen());
      assertEquals(1, jDayChooser0.sundayForeground.getTransparency());
      assertEquals((-6029312), jDayChooser0.sundayForeground.getRGB());
      
      floatArray0[1] = (-178.8393F);
      floatArray0[2] = 1950.0F;
      floatArray0[3] = (-178.8393F);
      floatArray0[4] = 1958.8638F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-2699.0625F);
      float[] floatArray4 = color0.getRGBComponents(floatArray0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertNotSame(floatArray0, floatArray3);
      assertSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertSame(floatArray0, floatArray4);
      assertSame(floatArray4, floatArray2);
      assertSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray4, floatArray1);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, 1958.8638F, (-1.0F), (-2699.0625F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.6431373F, 0.0F, 0.0F, 1.0F, 1958.8638F, (-1.0F), (-2699.0625F)}, floatArray4, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray4.length);
      assertNotNull(floatArray4);
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "JDayChooser";
      stringArray0[1] = "";
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      Graphics graphics0 = jDayChooser0.getGraphics();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNull(graphics0);
      
      SystemColor systemColor0 = SystemColor.scrollbar;
      assertEquals((-2039584), systemColor0.getRGB());
      assertEquals(224, systemColor0.getRed());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(224, systemColor0.getBlue());
      assertNotNull(systemColor0);
      
      Color color0 = jDayChooser0.getBackground();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      jDayChooser0.setWeekdayForeground(systemColor0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals((-2039584), systemColor0.getRGB());
      assertEquals(224, systemColor0.getRed());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(224, systemColor0.getBlue());
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(boolean0);
      
      JYearChooser jYearChooser0 = new JYearChooser();
      assertEquals(1, jYearChooser0.getMinimum());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getStartYear());
      assertNotNull(jYearChooser0);
      
      jDayChooser0.setYearChooser(jYearChooser0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(1, jYearChooser0.getMinimum());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getStartYear());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      Graphics graphics0 = jDayChooser0.getGraphics();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNull(graphics0);
      
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.focusLost((FocusEvent) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      SystemColor systemColor0 = SystemColor.scrollbar;
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(224, systemColor0.getRed());
      assertEquals((-2039584), systemColor0.getRGB());
      assertEquals(224, systemColor0.getBlue());
      assertNotNull(systemColor0);
      
      Color color0 = jDayChooser0.getBackground();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16776961), color0.getRGB());
      assertNotNull(color0);
      
      jDayChooser0.setWeekdayForeground(systemColor0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(224, systemColor0.getRed());
      assertEquals((-2039584), systemColor0.getRGB());
      assertEquals(224, systemColor0.getBlue());
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(boolean0);
      
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      assertNotNull(menuSelectionManager0);
      
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1467, 1467, 10127, 7, '~', menuElementArray0, menuSelectionManager0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(15, menuKeyEvent0.getModifiers());
      assertEquals(1467, menuKeyEvent0.getID());
      assertFalse(menuKeyEvent0.isActionKey());
      assertFalse(menuKeyEvent0.isConsumed());
      assertEquals(10112, menuKeyEvent0.getModifiersEx());
      assertTrue(menuKeyEvent0.isAltDown());
      assertTrue(menuKeyEvent0.isControlDown());
      assertEquals('~', menuKeyEvent0.getKeyChar());
      assertTrue(menuKeyEvent0.isMetaDown());
      assertEquals(1467L, menuKeyEvent0.getWhen());
      assertTrue(menuKeyEvent0.isShiftDown());
      assertFalse(menuKeyEvent0.isAltGraphDown());
      assertEquals(7, menuKeyEvent0.getKeyCode());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertEquals(0, menuElementArray0.length);
      assertNotNull(menuKeyEvent0);
      
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(15, menuKeyEvent0.getModifiers());
      assertEquals(1467, menuKeyEvent0.getID());
      assertFalse(menuKeyEvent0.isActionKey());
      assertFalse(menuKeyEvent0.isConsumed());
      assertEquals(10112, menuKeyEvent0.getModifiersEx());
      assertTrue(menuKeyEvent0.isAltDown());
      assertTrue(menuKeyEvent0.isControlDown());
      assertEquals('~', menuKeyEvent0.getKeyChar());
      assertTrue(menuKeyEvent0.isMetaDown());
      assertEquals(1467L, menuKeyEvent0.getWhen());
      assertTrue(menuKeyEvent0.isShiftDown());
      assertFalse(menuKeyEvent0.isAltGraphDown());
      assertEquals(7, menuKeyEvent0.getKeyCode());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertEquals(0, menuElementArray0.length);
      
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      int int0 = jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(28, int0);
      
      Date date0 = jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertSame(date0, date1);
      assertSame(date1, date0);
      assertNotNull(date1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(1641);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6442551993262904
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      jDayChooser1.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      jDayChooser1.updateUI();
      assertEquals(4, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      Date date0 = jDayChooser1.setMinSelectableDate((Date) null);
      assertEquals(4, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotSame(jDayChooser1, jDayChooser0);
      assertNotNull(date0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      Color color0 = Color.getHSBColor(0.0F, 0.0721F, 0.0F);
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      jDayChooser0.setForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      
      int int0 = jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(28, int0);
      
      boolean boolean0 = jDayChooser0.isFocusOwner();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(boolean0);
      
      jDayChooser0.unregisterKeyboardAction((KeyStroke) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      boolean boolean1 = jDayChooser0.isWeekOfYearVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(28, int1);
      assertTrue(int1 == int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      DirectColorModel directColorModel0 = (DirectColorModel)jDayChooser0.getColorModel();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(4, directColorModel0.getNumComponents());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals(3, directColorModel0.getTransparency());
      assertTrue(directColorModel0.hasAlpha());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertEquals(255, directColorModel0.getBlueMask());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertNotNull(directColorModel0);
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      Color color0 = Color.LIGHT_GRAY;
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getBlue());
      assertNotNull(color0);
      
      jDayChooser0.setSundayForeground(color0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getBlue());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, 1338L, 33, 1149, 'i');
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(1338L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(1149, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(33, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals('i', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(33, keyEvent0.getID());
      assertFalse(keyEvent0.isMetaDown());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(1338L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(1149, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(33, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals('i', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(33, keyEvent0.getID());
      assertFalse(keyEvent0.isMetaDown());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.getHSBColor(0.0F, 0.0721F, 0.0F);
      jDayChooser0.setForeground(color0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.isFocusOwner();
      jDayChooser0.unregisterKeyboardAction((KeyStroke) null);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.701765291241601
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getPropertyChangeListeners("23");
      jDayChooser0.setDay((-275));
      jDayChooser0.setYear((-275));
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getDayPanel();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 419;
      floatArray0[1] = (float) 459;
      floatArray0[2] = 0.283F;
      floatArray0[3] = 1484.23F;
      floatArray0[4] = (float) 419;
      floatArray0[3] = (float) (-2177);
      floatArray0[6] = (float) 419;
      floatArray0[7] = (float) 459;
      Color.RGBtoHSB((-2177), 419, (-2177), floatArray0);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      SystemColor systemColor0 = SystemColor.controlText;
      BasicScrollBarUI basicScrollBarUI0 = new BasicScrollBarUI();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setWeekdayForeground(systemColor0);
      jDayChooser0.setDay((-2150));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d<Ibd!{5?kMkdeT-");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.723470183627356
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.focusLost((FocusEvent) null);
      jDayChooser0.getBackground();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.drawWeeks();
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.677371952581733
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 28, '(', 0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 0, (-1L), 90, 18, '(', 0);
      keyEvent1.consume();
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getAlignmentY();
      jDayChooser0.setFont((Font) null);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.getColorModel();
      Locale locale0 = Locale.KOREA;
      jDayChooser0.getAlignmentX();
      Locale.getISOLanguages();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMaxDayCharacters(4);
      jDayChooser1.setMaxDayCharacters(4);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      jDayChooser0.init();
      jDayChooser0.setFocus();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Color color0 = jDayChooser0.sundayForeground;
      jDayChooser0.setForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d<Ibd!{5?kMkdeT-");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.635484863709782
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.requestFocusInWindow();
      MouseEvent mouseEvent0 = new MouseEvent(jDayChooser0, 39, 291, 39, 291, 2406, 1278, false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1278, 2406, 40);
      jDayChooser0.setFocus();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.getDecorationBackgroundColor();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "14", (-1675));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.699450783005357
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.getColorModel();
      jDayChooser0.setEnabled(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDay(10155);
      jDayChooser0.drawDays();
      jDayChooser0.setMonth(10155);
      jDayChooser0.setMaxDayCharacters(1622);
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6885063804586076
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters((-9));
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Object object0 = jDayChooser0.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent(object0, (-9), "S7fjkNU9AOdS=", (-9), 8193);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.drawDays();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.608820614830946
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      jDayChooser0.removePropertyChangeListener((PropertyChangeListener) basicLabelUI0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Wf17iYg");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser1.getMaxDayCharacters());
      
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      actionMap0.keys();
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.getActionMap();
      jDayChooser0.setDay(0);
      jDayChooser0.keyTyped((KeyEvent) null);
      jDayChooser0.addListeners(0);
      jDayChooser0.drawWeeks();
      ForwardAction forwardAction0 = new ForwardAction(jDayChooser0);
      jDayChooser0.addMouseListener(forwardAction0);
      Time time0 = new Time(1809L);
      // Undeclared exception!
      try { 
        time0.toInstant();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.getColorModel();
      Locale locale0 = Locale.KOREA;
      jDayChooser0.getAlignmentX();
      Locale.getISOLanguages();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getSelectedDay();
      System.setCurrentTimeMillis(0L);
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(3361);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      actionMap0.keys();
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.getActionMap();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(10107);
      jDayChooser0.keyTyped((KeyEvent) null);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      FileMode fileMode0 = new FileMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }
}
