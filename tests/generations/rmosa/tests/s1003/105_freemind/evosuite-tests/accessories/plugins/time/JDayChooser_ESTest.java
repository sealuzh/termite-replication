/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 01:18:06 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMind;
import freemind.main.FreeMindApplet;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.LayoutManager;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentListener;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.geom.AffineTransform;
import java.io.File;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.DateTimeException;
import java.time.Month;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Properties;
import javax.help.ForwardAction;
import javax.swing.ActionMap;
import javax.swing.DebugGraphics;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.JTextPane;
import javax.swing.SwingConstants;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.PlainDocument;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledEditorKit;
import org.apache.batik.css.parser.Parser;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.xalan.transformer.TransformerIdentityImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5785241104871752
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JButton[] jButtonArray0 = new JButton[1];
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jButtonArray0[0] = (JButton) jDayChooser_DecoratorButton0;
      jDayChooser1.weeks = jButtonArray0;
      // Undeclared exception!
      try { 
        jDayChooser1.updateUI();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = null;
      jDayChooser0.maxSelectableDate = null;
      jDayChooser0.getCursor();
      jDayChooser0.drawWeeks();
      Locale locale0 = jDayChooser0.getLocale();
      locale0.getExtensionKeys();
      jDayChooser0.getAlignmentY();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SystemColor systemColor0 = SystemColor.menuText;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.5F;
      floatArray0[1] = 0.5F;
      floatArray0[2] = 0.5F;
      floatArray0[3] = 592.97F;
      floatArray0[4] = 0.5F;
      floatArray0[5] = 0.5F;
      systemColor0.getRGBComponents(floatArray0);
      Color.getColor("");
      // Undeclared exception!
      try { 
        jDayChooser0.setForeground(systemColor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.983245520219895
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(13);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Style style0 = defaultStyledDocument0.getLogicalStyle(47);
      Color color0 = defaultStyledDocument0.getForeground(style0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 9;
      floatArray0[1] = (float) 15;
      floatArray0[2] = (float) 15;
      floatArray0[3] = (float) 486;
      floatArray0[4] = (float) 9;
      floatArray0[5] = (float) 47;
      floatArray0[6] = (float) 15;
      floatArray0[7] = (float) 13;
      Color.RGBtoHSB(486, 9, 15, floatArray0);
      Dimension dimension0 = jDayChooser0.getPreferredSize();
      assertEquals(203, dimension0.width);
      
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDayPanel();
      jDayChooser0.setMaxDayCharacters(44);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setFocus();
      jDayChooser0.getMaxSelectableDate();
      Color color1 = jDayChooser0.getDecorationBackgroundColor();
      assertEquals((-16777216), color1.getRGB());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9832564847714997
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.decorationBackgroundVisible = true;
      jDayChooser0.removeComponentListener((ComponentListener) null);
      jDayChooser0.decorationBackgroundVisible = false;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 237, 623L, 237, (-5203), 'Y');
      jDayChooser0.decorationBackgroundVisible = false;
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay((-5203));
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 623L;
      floatArray0[1] = (float) (-5203);
      floatArray0[2] = (float) 'Y';
      floatArray0[3] = (float) 623L;
      floatArray0[4] = (float) 623L;
      floatArray0[5] = (float) 237;
      floatArray0[6] = (float) (-5203);
      floatArray0[7] = (float) 623L;
      Color.RGBtoHSB((-5203), 237, 237, floatArray0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.isDecorationBordersVisible();
      Timestamp timestamp0 = new Timestamp(0L);
      jDayChooser0.setMinSelectableDate(timestamp0);
      jDayChooser0.getMinSelectableDate();
      TransformerIdentityImpl transformerIdentityImpl0 = new TransformerIdentityImpl();
      Properties properties0 = transformerIdentityImpl0.getOutputProperties();
      File file0 = MockFile.createTempFile("day", (String) null, (File) null);
      FreeMind freeMind0 = null;
      try {
        freeMind0 = new FreeMind(properties0, properties0, file0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis(50L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setVisible(true);
      jDayChooser0.initialized = false;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.firePropertyChange("31", true, true);
      jDayChooser0.getMaxDayCharacters();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "31");
      jDayChooser0.firePropertyChange((String) null, (short)228, (short)228);
      jDayChooser0.setLayout((LayoutManager) null);
      jDayChooser0.getDayPanel();
      jDayChooser0.setDayBordersVisible(true);
      Locale locale0 = Locale.GERMAN;
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Graphics graphics0 = null;
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      Month month0 = Month.JULY;
      // Undeclared exception!
      try { 
        MockLocalDateTime.of((int) (short)228, month0, (-3724), 2183, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): -3724
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(1);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Parser parser0 = new Parser();
      parser0.getLocale();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 36, 36, 300, 36, 'e');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getMaxSelectableDate();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8961651689921424
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setAlwaysFireDayProperty(true);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-867.0F);
      floatArray0[1] = 0.0F;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2519), (-2519), (-620), (-2519), '{');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphicsConfiguration();
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame((GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-753), (-753), (-753), 38, '9');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(39);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1160), (-1160), (-1160), 39, 'e');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JList<Object> jList0 = new JList<Object>(defaultComboBoxModel0);
      KeyEvent keyEvent0 = new KeyEvent(jList0, 3, 3, 40, 3, '/');
      KeyEvent.getExtendedKeyCodeForChar(3);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 0, 0, 24, 40, '/');
      jDayChooser0.keyPressed(keyEvent1);
      jDayChooser0.setEnabled(true);
      assertEquals(21, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, 34, 34, 34, '');
      KeyEvent.getExtendedKeyCodeForChar(1592);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.696307146143559
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.BLACK;
      JDayChooser jDayChooser1 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, (Date) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1160), (-1160), (-1160), 39, 'e');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(15, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JSeparator jSeparator0 = new JSeparator();
      MockDate mockDate0 = new MockDate(0, (-2215), (-1168));
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.lightGray;
      jDayChooser0.paintAll((Graphics) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1838), (-1838), 35, 35, 'Q');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis(5270400000L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.pink;
      Locale locale0 = Locale.GERMANY;
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(3, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.BLACK;
      Date date0 = jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.setSelectableDateRange((Date) null, date0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.57852073136676
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Time time0 = new Time((-2632L));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockDate mockDate0 = new MockDate((-653), 1402, (-1129));
      jDayChooser1.setSelectableDateRange(time0, mockDate0);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9831644895092557
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputMap();
      jDayChooser0.initialized = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setDebugGraphicsOptions(11);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.getWeekdayForeground();
      System.setCurrentTimeMillis((-1L));
      color0.getColorSpace();
      jDayChooser0.setForeground(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMaxSelectableDate();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Time time0 = new Time(21168000000L);
      jDayChooser0.setSelectableDateRange(time0, time0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Color color0 = Color.lightGray;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JButton jButton0 = new JButton();
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 35, "day", 1189, (-846));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.091803330640885
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      actionMap0.keys();
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.getActionMap();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-474L), 0, 21, 'r', 0);
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.JAPAN;
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(9);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6956271332467625
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(12);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      int int0 = SwingConstants.VERTICAL;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setMaxDayCharacters(1379);
      jDayChooser0.setMonth(1154);
      jDayChooser0.setMonth((-1208));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      JPanel jPanel0 = new JPanel(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Document document0 = null;
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      GraphicContext graphicContext0 = null;
      try {
        graphicContext0 = new GraphicContext((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.AffineTransform", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5777233286214165
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.695541075652718
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setWeekOfYearVisible(false);
      JSeparator jSeparator0 = new JSeparator();
      JComboBox<MockGregorianCalendar> jComboBox0 = new JComboBox<MockGregorianCalendar>();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-672), true, jComboBox0);
      jDayChooser0.setFocusCycleRoot(false);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 4, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawDays();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      int int0 = (-65536);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "q2J=7Ew", (-65536));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-379));
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setEnabled(false);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.BLACK;
      jDayChooser0.setForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1392), 7, (-1392));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      PlainDocument plainDocument0 = new PlainDocument();
      StyledEditorKit styledEditorKit0 = new StyledEditorKit();
      styledEditorKit0.getCharacterAttributeRun();
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertTrue(boolean0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.controlHighlight;
      Color.getColor("yK=O>FgB,", (Color) systemColor0);
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setMaxDayCharacters(2206);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Color color0 = Color.BLUE;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      jDayChooser0.focusLost((FocusEvent) null);
      jDayChooser0.getBackground();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFont((Font) null);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.69631050055377
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      jDayChooser0.setWeekdayForeground(systemColor0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.9833681882495395
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser0.updateUI();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setDay(1867);
      jDayChooser0.getMinSelectableDate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x");
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDay();
      jDayChooser0.getDayPanel();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMonth(1867);
      jDayChooser_DecoratorButton0.isFocusable();
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(164, color0.getRed());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setWeekOfYearVisible(true);
      JSeparator jSeparator0 = new JSeparator();
      int int0 = (-672);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jDayChooser0.getInputMap((-672));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must be one of JComponent.WHEN_IN_FOCUSED_WINDOW, JComponent.WHEN_FOCUSED or JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.grabFocus();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.isDefaultCapable();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 0, 'i');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.5775828056203562
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      System.setCurrentTimeMillis(5270400000L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInputContext();
      assertEquals(3, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setYear(3);
      jDayChooser0.getPropertyChangeListeners();
      int int0 = JComponent.UNDEFINED_CONDITION;
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      StyleContext styleContext0 = new StyleContext();
      JTextPane jTextPane0 = new JTextPane();
      AttributeSet attributeSet0 = jTextPane0.getCharacterAttributes();
      Color color0 = styleContext0.getForeground(attributeSet0);
      jDayChooser0.oldDayBackgroundColor = color0;
      jDayChooser0.getRegisteredKeyStrokes();
      jDayChooser0.drawWeeks();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(0);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 459;
      floatArray0[2] = 1484.23F;
      floatArray0[3] = (float) 0;
      Color.RGBtoHSB(459, 419, (-2177), floatArray0);
      fopImage_ImageInfo0.str = "";
      ColorSpace colorSpace0 = jpegImage0.getColorSpace();
      assertNull(colorSpace0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.init();
      jDayChooser0.setDay(8217);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1769, (-1195), (-4274), 1769, '?');
      // Undeclared exception!
      try { 
        InputEvent.getMaskForButton((-1195));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // button doesn't exist -1195
         //
         verifyException("java.awt.event.InputEvent", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(2222);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(14);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      actionMap0.keys();
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.getActionMap();
      jDayChooser0.keyTyped((KeyEvent) null);
      jDayChooser0.addListeners(9);
      jDayChooser0.drawWeeks();
      ForwardAction forwardAction0 = new ForwardAction(jDayChooser0);
      jDayChooser0.addMouseListener(forwardAction0);
      Time time0 = new Time(1345L);
      // Undeclared exception!
      try { 
        time0.toInstant();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1332);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      ActionMap actionMap1 = new ActionMap();
      actionMap1.keys();
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.getActionMap();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(473);
      jDayChooser0.keyTyped((KeyEvent) null);
      assertEquals(28, jDayChooser0.getDay());
  }
}
