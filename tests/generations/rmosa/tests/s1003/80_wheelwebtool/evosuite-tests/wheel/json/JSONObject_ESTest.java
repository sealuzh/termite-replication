/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 00:44:10 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.2826685601371457
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject.quote("0");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "isformat";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Integer integer0 = new Integer((-1172));
      JSONObject jSONObject2 = jSONObject1.put("isformat", (Object) integer0);
      jSONObject2.put("0", (Object) "0");
      jSONObject1.optLong("isformat");
      jSONObject1.optInt("isformat");
      jSONObject1.keys();
      JSONObject.numberToString(integer0);
      try { 
        jSONObject0.getLong("\"0\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"0\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1003470033431912
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("wr", 2804L);
      JSONObject jSONObject2 = jSONObject1.accumulate(",", ",");
      JSONObject.doubleToString(2804L);
      hashMap0.put("2804", "2804");
      JSONObject.valueToString(",", 840, 8192);
      jSONObject1.put("\"java.lang.String@0000000004\"", (Map) hashMap0);
      jSONObject0.getJSONObject("\"java.lang.String@0000000004\"");
      JSONObject.getNames(jSONObject0);
      jSONObject2.put("\"java.lang.String@0000000004\"", 10);
      jSONObject2.put("wr", (Object) hashMap0);
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject.quote("");
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4915254237288135
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("bV__}!~NB{P4X0&$/yI", 102);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.put("] is not a JSONObject.", (Object) "] is not a JSONObject.");
      JSONObject.quote("uW");
      JSONObject jSONObject2 = jSONObject0.append("] is not a JSONArray.", "] is not a JSONObject.");
      jSONObject2.optLong("bV__}!~NB{P4X0&$/yI");
      int int0 = 48;
      try { 
        jSONArray0.put((-1686), (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1686] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(72);
      hashMap0.put(integer0, integer0);
      String string0 = "\\n";
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("\n", (Map) hashMap1);
      StringWriter stringWriter0 = new StringWriter(1251);
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      Integer.compare(102, 72);
      stringWriter0.write(charArray0);
      StringWriter stringWriter1 = stringWriter0.append('\\');
      jSONObject1.write(stringWriter1);
      String string1 = "pu";
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(1.0);
      hashMap0.put((String) null, double0);
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)13);
      jSONObject0.put("\"NYrQi^}.lH", (Object) byte0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double((-1178.2474269));
      hashMap0.put("re", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      double double1 = jSONObject0.optDouble("re");
      assertEquals((-1178.2474269), double1, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      linkedList0.remove((Object) jSONObject0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw '", (Collection) linkedList0);
      jSONObject1.getJSONArray("' and instead saw '");
      String string1 = JSONObject.valueToString(linkedList0, 913, 913);
      assertEquals("[]", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4988610478359909
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      jSONArray0.put(544, (Map) hashMap0);
      jSONArray0.put((Object) boolean0);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 59, 32);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames((Object) boolean0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(3910);
      hashMap0.put((Double) null, integer0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 1975, 1975);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8794450460513974
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Short short0 = new Short((short)42);
      JSONObject.numberToString(short0);
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      Short.toUnsignedInt((short)827);
      Short.compare((short)123, (short)42);
      short short1 = (short) (-2331);
      Short.compare((short) (-2331), (short)42);
      Long long0 = new Long(0L);
      Long.compareUnsigned(52L, 52L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      jSONObject0.put("java.lang.Short@0000000001", (Map) hashMap0);
      JSONObject.getNames((Object) "java.lang.Short@0000000001");
      JSONObject jSONObject1 = jSONObject0.optJSONObject("java.lang.Short@0000000001");
      jSONObject1.keys();
      JSONObject.getNames(jSONObject1);
      jSONObject0.put("RQ)tIu$I[0`L1V", (Map) hashMap0);
      try { 
        jSONObject0.getInt("java.lang.Short@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Short@0000000001\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4915254237288135
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      try { 
        jSONObject0.getLong("getaddLast");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getaddLast\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.285092802561388
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Float float0 = new Float(4051.44F);
      Float.sum(0.0F, 863.14923F);
      Float.min(0.0F, 0.0F);
      Float.max(4051.44F, 0.0F);
      Float.sum(4051.44F, 4051.44F);
      Float.min((-1561.82F), 8102.88F);
      JSONObject.getNames((Object) float0);
      Float.min(0.0F, 863.14923F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.min(4051.44F, 4051.44F);
      jSONObject0.optLong((String) null);
      JSONObject.doubleToString((-741.377698087034));
      JSONObject.getNames((Object) null);
      jSONObject0.optBoolean(" of ");
      JSONObject.numberToString(float0);
      jSONObject0.names();
      jSONObject0.optBoolean("-741.377698087034");
      try { 
        jSONObject0.getJSONArray("-741.377698087034");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-741.377698087034\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONObject.getNames(object0);
      Boolean.valueOf("GYDa[*</[Q4(e)4");
      try { 
        jSONObject0.getBoolean("GYDa[*</[Q4(e)4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"GYDa[*<\\/[Q4(e)4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(Double.NaN);
      hashMap0.put(double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.toString(24, 615);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("7RhS.&#x3bUJQz,", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("7RhS.&#x3bUJQz,");
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONObject1.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", (Collection) linkedList0);
      jSONObject0.optJSONObject("YBN31|n/T");
      jSONObject1.has("wheel.json.JSONException");
      JSONObject jSONObject2 = jSONObject0.put("J?E3](Y;*[/Ne3^(j{", (Object) linkedList0);
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("isvalueOf", (-322));
      jSONObject0.getInt("isvalueOf");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("isvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of isvalueOf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "wB^0Z^";
      stringArray0[1] = "wB^0Z^";
      stringArray0[2] = "wB^0Z^";
      stringArray0[3] = "wB^0Z^";
      stringArray0[4] = "wB^0Z^";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.putOpt("wB^0Z^", boolean0);
      boolean boolean1 = jSONObject0.getBoolean("wB^0Z^");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8768603988557397
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "T7^=WC>_kT>xR6";
      JSONObject jSONObject0 = new JSONObject((Object) "T7^=WC>_kT>xR6");
      // Undeclared exception!
      jSONObject0.toString(1004);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) linkedList0);
      jSONObject0.put(",", (Object) ",");
      try { 
        jSONObject0.getJSONObject(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject1.length());
      
      int int0 = jSONObject0.optInt("&]>r6$<$;~aln~", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.434799037944202
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("t$d($$p_06X<l_.mS$", 91);
      jSONObject0.optInt("t$d($$p_06X<l_.mS$");
      jSONObject0.getInt("t$d($$p_06X<l_.mS$");
      jSONObject0.toString(177, 88);
      JSONObject jSONObject1 = jSONObject0.put("{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}", (long) 91);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.182508882687605
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSON0rray.", (Object) hashMap0);
      JSONObject jSONObject2 = jSONObject0.append("wheel.json.JSONArray", linkedList0);
      jSONObject2.toString((-1722), (-1722));
      JSONObject.quote("wheel.json.JSONArray");
      JSONArray jSONArray1 = jSONObject1.getJSONArray("wheel.json.JSONArray");
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("N~", "N~");
      JSONObject jSONObject2 = jSONObject1.accumulate("N~", "N~");
      JSONObject.getNames((Object) jSONObject1);
      double double0 = 0.0;
      jSONObject2.put("", 0.0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1152223358406532
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "1");
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.49565217391304345
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(51, (-361.83566815176));
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(52, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      
      String string0 = jSONObject0.optString("is", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, 70, 48);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Long long0 = new Long((-1756L));
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      assertNotNull(stringArray0);
      
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>(128);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", (Object) boolean0);
      jSONObject1.isNull("Unterminated string");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "Sr;<|LjZ]dWKQoQ7";
      linkedList0.add("Sr;<|LjZ]dWKQoQ7");
      JSONTokener jSONTokener0 = new JSONTokener("MK1yMp(W.^XH~ZL+D1C");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of MK1yMp(W.^XH~ZL+D1C
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("-5.442693792069971.", object0);
      boolean boolean0 = jSONObject1.isNull("-5.442693792069971.");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{N4-%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {N4-%
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Double double0 = new Double((byte) (-46));
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Integer integer0 = new Integer((byte) (-46));
      hashMap0.put(double0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("] is not a Boolean.", integer0);
      // Undeclared exception!
      jSONObject0.toString(3843, 3843);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5884082070354566
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(2823);
      hashMap0.put("islongBitsToDouble", integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\":java.lang.Integer@0000000003}");
      Object object0 = new Object();
      JSONObject.valueToString(object0, 1786, 2823);
      JSONObject.valueToString(jSONObject1);
      Float float0 = new Float(0.0);
      JSONObject.valueToString(float0);
      JSONObject jSONObject2 = jSONObject0.put("islongBitsToDouble", (Object) hashMap0);
      try { 
        jSONObject2.getInt("j:SZ4_m]`xDC'zwD2V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j:SZ4_m]`xDC'zwD2V\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.append("s,;*.4V6ACr", hashMap0);
      jSONObject1.optLong(": ");
      jSONObject1.optJSONArray("s,;*.4V6ACr");
      Long long0 = new Long(0L);
      Object object1 = new Object();
      StringWriter stringWriter0 = new StringWriter(35);
      stringWriter0.append('c');
      JSONObject.quote(": ");
      Float float0 = new Float((double) 0L);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0F);
      jSONObject0.append("JSONArray initial value should be a string or collection or array.", float0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("JSONArray initial value should be a string or collection or array.");
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-17L));
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      jSONObject0.accumulate("c", jSONArray2);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.append("", linkedList0);
      Integer integer0 = new Integer(9);
      JSONObject jSONObject2 = jSONObject1.append("", integer0);
      jSONObject2.toJSONArray(jSONArray0);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt(":<c", ":<c");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.append("Vc=PjrGC*qKnun9", jSONArray0);
      String string0 = jSONObject0.toString(160, 116);
      assertNotNull(string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-1.0F));
      JSONObject.getNames((Object) float0);
      jSONObject0.accumulate("tri", float0);
      jSONObject0.optString("tri");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getdoubleToStrYing", (Object) "getdoubleToStrYing");
      jSONObject1.get("getdoubleToStrYing");
      jSONObject0.optString("getdoubleToStrYing", "getdoubleToStrYing");
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.quote("v~A?/L$e*m\"");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("v~A?/L$e*m\"", "\"v~A?/L$e*m\"\"");
      Long long0 = new Long(717L);
      jSONObject0.accumulate("v~A?/L$e*m\"", long0);
      try { 
        jSONObject0.getBoolean("\"}3-HtSk<oww#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"}3-HtSk<oww#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject.doubleToString((-1874.66776983));
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(595.334F);
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", (Object) ",:]}/\"[{;=#");
      jSONObject0.isNull("Xe");
      JSONObject jSONObject2 = jSONObject0.accumulate(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "co";
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("co", object0);
      try { 
        jSONObject0.getInt("co");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"co\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("4CD,}");
      linkedList0.add("2eS f");
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-4229), 13);
      JSONTokener jSONTokener0 = new JSONTokener("*9y!I");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of *9y!I
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("get", 0.0);
      jSONObject1.getDouble("get");
      String string0 = jSONObject0.toString(987, 966);
      assertNotNull(string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Double double0 = new Double(0.0);
      Long long0 = new Long((-1256L));
      JSONObject jSONObject0 = new JSONObject(long0);
      Byte byte0 = new Byte((byte)11);
      JSONObject jSONObject1 = jSONObject0.accumulate("CA", byte0);
      JSONObject.quote("CA");
      double double1 = jSONObject1.optDouble("CA");
      assertEquals(2, jSONObject0.length());
      assertEquals(11.0, double1, 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.49122807017543857
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      jSONObject0.putOpt("toL", "toL");
      jSONObject1.opt("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "toL";
      stringArray0[2] = "toL";
      stringArray0[3] = "wheel.json.JSONArray";
      stringArray0[4] = "";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = Integer.getInteger("\b_u/+kRyWFp", 51);
      jSONObject0.putOpt("", integer0);
      jSONObject0.getLong("");
      double double0 = jSONObject0.optDouble("", (-23.91522420270338));
      assertEquals(51.0, double0, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("A JSONObject text must begin with '{'", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("t$d($$p_06X<l_.mS$", 7);
      jSONObject1.getInt("t$d($$p_06X<l_.mS$");
      jSONObject1.opt((String) null);
      String[] stringArray0 = new String[12];
      stringArray0[0] = "t$d($$p_06X<l_.mS$";
      stringArray0[1] = "t$d($$p_06X<l_.mS$";
      stringArray0[2] = "wheel.json.JSONArray";
      stringArray0[4] = null;
      String string0 = null;
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}3)2=0[j(:&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }3)2=0[j(:&
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, (byte) (-91), 92);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = JSONObject.quote("v/.R_p7/w");
      assertEquals("\"v/.R_p7/w\"", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "tr";
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("tr", object0);
      try { 
        jSONObject1.getDouble("tr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tr\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "isnotify");
      // Undeclared exception!
      jSONObject0.toString(3368, 3368);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("aUd7C");
      String string0 = JSONObject.valueToString(boolean0, (-1), (-956));
      assertNotNull(string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      try { 
        Long.parseUnsignedLong("null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.8510944537717136
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.quote(";[RsxWq7,3iB/>+pW%*");
      assertEquals("\";[RsxWq7,3iB/>+pW%*\"", string0);
      
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong(";[RsxWq7,3iB/>+pW%*");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1815192735832012
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Integer integer0 = new Integer(51);
      JSONObject jSONObject1 = jSONObject0.putOpt("", integer0);
      JSONObject jSONObject2 = jSONObject0.putOpt("6'fk18MlVh", "6'fk18MlVh");
      jSONObject2.remove("6'fk18MlVh");
      jSONObject1.getLong("");
      jSONObject1.optDouble("getjoin", (-3385.0));
      Long long0 = new Long(0L);
      jSONObject2.accumulate("6'fk18MlVh", integer0);
      try { 
        jSONObject2.get("getformat");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getformat\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4909090909090909
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.put("] is not a JSON0rray.", (Object) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONArray", linkedList0);
      jSONObject0.names();
      JSONObject.getNames((Object) jSONArray0);
      jSONObject1.toString();
      try { 
        jSONObject0.getLong("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = JSONObject.quote(";^rdyHFuP6sOj#n`S");
      assertEquals("\";^rdyHFuP6sOj#n`S\"", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "nu";
      JSONTokener jSONTokener0 = new JSONTokener("./5Xd0*lrU[_");
      jSONObject0.optLong("nu", 0L);
      jSONTokener0.nextClean();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 2 of ./5Xd0*lrU[_
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = JSONObject.quote("`J1i>VRJ|\"*u]V]");
      assertEquals("\"`J1i>VRJ|\\\"*u]V]\"", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.quote("Z$Z\rutTreMF`#FyM");
      assertEquals("\"Z$Z\\rutTreMF`#FyM\"", string0);
      
      String string1 = JSONObject.valueToString(jSONArray0, 59, 32);
      assertEquals("[]", string1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("e6G", 1956);
      assertEquals(1956, int0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(875);
      hashMap0.put("EHrNvEYLy\"0tQ", (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(875);
      hashMap0.put((String) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      Float float0 = new Float((-1.0));
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("YBN31|n/T", "-qzk`?+#y7o)/w@,");
      assertEquals("-qzk`?+#y7o)/w@,", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("N)>i<Vh&7Gyu@9/b");
      assertEquals("", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0432514071457581
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Double double0 = new Double((byte) (-55));
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.quote("w");
      String string0 = JSONObject.quote("se");
      assertEquals("\"se\"", string0);
      
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"se\"";
      stringArray0[1] = "\"se\"";
      stringArray0[2] = "wheel.json.JSONTokener";
      stringArray0[3] = "w";
      stringArray0[4] = "w";
      stringArray0[5] = "w";
      stringArray0[6] = "\"se\"";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      boolean boolean1 = jSONObject0.optBoolean("wheel.json.JSONTokener");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Byte byte0 = new Byte((byte)78);
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("Unclosed comment");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put("6QbZad9n5L2WL", "UL<");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject0.append("kj:<i}i~36&g-k", object0);
      String string0 = jSONObject0.toString(124, (-1686));
      assertNotNull(string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Short short0 = new Short((short)62);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "000";
      stringArray0[1] = "G";
      String string0 = "";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      int int0 = 59;
      jSONObject0.toString(59);
      Double double0 = new Double(Double.NaN);
      Double.max(Double.NaN, 59);
      Double.max((short)62, Double.NaN);
      Double.min(59, 59);
      try { 
        jSONObject0.putOpt("", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("get", (Map) null);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Double double0 = new Double((byte) (-46));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Integer integer0 = new Integer((byte) (-46));
      hashMap0.put(double0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(34, (int) (byte) (-46));
      assertNotNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      byte byte0 = (byte)80;
      Byte byte1 = new Byte((byte)80);
      Byte.compare((byte)80, (byte)49);
      hashMap0.put(byte1, (String) null);
      hashMap0.put((Object) null, (String) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((int) (byte)49, 22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Byte byte0 = new Byte((byte)80);
      hashMap0.put(byte0, (String) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((int) (byte)80, (int) (byte)80);
      assertNotNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Integer integer0 = new Integer((-1784));
      hashMap0.put((Double) null, integer0);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      hashMap0.putAll(hashMap1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(47, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(1378, 1378);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Long long0 = new Long(1956);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(87);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("@x", 43);
      int int0 = jSONObject0.getInt("@x");
      assertEquals(43, int0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.2815553875954016
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[1] = "3#EOV";
      stringArray0[2] = "3#EOV";
      stringArray0[3] = ">ktQJ";
      stringArray0[4] = "3#EOV";
      stringArray0[6] = "3#EOV";
      stringArray0[7] = "3#EOV";
      stringArray0[8] = "3#EOV";
      JSONObject jSONObject0 = new JSONObject("3#EOV", stringArray0);
      jSONObject0.optBoolean("[x=oV5Y", true);
      JSONObject jSONObject1 = jSONObject0.put("", (-948));
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = JSONObject.getNames((Object) "JSONArray initial value should be a string or collection or array.");
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      
      double double0 = jSONObject0.getDouble("");
      assertEquals((-948.0), double0, 0.01);
      
      jSONObject0.keys();
      jSONObject1.remove(">ktQJ");
      boolean boolean0 = jSONObject0.optBoolean("JSONArray initial value should be a string or collection or array.", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove((String) null);
      String string0 = JSONObject.doubleToString(10.299057773138044);
      assertEquals("10.299057773138044", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1809520586087259
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.put(jSONObject0, (Float) null);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.names();
      Float float0 = new Float(1132.66);
      hashMap0.put(jSONObject1, float0);
      String string0 = "isnotifyAll";
      Float float1 = new Float(1803.2422F);
      jSONObject1.putOpt("isnotifyAll", float1);
      hashMap0.put(jSONObject1, float1);
      jSONObject1.getDouble("isnotifyAll");
      jSONObject1.names();
      String string1 = "] is not a JSONArray.";
      try { 
        jSONObject1.getJSONArray("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "isvalueOf";
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.put((String) null, (-322));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      String string0 = "Expected a ',' or ']'";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put("Expected a ',' or ']'", jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("#Q~nif8G%o2q6bH,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#Q~nif8G%o2q6bH,\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("com", 0.0);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("getjoin", "getjoin");
      try { 
        jSONObject1.getBoolean("getjoin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getjoin\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Object) hashMap0);
      try { 
        jSONObject1.getBoolean("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("getjoin");
      JSONObject jSONObject1 = jSONObject0.putOpt("getjoin", boolean0);
      boolean boolean1 = jSONObject1.getBoolean("getjoin");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("=]6rDB>=!<}2", hashMap0);
      jSONObject0.put("=]6rDB>=!<}2", false);
      jSONObject0.getString("=]6rDB>=!<}2");
      double double0 = 5550.0;
      try { 
        jSONObject0.getJSONArray("java.lang.Boolean@0000000004");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Boolean@0000000004\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      Integer integer0 = new Integer(60);
      hashMap0.put(double0, integer0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("xmKy <@U/z/?$cssoh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"xmKy <@U/z/?$cssoh\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("isvalue=Of", "isvalue=Of");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getJSONObject("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(hashMap0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalAnd(false, true);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Byte byte0 = new Byte((byte)80);
      hashMap0.put(byte0, (String) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter((byte)80);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Byte byte0 = new Byte((byte)80);
      hashMap0.put(byte0, (String) null);
      hashMap0.put((Object) null, (String) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter((byte)80);
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.1829430989272922
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      Short short0 = new Short((short) (-3015));
      JSONObject.testValidity(short0);
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.valueToString("kSk\"STH^a");
      assertNotNull(string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject.valueToString(linkedList0);
      JSONArray jSONArray0 = new JSONArray("[]");
      try { 
        jSONArray0.getJSONObject(66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[66] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Double double0 = new Double((-1940.0));
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Double double0 = new Double(146.2705183699724);
      hashMap0.put(double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer integer0 = new Integer(101);
      String string0 = JSONObject.valueToString(integer0, 101, 101);
      assertNotNull(string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 120, 120);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, "rev");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("isiterator", false);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\"pu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"pu
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.0498195516449371
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject.quote(",\n");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\",\n\"";
      stringArray0[1] = "\",\n\"";
      stringArray0[2] = ",\n";
      stringArray0[3] = ",\n";
      stringArray0[4] = ",\n";
      stringArray0[5] = "\",\n\"";
      stringArray0[6] = ",\n";
      stringArray0[7] = ",\n";
      JSONObject jSONObject0 = new JSONObject("\",\n\"", stringArray0);
      jSONObject0.optInt("\",\n\"");
      Byte byte0 = new Byte((byte)0);
      jSONObject0.accumulate("c//^Of", byte0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("~_[m\"T4=g&nMHbmK", true);
      Object object0 = new Object();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("getjoin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getjoin\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-1165.86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("-1.0377000570297241.", (-1328));
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("", 1513.60791904039);
      assertEquals(1513.60791904039, double0, 0.01);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      int int0 = 877;
      Integer integer0 = new Integer(877);
      hashMap0.put("EHrNvEYLy\"0tQ", integer0);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append("EHrNvEYLy\"0tQ", "wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[EHrNvEYLy\"0tQ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      Byte byte0 = new Byte((byte) (-121));
      hashMap0.put(byte0, "Z[wge05Xx3i");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, boolean0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("getjoin", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.doubleToString((-2450.9205));
      JSONObject jSONObject1 = jSONObject0.put("-2450.9205", (Collection) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A}=WEy2", true);
      try { 
        jSONObject0.getJSONArray("A}=WEy2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A}=WEy2\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("A}=WEy2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A}=WEy2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("6'fk18MlVh", "6'fk18MlVh");
      Object object0 = jSONObject1.get("6'fk18MlVh");
      assertEquals("6'fk18MlVh", object0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("1biyJT>vnZSC", (-1L));
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("isformat", 249L);
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("w\"}Fn+z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"w\\\"}Fn+z\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt("isvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isvalueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("t$d($$p_06X<l_.mS$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"t$d($$p_06X<l_.mS$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{J$WwA%%2M8!gYa");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 15 of {J$WwA%%2M8!gYa
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = new String[13];
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      HashMap<Float, String> hashMap1 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(",\n", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      HashMap<Float, String> hashMap1 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      try { 
        jSONObject0.put((String) null, (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "FvqgyeLiXgV!";
      jSONObject0.opt("FvqgyeLiXgV!");
      String string1 = "(wk)";
      try { 
        Long.parseUnsignedLong("(wk)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(wk)\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
