/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 01:25:43 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.databene.commons.AssertionError;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBIndex;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;
import org.postgresql.jdbc2.AbstractJdbc2ResultSet;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("cea}:niqe idexns1(q(;~-isn|!ot%|");
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "glter tablevtiarg";
      stringArray0[3] = "glter tablevtiarg";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLUtil.normalize("*/", false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*/";
      stringArray0[1] = "*/";
      stringArray0[2] = "*/";
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "*/");
      stringArray0[3] = "*/";
      stringArray0[4] = "*/";
      stringArray0[1] = "*/";
      stringArray0[6] = "*/";
      stringArray0[8] = "into";
      SQLUtil.renderColumnNames(stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog("execute");
      DBSchema dBSchema0 = new DBSchema("*/", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selecttruncateduk%.eg=7(t", dBSchema0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dBSchema0.getSequences(true);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) null, "into", false, "execute");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // owner is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-3806), "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("a3\"JP", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getDataDescriptorGenerator();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-89);
      byteArray0[7] = (byte) (-31);
      BasicUUID basicUUID0 = null;
      try {
        basicUUID0 = new BasicUUID(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.derby.impl.services.uuid.BasicUUID", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("select intocaljtfselc");
      tableContainer0.getTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("colPerms: grantee=", (DBTable) null, (DBDataType) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("R6$bHeX");
      dBCatalog0.getSchema("R6$bHeX");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("R6$bHeX", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(63, " join ");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("caljtfselc", defaultDBTable0, dBDataType0, integer0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("C/F");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(" join ", defaultDBTable0, dBDataType0);
      defaultDBColumn0.equals(defaultDBColumn1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" join ", defaultDBTable0, dBDataType0, integer0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("CLOB");
      defaultDBColumn0.equals(jMXPrincipal0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance(8, "8sx2wn^#hMC94)");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8sx2wn^#hMC94)", (DBTable) null, dBDataType0, integer0);
      Integer.getInteger("2pi]K1:y?C6");
      defaultDBColumn0.setDefaultValue("drop materialized view");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("8sx2wn^#hMC94) 8SX2WN^#HMC94)(1) DEFAULT drop materialized view NULL", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sqlect L", defaultDBTable0, 387, "sqlect L");
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("sqlect L SQLECT L NOT NULL", string0);
      
      boolean boolean0 = SQLUtil.isDDL("sqlect L");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBSchema dBSchema0 = new DBSchema("select intocallsele");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select intocallsele", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "select intocallsele";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select intocallsele", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (select intocallsele)", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLUtil.isQuery("Select RDB$TRIGGER_SOURCE From RDB$VRIGGERS Where RDB$TRIGGER_NAME = ?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "nQ7qfSD[H3", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("nQ7qfSD[H3", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("execcaljlselct");
      mockPrintWriter0.print((-912));
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      boolean boolean0 = SQLUtil.isQuery("Select RDB$TRIGGER_SOURCE From RDB$VRIGGERS Where RDB$TRIGGER_NAME = ?");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "setString(String,String)";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("setString(String,String)");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("setString(String,String)", defaultDBTable0, 387, "setString(String,String)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Select RDB$TRIGGER_SOURCE From RDB$VRIGGERS Where RDB$TRIGGER_NAME = ?");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Select RDB$TRIGGER_SOURCE From RDB$VRIGGERS Where RDB$TRIGGER_NAME = ?";
      stringArray0[1] = "Select RDB$TRIGGER_SOURCE From RDB$VRIGGERS Where RDB$TRIGGER_NAME = ?";
      stringArray0[2] = "Select RDB$TRIGGER_SOURCE From RDB$VRIGGERS Where RDB$TRIGGER_NAME = ?";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Select RDB$TRIGGER_SOURCE From RDB$VRIGGERS Where RDB$TRIGGER_NAME = ?", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (Select RDB$TRIGGER_SOURCE From RDB$VRIGGERS Where RDB$TRIGGER_NAME = ?, Select RDB$TRIGGER_SOURCE From RDB$VRIGGERS Where RDB$TRIGGER_NAME = ?, Select RDB$TRIGGER_SOURCE From RDB$VRIGGERS Where RDB$TRIGGER_NAME = ?)", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.h2.command.ddl.CreateFunctionAlias");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("//");
      DBSchema dBSchema0 = new DBSchema("!!!!!!!!! memo size is ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "!!!!!!!!! memo size is ";
      stringArray0[2] = "org.h2.command.ddl.CreateFunctionAlias";
      stringArray0[3] = null;
      stringArray0[4] = "!GL";
      stringArray0[5] = "org.h2.command.ddl.CreateFunctionAlias";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLUtil.normalize(" ", false);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.add((Object) "");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = "(C](oE";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(C](oE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (C](oE
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance((-2123), "g~klxw0?");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("g~klxw0?", (DBTable) null, dBDataType0, integer0);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("g~klxw0?", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "Unknown constraint type: ";
      SQLUtil.mutatesStructure("Unknown constraint type: ");
      String string1 = "/*";
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8727808476063772
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DB>=!<}2T|e~%");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("DB>=!<}2T|e~%", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "}}\"G~<8lL+4CbZXEF");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("update", true, "DB>=!<}2T|e~%", "pKI");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "}}\"G~<8lL+4CbZXEF", false, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT DB>=!<}2T|e~% ", string0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("update");
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = 'U';
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.renderColumnListWithTableName("update", stringArray0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string1 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("Unknown constraint type: ", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(96, "Select RDB$TRIGGER_SOURCE From ?DB$TRIGGERS Where RDB$TRIGGER_NAME = ?");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Select RDB$TRIGGER_SOURCE From ?DB$TRIGGERS Where RDB$TRIGGER_NAME = ?", (DBTable) null, dBDataType0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBColumn[] dBColumnArray0 = new DBColumn[14];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(96, "Select RDB$TRIGGER_SOURCE From ?DB$TRIGGERS Where RDB$TRIGGER_NAME = ?");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Select RDB$TRIGGER_SOURCE From ?DB$TRIGGERS Where RDB$TRIGGER_NAME = ?", (DBTable) null, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("Select RDB$TRIGGER_SOURCE From ?DB$TRIGGERS Where RDB$TRIGGER_NAME = ?", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("drop index");
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = SQLUtil.normalize("/p3'%k", true);
      assertEquals("/ p3 '%k'", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "create unique indexns1(q(;~-isn|!ot%0";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("create unique indexns1(q(;~-isn|!ot%0", defaultDBTable0, 393, "create unique indexns1(q(;~-isn|!ot%0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: create unique indexns1(q(;~-isn|!ot%0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(2dP)(l]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2dP\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = AbstractJdbc2ResultSet.quotelessTableName("]Zdv&OE+");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("!?7D)H7!~>L", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (]zdv&oe+, ) REFERENCES null(]zdv&oe+, )", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      URI uRI0 = MockURI.aFileURI;
      defaultDBTable0.countProviders();
      URI uRI1 = MockURI.normalize(uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      mockFile0.deleteOnExit();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("k", false, defaultDBTable0, "k");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK k", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'";
      stringArray0[2] = "\"5";
      stringArray0[3] = "\"5";
      stringArray0[4] = "\"5";
      stringArray0[5] = "\"5";
      stringArray0[7] = "\"5";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "org.apache.derby.impl.sql.execute.UpdatableVTIConstantAction";
      String string0 = "";
      stringArray1[1] = "";
      stringArray1[3] = "'";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("\"5", stringArray0, "org.apache.derby.impl.sql.execute.UpdatableVTIConstantAction", stringArray0[1], stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("5hWe");
      dBCatalog0.getTable("5H_?", false);
      DBDataType dBDataType0 = DBDataType.getInstance(90112, "5H_?");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5hWe", (DBTable) null, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "5hWe");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      TableContainer tableContainer0 = new TableContainer("yjjyl@vn<>,");
      TableContainer tableContainer1 = new TableContainer("5hWe");
      DBSchema dBSchema0 = tableContainer1.getSchema();
      assertNull(dBSchema0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "deyee";
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("&& B/*@[kCMjYC%Uuog");
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(N^");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "execute";
      stringArray0[1] = "vtiArg";
      stringArray0[2] = "(N^";
      stringArray0[3] = "execute";
      stringArray0[4] = "vtiArg";
      stringArray0[5] = "(N^";
      stringArray0[6] = "vtiArg";
      stringArray0[7] = "(N^";
      stringArray0[8] = ",'d";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "execute", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (execute, vtiArg, (N^, execute, vtiArg, (N^, vtiArg, (N^, ,'d)", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "execvti$rg";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execvti$rg");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "execvti$rg", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "cgpcP";
      stringArray0[1] = "cgpcP";
      String string0 = null;
      String string1 = "org.h2.command.dml.ScriptCommand$3";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("createNClob()");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "e.2_]wf\"s$}`Y,", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("createNClob()");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      int int0 = (-226);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-226), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -226
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.476402475043832
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ULhk#3V&d[}J,N z";
      stringArray0[1] = "ULhk#3V&d[}J,N z";
      stringArray0[2] = "ULhk#3V&d[}J,N z";
      stringArray0[3] = "truncateduk%.eg=7(t";
      stringArray0[4] = "-N@";
      stringArray0[5] = "ULhk#3V&d[}J,N z";
      stringArray0[6] = "ULhk#3V&d[}J,N z";
      stringArray0[7] = "ULhk#3V&d[}J,N z";
      stringArray0[8] = "ULhk#3V&d[}J,N z";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "ULhk#3V&d[}J,N z", true, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBUniqueConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = MockFile.createTempFile("String is supposed to case-insensitively end with '", "String is supposed to case-insensitively end with '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('&');
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("OaI*W", defaultDBTable0, 14, "OaI*W");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("OaI*W OAI*W NULL", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      System.setCurrentTimeMillis((-2742L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      URI uRI0 = MockURI.aFileURI;
      MockURI.normalize(uRI0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "create m5terialized view{g<n]d\nsf";
      stringArray0[2] = "v$S:xda_?TR0sl";
      stringArray0[3] = null;
      stringArray0[5] = "updatecreate materialized vi";
      stringArray0[6] = "v$S:xda_?TR0sl";
      stringArray0[7] = "updatecreate materialized vi";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("create m5terialized view{g<n]d\nsf", false, defaultDBTable0, stringArray0);
      defaultDBTable0.removeIndex(dBNonUniqueIndex0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      stringBuilder1.append((-2742L));
      TableContainer tableContainer0 = new TableContainer("Dl{d", defaultDBTable0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null, (DBSchema) null);
      defaultDBTable0.getIndex("-Pu0*-tsk|zn>L6/-rz");
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = SQLUtil.normalize("]Zf}i9cdF)xG7", false);
      assertEquals("] Zf } i9cdF) xG7", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = false;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("updrate", false, "updrate", "updrate");
      String string0 = "p%@O4q";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0F);
      int int0 = (-429);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-429), (Object) "updrate");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -429
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder("#;zxT75@~f");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("#;zxT75@~f", stringBuilder0.toString());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "T", true, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      stringArray0[0] = "update";
      stringArray0[1] = "update";
      stringArray0[2] = "update";
      stringArray0[3] = "update";
      stringArray0[5] = "update";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "update", true, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint1, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "q@9f2bd(su|l";
      stringArray0[1] = "53p.PF&+yB";
      stringArray0[2] = "53p.PF&+yB";
      stringArray0[3] = "53p.PF&+yB";
      stringArray0[4] = "53p.PF&+yB";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "q@9f2bd(su|l";
      stringArray1[1] = "q@9f2bd(su|l";
      stringArray1[2] = "53p.PF&+yB";
      stringArray1[3] = "<IH0>.@ED)l,XHYos";
      stringArray1[4] = "q@9f2bd(su|l";
      stringArray1[5] = "q@9f2bd(su|l";
      stringArray1[6] = "q@9f2bd(su|l";
      String string0 = SQLUtil.leftJoin("53p.PF&+yB", stringArray0, "q@9f2bd(su|l", "q@9f2bd(su|l", stringArray1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("execvti$rg");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("executeo)mb");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = SQLUtil.normalize("`7w6WO^.@", true);
      assertEquals("` 7w6WO ^.@", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "sqlect L");
      SQLUtil.addOptionalCondition("sqlect L", stringBuilder0);
      assertEquals("sqlect L or sqlect L", stringBuilder0.toString());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Character character0 = new Character('%');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'%'", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Select RDB$TRIGGER_SOURCE From ?DB$TRIGGERS Where RDB$TRIGGER_NAME = ?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Select RDB$TRIGGER_SOURCE From ?DB$TRIGGERS Where RDB$TRIGGER_NAME = ?", dBSchema0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBDataType dBDataType0 = DBDataType.getInstance(41, "Select RDB$TRIGGER_SOURCE From ?DB$TRIGGERS Where RDB$TRIGGER_NAME = ?");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Select RDB$TRIGGER_SOURCE From ?DB$TRIGGERS Where RDB$TRIGGER_NAME = ?", defaultDBTable0, dBDataType0, (Integer) null);
      defaultDBColumn0.toString();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("Select RDB$TRIGGER_SOURCE From ?DB$TRIGGERS Where RDB$TRIGGER_NAME = ? : SELECT RDB$TRIGGER_SOURCE FROM ?DB$TRIGGERS WHERE RDB$TRIGGER_NAME = ?");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("Select RDB$TRIGGER_SOURCE From ?DB$TRIGGERS Where RDB$TRIGGER_NAME = ? : SELECT RDB$TRIGGER_SOURCE FROM ?DB$TRIGGERS WHERE RDB$TRIGGER_NAME = ?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'Select RDB$TRIGGER_SOURCE From ?DB$TRIGGERS Where RDB$TRIGGER_NAME = ? : SELECT RDB$TRIGGER_SOURCE FROM ?DB$TRIGGERS WHERE RDB$TRIGGER_NAME = ?' not found in table 'Select RDB$TRIGGER_SOURCE From ?DB$TRIGGERS Where RDB$TRIGGER_NAME = ?'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("43X13.U");
      DBDataType dBDataType0 = DBDataType.getInstance(82, "YF/v}WRGSLm+R");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("YF/v}WRGSLm+R", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("YF/V}WRGSLM+R", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("6BPu:g&(?1u>a~z:|xv", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1471), "create");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("create CREATE(1) NULL", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DB>=!<}2T|e~%");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("DB>=!<}2T|e~%", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint("}}\"G~<8lL+4CbZXEF", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "}}\"G~<8lL+4CbZXEF");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("update", true, "DB>=!<}2T|e~%", "pK0");
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      boolean boolean0 = SQLUtil.isDML("update");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "sR\"h";
      stringArray0[1] = "sR\"h";
      stringArray0[2] = "sR\"h";
      stringArray0[3] = "sR\"h";
      stringArray0[4] = "sR\"h";
      stringArray0[5] = "sR\"h";
      stringArray0[6] = "create tablecaljlselct";
      stringArray0[7] = "sR\"h";
      stringArray0[8] = "sR\"h";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "create tablecaljlselct";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("sR\"h", stringArray0, "SOFq>HAzL", "sR\"h", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("alter tablederby.language.bulkfetchdefault.null");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = SQLUtil.normalize("Y!SBtW3J$(\")wyf8Ro", true);
      assertEquals("Y ! SBtW3J $ (\")wyf8Ro\"", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      MockFile.createTempFile("String is supposed to case-insensitively end with '", "String is supposed to case-insensitively end with '");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop table");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "UROWID");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("5hWe");
      dBCatalog0.getTable("5H_?", false);
      DBDataType dBDataType0 = DBDataType.getInstance(90112, "5H_?");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5hWe", (DBTable) null, dBDataType0, integer0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "5hWe");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      TableContainer tableContainer0 = new TableContainer("yjjyl@vn<>,");
      TableContainer tableContainer1 = new TableContainer("5hWe");
      DBSchema dBSchema0 = tableContainer1.getSchema();
      assertNull(dBSchema0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBDataType dBDataType0 = DBDataType.getInstance(96, "into");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Select RDB$TRIGGER_SOURCE From ?DB$TRIGGERS Where RDB$TRIGGER_NAME = ?", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.toString();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Select RDB$TRIGGER_SOURCE From ?DB$TRIGGERS Where RDB$TRIGGER_NAME = ?");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("Select RDB$TRIGGER_SOURCE From ?DB$TRIGGERS Where RDB$TRIGGER_NAME = ?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'Select RDB$TRIGGER_SOURCE From ?DB$TRIGGERS Where RDB$TRIGGER_NAME = ?' not found in table 'Select RDB$TRIGGER_SOURCE From ?DB$TRIGGERS Where RDB$TRIGGER_NAME = ?'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = SQLUtil.normalize("d,bxz_C@/?>", true);
      assertEquals("d, bxz_C @ / ? >", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop materialized view", false, "H]%-Ev+O+N*[0~!w`R", "altetabe");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"drop materialized view\" ", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" join ", true, " join ", " join ");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \" join \" ", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DB>=!<}2T|e~%");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table DB>=!<}2T|e~%", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("vtiArg");
      SQLUtil.addRequiredCondition("vtiArg", stringBuilder0);
      assertEquals("vtiArg and vtiArg", stringBuilder0.toString());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("pending:", stringBuilder0);
      assertEquals("pending:", stringBuilder0.toString());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("vtiArg", stringBuilder0);
      assertEquals("vtiArg", stringBuilder0.toString());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("callselect");
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("callselect", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBSchema dBSchema0 = new DBSchema("u!We-:.th5kd");
      DBPackage dBPackage0 = new DBPackage((String) null, dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(dBPackage0);
      assertEquals("u!We-:.th5kd.null", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[2] = "Q_";
      stringArray0[3] = "glter tablevtiarg";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Q_", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , Q_, glter tablevtiarg)", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.751273597885415
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLUtil.normalize("H]%-E^(+O+N*[0~!w`R", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[23];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join("/#3)|(fYRrCU", "/#3)|(fYRrCU", stringArray0, "/#3)|(fYRrCU", "/#3)|(fYRrCU", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "lter tabetiarg";
      stringArray0[1] = "lter tabetiarg";
      String[] stringArray1 = new String[4];
      stringArray1[0] = " NOT NULL";
      stringArray1[1] = " NOT NULL";
      stringArray1[2] = " NOT NULL";
      stringArray1[3] = " NOT NULL";
      String string0 = SQLUtil.innerJoin("lter tabetiarg", stringArray0, "lter tabetiarg", " NOT NULL", stringArray1);
      assertEquals("lter tabetiarg as  NOT NULL on lter tabetiarg.lter tabetiarg =  NOT NULL. NOT NULL and lter tabetiarg.lter tabetiarg =  NOT NULL. NOT NULL", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, " (", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Select RDB$TRIGGER_SOURCE From RDB$TRIGGERS Where RDB$TRIGGER_NAME = ?";
      stringArray0[1] = "Select RDB$TRIGGER_SOURCE From RDB$TRIGGERS Where RDB$TRIGGER_NAME = ?";
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("/3gwE]DD)/Bmw:(Dw3p", (String[]) null, "/3gwE]DD)/Bmw:(Dw3p", "call", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("jm");
      assertNull(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Select RDB$TRIGGER_SOURCE From RDB$TRIGGERS Where RDB$TRIGGER_NAME = ?");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop materialized viewc!y#xdr_vu");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("a", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("O@;(#}9e]");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("rename");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      DBSchema dBSchema0 = new DBSchema("CLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.toString();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable1.getColumn("CLOB : CLOB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'CLOB : CLOB' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "update");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("update", true, "DB>=!<}2T|e~%", "pK0");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("updae");
      DBIndex dBIndex0 = defaultDBTable0.getIndex("43X94.U");
      assertNull(dBIndex0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = " AvD ";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = " AvD ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Select RDB$TRIGGER_SOURCE From RDB$TRIGGERS Where RDB$TRIGGER_NAME = ?", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      int int0 = (-3353);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-3353), (long) (-3353));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3353
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.9168319967096078
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = SQLUtil.normalize("%-E^(+O+N*[0~!w`R", true);
      assertEquals("% - E ^ (+ O + N * [ 0 ~ ! w ` R", string0);
      
      DBSchema dBSchema0 = new DBSchema("%-E^(+O+N*[0~!w`R");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("% - E ^ (+ O + N * [ 0 ~ ! w ` R", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(1447, "%-E^(+O+N*[0~!w`R");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("m,UX49U+(Oi`79x+I", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      SQLUtil.typeAndName((DBObject) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "PRIMARY KEY ";
      stringArray0[1] = "m,UX49U+(Oi`79x+I";
      stringArray0[2] = "m,UX49U+(Oi`79x+I";
      stringArray0[3] = "C#l";
      stringArray0[4] = "%-E^(+O+N*[0~!w`R";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("PRIMARY KEY ", true, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"PRIMARY KEY \" FOREIGN KEY (PRIMARY KEY , m,UX49U+(Oi`79x+I, m,UX49U+(Oi`79x+I, C#l, %-E^(+O+N*[0~!w`R) REFERENCES null(PRIMARY KEY , m,UX49U+(Oi`79x+I, m,UX49U+(Oi`79x+I, C#l, %-E^(+O+N*[0~!w`R)", string1);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.7786655906578275
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DB>=!<}2T|e~%");
      defaultDBTable0.getColumnNames();
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.normalize("*_1t|!6", false);
      DBDataType dBDataType0 = DBDataType.getInstance(1024, "*_1t|!6");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("%yiO}(rGd9!w7", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = SQLUtil.renderValue("JZ7");
      assertEquals("'JZ7'", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("#ngqvy", "#ngqvy", "#ngqvy");
      assertEquals("'#ngqvy'", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("tree height: ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("", "eTW7/ky.PuEMD", stringArray0, "", "", stringArray0);
      assertEquals(" as  on eTW7/ky.PuEMD.null = .null", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, (String[]) null, (String) null, "vtiArg", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("execute", (String[]) null, "alter session", "execute", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = SQLUtil.removeComments("K");
      assertEquals("K", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.7786655906578275
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DB>=!<}2T|e~%");
      defaultDBTable0.getColumnNames();
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.normalize("*_1t|!6", false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("]Zd&O+");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderColumnListWithTableName(stringArray0[1], stringArray0);
      assertEquals("null.null, null.null, null.null, null.null", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("create table3");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("c+$l[&(;T@7");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBSchema dBSchema0 = new DBSchema("01500");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      int int0 = 25;
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(25);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 25, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("wT*7/@h[CNAFEd+", "wT*7/@h[CNAFEd+", stringArray0, "drop indexorg.databene.jdbacSnsqlutil", "wT*7/@h[CNAFEd+", stringArray0);
      assertEquals("wT*7/@h[CNAFEd+ join drop indexorg.databene.jdbacSnsqlutil as wT*7/@h[CNAFEd+ on wT*7/@h[CNAFEd+.null = wT*7/@h[CNAFEd+.null", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.join("HhW", stringArray0[3], stringArray0, stringArray0[1], stringArray0[2], stringArray0);
      assertEquals("HhW join null as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("vtiArg", (String[]) null, (String) null, "vtiArg", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "{g<N]d\\nsf";
      // Undeclared exception!
      try { 
        SQLUtil.join("inner", "^0r-e;r'o4:$ET.*]", (String[]) null, "^0r-e;r'o4:$ET.*]", "eyWK", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.join("deyee", "deyee", stringArray0, "deyee", "deyee", stringArray0);
      assertEquals("deyee join deyee as deyee on deyee.null = deyee.null and deyee.null = deyee.null and deyee.null = deyee.null and deyee.null = deyee.null and deyee.null = deyee.null and deyee.null = deyee.null and deyee.null = deyee.null", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("X:(/_N2`0|/P", "X:(/_N2`0|/P", (String[]) null, "X:(/_N2`0|/P", "X:(/_N2`0|/P", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
