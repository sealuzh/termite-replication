/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 03:13:16 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("false", 199);
      Double double0 = new Double(0.578369315012867);
      JSONObject jSONObject2 = jSONObject0.putOpt("m`L-", linkedList0);
      jSONObject0.getInt("false");
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      jSONObject2.put("T3~~Je", (Collection) linkedList1);
      JSONObject.valueToString("T3~~Je");
      try { 
        jSONObject1.getInt("\"java.lang.String@0000000009\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.String@0000000009\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.putOpt("] is not a JSONArray.", jSONObject1);
      JSONObject jSONObject3 = jSONObject2.getJSONObject("] is not a JSONArray.");
      assertSame(jSONObject3, jSONObject1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.49056603773584906
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject.getNames((Object) "}spuh");
      Double double0 = new Double(Double.NaN);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.accumulate("false", "false");
      jSONObject0.getBoolean("false");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject2 = jSONObject1.put("isformat", (Collection) linkedList0);
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4915254237288135
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.isFinite(61.804F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      try { 
        jSONObject0.getJSONArray("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalAnd(true, true);
      jSONObject0.put("(aE+{?ujI#i{oSS}L", (Object) boolean0);
      boolean boolean1 = jSONObject0.getBoolean("(aE+{?ujI#i{oSS}L");
      assertEquals(4, jSONObject0.length());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>(48);
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put("", boolean0);
      Boolean boolean1 = Boolean.TRUE;
      Boolean boolean2 = Boolean.FALSE;
      jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      jSONObject1.keys();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0966173996135877
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      HashMap<Integer, JSONObject> hashMap1 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", true);
      jSONObject1.optBoolean("wheel.json.JSONObject", true);
      jSONObject0.optBoolean("wheel.json.JSONObject");
      String string0 = jSONObject0.toString(104);
      assertNotNull(string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(34, false);
      JSONObject jSONObject0 = new JSONObject(jSONArray1);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray1, 34, 2364);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5771672505374363
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      jSONObject0.put("|fO", (Map) hashMap0);
      jSONObject0.optJSONObject("|fO");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.291412487965043
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optInt("cl");
      jSONObject0.put("cl", (double) 0);
      JSONObject jSONObject1 = jSONObject0.accumulate(",zbP", object0);
      Float float0 = new Float((float) 0);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString(float0);
      JSONObject jSONObject2 = jSONObject0.append("vu'+$X", object0);
      jSONObject2.accumulate("*Z}M4;?2W /", jSONObject1);
      Object object1 = JSONObject.NULL;
      JSONObject.testValidity(object1);
      jSONObject1.optJSONObject("=_Z");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject2.write(stringWriter0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6497848927399983
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject.doubleToString(4.645211384818367);
      JSONObject jSONObject0 = new JSONObject((Object) "X)CxX");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.names();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("8>2{3gh", (Object) jSONArray0);
      // Undeclared exception!
      jSONObject1.toString(2131);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Double double0 = new Double((-1782.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "Gs~";
      JSONObject jSONObject1 = jSONObject0.put("Gs~", 323L);
      Float float0 = new Float((-1.0F));
      jSONObject1.put("Missing value", (Object) float0);
      jSONObject0.optDouble("Missing value");
      JSONTokener jSONTokener0 = new JSONTokener("rj<3pWHx+~xyxu");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of rj<3pWHx+~xyxu
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(9);
      stringWriter0.append('%');
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 9, 62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Double double0 = new Double((-1782.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("Gs~", 304L);
      long long0 = jSONObject1.getLong("Gs~");
      assertEquals(4, jSONObject0.length());
      assertEquals(304L, long0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5929943111400195
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "/i");
      jSONObject0.toString();
      jSONObject0.toString();
      String string0 = "getdoubleToLongBits";
      JSONObject jSONObject1 = jSONObject0.putOpt("getdoubleToLongBits", "{\"java.lang.String@0000000004\":[java.lang.Byte@0000000014,java.lang.Byte@0000000015],\"java.lang.String@0000000011\":\"java.lang.Class@0000000012\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      jSONObject1.optString("{\"java.lang.String@0000000004\":[java.lang.Byte@0000000014,java.lang.Byte@0000000015],\"java.lang.String@0000000011\":\"java.lang.Class@0000000012\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      String string1 = ",xpsL\\Wk";
      String string2 = "wa";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("wa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of wa
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONObject$Null", 26L);
      int int0 = jSONObject0.optInt("wheel.json.JSONObject$Null");
      assertEquals(26, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("3LM<~55X]Sg(jvv%9", (Map) hashMap0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.592118782174603
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Double double0 = new Double((-131.5229));
      Integer integer0 = new Integer(2);
      JSONObject jSONObject0 = new JSONObject(integer0);
      Boolean boolean0 = Boolean.valueOf("[]");
      Boolean.compare(true, false);
      jSONObject0.putOpt("XS2", boolean0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject1 = new JSONObject((Object) "XS2");
      String string0 = jSONObject1.toString(2, 2);
      jSONObject1.put("wheel.json.JSONObject$1", (Object) linkedList0);
      Long long0 = new Long((-1L));
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      HashMap<Integer, JSONObject> hashMap1 = new HashMap<Integer, JSONObject>();
      String string0 = JSONObject.doubleToString((-22654515));
      assertEquals("-2.2654515E7", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A JSONObject text must end with '}'", 0L);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('H');
      jSONObject0.write(stringWriter1);
      jSONObject0.optDouble("A JSONObject text must end with '}'");
      JSONObject jSONObject1 = jSONObject0.optJSONObject("A JSONObject text must end with '}'");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer.getInteger("de");
      hashMap0.put((Integer) null, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      jSONObject0.names();
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-819), (-819));
      Float float0 = new Float(0.0F);
      JSONObject.valueToString(float0);
      try { 
        jSONObject0.getInt("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("Null key.", 0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("iI\"l}M8:/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of iI\"l}M8:/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(3542, 3542);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Double.valueOf(1.0);
      jSONObject0.putOpt("] is not a JSONArray.", linkedList0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.getNames((Object) boolean0);
      boolean boolean1 = jSONObject0.has("] is not a JSONArray.");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      linkedList1.add((Object) jSONArray0);
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = " +BB`jr*e\"6 )lRai";
      JSONObject jSONObject1 = jSONObject0.put(" +BB`jr*e\"6 )lRai", 0);
      jSONObject1.getDouble(" +BB`jr*e\"6 )lRai");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(" +BB`jr*e\"6 )lRai");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of  +BB`jr*e\"6 )lRai
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONObject$Null", (-1L));
      int int0 = jSONObject0.optInt("wheel.json.JSONObject$Null");
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.write(stringWriter0);
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("}0<g9KVe!m/a^QR", 58);
      jSONObject1.getDouble("}0<g9KVe!m/a^QR");
      JSONTokener jSONTokener0 = new JSONTokener("}0<g9KVe!m/a^QR");
      jSONTokener0.skipPast("wai");
      jSONTokener0.back();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 15 of }0<g9KVe!m/a^QR
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("T\"rq9{1vM07|Io", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8760902794872374
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Double double0 = Double.valueOf((-1984.590095));
      JSONObject jSONObject1 = jSONObject0.putOpt("VT+&x", double0);
      jSONObject0.toString(57, 57);
      JSONObject jSONObject2 = new JSONObject("{\n                                                                                                                  \"java.lang.String@0000000002\": \"java.lang.Class@0000000003\",\n                                                                                                                  \"java.lang.String@0000000004\": java.lang.Double@0000000005\n                                                         }");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Long, JSONArray> hashMap0 = new HashMap<Long, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("})spush");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of })spush
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("ispush", (Object) null);
      boolean boolean0 = new Boolean("j1lo-");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "{6_\")`ziu*x>Y";
      JSONTokener jSONTokener0 = new JSONTokener("{6_\")`ziu*x>Y");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {6_\")`ziu*x>Y
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(57, 57);
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isputOpt", (double) 2241);
      boolean boolean0 = jSONObject0.isNull("isputOpt");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(34, false);
      jSONArray1.optBoolean(31);
      try { 
        jSONArray1.getJSONObject(34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[34] is not a JSONObject.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Double double0 = new Double((-2082.4051860478));
      JSONObject jSONObject0 = new JSONObject("{}");
      String string0 = "JY7!!V]aWRr44xQ5\"";
      try { 
        jSONObject0.get("JY7!!V]aWRr44xQ5\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JY7!!V]aWRr44xQ5\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      try { 
        jSONObject0.getJSONObject("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{eLB -|QCO_a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 12 of {eLB -|QCO_a
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("isnotifyAll", 1441L);
      String string0 = jSONObject0.getString("isnotifyAll");
      assertNotNull(string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Boolean boolean0 = new Boolean("Q#[vs-hds_z_=t(ZX");
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8578112496291084
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("^Z-b O^aCV~V!{-6");
      jSONObject0.toString();
      jSONObject0.optLong(",\n");
      jSONObject0.optBoolean(",\n");
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>(8192);
      String string0 = JSONObject.valueToString(hashMap0, 8192, 120);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Long, Short> hashMap0 = new HashMap<Long, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("isparseDouble", (-2693L));
      Object object0 = JSONObject.NULL;
      Long.getLong("(UU:4Az/t*)>`^o");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("^&h`d=8Z{iE>^}-Jr", (Object) hashMap0);
      try { 
        jSONObject1.getBoolean("^&h`d=8Z{iE>^}-Jr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^&h`d=8Z{iE>^}-Jr\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", false);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = "l5[gPqn(3v9TppE k";
      JSONObject.quote("l5[gPqn(3v9TppE k");
      Object object0 = JSONObject.NULL;
      jSONObject0.opt("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("b<R*k(x+G]>l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of b<R*k(x+G]>l
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("}Q|g", "}Q|g");
      jSONObject1.get("}Q|g");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("-f", 0L);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertTrue(linkedList1.equals((Object)linkedList0));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(1.0);
      JSONObject jSONObject2 = jSONObject1.accumulate("k'1!+Y4NLlhi)QE>Wh", double0);
      jSONObject2.optDouble("k'1!+Y4NLlhi)QE>Wh", 1613.78260407);
      jSONObject1.optBoolean("k'1!+Y4NLlhi)QE>Wh", false);
      assertEquals(1, jSONObject1.length());
      
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(366.99F);
      jSONObject0.append("*2g", float0);
      jSONObject0.accumulate("*2g", "*2g");
      String string0 = JSONObject.valueToString("*2g");
      assertNotNull(string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("istoUnsignedLong", true);
      JSONObject jSONObject2 = jSONObject1.accumulate("istoUnsignedLong", "istoUnsignedLong");
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, (-2363), 10);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(0.0);
      Float.max((-2335.7F), 42);
      Integer integer0 = new Integer((-647));
      Float float1 = new Float((float) 42);
      hashMap0.put(float1, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("n:$qS>7>`F\"!?");
      Object object0 = jSONObject0.opt("n:$qS>7>`F\"!?");
      assertNull(object0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", (Object) "wheel.json.JSONException");
      try { 
        jSONObject1.getBoolean("wheel.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONException\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean(false);
      jSONObject0.put("^&h`d=8Z{iE>^}-Jr", (Object) boolean0);
      boolean boolean1 = jSONObject0.getBoolean("^&h`d=8Z{iE>^}-Jr");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("is");
      Short short0 = new Short((short)2040);
      jSONObject0.put("is", (Object) short0);
      jSONObject0.toString();
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      Byte byte0 = new Byte((byte) (-16));
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.optJSONObject((byte) (-16));
      hashMap0.put(byte0, (JSONObject) null);
      hashMap0.put(byte0, (JSONObject) null);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      Byte byte0 = new Byte((byte) (-59));
      hashMap0.put((Float) null, byte0);
      hashMap0.values();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("true", (Collection) linkedList0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.append("true", jSONObject0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Double.valueOf(1.7390243161624577);
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a JSONArray.", linkedList0);
      try { 
        jSONObject1.append("] is not a JSONArray.", "] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(0.0);
      hashMap0.put(double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("|R5lm", (Object) hashMap0);
      jSONObject0.put("|R5lm", 1601.8524084);
      long long0 = jSONObject0.optLong("|R5lm");
      assertEquals(1601L, long0);
      
      jSONObject1.optJSONObject("no");
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.doubleToString((-98.500515));
      jSONObject0.append("-98.500515", stringWriter0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("-98.500515");
      String string1 = JSONObject.valueToString(jSONArray0, 4508, (-745));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(object0, (-138), (-1472));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a JSONArray.";
      jSONObject0.putOpt("] is not a JSONArray.", "] is not a JSONArray.");
      String string1 = "getsum";
      try { 
        jSONObject0.getDouble("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Long, Short> hashMap0 = new HashMap<Long, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "^&h`d=8Z{iE>^}-Jr";
      Object object0 = JSONObject.NULL;
      Byte byte0 = new Byte((byte)101);
      hashMap0.put(byte0, jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("^&h`d=8Z{iE>^}-Jr", object0);
      try { 
        jSONObject1.getDouble("^&h`d=8Z{iE>^}-Jr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^&h`d=8Z{iE>^}-Jr\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      HashMap<Integer, JSONObject> hashMap1 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("wheel.json.JSONObject", (-22654515));
      jSONObject0.getDouble("wheel.json.JSONObject");
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONObject");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of wheel.json.JSONObject
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("^&h`d=8Z{iE>^}-Jr", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.2761863695084785
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = JSONObject.quote("],Ts not O JSONArraT.");
      assertEquals("\"],Ts not O JSONArraT.\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"],Ts not O JSONArraT.\"");
      jSONObject0.toString(42);
      jSONObject0.toString((-1578));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Float float0 = new Float((-1.0F));
      Float.max((-1035.7043F), (-1035.7043F));
      Float.isFinite((-937.485F));
      Float.min((-2483.5F), (-2483.5F));
      int int0 = 4633;
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean.getBoolean((String) null);
      JSONObject.valueToString(boolean0, 4633, 4633);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(">q4U':-GB8,uY\"N.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of >q4U':-GB8,uY\"N.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(1028);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ':' after a key", (Object) integer0);
      jSONObject1.optDouble("Expected a ':' after a key");
      try { 
        jSONObject0.getJSONArray("SQ'2(2_D}G\\9DgIfZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"SQ'2(2_D}G\\\\9DgIfZ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Long long0 = new Long(3833L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (Object) long0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long(1303L);
      JSONObject.getNames((Object) null);
      jSONObject0.optDouble("", (double) 1303L);
      Integer integer0 = new Integer(1221);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = JSONObject.quote("{a!mu}.d%/CAKxoDFu");
      assertEquals("\"{a!mu}.d%/CAKxoDFu\"", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = JSONObject.quote("',i5%*vFF/");
      assertEquals("\"',i5%*vFF/\"", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("(Q\"9p*+6aF>O<7C_\"~");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject((-3026));
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a JSONArray.", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.put((String) null, (-1418));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2039.078902662);
      assertEquals("2039.078902662", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((float) (-4913));
      Integer integer0 = new Integer(47);
      Integer.max(47, (-4913));
      hashMap0.put(float0, integer0);
      boolean boolean0 = jSONObject0.has("F");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      Short short0 = new Short((short)92);
      hashMap0.put("X>P~K!uN}*$$ kV-q1", short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      String string0 = jSONObject0.toString(120, (-320));
      assertNotNull(string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("|zQC.:F}9d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|zQC.:F}9d\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.097242790482881
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject1.put("\"{9a&IBcuAI", (Collection) linkedList0);
      jSONObject0.names();
      jSONObject1.remove("\"{9a&IBcuAI");
      Object object0 = new Object();
      jSONObject0.accumulate("\"{9a&IBcuAI", object0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optString("\"{9a&IBcuAI", "\"{9a&IBcuAI");
      int int0 = (-1942);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\"{9a&IBcuAI", true);
      Object object0 = jSONObject0.remove("\"{9a&IBcuAI");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Float float0 = new Float((-1.0));
      String string0 = JSONObject.numberToString(float0);
      Float.isFinite((-1.0F));
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "java.lang.Float@0000000002");
      jSONObject0.write(stringWriter1);
      Boolean boolean0 = new Boolean(true);
      jSONObject0.putOpt("java.lang.Float@0000000002", boolean0);
      String string1 = jSONObject0.optString("java.lang.Float@0000000002");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = 114.403;
      jSONObject0.remove("($j?:Xcb&");
      JSONTokener jSONTokener0 = new JSONTokener("($j?:Xcb&");
      // Undeclared exception!
      try { 
        jSONTokener0.next((-3696));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>(8192);
      hashMap0.put("}'[`N$XSa)!b", (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(2904);
      hashMap0.put(integer0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a JSONArray.", "] is not a JSONArray.");
      try { 
        jSONObject1.getJSONObject("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = JSONObject.quote("qC17OV.|F}q\"1gg[9m&");
      assertEquals("\"qC17OV.|F}q\\\"1gg[9m&\"", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("qlLX42x?]]_\"@", hashMap0);
      jSONObject0.optString("\"\"", (String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("w/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"w/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("gettoLowerCase", 104);
      assertEquals(104, int0);
      
      String string0 = JSONObject.quote("true");
      assertEquals("\"true\"", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-841), (-841));
      Float float0 = new Float((float) (-841));
      jSONObject0.putOpt("\b", float0);
      long long0 = jSONObject0.getLong("\b");
      assertEquals((-841L), long0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getgetJSONObject", 1190.153);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONException", "wheel.json.JSONException");
      try { 
        jSONObject1.getLong("wheel.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONException\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Double.valueOf(1.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a JSONArray.", linkedList0);
      try { 
        jSONObject1.getInt("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("->U,h", (Object) jSONArray0);
      JSONArray jSONArray1 = jSONObject1.getJSONArray("->U,h");
      assertSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("getparseShort", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double((-602.1035287));
      Double double1 = new Double((-602.1035287));
      hashMap0.put(double0, double1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      hashMap0.keySet();
      try { 
        jSONObject0.append((String) null, "jo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, "}Q|g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)15);
      jSONObject0.append("rep", short0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(15);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Writer writer0 = jSONArray0.write(stringWriter1);
      jSONArray0.write(stringWriter0);
      Short short0 = new Short((short) (-2480));
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(writer0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double double0 = new Double((-734.9665292716992));
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertFalse(linkedList0.contains(string0));
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-520));
      Integer integer1 = new Integer((-4179));
      hashMap0.put(integer1, integer1);
      Integer integer2 = new Integer(0);
      hashMap0.put(integer0, integer2);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((int) (byte)50, (int) (byte)50);
      assertNotNull(string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate("}Q|g", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("issplit", (-2457.1786));
      assertEquals((-2457.1786), double0, 0.01);
      
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.0966173996135877
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = "le";
      jSONObject0.optBoolean("le");
      String string1 = "";
      jSONObject0.optInt("$=p^3/3>$SHB?3SN_");
      linkedList0.stream();
      jSONObject1.optString("RvNYL|=h*D", "");
      String string2 = "is";
      linkedList1.add("is");
      Float float0 = new Float((-2870.007549757441));
      String string3 = "";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of is
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      double double0 = jSONObject0.optDouble(",:]}/\"[{;=#", (double) 0L);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Float.max(1.0F, 1.0F);
      Float.min(1.0F, (-1.0F));
      String string0 = JSONObject.valueToString(linkedList0, 10, 4633);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Integer integer0 = new Integer((-2965));
      String string0 = JSONObject.valueToString(integer0, (-2965), (-2965));
      assertNotNull(string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-520));
      Integer integer1 = new Integer(0);
      hashMap0.put(integer0, integer1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((int) (byte)50, (int) (byte)50);
      assertNotNull(string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put((Integer) null, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((int) (byte)50, (int) (byte)50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.toString(2, 2);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.9665755727836931
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject.quote("\n");
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0, 5, 5);
      jSONObject0.toString(5);
      jSONObject0.accumulate("\r", "{}");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Float float0 = new Float(624.8776561028);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("BE8%S\"EF}w@>.P(K", "%-21PgKU%");
      assertEquals("%-21PgKU%", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("}/spuh");
      assertEquals("", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optDouble(",\n");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("fE", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("do", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.8743976914474427
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optBoolean("\",\n\"");
      try { 
        jSONObject0.getInt("6^`csAIg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6^`csAIg\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-52));
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("wheel.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONException\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 12, 0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0, 68, 47);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("[l+Dm~[ bw58{Q^$mHp", 3083L);
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("Y~;>,l/ZyAeFs9 v");
      String string0 = ".\\MD?U\"=L[,@Gz;=7M";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(".MD?U\"=L[,@Gz;=7M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of .MD?U\"=L[,@Gz;=7M
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<Long, Short> hashMap0 = new HashMap<Long, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = (-18603944);
      jSONObject0.optInt("getopt", (-18603944));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = "?xPYEeB5(4zt";
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("?xPYEeB5(4zt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ?xPYEeB5(4zt
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "^&h`d=8Z{iE>^}-Jr";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("^&h`d=8Z{iE>^}-Jr", object0);
      JSONTokener jSONTokener0 = new JSONTokener("^&h`d=8Z{iE>^}-Jr");
      jSONObject1.optInt("^&h`d=8Z{iE>^}-Jr");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ^&h`d=8Z{iE>^}-Jr
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = new JSONArray();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>(8192);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("gettoString");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 171
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 172
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 173
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("WP lWF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WP lWF\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 174
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("8H]quF&?cvQx]8B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8H]quF&?cvQx]8B\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 175
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("x");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of x
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 176
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
