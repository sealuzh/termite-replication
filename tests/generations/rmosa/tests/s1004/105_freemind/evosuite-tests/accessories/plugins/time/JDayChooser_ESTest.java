/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 02:09:46 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.common.plugins.MapNodePositionHolderBase;
import freemind.modes.filemode.FileMode;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMode;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.DebugGraphics;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JEditorPane;
import javax.swing.JFormattedTextField;
import javax.swing.JPopupMenu;
import javax.swing.JSpinner;
import javax.swing.KeyStroke;
import javax.swing.SwingConstants;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.css.parser.Parser;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResources;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.w3c.css.sac.CSSException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultFormatterFactory defaultFormatterFactory0 = new DefaultFormatterFactory();
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatterFactory) defaultFormatterFactory0);
      KeyEvent keyEvent0 = new KeyEvent(jFormattedTextField0, 37, 1329L, 37, 37, 'l');
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.keyPressed(keyEvent0);
      Color color0 = jDayChooser0.decorationBackgroundColor;
      assertEquals(228, color0.getGreen());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.minSelectableDate = null;
      // Undeclared exception!
      try { 
        jDayChooser0.updateUI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.8961651689921424
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(1);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getDayPanel();
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.696307146143559
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Timestamp timestamp0 = new Timestamp(0L);
      JDayChooser jDayChooser1 = new JDayChooser();
      Date date0 = jDayChooser1.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, timestamp0);
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getPreferredSize();
      jDayChooser0.setMaxDayCharacters(2);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Border border0 = LineBorder.createGrayLineBorder();
      jDayChooser_DecoratorButton0.setBorder(border0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 38, 0L, 90, 38, '%');
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.695518092694581
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      ImageIcon imageIcon0 = new ImageIcon();
      JButton jButton0 = new JButton(imageIcon0);
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 2809, "accessories.plugins.time.JDayChooser$DecoratorButton", (-561));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 524288, 524288, 524288, 39, ':');
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(15, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 35, 35, 35, 35, 'l');
      jDayChooser0.keyPressed(keyEvent0);
      Color color0 = jDayChooser0.decorationBackgroundColor;
      assertEquals((-2956050), color0.getRGB());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent("9", 8822, "day", 8822);
      ImageIcon imageIcon0 = MapNodePositionHolderBase.getMapLocationIcon();
      System.setCurrentTimeMillis(0L);
      jDayChooser0.repaint(0L);
      JButton jButton0 = new JButton(imageIcon0);
      jDayChooser0.getClientProperty(jButton0);
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Parser parser0 = new Parser();
      jDayChooser0.setMinSelectableDate((Date) null);
      MindMapMode mindMapMode0 = new MindMapMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.cyan;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getFont();
      StyleContext.getDefaultStyleContext();
      MindMapMode mindMapMode0 = new MindMapMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.137439206637912
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      Color color0 = Color.BLACK;
      jDayChooser0.setWeekdayForeground(color0);
      Parser parser0 = new Parser();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke((-1197), 35, true);
      jDayChooser0.unregisterKeyboardAction(keyStroke0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.drawWeeks();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setMaxDayCharacters(35);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.isDecorationBackgroundVisible();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PipedInputStream pipedInputStream0 = new PipedInputStream(15);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      parser0.parseSelectors("+\"50-r?");
      try { 
        parser0.parseStyleSheet("Windows");
        fail("Expecting exception: CSSException");
      
      } catch(CSSException e) {
         //
         // Unable to make sense of URL for connection
         //
         verifyException("org.apache.batik.css.parser.Parser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.896974462485295
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize(581, 12);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser1 = new JDayChooser();
      String string0 = "";
      jDayChooser1.firePropertyChange("", (short)238, (short)238);
      jDayChooser0.isWeekOfYearVisible();
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)56;
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy((String) null, vetoableChangeListener0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.getSundayForeground();
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DateEditor jSpinner_DateEditor0 = null;
      try {
        jSpinner_DateEditor0 = new JSpinner.DateEditor(jSpinner0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // model not a SpinnerDateModel
         //
         verifyException("javax.swing.JSpinner$DateEditor", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      Parser parser0 = new Parser();
      parser0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-4497), "day", (-4497), (-4497));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-2271));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = SwingConstants.PREVIOUS;
      jDayChooser0.setWeekOfYearVisible(true);
      MockDate mockDate0 = new MockDate(13, 13, 13, 13, 13, 13);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 13, 13, 4163, 937, '\'', 937);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5777466264255984
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.init();
      jDayChooser0.getInputContext();
      jDayChooser0.setDay(48);
      jDayChooser0.setAutoscrolls(true);
      jDayChooser0.setMonth(48);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.getDaysInMonth();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.800934927977544
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.selectedDay = (JButton) jDayChooser_DecoratorButton0;
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMonth(0);
      jDayChooser0.setDay(2662);
      assertEquals(31, jDayChooser0.getDay());
      
      jDayChooser0.setDay(24);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 210);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5777913766633342
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setDay(691);
      jDayChooser0.setMonth(569);
      jDayChooser0.setMonth(479);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      BrowseMode browseMode0 = new BrowseMode();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8016608785763006
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate(3215, 3215, 3215);
      jDayChooser0.setMinSelectableDate(mockDate0);
      Parser parser0 = new Parser();
      assertEquals("http://www.w3.org/TR/REC-CSS2", parser0.getParserVersion());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.minSelectableDate = null;
      Color color0 = MapView.standardNodeTextColor;
      // Undeclared exception!
      try { 
        jDayChooser0.setForeground((Color) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFont((Font) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.menu;
      jDayChooser0.setForeground(systemColor0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(26);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDoubleBuffered(true);
      BrowseMode browseMode0 = new BrowseMode();
      JEditorPane jEditorPane0 = new JEditorPane();
      Color color0 = jEditorPane0.getSelectionColor();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.setEnabled(false);
      Color color1 = jDayChooser0.decorationBackgroundColor;
      assertEquals(210, color1.getRed());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(228, color0.getGreen());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setYear(3215);
      BrowseMode browseMode0 = new BrowseMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "21");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BrowseMode browseMode0 = new BrowseMode();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.8961031581030303
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      jDayChooser_DecoratorButton0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser_DecoratorButton0.isFocusable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.minSelectableDate = null;
      // Undeclared exception!
      try { 
        jDayChooser0.setMonth((-1322));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.800854989187817
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.selectedDay = (JButton) jDayChooser_DecoratorButton0;
      int int0 = SwingConstants.NORTH;
      jDayChooser0.setMonth(1);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.801703258778878
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initDecorations();
      jDayChooser0.setDay(28);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(28, jDayChooser0.getDay());
      
      JDayChooser jDayChooser1 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(28, 28, 28, 163, (-1112));
      jDayChooser1.setCalendar(mockGregorianCalendar0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("hsqldb.catalogs", 63193);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      jDayChooser1.setAutoscrolls(true);
      jDayChooser1.setMonth(2038);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.ITALIAN;
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Parser parser0 = new Parser();
      parser0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-16754012), color0.getRGB());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.577674757227539
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      EmptyBorder emptyBorder0 = new EmptyBorder(1451, 358, 358, 11);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      Insets insets0 = jPopupMenu0.getMargin();
      insets0.bottom = 12;
      emptyBorder0.getBaselineResizeBehavior(jDayChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setBorder(emptyBorder0);
      jDayChooser0.setDay(3860);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setLocation(11, 49);
      jDayChooser_DecoratorButton1.addMouseListener((MouseListener) null);
      MockFile mockFile0 = new MockFile("go/", "\">G");
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.minSelectableDate = null;
      Color color0 = MapView.standardNodeTextColor;
      // Undeclared exception!
      try { 
        jDayChooser0.setMaxDayCharacters(20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(1075);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 15, 15, 15, 15, 'l');
      jDayChooser0.keyPressed(keyEvent0);
      Color color0 = jDayChooser0.decorationBackgroundColor;
      assertEquals(210, color0.getRed());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 35, 35, 35, 35, 'l');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, int0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      PDFResources pDFResources0 = new PDFResources(90);
      pDFResources0.setObjectNumber(90);
      EmptyBorder emptyBorder0 = new EmptyBorder(90, (-1642), 164, 8658);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setBorder(emptyBorder0);
      FontInfo fontInfo0 = new FontInfo();
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Boolean boolean1 = new Boolean(true);
      int int0 = 63741;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 63741, 11L, (-592), 0, '6', 0);
      KeyEvent.getExtendedKeyCodeForChar(0);
      InputEvent.getModifiersExText(0);
      keyEvent0.consume();
      jDayChooser0.keyReleased(keyEvent0);
      boolean boolean2 = new Boolean(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FontInfo fontInfo0 = null;
      PDFResources pDFResources0 = new PDFResources(0);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, 0, 705);
      pDFPage0.getDocument();
      String string0 = "searchresults";
      int int1 = 3218;
      // Undeclared exception!
      try { 
        pDFPage0.toPDFString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object has no number assigned: org.apache.fop.pdf.PDFPage@0000000060
         //
         verifyException("org.apache.fop.pdf.PDFObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.695529662081982
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.updateUI();
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addListeners(0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundSelectionColor();
      jDayChooser0.setBackground(color0);
      jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Color color0 = Color.cyan;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-2147);
      floatArray0[1] = (float) (-2147);
      floatArray0[2] = (float) (-2147);
      floatArray0[3] = (-699.0F);
      floatArray0[4] = (float) (-2147);
      floatArray0[5] = (float) (-2147);
      floatArray0[6] = (float) (-2147);
      Color.RGBtoHSB((-2147), (-2147), (-2147), floatArray0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getFont();
      StyleContext.getDefaultStyleContext();
      StyleContext styleContext0 = new StyleContext();
      styleContext0.getFont("Pf(^j", 63193, 15);
      MockDate mockDate0 = new MockDate((-3886L));
      jDayChooser0.setMaxSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-1547));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getVisibleRect();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.setDoubleBuffered(false);
      BrowseMode browseMode0 = new BrowseMode();
      jDayChooser0.setEnabled(true);
      Color color0 = jDayChooser0.decorationBackgroundColor;
      assertEquals(255, color0.getAlpha());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.minSelectableDate = null;
      // Undeclared exception!
      try { 
        jDayChooser0.setMaxDayCharacters((-3542));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-473), (-1L), 90, 90, '.', 0);
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyTyped(keyEvent0);
      FileMode fileMode0 = new FileMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }
}
