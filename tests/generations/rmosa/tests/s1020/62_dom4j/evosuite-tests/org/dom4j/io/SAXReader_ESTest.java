/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 23:24:01 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0533214504847934
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          sAXReader0.setEncoding("//tmp/b@QwGTkjwd0/b@QwGTkjwd");
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor245.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor245.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.addHandler("", dispatchHandler0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.setEncoding("w,6l^");
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature("org.jaxen.function.TrueFunction", true);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0555153951973866
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      SAXParseException sAXParseException0 = new SAXParseException("http://xml.org/sax/handlers/LexicalHandler", "]G+xt*^>@qt6=b", "}9@#VptEUPWVQBo$9zS", 35, 35);
      xMLFilterImpl0.fatalError(sAXParseException0);
      SAXParseException sAXParseException1 = new SAXParseException("}9@#VptEUPWVQBo$9zS", "x@Fh", "x@Fh", 188, 188);
      xMLFilterImpl0.warning(sAXParseException1);
      sAXReader0.setEncoding("}9@#VptEUPWVQBo$9zS");
      sAXReader0.isIgnoreComments();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("+\"dITxI*o~*{[nHV");
      sAXReader_SAXEntityResolver0.resolveEntity("K1kQpFa)Z;J&@s", "+\"dITxI*o~*{[nHV");
      sAXReader_SAXEntityResolver0.resolveEntity("j#H'q5IF(QoBONl", "}9@#VptEUPWVQBo$9zS");
      sAXReader0.getEncoding();
      sAXReader0.isStringInternEnabled();
      try { 
        sAXReader0.read("}9@#VptEUPWVQBo$9zS");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.createDefaultEntityResolver("");
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/http:/xml.org/sax/features/namespace-prefixes0http:/xml.org/sax/features");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "XXrAIco-0Pl-#");
      String string0 = "http://xml.org/sax/features/namespace-prefixes";
      DefaultHandler defaultHandler0 = new DefaultHandler();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      InputStream inputStream0 = null;
      // Undeclared exception!
      sAXReader0.installXMLFilter(xMLFilterImpl0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      // Undeclared exception!
      try { 
        sAXReader0.setProperty("//tmp/tmp/tmp/ of document 0:0/tmp/ of document 0:0/tmp/tmp/ of document 0:0/tmp/ of document 0:", "//tmp/tmp/tmp/ of document 0:0/tmp/ of document 0:0/tmp/tmp/ of document 0:0/tmp/ of document 0:");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      String string0 = "/utmp/?Hi=Q|&9_|}\"0KJ_-#I1OvK[*%Q|eO$";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/ [name: 0/utmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      String string1 = " [name: ";
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) mockFileInputStream0, "/utmp/?Hi=Q|&9_|}\"0KJ_-#I1OvK[*%Q|eO$");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      MockFile.createTempFile(" [name: ", "/utmp/?Hi=Q|&9_|}\"0KJ_-#I1OvK[*%Q|eO$");
      // Undeclared exception!
      try { 
        sAXReader0.read(" [name: ");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8836095585126564
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.setEncoding("Commentnodes cannot have children");
      String string0 = "//tmp/&RK8_R0/home/ubuntu/termite/projects/62_dom4j/org.jaxen.saxpath.XPathReader/tmp/The Attribute already has an existing parent \"0The Attribute already has an existing parent \"/org.jaxen.saxpath.XPathReader0org.jaxen.saxpath.XPathReader";
      File file0 = MockFile.createTempFile("Commentnodes cannot have children", "//tmp/&RK8_R0/home/ubuntu/termite/projects/62_dom4j/org.jaxen.saxpath.XPathReader/tmp/The Attribute already has an existing parent \"0The Attribute already has an existing parent \"/org.jaxen.saxpath.XPathReader0org.jaxen.saxpath.XPathReader");
      xMLFilterImpl0.endPrefixMapping("//tmp/&RK8_R0/home/ubuntu/termite/projects/62_dom4j/org.jaxen.saxpath.XPathReader/tmp/The Attribute already has an existing parent \"0The Attribute already has an existing parent \"/org.jaxen.saxpath.XPathReader0org.jaxen.saxpath.XPathReader");
      // Undeclared exception!
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      sAXReader0.createDefaultEntityResolver("");
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8836095585126564
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEncoding("M.X");
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      String string0 = "//tmp/lLa:XR$0/tmp/b@QwGTkjwd0/b@QwGTkjwd";
      StringReader stringReader0 = new StringReader("//tmp/lLa:XR$0/tmp/b@QwGTkjwd0/b@QwGTkjwd");
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      MockURL.getHttpExample();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getAttributeQName("//tmp/!2a1l{F0!2a1l{F", (String) null, "http://xml.org/sax/handlers/LexicalHandler");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      boolean boolean0 = sAXReader0.isValidating();
      assertTrue(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      File file0 = MockFile.createTempFile("//tmp/ of document 0:", "//tmp/ of document 0:");
      // Undeclared exception!
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      XMLFilter xMLFilter0 = sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter(xMLFilter0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      String string0 = "org.dom4j.util.UserDataAttribute";
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      charArray0[1] = '&';
      StringReader stringReader0 = new StringReader("org.dom4j.util.UserDataAttribute");
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) stringReader0, (String) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("h:J1RAD@&_+AnS");
      byte[] byteArray0 = new byte[4];
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("_q@Eg");
      sAXReader0.createDefaultEntityResolver(";?:Pypjr");
      try { 
        sAXReader0.read((InputStream) null, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("", "//tmp/UFt0", "");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.createDefaultEntityResolver("/#=}[T");
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      String string0 = "ao;?jWX";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("ao;?jWX");
      sAXReader_SAXEntityResolver0.resolveEntity("/", "ao;?jWX");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "ao;?jWX");
      SAXReader sAXReader1 = new SAXReader(true);
      sAXReader_SAXEntityResolver0.resolveEntity("/", "ao;?jWX");
      sAXReader0.getEntityResolver();
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, 3430, 3430);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringReader stringReader0 = new StringReader("org.dom4j.util.UserDataAttribute");
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isStripWhitespaceText());
      
      sAXReader0.setStripWhitespaceText(true);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl2);
      sAXReader0.setXMLFilter(xMLFilterImpl2);
      XMLReader xMLReader0 = sAXReader0.installXMLFilter(xMLFilterImpl1);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertSame(xMLReader0, xMLFilterImpl2);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      String string0 = "//tmp/tmp/K310http:/xml.org/sax/features/namespace-prefixes0eVwc'K";
      MockFile.createTempFile("//tmp/tmp/K310http:/xml.org/sax/features/namespace-prefixes0eVwc'K", (String) null);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0533214504847934
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9720861369674885
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      InputSource inputSource0 = new InputSource("?wgx");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/?wgx : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.setFeature("http://xml.org/sax/features/namespace-prefixes", true);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.setProperty("M7NJTm(*:N$k3Wr^", "M7NJTm(*:N$k3Wr^");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: M7NJTm(*:N$k3Wr^
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(":HUx{Yn~6,Vl2VXP{");
      sAXReader_SAXEntityResolver0.resolveEntity(":HUx{Yn~6,Vl2VXP{", ":HUx{Yn~6,Vl2VXP{");
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      String string0 = "";
      sAXReader0.createDefaultEntityResolver("");
      sAXReader0.isIgnoreComments();
      StringReader stringReader0 = new StringReader("//tmp/tmp/tmp/K310http:/xml.org/sax/features/namespace-prefixes0eVwc'K0/tmp/tmp/ASx<tBHu1*2+0/tmp/tmp/tmp/tmp/ of document 0:0/tmp/ of document 0:0/tmp/tmp/ of document 0:0/tmp/ of document 0:/tmp/tmp/tmp/ of document 0:0/tmp/ of document 0:0/tmp/tmp/ of document 0:0/tmp/ of document 0:0/tmp/tmp/tmp/ of document 0:0/tmp/ of document 0:0/tmp/tmp/ of d]cument 0:0/tmp/ of document 0:0/tmp/tmp/tmp/tmp/ of document 0:0/tmp/ of document 0:0/tmp/tmp/ of document 0:0/tmp/ of document 0:0/tmp/tmp/ of document 0:0/tmp/ of document 0:0/tmp/ASx<tBHu1*2+0/tmp/tmp/tmp/tmp/ of document 0:0/tmp/ of document 0:0/tmp/tmp/ of document 0:0/tmp/ of document 0:/tmp/tmp/tmp/ of document 0:0/tmp/ of document 0:0/tmp/tmp/ of document 0:0/tmp/ of document 0:0/tmp/tmp/tmp/ of document 0:0/tmp/ of document 0:0/tmp/tmp/ of document 0:0/tmp/ of document 0:0/tmp/tmp/tmp/tmp/ of document 0:0/tmp/ of document 0:0/tmp/tmp/ of document 0:0/tmp/ of document 0:0/tmp/tmp/ of document 0:0/tmp/ of document 0:");
      InputSource inputSource0 = new InputSource(stringReader0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      try { 
        sAXReader0.setFeature("http://xml.org/sax/features/use-locator2", false);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // Feature 'http://xml.org/sax/features/use-locator2' is read only.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.startDocument();
      sAXReader0.getEntityResolver();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2706);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.setDefaultHandler((ElementHandler) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "//tmp/file:/0~7~G8kFVqu$<3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"//tmp/file:/0~7~G8kFVqu$<3\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.addHandler((String) null, dispatchHandler0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "//tmp/ of document 0org.dom4j.tree.AbstractAttribute");
      SAXReader sAXReader1 = new SAXReader((String) null);
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.2756304369699905
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = (XMLFilterImpl)sAXReader0.installXMLFilter(xMLFilterImpl0);
      MockURL.getHttpExample();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("E@hYF$|*[5j\"(pc/_Iz");
      sAXReader_SAXEntityResolver0.resolveEntity("E@hYF$|*[5j\"(pc/_Iz", "H");
      sAXReader0.setEntityResolver(xMLFilterImpl1);
      SAXReader sAXReader1 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      sAXReader1.installXMLFilter(xMLFilterImpl0);
      try { 
        sAXReader0.read((InputStream) null, "E@hYF$|*[5j\"(pc/_Iz");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0533214504847934
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("c!Lm");
      EvoSuiteFile evoSuiteFile0 = null;
      try { 
        sAXReader0.read("c!Lm");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/c!Lm (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/c!Lm (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8827437576468555
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      // Undeclared exception!
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0533214504847934
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 704, 704);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "org.dom4j.io.SAXReader");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.getXMLReader();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "[#`6G!^%INV");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      File file0 = MockFile.createTempFile("//tmp/tmp/K310http:/xml.org/sax/features/namespace-prefixes0eVwc'K", "//tmp/tmp/K310http:/xml.org/sax/features/namespace-prefixes0eVwc'K");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setValidation(false);
      try { 
        MockURL.URL("//tmp/comment()0\"cU1F`Z", "//tmp/comment()0\"cU1F`Z", (-3373), "Error on line ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-3373
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getErrorHandler();
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = '+';
      xMLReaderAdapter0.endDocument();
      parserAdapter0.characters(charArray0, 1, 2378);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.removeHandler("NbwzfY<R8h1sNumV^Aa");
      LocatorImpl locatorImpl0 = null;
      try {
        locatorImpl0 = new LocatorImpl((Locator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xml.sax.helpers.LocatorImpl", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      String string0 = null;
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "$xW,|~Bhmp<7");
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      StringReader stringReader0 = new StringReader("Invalid node type. Cannot add node: ");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.0543110595891974
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getDocumentFactory();
      String string0 = "ErBM=C%+tO";
      sAXReader0.setEncoding("ErBM=C%+tO");
      sAXReader0.isMergeAdjacentText();
      StringReader stringReader0 = new StringReader("http://xml.org/sax/features/string-interning");
      stringReader0.skip(0L);
      try { 
        sAXReader0.read((Reader) stringReader0, " userData: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  userData:  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.resetHandlers();
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("//tmp/tmp/?Hi=Q|&9_|}\"0KJ_-#I1OvK[*%Q|eO$0/tmp/?Hi=Q|&9_|}\"0KJ_-#I1OvK[*%Q|eO$");
      try { 
        sAXReader0.read((Reader) stringReader0, "//tmp/tmp/?Hi=Q|&9_|}\"0KJ_-#I1OvK[*%Q|eO$0/tmp/?Hi=Q|&9_|}\"0KJ_-#I1OvK[*%Q|eO$");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.createDefaultEntityResolver("");
      StringReader stringReader0 = new StringReader("3\"");
      try { 
        sAXReader0.read((Reader) stringReader0, "CcGIZ`");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document CcGIZ` : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      URL uRL0 = MockURL.getHttpExample();
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "//tmp/tmp/tmp/p'oG6-Y|<>+Y00/tmp/tmp/tmp/ of document 0:0 ]0 0&{Ed|+*P");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Validation not supported for XMLReader: ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("Validation not supported for XMLReader: ", "Validation not supported for XMLReader: ");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      MockFile.createTempFile("s1AQd,Np3ww6gB", "^qeAmU~c");
      DOMDocument dOMDocument0 = new DOMDocument("^qeAmU~c");
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.createDefaultEntityResolver("qu<u9");
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.getDocumentFactory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.getDispatchHandler();
      sAXReader0.getDispatchHandler();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertNotNull(xMLReader0);
      
      sAXReader0.configureReader(xMLReader0, (DefaultHandler) null);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertNotNull(dispatchHandler0);
      
      dispatchHandler0.resetHandlers();
      dispatchHandler0.removeHandler("N");
      sAXReader0.setDispatchHandler(dispatchHandler0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertNotNull(dispatchHandler0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("l$N(", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class l$N( not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      sAXReader0.getXMLReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.setFeature("rr wE~{#", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: rr wE~{#
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIgnoreComments(true);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      try { 
        sAXReader0.setXMLReaderClassName("//tmp/http:/xml.org/sax/properties/lexical-handler0}IW!1s");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //tmp/http:/xml.org/sax/properties/lexical-handler0}IW!1s not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setStringInternEnabled(false);
      MockFile.createTempFile("w`>l7K", "w`>l7K");
      DefaultDocument defaultDocument0 = new DefaultDocument("w`>l7K");
      assertFalse(defaultDocument0.isReadOnly());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      MockFile mockFile0 = new MockFile("");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.createDefaultEntityResolver("//tmp/http:/xml.org/sax/properties/lexical-handler0}IW!1s");
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.createDefaultEntityResolver((String) null);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      String string0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(parserAdapter0, defaultHandler2_0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, (DefaultHandler) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@505d94f4 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockURL.getHttpExample();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.getXMLFilter();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.installXMLFilter((XMLReader) null);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertNotNull(documentFactory0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SAXReader sAXReader0 = new SAXReader(true);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(true);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isValidating());
      assertTrue(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.isValidating();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.849210954291493
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("_q@Eg");
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/string-interning", "");
      sAXReader_SAXEntityResolver0.resolveEntity("=MH", "_q@Eg");
      StringReader stringReader0 = new StringReader("=MH");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("wMSl]!>");
      InputSource inputSource0 = new InputSource(stringReader0);
      // Undeclared exception!
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setMergeAdjacentText(true);
      DefaultDocument defaultDocument0 = new DefaultDocument();
      assertFalse(defaultDocument0.supportsParent());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.startDocument();
      sAXReader0.setErrorHandler(defaultHandler0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("O q*I81JN;[f2(}&~T");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class O q*I81JN;[f2(}&~T not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }
}
