/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 09 04:52:36 GMT 2020
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[9][5];
      doubleArray0[3] = doubleArray0[2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.7976931348623157E308;
      double[] doubleArray2 = new double[7];
      doubleArray1[1] = (-1618.26336953469);
      doubleArray2[5] = (-1618.26336953469);
      doubleArray0[2] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString(5);
      assertEquals("(-inf-0],(0-0],(0-0],(0-0],(0-0],(0-inf)", string0);
      
      Discretize discretize1 = new Discretize();
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      System.setCurrentTimeMillis(1L);
      String string1 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string1);
      
      discretize0.getCutPoints(5);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getBinRangesString(418);
      discretize0.getOptions();
      discretize0.binsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.put(protectedProperties0, "Number of bins.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("_", arrayList0, 3);
      discretize0.setInvertSelection(true);
      discretize0.setInputFormat(instances0);
      discretize0.setMakeBinary(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      discretize0.getInvertSelection();
      discretize0.useBinNumbersTipText();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_");
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.getInvertSelection();
      Random.setNextRandom(1964);
      discretize0.findNumBinsTipText();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize("-R");
      String[] stringArray0 = new String[1];
      discretize0.m_UseEqualFrequency = true;
      stringArray0[0] = "-R";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -R option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.setFindNumBins(true);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      discretize0.useBinNumbersTipText();
      discretize0.getFindNumBins();
      discretize0.listOptions();
      discretize0.getMakeBinary();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)109;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("ILB{nV@{4[");
      discretize0.setDesiredWeightOfInstancesPerInterval((byte)70);
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals(70.0, double0, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopies(discretize0, 3234);
      discretize0.getBinRangesString(418);
      discretize0.getOptions();
      discretize0.binsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("string", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      discretize0.getInvertSelection();
      discretize0.useBinNumbersTipText();
      discretize0.getFindNumBins();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      discretize0.listOptions();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 4;
      DenseInstance denseInstance0 = new DenseInstance(2, doubleArray0);
      discretize0.input(denseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.setFindNumBins(true);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Invert:", protectedProperties0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(3);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      Attribute attribute1 = new Attribute("integer", instances0, protectedProperties0);
      discretize0.getAttributeIndices();
      instances0.add((Instance) denseInstance0);
      discretize0.setMakeBinary(false);
      discretize0.batchFinished();
      boolean boolean0 = discretize0.m_FindNumBins;
      discretize0.input(denseInstance0);
      discretize0.convertInstance(sparseInstance0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 418;
      discretize0.getBinRangesString(418);
      discretize0.getOptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "'B");
      discretize0.binsTipText();
      discretize0.m_UseEqualFrequency = true;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.put(protectedProperties0, "Number of bins.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("B^m-Sl!<EGc5g60?", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      discretize0.getInvertSelection();
      discretize0.useBinNumbersTipText();
      discretize0.getFindNumBins();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      discretize0.listOptions();
      discretize0.getMakeBinary();
      discretize0.getOptions();
      attribute0.copy();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopies(discretize0, 3234);
      discretize0.getBinRangesString(418);
      discretize0.getOptions();
      discretize0.binsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.put(protectedProperties0, "Number of bins.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("B^m-Sl!<EGc5g60?", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.getInvertSelection();
      discretize0.useBinNumbersTipText();
      DenseInstance denseInstance0 = new DenseInstance(0);
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8124174041761085
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopies(discretize0, 3234);
      discretize0.getBinRangesString(418);
      discretize0.getOptions();
      discretize0.binsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.put(protectedProperties0, "Number of bins.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("B^m-Sl!<EGc5g60?", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      discretize0.getInvertSelection();
      discretize0.useBinNumbersTipText();
      discretize0.getFindNumBins();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      discretize0.listOptions();
      discretize0.getMakeBinary();
      SparseInstance sparseInstance0 = new SparseInstance(3234);
      sparseInstance0.copy();
      discretize0.input(sparseInstance0);
      discretize0.getBinRangesString(0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getBinRangesString(418);
      discretize0.getOptions();
      discretize0.binsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.put(protectedProperties0, "Number of bins.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties1);
      arrayList0.add(attribute0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "QeGJB3YnU?^OQr");
      Instances instances0 = new Instances("_", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      discretize0.setMakeBinary(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      discretize0.getInvertSelection();
      discretize0.useBinNumbersTipText();
      System.setCurrentTimeMillis(3);
      discretize0.useBinNumbersTipText();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_@$9n2,dzQ!O";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("$Revision: 8964 $", list0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 6);
      discretize0.setInputFormat(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      discretize0.getInvertSelection();
      discretize0.useBinNumbersTipText();
      discretize0.getFindNumBins();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      discretize0.listOptions();
      discretize0.getMakeBinary();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      discretize0.input(sparseInstance0);
      discretize0.useBinNumbersTipText();
      discretize0.setOutputFormat();
      discretize0.getCapabilities();
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-";
      stringArray0[1] = "?fE'/t6f4^-\"Y]8";
      stringArray0[2] = "r5[;EB.qFIMx";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[3] = "ob7lczx1zL3q03";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Invert:", protectedProperties0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(3);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      instances0.add((Instance) denseInstance0);
      discretize0.setMakeBinary(true);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      Enumeration enumeration0 = new StringTokenizer("@attribute", "@attribute", true);
      discretize0.getMakeBinary();
      SparseInstance sparseInstance1 = new SparseInstance(1);
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7143610007045016
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getBinRangesString(418);
      discretize0.getOptions();
      discretize0.binsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.put(protectedProperties0, "Number of bins.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("_", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      discretize0.setMakeBinary(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      discretize0.getInvertSelection();
      discretize0.useBinNumbersTipText();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_");
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopies(discretize0, 3234);
      discretize0.getBinRangesString(418);
      discretize0.getOptions();
      discretize0.binsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.put(protectedProperties0, "Number of bins.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties1);
      arrayList0.add(attribute0);
      protectedProperties0.keySet();
      Instances instances0 = new Instances("B^m-Sl!<EGc5g60?", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.setBins((-1));
      discretize0.getOptions();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(2.0, doubleArray0);
      Discretize discretize1 = new Discretize("B^m-Sl!<EGc5g60?");
      protectedProperties0.replace((Object) protectedProperties1, (Object) sparseInstance0, (Object) discretize1);
      discretize0.getUseEqualFrequency();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "_@$9n2,dzQ!O";
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("_@$9n2,dzQ!O", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute1 = new Attribute("date");
      arrayList0.add(attribute1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("string", arrayList0, 0);
      instances0.setClass(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.useBinNumbersTipText();
      discretize0.listOptions();
      discretize0.getMakeBinary();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      discretize0.input(sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(176);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 176
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "_@$9n2,dzQ!O";
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("_@$9n2,dzQ!O", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute1 = new Attribute("date");
      arrayList0.add(attribute1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("string", arrayList0, 0);
      instances0.setClass(attribute0);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      discretize0.batchFinished();
      discretize0.useBinNumbersTipText();
      discretize0.listOptions();
      discretize0.getMakeBinary();
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      
      discretize0.listOptions();
      discretize0.getInvertSelection();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8320191831087707
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 3234;
      Filter.makeCopies(discretize0, 3234);
      discretize0.getBinRangesString(418);
      discretize0.m_UseBinNumbers = false;
      discretize0.getOptions();
      discretize0.binsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.put(protectedProperties0, "Number of bins.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("Number of bins.", protectedProperties1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("B^m-Sl!<EGc5g60?", arrayList0, 3);
      instances0.setClass(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.useBinNumbersTipText();
      discretize0.listOptions();
      discretize0.getMakeBinary();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      // Undeclared exception!
      try { 
        sparseInstance0.relationalValue((-2106965086));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8124174041761085
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopies(discretize0, 3234);
      discretize0.getBinRangesString(418);
      discretize0.getOptions();
      discretize0.binsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.put(protectedProperties0, "Number of bins.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("B^m-Sl!<EGc5g60?", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      discretize0.getInvertSelection();
      discretize0.useBinNumbersTipText();
      discretize0.getFindNumBins();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      discretize0.listOptions();
      discretize0.getMakeBinary();
      SparseInstance sparseInstance0 = new SparseInstance(3234);
      discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
      
      discretize0.batchFinished();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("'", protectedProperties0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "real");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      discretize0.getInvertSelection();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2147483645);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483645
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8124174041761085
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopies(discretize0, 3234);
      discretize0.getBinRangesString(418);
      discretize0.getOptions();
      discretize0.binsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.put(protectedProperties0, "Number of bins.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("B^m-Sl!<EGc5g60?", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      discretize0.getInvertSelection();
      discretize0.useBinNumbersTipText();
      discretize0.getFindNumBins();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      discretize0.listOptions();
      discretize0.getMakeBinary();
      SparseInstance sparseInstance0 = new SparseInstance(3234);
      discretize0.input(sparseInstance0);
      discretize0.convertInstance(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
      
      discretize0.setInputFormat(instances0);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopies(discretize0, 614);
      discretize0.m_UseBinNumbers = true;
      discretize0.getUseBinNumbers();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 614;
      doubleArray0[1] = (-1196.29861084);
      doubleArray0[2] = (double) 614;
      int[] intArray0 = new int[4];
      intArray0[0] = 614;
      intArray0[1] = 614;
      intArray0[2] = 614;
      intArray0[3] = (-2004318069);
      SparseInstance sparseInstance0 = new SparseInstance(614, doubleArray0, intArray0, 614);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      Discretize discretize1 = new Discretize();
      discretize1.globalInfo();
      discretize0.getOptions();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      discretize0.getCapabilities();
      discretize0.globalInfo();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.8385132448059935
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopies(discretize0, 3234);
      discretize0.getBinRangesString(418);
      discretize0.getOptions();
      discretize0.binsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.put(protectedProperties0, "Number of bins.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties1);
      properties0.keys();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("B^m-Sl!<EGc5g60?", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      discretize0.getInvertSelection();
      discretize0.useBinNumbersTipText();
      discretize0.batchFinished();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      discretize0.listOptions();
      discretize0.getMakeBinary();
      SparseInstance sparseInstance0 = new SparseInstance(3234);
      discretize0.input(sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopies(discretize0, 3234);
      discretize0.getBinRangesString(418);
      discretize0.getOptions();
      discretize0.binsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.put(protectedProperties0, "Number of bins.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("B^m-Sl!<EGc5g60?", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      discretize0.useBinNumbersTipText();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      discretize0.listOptions();
      discretize0.getMakeBinary();
      SparseInstance sparseInstance0 = new SparseInstance(3234);
      discretize0.input(sparseInstance0);
      boolean boolean0 = discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.848636447314897
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopies(discretize0, 3234);
      discretize0.getBinRangesString(418);
      discretize0.getOptions();
      discretize0.binsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.put(protectedProperties0, "Number of bins.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("B^m-Sl!<EGc5g60?", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      discretize0.getInvertSelection();
      discretize0.useBinNumbersTipText();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      discretize0.listOptions();
      discretize0.getMakeBinary();
      discretize0.globalInfo();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      discretize0.input(binarySparseInstance0);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8346096344580887
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("'", protectedProperties1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("`Q`&la0w#QYW9T*{F~e", arrayList0, 4);
      discretize0.setInputFormat(instances0);
      discretize0.getFindNumBins();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("`Q`&la0w#QYW9T*{F~e", arrayList1, 8);
      discretize0.input((Instance) null);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("nn/$:'cq8x;e", (-1083.1397));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=-1083.1397
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getRevision();
      discretize0.getOptions();
      discretize0.binsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.put(protectedProperties0, "Number of bins.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("_", arrayList0, 3);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.setMakeBinary(true);
      Attribute attribute1 = new Attribute("pmtr!Dy(<Y~2X", 0);
      arrayList0.add(attribute1);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", protectedProperties0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Empty nominal attributes");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("}=GsG4T'~O", arrayList0, 3);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("Index of value \"first\" of \"position\" (should be 0): ");
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at Index of value \"first\" of \"position\" (should be 0):
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_@$9n2,dzQ!O";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 30000;
      Attribute attribute0 = new Attribute("_@$9n2,dzQ!O", (List<String>) null, 30000);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("log2(4.6): ", arrayList0, 30000);
      discretize0.setInputFormat(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      discretize0.getInvertSelection();
      discretize0.useBinNumbersTipText();
      discretize0.getFindNumBins();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(30000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30000
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8124174041761085
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopies(discretize0, 3234);
      discretize0.getBinRangesString(418);
      discretize0.getOptions();
      discretize0.binsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      properties0.put(protectedProperties0, "Number of bins.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("B^m-Sl!<EGc5g60?", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      discretize0.getInvertSelection();
      discretize0.useBinNumbersTipText();
      discretize0.getFindNumBins();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      discretize0.listOptions();
      discretize0.getMakeBinary();
      SparseInstance sparseInstance0 = new SparseInstance(3234);
      discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Discretize discretize1 = new Discretize();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.setFindNumBins(false);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Invert:", protectedProperties0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(4);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      Attribute attribute1 = new Attribute("NYwgE;q&MFG3qoX#", instances0, protectedProperties0);
      String string0 = discretize0.getAttributeIndices();
      assertEquals("first-last", string0);
      
      instances0.add((Instance) sparseInstance0);
      discretize0.setMakeBinary(false);
      boolean boolean0 = discretize0.batchFinished();
      boolean boolean1 = discretize1.setInputFormat(instances0);
      assertTrue(boolean1 == boolean0);
      
      System.setCurrentTimeMillis((-1732L));
      discretize0.findNumBins(0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.setFindNumBins(true);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Invert:", protectedProperties0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      discretize0.getBinRangesString(0);
      Discretize discretize1 = new Discretize();
      System.setCurrentTimeMillis(0L);
      discretize0.useBinNumbersTipText();
      discretize0.calculateCutPoints();
      assertTrue(discretize0.getFindNumBins());
      
      discretize1.useBinNumbersTipText();
      assertFalse(discretize1.getFindNumBins());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8124174041761085
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopies(discretize0, 3234);
      discretize0.getBinRangesString(418);
      discretize0.getOptions();
      discretize0.binsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      SystemInUtil.addInputLine((String) null);
      properties0.put(protectedProperties0, "Number of bins.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("B^m-Sl!<EGc5g60?", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.batchFinished();
      discretize0.getInvertSelection();
      discretize0.useBinNumbersTipText();
      properties0.clear();
      discretize0.getFindNumBins();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      discretize0.listOptions();
      discretize0.getMakeBinary();
      SparseInstance sparseInstance0 = new SparseInstance(3234);
      discretize0.input(sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 70
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.3146637213846315
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_DesiredWeightOfInstancesPerInterval = (-1224.0);
      discretize0.setUseBinNumbers(true);
      discretize0.setBins(304);
      discretize0.setInvertSelection(true);
      discretize0.getOptions();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertEquals((-1224.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Invert:", protectedProperties0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      discretize0.setOptions((String[]) null);
      String string0 = discretize0.globalInfo();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7075391741350712
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("'", protectedProperties1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("`Q`&la0w#QYW9T*{F~e", arrayList0, 4);
      discretize0.setInputFormat(instances0);
      discretize0.getFindNumBins();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = 6.7;
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("'", protectedProperties0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "real");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5528642529654464
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.setFindNumBins(true);
      Properties properties0 = new Properties();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Invert:", protectedProperties0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(3);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      Attribute attribute1 = new Attribute("integer", instances0, protectedProperties0);
      discretize0.getAttributeIndices();
      discretize0.batchFinished();
      discretize0.setMakeBinary(true);
      discretize0.batchFinished();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("'", protectedProperties0);
      discretize0.isNewBatch();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "string");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("IYzV.4VCG7RRp", arrayList0, 30000);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4500064999181648
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("'", protectedProperties0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "real");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(485);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "$Revision: 8964 $";
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 659.11696355072;
      doubleArray2[4] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 2.0;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = 659.11696355072;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = 2.0;
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = 659.11696355072;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 659.11696355072;
      doubleArray4[6] = Double.NEGATIVE_INFINITY;
      doubleArray4[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 659.11696355072;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (-1.0);
      doubleArray5[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = 2.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 2.0;
      doubleArray6[4] = (-1.0);
      doubleArray6[5] = (-1.0);
      doubleArray6[6] = (-1.0);
      doubleArray6[7] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = 659.11696355072;
      doubleArray7[1] = 2.0;
      doubleArray7[2] = (-1.0);
      doubleArray7[3] = (-1.0);
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 2.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[8];
      doubleArray8[0] = Double.NEGATIVE_INFINITY;
      doubleArray8[1] = 2.0;
      doubleArray8[2] = (-1.0);
      doubleArray8[3] = 659.11696355072;
      doubleArray8[4] = Double.NEGATIVE_INFINITY;
      doubleArray8[5] = 659.11696355072;
      doubleArray8[6] = (-1.0);
      doubleArray8[7] = 659.11696355072;
      doubleArray0[7] = doubleArray8;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-438));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -438
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.3146637213846315
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setUseBinNumbers(true);
      discretize0.setIgnoreClass(true);
      discretize0.setBins(304);
      discretize0.getOptions();
      discretize0.getUseEqualFrequency();
      discretize0.findNumBinsTipText();
      assertEquals(304, discretize0.getBins());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.getAttributeIndices();
      SparseInstance sparseInstance0 = new SparseInstance(2638);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("D", arrayList0, 2638);
      // Undeclared exception!
      try { 
        sparseInstance0.setClassMissing();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("D7q");
      int int0 = (-2082408383);
      discretize0.m_ClassIndex = (-2082408383);
      System.setCurrentTimeMillis((-2082408383));
      discretize0.setBins((-2082408383));
      discretize0.getBins();
      discretize0.invertSelectionTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setUseEqualFrequency(true);
      System.setCurrentTimeMillis((-2488L));
      discretize0.getAttributeIndices();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      Discretize discretize1 = new Discretize("(Ilc6nq8MXmGf=,3W");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(Ilc6nq8MXmGf=,3W";
      stringArray0[1] = "_@$9n2,dzQ!O";
      stringArray0[2] = "Bin number optimization in conjunction with equal-frequency binning not implemented.";
      stringArray0[3] = "$Revision: 8964 $";
      stringArray0[4] = "-R";
      stringArray0[5] = "$Revision: 8964 $";
      stringArray0[6] = "_@$9n2,dzQ!O";
      stringArray0[7] = "_@$9n2,dzQ!O";
      discretize1.setOptions(stringArray0);
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getFindNumBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getUseBinNumbers());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize("'B2of2'");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(6, stringArray0.length);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Ff";
      stringArray0[1] = "(";
      stringArray0[2] = "-Y";
      stringArray0[3] = "-R";
      stringArray0[4] = "\tis missing";
      Filter.runFilter(discretize0, stringArray0);
      assertTrue(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(false);
      discretize0.setUseBinNumbers(false);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "' already present at position #";
      stringArray0[1] = "' already present at position #";
      stringArray0[2] = "-B";
      discretize0.m_UseBinNumbers = true;
      stringArray0[3] = "P?Eyr}b";
      stringArray0[4] = "x+B`+!)&K|Cs=X";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // For input string: \"P?Eyr}b\"
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      discretize0.m_IgnoreClass = false;
      SystemInUtil.addInputLine((String) null);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      Instance instance0 = null;
      // Undeclared exception!
      try { 
        discretize0.convertInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setUseEqualFrequency(true);
      Filter.makeCopy(discretize0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.getUseEqualFrequency();
      discretize0.getBinRangesString(3783);
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.setFindNumBins(true);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      discretize0.getOptions();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((SparseInstance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[9][5];
      doubleArray0[3] = doubleArray0[2];
      double[] doubleArray1 = new double[7];
      doubleArray0[2] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-2049870752));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2049870752
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Discretize discretize0 = new Discretize("NvEUl`.&yV>eVa:$pd[");
      discretize0.setAttributeIndices("L0K1kDvL7x");
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.makeBinaryTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.2420052954825502
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[9][5];
      discretize0.getRevision();
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(6, stringArray0.length);
      
      doubleArray0[3] = doubleArray0[2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.7976931348623157E308;
      double[] doubleArray2 = new double[7];
      doubleArray1[1] = (-1618.26336953469);
      doubleArray2[5] = (-1618.26336953469);
      doubleArray0[2] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString(5);
      assertEquals("(-inf-0],(0-0],(0-0],(0-0],(0-0],(0-inf)", string0);
      
      Discretize discretize1 = new Discretize();
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      System.setCurrentTimeMillis(1L);
      discretize0.useBinNumbersTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[9][5];
      int[] intArray0 = new int[3];
      intArray0[1] = (-5095);
      intArray0[2] = (-959);
      discretize0.setAttributeIndicesArray(intArray0);
      doubleArray0[3] = doubleArray0[2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = (double) (-959);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-468));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Discretize discretize0 = new Discretize("?B0xEWiK6t\"=|&[^W");
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.invertSelectionTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints((-1610612734));
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = discretize0.getBins();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, int0);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int[] intArray0 = new int[10];
      String[] stringArray0 = new String[13];
      Discretize.main(stringArray0);
      int int0 = (-20);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-20));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(true);
      Filter.makeCopy(discretize0);
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Discretize discretize0 = new Discretize("inf");
      discretize0.setMakeBinary(false);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.2429732264381474
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_@$9n2,dzQ!O";
      stringArray0[1] = "$Revision: 8964 $";
      stringArray0[2] = "";
      discretize0.setOptions(stringArray0);
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getRevision();
      double[][] doubleArray0 = new double[9][5];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-M";
      stringArray0[1] = "_@$9n2,dzQ!O";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }
}
