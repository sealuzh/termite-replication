/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 09 03:41:12 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.78489484807327
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString((-2420), (-1284));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3579778549873243
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-2369.4072F));
      JSONObject jSONObject1 = jSONObject0.put("U7<hxOh]-6vF}Q+li(4q", (Object) float0);
      Float float1 = new Float((double) (-2369.4072F));
      JSONObject jSONObject2 = jSONObject1.accumulate("U7<hxOh]-6vF}Q+li(4q", float1);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{(");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {(
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1417L);
      Object object0 = jSONObject1.remove("");
      assertEquals(1417L, object0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9072839993213795
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONTokener", 1.0);
      long long0 = jSONObject1.optLong("wheel.json.JSONTokener", 0L);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("gK1bVcL1T6", (-4062L));
      assertEquals((-4062L), long0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Orum^", 1785.921);
      long long0 = jSONObject1.optLong("Orum^");
      assertEquals(1785L, long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("min", (-1447.48661));
      long long0 = jSONObject0.optLong("min");
      assertEquals((-1447L), long0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      int int0 = jSONObject0.optInt("pa", 0);
      assertEquals(0, int0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("sub", 13);
      assertEquals(13, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONTokener", 1.0);
      int int0 = jSONObject1.optInt("wheel.json.JSONTokener");
      assertEquals(1, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("@*Pwe+@d\"K/1@5", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Ka,U2N", 0L);
      double double0 = jSONObject1.optDouble("Ka,U2N");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)35);
      JSONObject jSONObject1 = jSONObject0.put("joi", (Object) byte0);
      double double0 = jSONObject1.optDouble("joi");
      assertEquals(35.0, double0, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean("0", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1417L);
      Object object0 = jSONObject1.opt("");
      assertEquals(1417L, object0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.2337380151460802
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      jSONObject0.put("{\n\"java.lang.String@0000000004\": [java.lang.Byte@0000000012],\n\"java.lang.String@0000000009\": \"java.lang.Class@0000000010\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}", (long) 0);
      jSONObject0.has("{\n\"java.lang.String@0000000004\": [java.lang.Byte@0000000012],\n\"java.lang.String@0000000009\": \"java.lang.Class@0000000010\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(";/o[_7V", (-128));
      String string0 = jSONObject0.getString(";/o[_7V");
      assertNotNull(string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5600040073151407
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.accumulate("Unclosed comment", float0);
      jSONObject0.getLong("Unclosed comment");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Byte byte0 = new Byte((byte)3);
      JSONObject jSONObject0 = new JSONObject(byte0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject1 = jSONObject0.put("pa", (Collection) linkedList0);
      jSONObject1.getJSONArray("pa");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-2821));
      jSONObject0.put("val", (Object) integer0);
      int int0 = jSONObject0.getInt("val");
      assertEquals((-2821), int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("toH", 2753);
      double double0 = jSONObject0.getDouble("toH");
      assertEquals(2753.0, double0, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2798542258336674
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt(",{N6<{%GExAF.):", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-2987L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate("de", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("A JSONArray text must start with '['", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.toString(669, 2510);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.put((String) null, (Object) jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(";/o[_7V");
      JSONObject jSONObject0 = new JSONObject((Object) jSONTokener0);
      String string0 = jSONObject0.optString(";/o[_7V", "");
      assertEquals(1, jSONObject0.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 1417L);
      String string0 = jSONObject0.optString("", "/.Ak+7*O,+<");
      assertNotNull(string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("isformat", (-1925.887));
      assertEquals((-1925.887), double0, 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("j}85KJ*d");
      assertNull(object0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.257133793549772
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@00000000030", (Object) "java.lang.Long@00000000030");
      try { 
        jSONObject1.getDouble("java.lang.Long@00000000030");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@00000000030\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.9512595041439562
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = new Integer(45);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("!LR\"dzFiR", true);
      boolean boolean0 = jSONObject1.getBoolean("!LR\"dzFiR");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-2821));
      JSONObject jSONObject1 = jSONObject0.put("val", (Object) integer0);
      Object object0 = jSONObject1.get("val");
      assertEquals((-2821), object0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9160010614037797
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      try { 
        jSONObject0.get("1[T\"*K&oD|^z9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1[T\\\"*K&oD|^z9\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                               \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                               \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                               \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertFalse(jSONTokener0.more());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{yt>");
      jSONTokener0.next();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of {yt>
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("Mc=wzci", (-2781));
      assertEquals((-2781), int0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("76 `=)!*Z0m@s");
      assertNull(object0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.4519628914537848
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.putOpt("n5ot", jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.3826070734809082
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("gettoUnsignedLong", (Map) hashMap0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.8228804629889481
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "1595.2561");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String string0 = JSONObject.valueToString(linkedList0, 32, 32);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      String string0 = JSONObject.valueToString(hashMap0, 47, 9);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-308), 42);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 123, 447);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0851886129676505
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Float float0 = new Float((-4682.7791));
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.784617558418788
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(49, 49);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.9399110416456438
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      jSONObject0.toString(0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 2347, (-570));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.add((Boolean) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.append("wheel.json.JSONArray", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = JSONObject.quote("/x-d2[=</[H.<S(s}Ay");
      assertEquals("\"/x-d2[=<\\/[H.<S(s}Ay\"", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("getgetChars", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("?j\"1'ogQ7", true);
      String string0 = jSONObject1.optString("?j\"1'ogQ7");
      assertNotNull(string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.4218956404837546
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.accumulate("int", jSONObject0);
      jSONObject0.optJSONObject("int");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("na");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)64);
      jSONObject0.append("true", short0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("true");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(";/o[_7V");
      JSONObject jSONObject0 = new JSONObject((Object) jSONTokener0);
      jSONObject0.optJSONArray(";/o[_7V");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1417L);
      double double0 = jSONObject1.optDouble("", 0.0);
      assertEquals(1417.0, double0, 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1569876443452742
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = new JSONObject();
      JSONObject jSONObject5 = new JSONObject();
      JSONObject jSONObject6 = new JSONObject();
      JSONObject jSONObject7 = new JSONObject();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject8 = new JSONObject((Object) jSONObject6, stringArray0);
      Short short0 = new Short((short) (-482));
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.7045514452672972
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("\b", "\b");
      jSONObject0.names();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.6726254461503207
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("joi", (Object) "joi");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long0 = new Long((-552L));
      hashMap0.put(long0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1417L);
      long long0 = jSONObject1.getLong("");
      assertEquals(1417L, long0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.3034884952192693
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = Byte.valueOf((byte)55);
      jSONObject0.append("", byte0);
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<JSONObject, Float> hashMap1 = new HashMap<JSONObject, Float>();
      jSONObject0.put("zJbK7\u0001p)x&", (Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("zJbK7\u0001p)x&");
      assertNotSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.9251211907908186
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 0.0);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = Byte.valueOf((byte)55);
      JSONObject jSONObject1 = jSONObject0.append("", byte0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(2590);
      JSONObject jSONObject1 = jSONObject0.accumulate("null", long0);
      int int0 = jSONObject1.getInt("null");
      assertEquals(2590, int0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", (-1L));
      double double0 = jSONObject1.getDouble("{}");
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.4646934739829862
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("\"#@Y.3xPqI0$<\"", "\"#@Y.3xPqI0$<\"");
      try { 
        jSONObject0.getInt("\"#@Y.3xPqI0$<\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"#@Y.3xPqI0$<\\\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.0692024658203625
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONObject[", true);
      boolean boolean0 = jSONObject1.optBoolean("JSONObject[");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.553848341566947
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("getisNaN", "getisNaN");
      try { 
        jSONObject0.getBoolean("getisNaN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getisNaN\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.5353632953768164
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(44);
      jSONObject0.accumulate("(", integer0);
      try { 
        jSONObject0.getBoolean("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("A_qD]K_X;@E");
      JSONObject jSONObject1 = jSONObject0.accumulate("A_qD]K_X;@E", boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject1.getBoolean("A_qD]K_X;@E");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1417L);
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1595.2561);
      assertEquals("1595.2561", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-62164681));
      assertEquals("-6.2164681E7", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.455500877075017
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Float float0 = new Float((-2305.5447F));
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      jSONObject1.append("", float0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.4708084763221112
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(";h?M", (Object) ";h?M");
      try { 
        jSONObject0.append(";h?M", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[;h?M] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("\"\"", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("=!Fb\u0005Db{c", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("getisNaN", (Collection) linkedList0);
      jSONObject1.accumulate("getisNaN", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.5171063970610277
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Boolean boolean0 = new Boolean("lis");
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      
      Float float0 = new Float(1672.5221376);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.9107423884777484
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Double double0 = new Double(0.0);
      jSONObject0.accumulate("[]+", double0);
      jSONObject0.toString(669, 2510);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{p!:0bH5`x");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 10 of {p!:0bH5`x
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\n                                               \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                               \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                               \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{(x+ZzyEyD=_;A");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 14 of {(x+ZzyEyD=_;A
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{surfBW!h?:#1~MX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 15 of {surfBW!h?:#1~MX
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~5K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~5K
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.863679987341
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("", object0);
      boolean boolean0 = jSONObject0.isNull("");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.5894049239193404
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString(2147483645);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.6414480415035768
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      long long0 = jSONObject0.optLong("&g}'m");
      assertEquals(0L, long0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.7846300761330085
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      // Undeclared exception!
      jSONObject0.toString(2510, 2510);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("1595.2561");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1631);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("JSONObject[");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("getgetChars", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("?j\"1'ogQ7");
      assertEquals("", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.0981473891350673
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      try { 
        jSONObject1.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.6867831479680375
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (double) 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("m", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 1417L);
      boolean boolean0 = jSONObject0.isNull("");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString(";/o[_7V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";/o[_7V\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.1285962936622183
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.has("VXQISaq=X])S%dB~\"U");
      assertEquals(2, jSONObject0.length());
  }
}
