/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 02 21:19:28 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(Double.NaN);
      Double.min(Double.NaN, Double.NaN);
      hashMap0.put("_ZDXClE1E$%G", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = Short.valueOf((short)32);
      JSONObject.testValidity(short0);
      try { 
        jSONObject0.toString(42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "L8:!%k|`dphS65+g");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 2239, 2239);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Double double0 = new Double(1.0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ':' after a key", (Object) double0);
      Object object1 = new Object();
      jSONObject1.optLong("Expected a ':' after a key");
      JSONObject.valueToString(object1);
      try { 
        jSONObject1.getBoolean("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "\\u";
      Boolean boolean0 = Boolean.valueOf(false);
      jSONObject0.put(string0, (Object) boolean0);
      boolean boolean1 = jSONObject0.getBoolean(string0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Double.isFinite(Double.NaN);
      Double.min((-3022.39572316), Double.NaN);
      Double.sum(Double.NaN, Double.NaN);
      Double.isFinite(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getgetBytes", (Object) "getgetBytes");
      try { 
        jSONObject1.getBoolean("getgetBytes");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetBytes\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0987996145617602
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optInt("G@py)");
      JSONObject jSONObject2 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject3 = jSONObject0.put("G@py)", (Collection) linkedList0);
      jSONObject3.optInt("3~WtB#S<)*Z-|tV", 0);
      jSONObject2.toString(57, (-334));
      try { 
        jSONObject2.getBoolean("3~WtB#S<)*Z-|tV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3~WtB#S<)*Z-|tV\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "p*Jwg");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("p*Jwg", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("~,7Ai(U\"mUQXwh]odbB", (Object) hashMap0);
      jSONObject1.length();
      boolean boolean0 = jSONObject1.isNull("~,7Ai(U\"mUQXwh]odbB");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("isnumberToString", object0);
      try { 
        jSONObject1.getBoolean("isnumberToString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isnumberToString\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1809520586087259
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("X8h<-kZ<upxgWCk?", (Map) hashMap1);
      Byte byte0 = new Byte((byte)69);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONArray0.write(stringWriter0);
      Writer writer1 = jSONObject1.write(writer0);
      jSONObject0.write(writer1);
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.getJSONArray("lz_i$J:WQFYbtoE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lz_i$J:WQFYbtoE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList1);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("G@Vpy)", (-1L));
      jSONObject1.optInt("G@Vpy)");
      String[] stringArray0 = new String[9];
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = new JSONObject();
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4213065395672264
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        JSONObject.valueToString(float0, 61, (-2546));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("KR}Z2^'pvjy1nN-.~0J", (Object) null);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.879800854626384
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("KR}Z2^'pvjy1nN-.~0J", (Object) null);
      JSONObject jSONObject2 = jSONObject0.put(" ^tq2aN\"m56", true);
      jSONObject2.getJSONArray("KR}Z2^'pvjy1nN-.~0J");
      jSONObject1.keys();
      String string0 = jSONObject0.toString(124, 92);
      JSONObject jSONObject3 = new JSONObject("{\n                                                                                                                                                                                                                        \"java.lang.String@0000000003\": [null],\n                                                                                                                                                                                                                        \"java.lang.String@0000000004\": java.lang.Boolean@0000000005\n                                                                                            }");
      String string1 = jSONObject3.toString((-38489319), 29);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "AAP</k'YhbQhDu)";
      try { 
        jSONObject0.get("AAP</k'YhbQhDu)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"AAP<\\/k'YhbQhDu)\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      HashMap<Byte, String> hashMap1 = new HashMap<Byte, String>();
      hashMap1.put((Byte) null, (String) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.toString();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.accumulate("] is not a Boolean.", jSONArray0);
      assertNotSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.878097639808415
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "H.mzSQK\\-Hg#OZ";
      JSONObject.quote("H.mzSQK-Hg#OZ");
      JSONObject jSONObject0 = new JSONObject((Object) "\"H.mzSQK\\-Hg#OZ\"");
      // Undeclared exception!
      jSONObject0.toString(944);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("istoString", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.531385208270828
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("G@py)", (-1L));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.put("3~WtB#S<)*Z-|tV", (Object) jSONObject1);
      jSONObject1.put("G@py)", (Object) "G@py)");
      jSONObject2.toString(9, (-334));
      boolean boolean0 = jSONObject2.has("G@py)");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("ql21nh", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8083695164005986
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      jSONObject0.toString();
      jSONObject0.put("is", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("is");
      assertNotSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("do", 108);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.names();
      jSONObject1.getDouble("do");
      jSONObject0.putOpt("do", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "n\"QU6fFdG's";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Short short0 = new Short((short)47);
      JSONObject jSONObject1 = jSONObject0.putOpt("n\"QU6fFdG's", short0);
      jSONObject1.getInt("n\"QU6fFdG's");
      JSONObject.quote("ZyBn>_Y\"z-7$HK");
      try { 
        jSONObject1.getLong("\"ZyBn>_Y\"z-7$HK\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"ZyBn>_Y\\\"z-7$HK\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(20);
      JSONObject jSONObject1 = jSONObject0.putOpt("", integer0);
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getString("");
      jSONObject1.getLong("");
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      Object object0 = JSONObject.NULL;
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertEquals(11, stringArray0.length);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("G@py)", (-1L));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optDouble("G@py)");
      double double0 = jSONObject0.optDouble("G@py)", 3142.87329);
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.toString(513, 513);
      JSONObject jSONObject1 = new JSONObject(string0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = new Double(408.72827);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.opt((String) null);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.put((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      linkedList0.add((JSONArray) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray("to");
      int int0 = jSONObject0.optInt("to", 10);
      assertEquals(10, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("", (Object) null);
      JSONObject jSONObject2 = jSONObject1.put("] is not a number.", true);
      jSONObject2.keys();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(128);
      jSONObject0.get("] is not a number.");
      jSONObject1.write(stringWriter0);
      StringWriter stringWriter1 = new StringWriter(128);
      JSONObject.doubleToString(235.47378286765);
      try { 
        jSONObject2.getBoolean("#v>E7Puw'Yg8P oL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#v>E7Puw'Yg8P oL\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject.doubleToString((-3071.198034170761));
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("y|0/:?$3Fc~", (Object) "y|0/:?$3Fc~");
      try { 
        jSONObject1.getJSONObject("y|0/:?$3Fc~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y|0/:?$3Fc~\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("CETp|;?E][SD;h", (Object) jSONObject0);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("CETp|;?E][SD;h");
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Short.toUnsignedLong((short) (-813));
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertEquals(1, jSONArray2.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long.min(1L, (-1842L));
      Long long0 = new Long(0L);
      Long.getLong("DZ");
      Long long1 = new Long(0L);
      hashMap0.put(long0, long1);
      Long long2 = new Long((-1842L));
      hashMap0.put(long0, long2);
      Long long3 = new Long((-2033L));
      JSONObject jSONObject1 = jSONObject0.put("DZ", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("DZ");
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Long long0 = new Long((-1L));
      HashMap<Long, Long> hashMap1 = new HashMap<Long, Long>();
      Long long1 = new Long((-1L));
      hashMap1.put((Long) null, long0);
      StringWriter stringWriter0 = new StringWriter(105);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, (-2654), 97);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 1355, (-122));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "{X\"^I\\UjIn";
      JSONTokener jSONTokener0 = new JSONTokener("{X\"^IUjIn");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {X\"^IUjIn
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.put("isnumberToString", object0);
      jSONObject0.toString(128, 128);
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\": null}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long0 = new Long(352L);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("5`=>Wbe9/V%=s._{", long0);
      double double0 = jSONObject0.optDouble("5`=>Wbe9/V%=s._{");
      assertEquals(1, jSONObject0.length());
      assertEquals(352.0, double0, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("/N}a5W,e/KrOgkw:q", 44);
      jSONObject1.optJSONArray("/N}a5W,e/KrOgkw:q");
      Short short0 = new Short((short)6);
      jSONObject0.optInt("/N}a5W,e/KrOgkw:q");
      String string0 = "#fM";
      JSONTokener jSONTokener0 = new JSONTokener("/N}a5W,e/KrOgkw:q");
      jSONTokener0.skipPast("#fM");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 18 of /N}a5W,e/KrOgkw:q
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Float float0 = new Float((-2089.5F));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      Float.min(1.0F, 1712.632F);
      stringArray0[1] = "n\"QU6fFdG's";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      jSONObject1.opt("");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("Bad value from toJSONString: ", (-2026L));
      assertEquals((-2026L), long0);
      
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.quote(" at character ");
      assertEquals("\" at character \"", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.8808841779339293
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      Float.min(619.9F, 619.9F);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[12];
      stringArray0[0] = "n\"QU6fFdG's";
      stringArray0[1] = "n\"QU6fFdG's";
      JSONObject.quote("n\"QU6fFdG's");
      JSONObject jSONObject0 = new JSONObject((Object) "n\"QU6fFdG's");
      jSONObject0.optLong("n\"QU6fFdG's", 0L);
      String string0 = "uA%QJykUyM9Z*2>K\\";
      try { 
        jSONObject0.getInt("uA%QJykUyM9Z*2>K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"uA%QJykUyM9Z*2>K\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)87);
      Byte.compare((byte) (-99), (byte)14);
      JSONObject jSONObject1 = jSONObject0.put("y|0/:?$3Fc~", (Object) byte0);
      jSONObject1.remove("y|0/:?$3Fc~");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "y|0/:?$3Fc~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Long long0 = new Long((-19L));
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("Null key.", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("Null key.");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.58641716671689
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject1.optLong("X-RDvv");
      jSONObject0.keys();
      jSONObject1.accumulate("&~JC&9hM", "X-RDvv");
      jSONObject0.optString("&~JC&9hM", "&~JC&9hM");
      Boolean boolean0 = new Boolean("java.lang.String@0000000006");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/", true);
      String string0 = jSONObject0.optString("/");
      assertNotNull(string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("y|0/:?$3Fc~", (Object) hashMap0);
      try { 
        jSONObject0.getJSONArray("y|0/:?$3Fc~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y|0/:?$3Fc~\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(float0, biFunction0);
      Long long0 = new Long(2644L);
      Long long1 = new Long(0L);
      HashMap<Long, Long> hashMap1 = new HashMap<Long, Long>();
      Long long2 = Long.valueOf((long) (short)5001);
      hashMap1.put(long2, long2);
      Long long3 = new Long(2644L);
      Long long4 = new Long(0L);
      Long long5 = new Long((short)5001);
      Long long6 = new Long(0L);
      BiFunction<Object, Object, Long> biFunction1 = (BiFunction<Object, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      hashMap1.compute(long6, biFunction1);
      HashMap<Double, String> hashMap2 = new HashMap<Double, String>();
      JSONObject jSONObject1 = jSONObject0.put("true", (Map) hashMap2);
      jSONObject1.optString("", "");
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double((-102.0));
      hashMap0.put("] not found.", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap1.put(hashMap0, "'G?");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string0 = jSONObject0.toString(2137, 304);
      assertNotNull(string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = "] is not a JSONObject.";
      Object object0 = new Object();
      hashMap0.putIfAbsent((String) null, (Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(2703, 1325);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject1.keys();
      jSONObject0.append("", "");
      Object object0 = new Object();
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "y|0z:?$3Fc~";
      JSONObject jSONObject1 = jSONObject0.put("y|0z:?$3Fc~", (Object) hashMap0);
      try { 
        jSONObject1.append("y|0z:?$3Fc~", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[y|0z:?$3Fc~] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("JSONArray initial value should be a string or collection or array.", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("true");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("X7q6TAEGoA}ce*=49");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Long long0 = new Long(787L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Short short0 = new Short((short) (-231));
      jSONObject0.accumulate("64]WM<j 9,\":Te", short0);
      JSONObject.doubleToString(1.0);
      jSONObject0.optLong("64]WM<j 9,\":Te");
      int int0 = (-1843);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1843));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0, 92, (-131));
      try { 
        jSONObject0.getBoolean("wheel.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONException\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble((String) null, (double) 2902);
      assertEquals(2902.0, double0, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray();
      linkedList1.add(jSONArray0);
      jSONObject0.optBoolean("5", true);
      Double double0 = new Double(0.0);
      Double.isFinite(0.0);
      hashMap0.put("eEB[Xz4t1", double0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 5
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4925373134328358
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = new JSONObject();
      JSONObject jSONObject5 = new JSONObject();
      JSONObject jSONObject6 = new JSONObject();
      JSONObject.getNames((Object) jSONObject3);
      JSONObject.getNames((Object) "wheel.json.JSONObject");
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject.getNames((Object) null);
      JSONObject.getNames(object0);
      Boolean boolean0 = Boolean.valueOf("wheel.json.JSONObject");
      JSONObject.getNames((Object) boolean0);
      Long long0 = new Long((-448L));
      JSONObject.valueToString(long0);
      JSONObject.valueToString("wheel.json.JSONObject");
      JSONObject.valueToString("wheel.json.JSONObject");
      Float float0 = new Float(0.0F);
      JSONObject.valueToString(float0);
      Double double0 = new Double((-1212.078585356));
      JSONObject.valueToString(double0);
      Boolean boolean1 = new Boolean(">");
      JSONObject.valueToString(boolean1);
      JSONObject.valueToString("java.lang.Float@000000001");
      try { 
        jSONObject5.getDouble("_T~\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_T~\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer.getInteger("] is not a Boolean.");
      JSONObject.valueToString((Object) null);
      Long long0 = new Long(1L);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "null";
      stringArray0[1] = "] is not a Boolean.";
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = JSONObject.quote(" t cha/ater ");
      assertEquals("\" t cha/ater \"", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(0L);
      Long.min((-2762L), (-1842L));
      Long long1 = new Long(2968L);
      Long long2 = new Long(0L);
      HashMap<Long, Long> hashMap1 = new HashMap<Long, Long>();
      Long long3 = Long.valueOf(2180L);
      hashMap1.put(long3, long2);
      Long long4 = new Long(1789L);
      Long long5 = new Long(2180L);
      Long long6 = new Long((-2762L));
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyLong() , any());
      hashMap1.compute(long6, biFunction0);
      JSONObject jSONObject1 = jSONObject0.put("/N}a5W,e/KrOgkw:q", (Map) hashMap0);
      String string0 = jSONObject1.optString("tri", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(0L);
      Long.min((-2762L), (-1842L));
      Long long1 = new Long(2968L);
      Long long2 = new Long(0L);
      HashMap<Long, Long> hashMap1 = new HashMap<Long, Long>();
      Long long3 = Long.valueOf(2180L);
      hashMap1.put(long3, long2);
      Long long4 = new Long(1789L);
      Long long5 = new Long(2180L);
      Long long6 = new Long((-2762L));
      Long.min((-2762L), 0L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(biFunction0).apply(anyLong() , any());
      hashMap1.compute(long6, biFunction0);
      JSONObject jSONObject1 = jSONObject0.put("/N}a5W,e/KrOgkw:q", (Map) hashMap0);
      String string0 = jSONObject1.optString("tri", "/N}a5W,e/KrOgkw:q");
      assertEquals("/N}a5W,e/KrOgkw:q", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("getwrite");
      assertEquals("", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("v ", 0.0);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject.quote("");
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      boolean boolean0 = jSONObject1.has("?");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Float float0 = new Float(0.0F);
      float float1 = Float.min(0.0F, 715.8F);
      JSONObject.testValidity(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.9549478780836425
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.join((String) null);
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalOr(true, true);
      jSONArray0.put(473, (Object) boolean0);
      jSONArray0.put((double) (-192));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-750));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isnumberToString", (Object) jSONObject0);
      try { 
        jSONObject1.getBoolean("isnumberToString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isnumberToString\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.put("&jlHPQ,d!rdfuY^dZ", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("&jlHPQ,d!rdfuY^dZ");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      Double double0 = new Double((-823.275126422));
      hashMap0.put(double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("CETp|;?E][SD;h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"CETp|;?E][SD;h\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "~sB+AS`m";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~sB+AS`m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~sB+AS`m
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.3433359348041434
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject.quote(" t cha)/ater ");
      JSONObject jSONObject0 = new JSONObject((Object) " t cha)/ater ");
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put(" t cha)/ater ", (Map) hashMap0);
      jSONObject1.toString(144);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0, 4, 69);
      assertNotNull(string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Short short0 = new Short((short)91);
      String string0 = JSONObject.valueToString(short0, 1213, 1213);
      assertNotNull(string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("", (Object) null);
      Float float0 = new Float((-1.0F));
      Float.max(143.0F, (-502.1485F));
      Integer integer0 = Integer.getInteger("E,7@I*{i|U%c$xu4%D", 45);
      hashMap0.replace(float0, integer0);
      jSONObject1.put("] is not a number.", true);
      hashMap0.keySet();
      int int0 = 2902;
      // Undeclared exception!
      jSONObject0.toString(2902, 2902);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.026378750007062
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = JSONObject.quote(";/FngkX");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("p", ";/FngkX");
      String string1 = jSONObject1.toString((-1422), (-1422));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.8350516730230504
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = JSONObject.quote(";/FngkX");
      assertEquals("\";/FngkX\"", string0);
      
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.toString(32);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("n\"QU6fFd's", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.8566966946680721
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = JSONObject.quote("%X?P;/gk");
      assertEquals("\"%X?P;/gk\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean("getshortValue");
      assertFalse(boolean0);
      
      String string1 = JSONObject.valueToString((Object) null, 92, 108);
      assertEquals("null", string1);
      
      String string2 = JSONObject.quote("$2");
      assertEquals("\"$2\"", string2);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("a%ASu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"a%ASu\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("getshortValue");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("", (-3961.0));
      assertEquals((-3961.0), double0, 0.01);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = JSONObject.quote("|@k.!TSi4|");
      assertEquals("\"|@k.!TSi4|\"", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, (-2500), 34);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean boolean0 = new Boolean("0?l_s");
      String string0 = JSONObject.valueToString(boolean0, 111, (-2493));
      assertNotNull(string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = JSONObject.quote("`fAN)QaS]]h`\"38K");
      assertEquals("\"`fAN)QaS]]h`\\\"38K\"", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "1xPL";
      Boolean boolean0 = new Boolean("1xPL");
      Integer integer0 = new Integer(1673);
      hashMap0.put(boolean0, integer0);
      String string1 = null;
      try { 
        jSONObject0.put((String) null, (-2618.5663618));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>(46, 46);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("y>;Zp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y>;Zp\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{+G^1E");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {+G^1E
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("java.lang.Float0000000008.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of java.lang.Float0000000008.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "get";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = "x)!b^K1w}NVhGw??gfb";
      stringArray0[4] = "get";
      JSONObject jSONObject0 = new JSONObject(linkedList1, stringArray0);
      jSONObject0.putOpt(",:]}/\"[{;=#", (Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("a!~2lzXFb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of a!~2lzXFb
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = Boolean.valueOf("!g1h'&");
      hashMap0.put(boolean0, (Integer) null);
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("y|0/:?$3Fc~", jSONObject0);
      hashMap0.put("{mhE\"^x1oeyd-zlnEE4", (JSONObject) null);
      Float float0 = new Float((-1060.5731F));
      jSONObject0.put("y|0/:?$3Fc~", (Object) float0);
      jSONObject0.accumulate("y|0/:?$3Fc~", (Object) null);
      Float float1 = new Float((-1060.5731F));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double((-2566.0));
      hashMap0.put((String) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("int", object0);
      try { 
        jSONObject1.getInt("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"int\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Integer integer0 = new Integer(44);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "L8:!%k|dphS65+g";
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("L8:!%k|dphS65+g", object0);
      try { 
        jSONObject1.getLong("L8:!%k|dphS65+g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"L8:!%k|dphS65+g\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(boolean0, "getcomputeIfPresent");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      long long0 = jSONObject0.optLong("LF< W-;j2", 1L);
      assertEquals(1L, long0);
      
      JSONArray jSONArray0 = new JSONArray();
      linkedList0.add(jSONArray0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray2);
      
      String string0 = JSONObject.doubleToString((-2089.5F));
      assertEquals("-2089.5", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0243083566323206
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = JSONObject.quote(";/FngkX");
      assertEquals("\";/FngkX\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",\n", (Object) "\";/FngkX\"");
      long long0 = jSONObject0.optLong(";/FngkX");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("ite", (-1631));
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Float float0 = new Float(1.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("{oD)etd7G#%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{oD)etd7G#%\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Float float0 = new Float((-1723.5354));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("fU {0=9J|U3?1bzM", (-1723.5354));
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject1.getInt("fU {0=9J|U3?1bzM");
      try { 
        Short.valueOf("getentrySet");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getentrySet\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("isvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isvalueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.append("", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("", "");
      JSONObject.quote("");
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("", object0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("y|0/:?$3Fc~", (Object) hashMap0);
      jSONObject1.accumulate("y|0/:?$3Fc~", hashMap0);
      try { 
        Float.valueOf("}<`%{~#yR'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) "isnumberToString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt(",i=~#[");
      assertNull(object0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put(",:]}/\"[{;=#", (Collection) linkedList0);
      try { 
        jSONObject0.getDouble(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double((-1368.1284285093086));
      hashMap0.put("#@?o", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      double double1 = jSONObject0.getDouble("#@?o");
      assertEquals((-1368.1284285093086), double1, 0.01);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\n", (Object) "");
      Object object0 = jSONObject0.get("\n");
      assertEquals("", object0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      try { 
        jSONObject0.get("U7]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"U7]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      StringWriter stringWriter0 = new StringWriter(57);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.remove((String) null);
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }
}
