/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 13 22:13:12 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.444401767356342
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(0L, 4294967284L);
      Range range1 = Range.ofLength(4294967284L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.of(1273L, 9223372034707292162L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1273L, 9223372034707292162L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3998437811220925
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(9223372036854775726L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775726L, 9223372036854775726L);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.6870053289159856
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.contractEnd((-686L));
      range_Builder0.contractBegin(620L);
      Range range0 = range_Builder2.build();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(620L, long0);
      
      List<Range> list0 = range0.split(65535L);
      assertFalse(list0.contains(range0));
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-128L));
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1L));
      Range range0 = range_Builder1.build();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.587897799270264
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(2069L, 9223372036854773739L);
      range1.equals(range0);
      assertTrue(range0.isEmpty());
      
      Range.of(9223372036854768201L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2069L, 9223372036854768201L);
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.690731070842713
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      
      String string0 = range0.toString();
      assertSame(range0, range1);
      assertEquals("[ 0 .. -1 ]/0B", string0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.393711948091681
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.of(9223372036854775726L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775726L, 9223372036854775726L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd(255L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775635 would make range [9223372036854775726 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3274662176194347
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.contractEnd((-686L));
      range_Builder1.contractBegin(66221L);
      Range range0 = range_Builder2.build();
      range0.equals(range_Builder1);
      Range range1 = Range.ofLength(66221L);
      // Undeclared exception!
      try { 
        range1.split((-686L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4870353170060233
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(0L, 4294967284L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 127L, 127L);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1242L), 4294967341L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9794121442934958
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(2147483627L, 9223372036854771679L);
      Range range1 = Range.of(2147483627L, 9223372036854771679L);
      range1.equals(range0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(0L, 4294967284L);
      Range range1 = Range.ofLength(4294967284L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(0L, 4294967286L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.744139567652836
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775706L);
      Range range1 = Range.of(9223372036854775706L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complement(range0);
      linkedList0.addAll(0, (Collection<? extends Range>) list0);
      linkedList0.offerFirst(range0);
      linkedList0.add(range0);
      List<Range> list1 = range1.complementFrom(linkedList0);
      assertEquals(3, linkedList0.size());
      assertEquals(1, list1.size());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4430691161527416
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(7606L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerFirst(range0);
      linkedList0.add(range0);
      assertTrue(linkedList0.contains(range0));
      
      range0.complementFrom(linkedList0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.7814457129607137
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5250L), (-5250L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range_CoordinateSystem0.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem1);
      List<Range> list0 = range1.complement(range1);
      // Undeclared exception!
      try { 
        range0.complementFrom(list0);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -5251 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(1463L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(2147483626L, 9223372036854771679L);
      boolean boolean0 = range0.equals("org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854771700L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0555153951973866
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(405L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1126744841627128
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of(10L);
      Range range1 = Range.of(8L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.7815259592183312
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 662L, 662L);
      boolean boolean0 = range1.isEmpty();
      assertTrue(boolean0);
      
      Range range2 = Range.ofLength(9223372036854775807L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.5624977543416185
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-32775L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32775L), (-32775L));
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-1306L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((-32775L));
      Range range1 = Range.of((-32775L), 2592L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.3860239318092082
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(0L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(0L);
      range1.equals((Object) null);
      assertTrue(range1.isEmpty());
      
      Range range2 = Range.of(0L, 0L);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.20423340720908
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-32768L), (-32768L));
      range1.equals(range0);
      Range range2 = Range.of((-33995L), 1899L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.6366001086847435
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(9223372036854771700L);
      Range range1 = Range.of((-3555L), 32767L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(0L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2013835344355432
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 662L, 662L);
      Range.ofLength(662L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.3849954138101435
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(2069L);
      Range range1 = Range.of(2069L, 9223372036854773739L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      range1.split(9223372036854773739L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.059067004520361
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(0L, 4294967296L);
      Range range1 = Range.ofLength(4294967296L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.3862395264912064
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(4294967296L);
      Range range1 = Range.ofLength(4294967296L);
      boolean boolean0 = range1.equals(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      
      Range range2 = Range.of(4294967296L, 4294967296L);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of((-32775L), (-32775L));
      Range range1 = Range.of((-32775L));
      boolean boolean0 = range1.equals(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.133310203178477
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(0L, 2069L);
      Range range1 = Range.ofLength(2069L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(1L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(246L);
      Range range1 = Range.ofLength(246L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(2490L);
      Range range1 = Range.of(2490L);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3137787562919607
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.ofLength(4360L);
      Range range1 = Range.ofLength(4360L);
      range1.intersects(range0);
      range1.equals("YB'7U5g`5C&9) 0h");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.parseRange("YB'7U5g`5C&9) 0h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse YB'7U5g`5C&9) 0h into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-2147483648L), (-2147483648L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(2069L, 4294967295L);
      range0.equals(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.parseRange("tFU&bgv&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse tFU&bgv& into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.5900169585936608
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(1L);
      List<Range> list0 = range1.split(1L);
      assertEquals(1, list0.size());
      
      List<Range> list1 = range0.complement(range1);
      assertTrue(list1.contains(range0));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.6439790341070926
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(1L, 1587L);
      Range range1 = Range.ofLength(0L);
      Object object0 = new Object();
      range1.equals(object0);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of((-32775L));
      boolean boolean0 = range0.equals((Object) null);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range1 = Range.of((-32775L), 0L);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.3268842301321655
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(2367L, 4294967296L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.4944335722552897
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854771679L);
      Range range1 = Range.of(9223368304528233820L, 9223372036854775552L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(2, list0.size());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32775L), (-32775L));
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(2069L, 4294967295L);
      Long long0 = new Long((-271L));
      range0.equals(long0);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of(1109L, 4294968218L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.271759469228055
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = 2197L;
      Range.Builder range_Builder0 = new Range.Builder(2197L);
      Range.Builder range_Builder1 = new Range.Builder(2197L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.copy();
      range_Builder2.expandBegin((-1L));
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.0610733884692896
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.of((-32768L), (-32768L));
      Range range0 = Range.of((-32768L));
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-32768L), (-32768L));
      assertSame(range1, range0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.1323906629485916
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(4294967296L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.of(4294967296L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = 4294967296L;
      Range range0 = Range.of(4294967296L, 4294967296L);
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.of(4294967296L, 9L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.329667244765436
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(2069L, 2069L);
      boolean boolean0 = range0.isEmpty();
      Range range1 = Range.of(2069L, 2069L);
      Object object0 = new Object();
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertSame(range0, range1);
      
      Range range2 = Range.of(9223372036854773739L, 9223372036854773739L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.520453387974887
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(0L, 4294967296L);
      Range range1 = Range.ofLength(4294967296L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
      
      boolean boolean1 = range0.isEmpty();
      assertNotSame(range0, range1);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775706L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(9223372036854775706L);
      Long long0 = new Long(620L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(9223372036854774699L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.1196150585169233
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-3118L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.7222453014326162
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.of((-2147483648L));
      Range range1 = Range.ofLength(4294967295L);
      Range range2 = range1.intersection(range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775717L);
      List<Range> list0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals(list0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = (-2147483648L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.6805458009177863
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range range1 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.2670942167452757
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.ofLength(4353L);
      Range range1 = Range.of(4353L, 4353L);
      range1.startsBefore(range0);
      assertFalse(range0.isEmpty());
      
      List<Range> list0 = range1.split(4353L);
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(9223372036854771679L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.314176458842242
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.ofLength(9223372036854775732L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775732L, (-589L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -590 would make range [9223372036854775732 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.542649778547392
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 0 .. 0 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 0 .. 0 ]/0B", range_CoordinateSystem0);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.427055885464538
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      long long0 = range0.getLength();
      assertEquals(2147483649L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1 .. 2147483648 ]/SB", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.2561312067032744
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of((-32775L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32775L), (-32775L));
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 601L, 601L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775726L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(32767L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.716915040554473
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854771700L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.9794121442934958
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(2147483647L, 2147483647L);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.5659328646056334
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775732L);
      Range range1 = Range.of(9223372036854775732L, 9223372036854775732L);
      range1.intersects(range0);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.200767051101671
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(255L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.3848772524016595
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      Range range1 = Range.of(0L, 0L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-1L));
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.1792007145348498
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(0L, 2963L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.427256972143937
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(4350L, 4350L);
      String string0 = range0.toString();
      assertEquals("[ 4350 .. 4350 ]/0B", string0);
      
      Range range1 = Range.of(9223372032559808512L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.2947356610848955
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of((-32775L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-32774L), long0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.3890454979492155
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(2147483626L, 2147483626L);
      range0.complement(range0);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.587774479502105
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.ofLength(4360L);
      Range range1 = Range.of(4360L, 4360L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      boolean boolean1 = range0.endsBefore(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.2671143019073328
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.3677819889889076
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.ofLength(9223372036854775732L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775732L, (-2160L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2160 would make range [9223372036854775732 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.543287869822187
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(255L, 255L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.ofLength(4294967286L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-2029L));
      Range range1 = range0.asRange();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.5284359540326746
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(0L, 4294967284L);
      List<Range> list0 = range0.split(4294967284L);
      assertFalse(list0.contains(range0));
      assertFalse(list0.isEmpty());
      
      Range range1 = Range.of(0L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.5454645895967496
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      long long0 = range1.getEnd();
      assertEquals(9223372036854775807L, long0);
      
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.201200886033717
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(1L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.587857739982518
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(4360L);
      Range range1 = Range.of(4360L, 4360L);
      range1.startsBefore(range0);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.8890937595550543
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(7606L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 7605 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 0 .. 7605 ]/0B");
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      String string1 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 0 .. 7606 ]/SB", string1);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      range_Builder0.contractEnd((-128L));
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.2032882963403053
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(4360L);
      Range range1 = Range.of(4360L, 4360L);
      boolean boolean0 = range1.intersects(range0);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.542218290257984
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(2069L, 9223372036854773739L);
      range0.complement(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 4294967296L, 4294967296L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3174L, 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.552824406041531
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(65513L);
      Range.Builder range_Builder1 = new Range.Builder(65513L);
      range_Builder0.copy();
      range_Builder0.expandBegin((-3129L));
      range_Builder0.contractBegin(627L);
      Range range0 = Range.of(65513L, 65513L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.5557374146919947
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775732L);
      Range range1 = Range.of(9223372036854775732L, 9223372036854775732L);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertNotSame(range2, range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.344193893669512
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.ofLength(1109L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.4917428525111927
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 637L, 637L);
      Range range1 = Range.ofLength(637L);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.442381365997716
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of(4294967286L);
      Range range1 = Range.of(4294967286L);
      List<Range> list0 = range1.complement(range0);
      assertSame(range1, range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.9795303057019797
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(9223372036854775740L, 9223372036854775740L);
      Range range1 = Range.of(9223372036854775740L, 9223372036854775740L);
      List<Range> list0 = range1.split(9223372036854775740L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.3876979611047213
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.endsBefore(range0);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-1L), 9223372036854775779L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.386495788903917
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-688L));
      List<Range> list0 = range1.complement(range0);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range1));
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.458063546965408
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.3848772524016595
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Long.min(0L, 0L);
      Long.getLong("|z");
      Range range0 = Range.of(0L);
      range0.getEnd();
      Range range1 = Range.ofLength(0L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.of(0L, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.2587668592234538
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.of(1559L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 601L, 601L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(601L, long0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.6274730624136784
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-379L), (-379L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
      
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.981410146291498
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.ofLength(4360L);
      Range range1 = Range.ofLength(4360L);
      boolean boolean0 = range1.equals("");
      assertFalse(boolean0);
      
      range1.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.toString();
      long long0 = range1.getLength();
      assertEquals(4360L, long0);
      
      Range range2 = Range.ofLength(255L);
      boolean boolean1 = range2.endsBefore(range0);
      boolean boolean2 = range0.startsBefore(range2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of(0L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.2049446110400983
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(9223372036854775726L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.269731579382638
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(4294967296L, 4294967296L);
      Range.of(4294967296L, 4294967296L);
      Range range1 = Range.ofLength(4294967296L);
      range1.isSubRangeOf(range0);
      Range range2 = Range.of(4294967296L, 4294967296L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.92831873556008
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 130L);
      range1.spliterator();
      List<Range> list0 = range1.complement(range0);
      assertEquals(2, list0.size());
      
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.671357808441392
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775732L);
      Range range1 = Range.of(0L, 0L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(9223372036854775732L, 9223372036854775732L);
      List<Range> list0 = range0.complement(range2);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.4418748766023377
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-254L));
      List<Range> list0 = range0.split(255L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.9769701418514933
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of(9223372036854775732L, 9223372036854775732L);
      Object object0 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      boolean boolean0 = range0.equals("o(97+#K7 T4PU");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.112227645912027
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.ofLength(245L);
      long long0 = range0.getLength();
      assertEquals(245L, long0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.298672366892938
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.3577183787624234
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2032L), 4360L);
      long long0 = range0.getLength();
      assertEquals(6392L, long0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      range1.complement(range0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range range1 = Range.ofLength(0L);
      assertTrue(range1.isEmpty());
      
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.2025556956077046
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(0L);
      Range range1 = Range.ofLength(0L);
      assertTrue(range1.isEmpty());
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/RB", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.4149986825384553
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.1296233673511074
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.ofLength(4360L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.4419999547761964
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of(495L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.4411277208882947
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775726L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of((-22L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.2018510619417797
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of(246L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(246L, long0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.130860608303783
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.contractBegin(627L);
      Range range0 = Range.of(65535L, 65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(3324L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967296L, 4294967296L);
      // Undeclared exception!
      try { 
        Range.parseRange("0ONGEST_TO_SHORTEST", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 0ONGEST_TO_SHORTEST into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.6877906150720685
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.ofLength(4360L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 4360 ]/RB", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.0561774276369764
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.of(2442L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of(9223372036854775726L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.5454169943467555
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775732L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range range1 = Range.of(9223372036854775732L, 9223372036854775732L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.2660952157462746
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.ofLength(0L);
      Range range0 = Range.of(0L, 0L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.060276460265276
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(9223372036854775703L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775703L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -211 would make range [9223372036854775703 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.1159572496416303
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 254 ]/0B", string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of(9223372036854771671L);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      range_Builder0.expandEnd(65535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 65535L, 620L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.7964122534878726
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.of(130L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.346895128556114
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483641L), (-2147483641L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.323100447758692
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967296L);
      Range range0 = Range.of(1494L, 4294967296L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2678L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=3.632045940067081
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-3064L));
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      range_Builder0.shift(265L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(847L);
      range1.complement(range0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2865L), (-2865L));
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=3.2675871151461036
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range range0 = Range.of(9223372036854775674L, 9223372036854775674L);
      long long0 = range0.getBegin();
      assertEquals(9223372036854775674L, long0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=3.3992274483023697
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range range0 = Range.of((-2286L));
      long long0 = range0.getBegin();
      assertEquals((-2286L), long0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 167
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Range range0 = Range.of(1L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 168
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Range range0 = Range.ofLength(2360L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 169
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Range range0 = Range.of((-12078L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 170
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Range range0 = Range.of(1817L, 9223372034707357674L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 171
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Range range0 = Range.of(371L, 371L);
      assertFalse(range0.isEmpty());
  }
}
