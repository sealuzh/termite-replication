/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 13 21:53:50 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.SQLLongint;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-3783), "");
      defaultDBColumn0.isIdentical(defaultDBTable0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "drop tableselectremembering join order", true, "");
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals(" NOT NULL", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-3751), "");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add(dBColumnArray0[0]);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sekect intodrop 3on", defaultDBTable0, 335544577, "sekect intodrop 3on");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("sekect intodrop 3on, sekect intodrop 3on", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLLongint sQLLongint0 = new SQLLongint((-2875));
      StringReader stringReader0 = new StringReader("IM");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) (-2875);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 2875", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5936745661766833
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "selectremembering join order";
      stringArray0[1] = "selectremembering join order";
      stringArray0[2] = "selectremembering join order";
      stringArray0[3] = "selectremembering join order";
      stringArray0[4] = "selectremembering join order";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.normalize("NCLOB", true);
      DBSchema dBSchema0 = new DBSchema("selectremembering join order");
      dBSchema0.getTable("selectremembering join order");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("~dRoW[>vvYaIbE(}", (DBTable) null, (DBDataType) null, integer0, integer1);
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("type=", defaultDBTable0, 47, "type=");
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.mutatesDataOrStructure("org.h2.schema.Schema");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("truncate");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(39);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("A5LS");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?o14xRdGZ";
      stringArray0[1] = "?o14xRdGZ";
      stringArray0[2] = "?o14xRdGZ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "A5LS", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("?o14xRdGZ", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(83, charArrayWriter0.size());
      assertEquals("create table A5LS (,\n\tCONSTRAINT A5LS UNIQUE (?o14xRdGZ, ?o14xRdGZ, ?o14xRdGZ)\n)", charArrayWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "dM:q:xeF&oK+J0-j)L}", "updatedat");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
      assertEquals("check constraint", dBCheckConstraint0.getObjectType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.hs");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.hs";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "TEMPORARY ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      mockPrintWriter0.append((CharSequence) "UNIQUE (org.hs)");
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      assertEquals(84, rowOutputBinary0.size());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-3783), "");
      defaultDBColumn0.isIdentical(defaultDBTable0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[3] = '3';
      stringWriter0.write(charArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("3\u0000\u00003create table  (\n\t  NULL\n)", stringWriter0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("arter matr");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("arter matr", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("g,9xg", defaultDBTable0, 377, "g,9xg");
      defaultDBColumn0.setDefaultValue("g,9xg");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("g,9xg G,9XG DEFAULT g,9xg NULL", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "2C\"#Fl;c:";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "!}{PC";
      stringArray1[1] = "g,9xg";
      stringArray1[2] = "g,9xg";
      stringArray1[3] = "!}{PC";
      stringArray1[4] = "g,9xg G,9XG DEFAULT g,9xg NULL";
      stringArray1[5] = "g,9xg G,9XG DEFAULT g,9xg NULL";
      stringArray1[6] = " NOT";
      String string1 = SQLUtil.join("!}{PC", "2C\"#Fl;c:", stringArray0, "2C\"#Fl;c:", "2C\"#Fl;c:", stringArray1);
      assertEquals("!}{PC join 2C\"#Fl;c: as 2C\"#Fl;c: on 2C\"#Fl;c:.2C\"#Fl;c: = 2C\"#Fl;c:.!}{PC", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.059069544180554
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLUtil.normalize("]djE}p-*D84", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("] djE } p - * D84");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]djE}p-*D84";
      stringArray0[1] = "arter matrclized vfvw";
      stringArray0[2] = "]djE}p-*D84";
      stringArray0[3] = "] djE } p - * D84";
      stringArray0[4] = "] djE } p - * D84";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("arter matrclized vfvw", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      File file0 = FileUtil.canonicalFile("] djE } p - * D84");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "]djE}p-*D84");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertFalse(dBForeignKeyConstraint0.isNameDeterministic());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.424943714670272
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-3797), "");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.renderColumnTypeWithSize(dBColumnArray0[0]);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setURL+(nt,URL)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"nt\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "m{!>+HI^rm";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("m{!>+HI^rm", true, defaultDBTable0, stringArray0);
      defaultDBTable0.removeIndex(dBNonUniqueIndex0);
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4699913100731523
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("SELET * FRO ");
      // Undeclared exception!
      try { 
        SQLUtil.join("inner", "X42&G\"'}xh", (String[]) null, "SELET * FRO ", "SELET * FRO ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(0Tg?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (0Tg?
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("truncate", false, "truncate", "truncate");
      dBCheckConstraint0.setName((String) null);
      StringBuilder stringBuilder0 = new StringBuilder("AI\"OAj#  ~^lp}9");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      assertEquals("table", defaultDBTable1.getObjectType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("=IMRN");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("=IMRN");
      defaultDBTable0.countProviders();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=IMRN";
      stringArray0[1] = "=IMRN";
      stringArray0[2] = "=IMRN";
      stringArray0[3] = "=IMRN";
      stringArray0[4] = "=IMRN";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("insert", compositeDBObject0);
      tableContainer0.getTable("getNestedLoopLeftOuterJoinResultSet");
      DBDataType dBDataType0 = DBDataType.getInstance((-3795), "insert");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insert", (DBTable) null, dBDataType0, integer0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("INSERT(0,0)", stringBuilder0.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate");
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5094656225315988
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("object", false, "object", "object");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT object CONSTRAINT object ", stringBuilder0.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.4662665178647387
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alteu tableselectrememberin join ovdr");
      assertNull(boolean0);
      
      Character character0 = Character.valueOf(']');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("']'", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Character character0 = new Character('<');
      String string0 = SQLUtil.substituteMarkers("call|", "drop table", character0);
      assertEquals("call|", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.659491107247209
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("`Cllo!");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "`Cllo!";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("^Y|6", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`Cllo!", dBSchema0);
      DBCatalog dBCatalog1 = defaultDBTable0.getCatalog();
      DBTable dBTable0 = dBCatalog1.getTable("`Cllo!", false);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("^Y|6", false, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(" FE=> Password(GSS Authentication Token)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"GSS Authentication Token\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[15];
      String[] stringArray1 = new String[0];
      SQLUtil.join("left", "left", stringArray1, "left", "", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("left", stringArray0, "/&b}_l", "create table ", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.2772569862978458
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$xzZ@xu/Oz>M,vu";
      stringArray0[1] = "$xzZ@xu/Oz>M,vu";
      SQLUtil.join("$xzZ@xu/Oz>M,vu", "$xzZ@xu/Oz>M,vu", stringArray0, "-Gt", "$xzZ@xu/Oz>M,vu", stringArray0);
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = SQLUtil.normalize("g'jYte?iH5+", false);
      assertEquals("g 'jYte?iH5+'", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(6, "SELECT * FROM ");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM ", (DBTable) null, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("Corrupted stream; headerLength=");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      SQLUtil.addRequiredCondition("Corrupted stream; headerLength=", stringBuilder0);
      assertEquals("Corrupted stream; headerLength=SELECT * FROM (0) and Corrupted stream; headerLength=", stringBuilder0.toString());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLUtil.renderValue((Object) null);
      SQLUtil.mutatesDataOrStructure("}6z+d/IRJy0$uC`~XH$");
      SQLUtil.isQuery("null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("truncate", false, defaultDBTable0, "truncate");
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      File file0 = FileUtil.canonicalFile("truncate");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      mockFileWriter0.write(34);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "}6z+d/IRJy0$uC`~XH$";
      objectArray0[1] = (Object) dBCheckConstraint0;
      objectArray0[2] = (Object) "truncate";
      objectArray0[3] = (Object) defaultDBTable0;
      objectArray0[4] = (Object) "truncate";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) stringBuilder1;
      PrintWriter printWriter0 = mockPrintWriter0.format("executernpbkd", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("C#URdl5eC1");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("C#URdl5eC1");
      defaultDBTable0.setDoc("create materialized view");
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.getIndexes();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "create materialized view", "T%XoI24_tg7");
      dBCheckConstraint0.setDoc("org.databene.jdbacl.SQLUtil");
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = SQLUtil.typeAndName(dBCheckConstraint0);
      assertEquals("check constraint constraint", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = SQLUtil.normalize("f|SM@/%Z|(8", true);
      assertEquals("f | SM @ / % Z | (8", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.4699913100731523
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("SQLCODE");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SQLCODE", false, "SQLCODE", "truncatea8+i_km");
      StringBuilder stringBuilder0 = new StringBuilder("truncatea8+i_km");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SQLCODE");
      assertNull(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("truncatwe&");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Character character0 = new Character('j');
      genericDescriptorList0.add((Object) character0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Character cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("W1AU(x,Q,O+=q.Ce");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: W1AU(x,Q,O+=q.Ce
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("call", true, "truncate", "call");
      StringBuilder stringBuilder0 = new StringBuilder("nanoTime");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      assertNull(defaultDBTable1.getDoc());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("eClIvY");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("eClIvY");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBDataType dBDataType0 = DBDataType.getInstance((-336433876), "eClIvY");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("eClIvY", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("ECLIVY(0)", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4842424730540764
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("}o^A!CDN\"4");
      assertNull(boolean0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "F");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(3532, "org.h2.command.dml.BackupCommand");
      Integer integer0 = new Integer(3532);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.h2.command.dml.BackupCommand", defaultDBTable0, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("org.h2.command.dml.BackupCommand ORG.H2.COMMAND.DML.BACKUPCOMMAND(3532,3) NULL", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("4`#7`g}:\"SpOB$P=", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.5407108604577937
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-3783), "");
      defaultDBColumn0.equals("");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[18];
      String string0 = "!WL% lGvK%";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!WL% lGvK%");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("!WL% lGvK%", defaultDBTable0, (-3783), "!WL% lGvK%");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-3783), "");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8133224558281074
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("A5LS", false, "A5LS", "A5LS");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      String string0 = SQLUtil.renderValue(stringBuilder1);
      assertEquals("CONSTRAINT A5LS CONSTRAINT A5LS ", stringBuilder0.toString());
      assertEquals("CONSTRAINT A5LS CONSTRAINT A5LS ", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = SQLUtil.normalize(".{4dw-%D=l1N", true);
      assertEquals(".{ 4dw - % D = l1N", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = SQLUtil.normalize("(Wu}b4)K]9E(", true);
      assertEquals("(Wu } b4) K ] 9E (", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("jN?.[E*)BslB", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("FnyqD)iU", dBSchema0);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "jN?.[E*)BslB", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT jN?.[E*)BslB UNIQUE ()", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("C#URdl5eC1");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("C#URdl5eC1", dBSchema0);
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "C#URdl5eC1", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("null as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.7754337976947765
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("callp/(dn?lg");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(6, "|");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|", defaultDBTable0, dBDataType0);
      StringBuilder stringBuilder0 = new StringBuilder(6);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      String string0 = SQLUtil.removeComments("|");
      assertEquals("|", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.4359838465843624
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("arter materialized vFew");
      StringBuilder stringBuilder0 = new StringBuilder("arter materialized vFew");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("rename");
      SQLUtil.addOptionalCondition("rename", stringBuilder0);
      assertEquals("rename or rename", stringBuilder0.toString());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "There are no rows in this ResultSet.");
      SQLUtil.addRequiredCondition("There are no rows in this ResultSet.", stringBuilder0);
      assertEquals("There are no rows in this ResultSet. and There are no rows in this ResultSet.", stringBuilder0.toString());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition(" FE=> Password(GSS Authentication Token)", stringBuilder0);
      assertEquals(" FE=> Password(GSS Authentication Token)", stringBuilder0.toString());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("call");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("call|");
      assertNull(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = SQLUtil.normalize("a@@2cs,k", false);
      assertEquals("a @ @ 2cs, k", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = new String[3];
      stringArray1[0] = "yrIr7";
      stringArray1[2] = "yrIr7";
      // Undeclared exception!
      try { 
        SQLUtil.join("yrIr7", "yrIr7", stringArray0, "truncate.{4w-%d1n", "truncate.{4w-%d1n", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = SQLUtil.normalize("truncate*/", true);
      assertEquals("truncate */", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("insertrnpbkd=q/j@qk");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("insertnull");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = SQLUtil.normalize(":!W:`O_~3ZuGw_*]W*", true);
      assertEquals(": ! W : ` O_ ~ 3ZuGw_ * ] W *", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.4662665178647387
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("sekect intodrop 3on");
      assertNull(boolean0);
      
      DBCatalog dBCatalog0 = new DBCatalog("sekect intodrop 3on");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog sekect intodrop 3on", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[14];
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("Lvh>vemaF{q", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Ko6XD$@3Awh>Oe", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Ko6XD$@3Awh>Oe", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT Ko6XD$@3Awh>Oe PRIMARY KEY (, , , , , , , , , , , , , )", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create table ");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.7842068034002125
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("A5LS", false, "A5LS", "A5LS");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT A5LS ", stringBuilder0.toString());
      
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT A5LS ", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter sessionalter sessions?@af\"~wya", true);
      assertEquals("alter sessionalter sessions ? @ af \"~wya\"", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("`Cllo!", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*/ ", defaultDBTable0, 122, "*/ ");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("*/ ", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("null.*/ ", string1);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[4];
      stringArray1[0] = " <> ";
      stringArray1[1] = " <> ";
      stringArray1[2] = " <> ";
      stringArray0[2] = " <> ";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(" <> ", stringArray1, " <> ", " <> ", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      dBCatalog0.setOwner(compositeDBObject0);
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("alter index", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.renderColumnListWithTableName("mcllo", stringArray0);
      assertEquals("mcllo.null, mcllo.null, mcllo.null, mcllo.null, mcllo.null, mcllo.null, mcllo.null, mcllo.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6");
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM 6 WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string1);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("update", true, "update", "update");
      dBCheckConstraint0.setName("update");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT update ", stringBuilder0.toString());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select1svhw");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intoi am a");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.lib.HsqlByteArrayOutputStream", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Boolean boolean0 = new Boolean("CREATE VIEW ");
      SQLUtil.isDML("CREATE VIEW ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-G/%Sd/,AJbs-sh");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("arter materialized vFew", "arter materialized vFew", (String[]) null, "arter materialized vFew", "arter materialized vFew", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join("left", "left", stringArray0, "left", "left", stringArray0);
      assertEquals("left join left as left on left.null = left.null and left.null = left.null and left.null = left.null", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("setFetchDirection", false, "setFetchDirection", "setFetchDirection");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("A5LS", false, "A5LS", "A5LS");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK A5LS", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("ALTER TABLE ");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("arter Matrclized vFvw", false, "stringtype", "stringtype");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"arter Matrclized vFvw\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" NULL", true, " NULL", "select");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" NULL\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , , )", string1);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = SQLUtil.normalize("mMl(xg]O3i+=[.3d9S", true);
      assertEquals("mMl (xg ] O3i + = [.3d9S", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("REFERENCEDCOLUMNS", stringArray0, "yjR)", "REFERENCEDCOLUMNS", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(",'d6", (String[]) null, ",'d6", "C:y9dyt).?N", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin(" H47Y98P0MA[B", stringArray0, "lY9J3dn}7%Nh7", "22014", stringArray0);
      assertEquals("lY9J3dn}7%Nh7 as 22014 on ", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("g'jYte?iH5+", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("alter index#watnlg} ni");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("U*~:+F");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("arter mater2alizedtvFew");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alte");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("arter mater2alizedtvFew", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"arter mater2alizedtvFew\" FOREIGN KEY () REFERENCES alte()", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[4];
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBSchema dBSchema0 = new DBSchema("+f'./9p3.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+f'./9p3.", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("+f'./9p3.", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT +f'./9p3. FOREIGN KEY (, , , ) REFERENCES +f'./9p3.(, , , )", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[3];
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("derby.storage.initialPages");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", " or ", " or ");
      assertEquals("", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("arter materialized vFew", " NULL", " NULL");
      assertEquals("arter materialized vFew", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = SQLUtil.renderValue("`Cllo!");
      assertEquals("'`Cllo!'", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "s&XD~1e=\"*E.", "s&XD~1e=\"*E.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("CREATE VIEW ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("arter matrialized vFvw");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall(".");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBSchema dBSchema0 = new DBSchema(",tableUUID=");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Rj/=M<(<489", (DBTable) null, 0, ":TnV~pn");
      SQLUtil.renderColumn(defaultDBColumn0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter mateiaized/v6ew");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("alter mateiaized/v6ew", stringArray0, "alter mateiaized/v6ew", "alter mateiaized/v6ew", stringArray0);
      assertEquals("alter mateiaized/v6ew as alter mateiaized/v6ew on ", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.leftJoin("alter materialized view", stringArray0, "alter materialized view", "=Dbwv6a[gwyMd6clC", stringArray0);
      assertEquals("left join alter materialized view as =Dbwv6a[gwyMd6clC on alter materialized view.null = =Dbwv6a[gwyMd6clC.null and alter materialized view.null = =Dbwv6a[gwyMd6clC.null and alter materialized view.null = =Dbwv6a[gwyMd6clC.null", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.leftJoin("=Dbwv6a[gwyMd6clC", stringArray0, "drop tablev:dq!mx\"phr]&", "=Dbwv6a[gwyMd6clC", stringArray0);
      assertEquals("left join drop tablev:dq!mx\"phr]& as =Dbwv6a[gwyMd6clC on =Dbwv6a[gwyMd6clC.null = =Dbwv6a[gwyMd6clC.null and =Dbwv6a[gwyMd6clC.null = =Dbwv6a[gwyMd6clC.null and =Dbwv6a[gwyMd6clC.null = =Dbwv6a[gwyMd6clC.null and =Dbwv6a[gwyMd6clC.null = =Dbwv6a[gwyMd6clC.null", string0);
  }
}
