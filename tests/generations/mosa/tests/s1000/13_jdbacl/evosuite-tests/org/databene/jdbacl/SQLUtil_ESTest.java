/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 13 18:27:51 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.12531460762738
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("ShLECT7@ \"6$M ");
      assertNull(boolean0);
      
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
      
      boolean boolean1 = SQLUtil.isQuery("ShLECT7@ \"6$M ");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELET  FROM ", defaultDBTable0, 1, "SELET  FROM ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "SELET  FROM ", true, "SELET  FROM ");
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("SELET  FROM  NOT NULL", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.637541774063024
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter Naterialized viewalter taleligevt=mp.jale:rof(\"");
      assertNull(boolean0);
      
      DBCatalog dBCatalog0 = new DBCatalog("_4mF0N");
      dBCatalog0.getTable("_4mF0N", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter Naterialized viewalter taleligevt=mp.jale:rof(\"", (DBTable) null, 1459, "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      Integer integer0 = RawTransaction.ABORT;
      Integer.compareUnsigned(1093, (-311));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'|", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("'| DATE NOT NULL", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.398805401317134
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "/*", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = SQLUtil.substituteMarkers("", "insert", boolean0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 3, "ROLLBACK WORK TO SAVEPOINT ");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLUtil.normalize("", false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "w5j1{^$*Vkk,=k5+@|";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string0 = SQLUtil.join("w5j1{^$*Vkk,=k5+@|", "Mz.^>EK", stringArray0, " ADD ", "canno re", stringArray0);
      assertEquals("w5j1{^$*Vkk,=k5+@| join  ADD  as canno re on Mz.^>EK.w5j1{^$*Vkk,=k5+@| = canno re.w5j1{^$*Vkk,=k5+@| and Mz.^>EK. = canno re. and Mz.^>EK. = canno re.", string0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".w5j1{^$*Vkk,=k5+@|, ., .", string1);
      
      DBSchema dBSchema0 = new DBSchema("");
      String string2 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("", string2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-75);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String string0 = "smrm;lY0";
      SQLUtil.parseColumnTypeAndSize("smrm;lY0");
      String string1 = "/*";
      SQLUtil.removeComments("/*");
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("2myW2&QsR[+'^\"h", defaultDBTable0, 40, "2myW2&QsR[+'^\"h");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("2myW2&QsR[+'^\"h, 2myW2&QsR[+'^\"h", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "create materialized view";
      stringArray0[1] = "Truncation of large objects is.only implemented in 8.3 and later servers.";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE create materialized view = 'create materialized view' AND Truncation of large objects is.only implemented in 8.3 and later servers. = 'Truncation of large objects is.only implemented in 8.3 and later servers.'", string0);
      
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1015830955806851
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE");
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable0, dBDataType0, integer1);
      defaultDBColumn0.toString();
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("DATE DATE NULL", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBTable dBTable0 = null;
      // Undeclared exception!
      SQLUtil.isProcedureCall("_0|.k>b/*");
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("pG]Rx:ZLVu!");
      DBPackage dBPackage0 = new DBPackage("pG]Rx:ZLVu!", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(dBPackage0);
      assertEquals("pG]Rx:ZLVu!.pG]Rx:ZLVu!", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'|", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("DATE");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("'| DATE DEFAULT DATE NULL", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderColumnListWithTableName("create tableselect", stringArray0);
      assertEquals("create tableselect.null, create tableselect.null, create tableselect.null, create tableselect.null, create tableselect.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter index");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("renameremembering access path", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("renameremembering access path");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      String string1 = SQLUtil.join("call", "alter index", stringArray0, "truncate", "G}P67GCd*5dr5^?=er8", stringArray0);
      assertEquals("call join truncate as G}P67GCd*5dr5^?=er8 on alter index.null = G}P67GCd*5dr5^?=er8.null and alter index.null = G}P67GCd*5dr5^?=er8.null and alter index.null = G}P67GCd*5dr5^?=er8.null and alter index.null = G}P67GCd*5dr5^?=er8.null and alter index.null = G}P67GCd*5dr5^?=er8.null", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexo0\":~nqh.o1^9u");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" AND ", defaultDBTable0, 993, "create unique indexo0\":~nqh.o1^9u");
      SQLUtil.removeComments("create unique indexo0\":~nqh.o1^9u");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringWriter stringWriter0 = new StringWriter(993);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("create table create unique indexo0\":~nqh.o1^9u (\n\t AND  CREATE UNIQUE INDEXO0\":~NQH.O1^9U NULL\n)", stringWriter0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-165), "E:");
      Integer integer0 = new Integer((-165));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("E:", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals("E: : E:(-165,-165)", string0);
      
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("E: : E:(-165,-165)");
      assertEquals(3, objectArray0.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.46774799934622
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.mutatesDataOrStructure("org.postgresql.largeobject.LargeObject");
      SQLUtil.renderValue(stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("insert^<f+wg7*:u9d");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "Truncation of large objects is.only implemented in 8.3 and later servers.";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "n`%(M99-FdelXneDX<";
      stringArray0[1] = "' not found in table '";
      stringArray0[2] = "n`%(M99-FdelXneDX<";
      stringArray0[3] = "n`%(M99-FdelXneDX<";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "n`%(M99-FdelXneDX<", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append('\"');
      StringBuilder stringBuilder3 = SQLUtil.addOptionalCondition("' not found in table '", stringBuilder2);
      // Undeclared exception!
      try { 
        stringBuilder3.insert(223, '\"');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("rename");
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("rename");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("inner", "8ZZ|>t!:7\"qC}[r\"sh3", stringArray0, "8ZZ|>t!:7\"qC}[r\"sh3", "insert", stringArray0);
      assertEquals("8ZZ|>t!:7\"qC}[r\"sh3 as insert on ", string0);
      
      boolean boolean0 = SQLUtil.isDDL("create unique index");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("qz^>>~R/*|v");
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELET  FROM ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELET  FROM ", defaultDBTable0, 1, "SELET  FROM ");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "SELET  FROM ";
      stringArray0[1] = "SELET  FROM ";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("an:Yu;aI");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
      
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.402886181440778
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[18];
      String string0 = SQLUtil.renderColumnListWithTableName("execrem/1Frjnice3sppath", stringArray0);
      assertEquals("execrem/1Frjnice3sppath.null, execrem/1Frjnice3sppath.null, execrem/1Frjnice3sppath.null, execrem/1Frjnice3sppath.null, execrem/1Frjnice3sppath.null, execrem/1Frjnice3sppath.null, execrem/1Frjnice3sppath.null, execrem/1Frjnice3sppath.null, execrem/1Frjnice3sppath.null, execrem/1Frjnice3sppath.null, execrem/1Frjnice3sppath.null, execrem/1Frjnice3sppath.null, execrem/1Frjnice3sppath.null, execrem/1Frjnice3sppath.null, execrem/1Frjnice3sppath.null, execrem/1Frjnice3sppath.null, execrem/1Frjnice3sppath.null, execrem/1Frjnice3sppath.null", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("execrem/1Frjnice3sppath");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("updatetimestcmp.valeof(\"");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7094458197175146
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "table null";
      SQLUtil.renderColumnListWithTableName("kd_ET%T!G", stringArray0);
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("table null", stringArray0, "2myw2&", "p'`*+F=s>8r", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9751271998598412
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isQuery("PKTABLE_CAT");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NULL");
      SQLUtil.isDDL("#,CD1D9/=hPaE0&`Ro");
      SQLUtil.normalize("=z~](oKqrP+::#-% ", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "= z ~ ] (oKqrP  +  : : # - %";
      stringArray0[1] = "#,CD1D9/=hPaE0&`Ro";
      stringArray0[2] = "= z ~ ] (oKqrP  +  : : # - %";
      SQLUtil.mutatesDataOrStructure("= z ~ ] (oKqrP  +  : : # - %");
      SQLUtil.normalize("--", false);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.parallelStream();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.306855256035621
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "intoexecute");
      String[] stringArray0 = new String[14];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("intoexecute", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT intoexecute FOREIGN KEY (, , , , , , , , , , , , , ) REFERENCES null(, , , , , , , , , , , , , )", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("SELECT * FROM ");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectiija0ks`@");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7W'1X[2r\\']5");
      String[] stringArray0 = new String[8];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("7W'1X[2r\\']5", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("execrem/1Frjnice3sppath");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("exec");
      assertNull(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELET  FROM ", defaultDBTable0, 1, "SELET  FROM ");
      String string0 = defaultDBColumn0.toString();
      assertEquals("SELET  FROM  : SELET  FROM ", string0);
      
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("SELET  FROM ", string1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE");
      SQLUtil.typeAndName((DBObject) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (-466836248), " on ");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals(" ON ", stringBuilder0.toString());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("chec");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.459562444957137
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      SQLUtil.mutatesDataOrStructure("G@<o!j[A^VHR}oce-,");
      DBDataType dBDataType0 = DBDataType.getInstance(2685, "G@<o!j[A^VHR}oce-,");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("G@<o!j[A^VHR}oce-,", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder(1183);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("G@<O!J[A^VHR}OCE-,(0)", stringBuilder0.toString());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      System.setCurrentTimeMillis((-3185L));
      Random.setNextRandom((-474389168));
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[0];
      String string0 = SQLUtil.leftJoin("' DZcEi%\"R$", stringArray0, "' DZcEi%\"R$", "' DZcEi%\"R$", stringArray1);
      assertEquals("left join ' DZcEi%\"R$ as ' DZcEi%\"R$ on ", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("hELET  FROM ", defaultDBTable0, 1, "hELET  FROM ");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(Q=a\"%>i=");
      DBDataType dBDataType0 = DBDataType.getInstance(3, "(Q=a\"%>i=");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(Q=a\"%>i=", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.toString();
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("(Q=a\"%>i= (Q=A\"%>I=(2,2) NULL", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(80, "E:");
      Integer integer0 = new Integer(80);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("E:", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("E: E:(80,80) NULL", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("3@cz");
      assertNull(boolean0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("3@cz", (DBTable) null, (-1187), "3@cz");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("3@CZ", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = SQLUtil.normalize("Cma6B<[1`?l*{2/=Zp", false);
      assertEquals("Cma6B < [ 1 ` ? l * { 2 / = Zp", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7W'1X[2r\\']5");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7W'1X[2r\\']5";
      stringArray0[1] = "7W'1X[2r\\']5";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, stringArray0[2], true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition(stringArray0[2], stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec0);
      char[] charArray0 = new char[1];
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "v[f=)u]qV8'", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT v[f=)u]qV8' PRIMARY KEY (, )", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.parseColumnTypeAndSize("6bU5");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("1");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "truncate";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "o8=V5;&`SU#aEa7Xn8R";
      stringArray0[4] = "6bU5";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("o8=V5;&`SU#aEa7Xn8R");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLUtil.isQuery("alter table");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "XMLCDATA";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" NU9L", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.renderColumnListWithTableName("alter table", stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("alter table.null, alter table.XMLCDATA, alter table.null");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop materialized viewremembering access path", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FOREIGN KEY ");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("select * from", true, "select * from", "select * from");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"select * from\" CHECK select * from", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("select * from", false, "select * from", "select * from");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK select * from", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F^j;,j]#<~uu[");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("F^j;,j]#<~uu[");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-466836266), "DAT,");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DAT,");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DAT,", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("DAT, DAT,(0) NULL", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("XCUc_", (DBTable) null, (-1402), "XCUc_");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("XCUc_ XCUC_ NULL", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "7LxPn>[:SYI4XV}X4", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 7LxPn>[:SYI4XV}X4 PRIMARY KEY (, , )", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , , ) REFERENCES null(, , , , , , , )", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "/*";
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/*", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FROM ", false, "SELECT * FROM ", "select * from");
      String string0 = SQLUtil.typeAndName(dBCheckConstraint0);
      assertEquals("check constraint SELECT * FROM ", string0);
      assertNotNull(string0);
      
      String string1 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"SELECT * FROM \" ", string1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("alter table,6*t6($s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: alter table,6*t6($s
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.8956684779521416
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBSchema dBSchema0 = new DBSchema("org.apache.derby.iapi.services.cache.ClassSizeCatalog");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.services.cache.ClassSizeCatalog", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.derby.iapi.services.cache.ClassSizeCatalog";
      stringArray0[1] = "renamealter tablesimest=mp.jale:(of(\"";
      stringArray0[2] = "org.apache.derby.iapi.services.cache.ClassSizeCatalog";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "renamealter tablesimest=mp.jale:(of(\"", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(654, (CharSequence) stringBuilder1, 654, 654);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 654
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("!_%-\"C.", true, defaultDBTable0, "Q0ZZM");
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      SQLUtil.addOptionalCondition("cannot ret", stringBuilder1);
      assertEquals("CONSTRAINT !_%-\"C.  or cannot ret", stringBuilder1.toString());
      assertEquals("CONSTRAINT !_%-\"C.  or cannot ret", stringBuilder0.toString());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = SQLUtil.normalize("y%g,lb", false);
      assertEquals("y % g, lb", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = SQLUtil.normalize("<UBBA[<GT)~tv4", true);
      assertEquals("< UBBA [ < GT ) ~ tv4", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("Illegal column type format: ", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("alter tabledrop index");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("truncawterename", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("select * from", true, "select * from", "select * from");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK select * from", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.3238614379613667
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("", "", stringArray0, "", "", stringArray0);
      assertEquals(" as  on ", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = SQLUtil.normalize("|_r4[s')2kZuwN@*", false);
      assertEquals("| _r4 [ s ')2kZuwN@*'", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("INTERSECT", true, "INTERSECT", "INTERSECT");
      dBCheckConstraint0.setDoc("INTERSECT");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT INTERSECT CHECK INTERSECT", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.248740455563034
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("QXQT\nr+$");
      SQLUtil.normalize("QXQT\nr+$", false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "QXQT  nr + $";
      stringArray0[1] = "QXQT  nr + $";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("QXQT  nr + $", stringArray0, "QXQT  nr + $", " and ", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DBSchema dBSchema0 = new DBSchema("simest=mp.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NCLOB", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "simest=mp.", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT simest=mp. UNIQUE (, )", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLUtil.removeComments(" ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "M", false, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-466836266), "DATE");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder(1802);
      stringBuilder0.codePoints();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("e]jRH7M6\"k", stringBuilder0);
      defaultDBColumn0.getNotNullConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLUtil.isDML("truncawterename");
      SQLUtil.renderColumnNames((String[]) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("()", false, "(", "truncawterename");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      dBCheckConstraint0.toString();
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT () CONSTRAINT () ", stringBuilder0.toString());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = SQLUtil.normalize("Timestamp.valeOf(\"", false);
      assertEquals("Timestamp.valeOf (\"\"", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = SQLUtil.normalize("`$*-eg9&zZ7T`Z", false);
      assertEquals("` $ * - eg9 & zZ7T ` Z", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("%T^njmby#%vOeV");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String[] stringArray1 = new String[2];
      stringArray1[0] = "Unknown constraint type: ";
      stringArray1[1] = "Unknown constraint type: ";
      // Undeclared exception!
      try { 
        SQLUtil.join("Unknown constraint type: ", "Unknown constraint type: ", stringArray0, "(a|PV?I@F}tLq$", "(a|PV?I@F}tLq$", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.402886181440778
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("null.null, null.null, null.null", (String[]) null, (String) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.466266517864739
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("ShLECT7@ \"6$M ");
      assertNull(boolean0);
      
      Character character0 = new Character('\"');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'\"'", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "NO", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.1179956497762942
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Timestamp.valeOf(\"");
      assertNull(boolean0);
      
      Character character0 = Character.valueOf('t');
      String string0 = SQLUtil.substituteMarkers("Timestamp.valeOf(\"", "Timestamp.valeOf(\"", character0);
      assertEquals("'t'", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.437465328065844
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Remembering access path ");
      assertNull(boolean0);
      
      String string0 = SQLUtil.substituteMarkers("Remembering access path ", "Remembering access path ", "Remembering access path ");
      assertEquals("'Remembering access path '", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = SQLUtil.renderValue(boolean0);
      assertEquals("false", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.8545607627328535
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SQLUtil.innerJoin("\u0001\u01B6", stringArray0, "\u0001\u01B6", "\u0001\u01B6", stringArray0);
      String string0 = SQLUtil.innerJoin("\u0001\u01B6 as \u0001\u01B6 on \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null", stringArray0, "\u0001\u01B6", "\u0001\u01B6 as \u0001\u01B6 on \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null", stringArray0);
      assertEquals("\u0001\u01B6 as \u0001\u01B6 as \u0001\u01B6 on \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null on \u0001\u01B6 as \u0001\u01B6 on \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null.null = \u0001\u01B6 as \u0001\u01B6 on \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null.null and \u0001\u01B6 as \u0001\u01B6 on \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null.null = \u0001\u01B6 as \u0001\u01B6 on \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null.null and \u0001\u01B6 as \u0001\u01B6 on \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null.null = \u0001\u01B6 as \u0001\u01B6 on \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null.null and \u0001\u01B6 as \u0001\u01B6 on \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null.null = \u0001\u01B6 as \u0001\u01B6 on \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null and \u0001\u01B6.null = \u0001\u01B6.null.null", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = SQLUtil.renderValue("create tableslect");
      assertEquals("'create tableslect'", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("truncatetimestamp.valeof(\"", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Simest=mp.ale:(Of(\"");
      SQLUtil.addRequiredCondition("Simest=mp.ale:(Of(\"", stringBuilder0);
      assertEquals("Simest=mp.ale:(Of(\" and Simest=mp.ale:(Of(\"", stringBuilder0.toString());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("Kh52b?2");
      assertFalse(boolean0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Kh52b?2", false, "Kh52b?2", "SELECT * FROM ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = " WHERE ";
      stringArray0[2] = " WHERE ";
      stringArray0[3] = " WHERE ";
      stringArray0[5] = " WHERE ";
      stringArray0[6] = " WHERE ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " WHERE ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" WHERE \" PRIMARY KEY ( WHERE , ,  WHERE ,  WHERE , ,  WHERE ,  WHERE )", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.innerJoin("\u0001\u01B6", stringArray0, "\u0001\u01B6", "QY.i`", stringArray0);
      assertEquals("\u0001\u01B6 as QY.i` on \u0001\u01B6.null = QY.i`.null and \u0001\u01B6.null = QY.i`.null and \u0001\u01B6.null = QY.i`.null and \u0001\u01B6.null = QY.i`.null", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join("NCLOB", "NCLOB", stringArray0, stringArray0[0], stringArray0[0], stringArray0);
      assertEquals("NCLOB join null as null on NCLOB.null = null.null and NCLOB.null = null.null", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.3450363141108999
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[18];
      String string0 = SQLUtil.renderColumnListWithTableName("execremR1Frnice4sppath", stringArray0);
      String string1 = SQLUtil.leftJoin("execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null", stringArray0, "execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null, execremR1Frnice4sppath.null", "execremR1Frnice4sppath", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("DY<1&F-T*Su;ZQ)", (String[]) null, "*/", "*/", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("select * from", true, "select * from", "select * from");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"select * from\" CHECK select * from", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("DATE", "DATE", (String[]) null, "DATE", "DATE", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) "Changing access path for table ");
      genericDescriptorList0.stream();
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("C[THUW@#o|{IS5");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("insertvar");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
