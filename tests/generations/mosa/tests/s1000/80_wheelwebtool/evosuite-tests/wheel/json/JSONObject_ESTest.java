/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 13 17:51:14 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5684132580539654
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      jSONObject0.put("iZA4JJ*f{X", false);
      boolean boolean0 = jSONObject0.getBoolean("iZA4JJ*f{X");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6048163667496564
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString(hashMap0, 434, 434);
      Byte byte0 = new Byte((byte) (-114));
      jSONObject0.put("{}", (Object) byte0);
      int int0 = jSONObject0.optInt("{}");
      assertEquals((-114), int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3719198209004677
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 43, (-379));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2665105488429984
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("D7E1]j>N0W[pd@tMe", (Map) hashMap0);
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put((Object) null, boolean0);
      jSONObject1.put("H\"S1UtW|$)-7M,-v:>", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject1.toString((-22654468), (-22654468));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.2802165416449112
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Short short0 = new Short((short)92);
      short short1 = (short) (-1016);
      Short.compare((short)92, (short) (-1016));
      JSONObject jSONObject0 = new JSONObject(short0);
      String string0 = "gettoJSONObject";
      JSONObject jSONObject1 = jSONObject0.put("gettoJSONObject", true);
      JSONObject jSONObject2 = jSONObject1.put("] is not a JSONObject.", (double) (short) (-1016));
      jSONObject2.put("jo", (-290));
      JSONObject.numberToString(short0);
      try { 
        jSONObject0.get("java.lang.Short@000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Short@000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0894379124341005
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("u=1U!", false);
      boolean boolean0 = jSONObject0.optBoolean("u=1U!");
      assertFalse(boolean0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7632244150209984
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Double double0 = new Double((-2521.938807218439));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1552486438876346
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "\\u`g}~C5,<4}P0sp";
      JSONObject jSONObject1 = jSONObject0.put(string0, (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("5x", (Map) hashMap0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "5x";
      stringArray0[1] = "5x";
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = "] not found.";
      stringArray0[5] = string0;
      stringArray0[6] = "5x";
      stringArray0[7] = "5x";
      JSONObject jSONObject3 = jSONObject0.optJSONObject("5x");
      assertNotSame(jSONObject3, jSONObject2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.437515158291303
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject.quote("Ym+<7Rs;$u6`7~E");
      JSONObject jSONObject0 = new JSONObject((Object) "Ym+<7Rs;$u6`7~E");
      // Undeclared exception!
      jSONObject0.toString(477);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7108033429843899
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float((-4322.442F));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8396134707193643
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.optJSONArray("xFJ</vh");
      JSONObject jSONObject1 = jSONObject0.put("xFJ</vh", false);
      jSONObject0.optBoolean("[M5b,#>/2(Mv*B");
      jSONObject0.keys();
      jSONObject0.optBoolean("Missing value", true);
      jSONObject0.has((String) null);
      jSONObject1.has("xFJ</vh");
      int int0 = (-1268);
      jSONObject1.toString((-1268));
      JSONObject.valueToString(jSONObject0);
      try { 
        jSONObject1.getDouble("Missing value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Missing value\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2725021163642891
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("D7E1]j>N0W[pd@tMe", (Map) hashMap0);
      jSONObject1.put("Hc\"S1UtW|$)-7M,-v:>", (Map) hashMap0);
      String string0 = JSONObject.doubleToString((-22654468));
      assertEquals("-2.2654468E7", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.334268222635118
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Long long0 = new Long(1L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("", (Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.452888727960641
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("= (K5ks`+vWVM|", (Collection) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Boolean boolean0 = new Boolean("= (K5ks`+vWVM|");
      jSONObject1.optJSONArray("= (K5ks`+vWVM|");
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.296266451551098
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("5?)~JIR+", "5?)~JIR+");
      jSONObject1.names();
      JSONArray jSONArray1 = jSONObject0.optJSONArray("5?)~JIR+");
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.2438228280066395
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject.quote("G/i~N-[Sy36iera<");
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      Double double0 = new Double((-357.458759654548));
      Double double1 = new Double(1132.0);
      Double.sum(0.0, 1132.0);
      hashMap0.put(double0, double1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("= (K5ks`+vWVM|", (Collection) linkedList1);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.accumulate("= (K5ks`+vWVM|", object0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9844935290697798
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("true", jSONArray1);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.407494209446948
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("islongBitsToDouble", object0);
      jSONObject1.keys();
      boolean boolean0 = jSONObject0.isNull("islongBitsToDouble");
      assertTrue(boolean0);
      
      JSONObject jSONObject2 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject2);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.571831599661383
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      jSONObject0.put("clo", (-1464L));
      long long0 = jSONObject0.getLong("clo");
      assertEquals((-1464L), long0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.459204517434325
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" ", (Object) " ");
      Integer integer0 = new Integer(172);
      JSONObject jSONObject2 = jSONObject1.putOpt("mi", integer0);
      jSONObject1.put("<!~", (-2326L));
      double double0 = jSONObject2.getDouble("<!~");
      assertEquals(3, jSONObject2.length());
      assertEquals((-2326.0), double0, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Lvt# H*/tJy%YN", 0L);
      long long0 = jSONObject1.getLong("Lvt# H*/tJy%YN");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = new Boolean("");
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5281423472401277
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double double0 = new Double((-2849.2241702672736));
      JSONObject jSONObject0 = new JSONObject(double0);
      Float.sum(0.0F, (-1.0F));
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("BM>c}R;", object0);
      JSONObject jSONObject2 = jSONObject1.accumulate("getfloatToRawIntBits", jSONObject0);
      Boolean.valueOf("BM>c}R;");
      jSONObject1.putOpt((String) null, (Object) null);
      jSONObject2.names();
      StringWriter stringWriter0 = new StringWriter(43);
      // Undeclared exception!
      jSONObject0.write(stringWriter0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7242986702781118
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("_]_$Of(m;X8$]BJ3O3", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray((Collection) null);
      jSONArray1.put(12, (Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[12] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1590995812747136
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] not found.", 8192);
      try { 
        jSONObject0.getBoolean("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1071024035889305
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("wheel.json.JSONArray", "wheel.json.JSONArray");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.getBoolean("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.501721540327167
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "A JSONObject text must end with '}'");
      JSONObject.getNames((Object) "A JSONObject text must end with '}'");
      // Undeclared exception!
      jSONObject0.toString(4, 812);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("D7E1]j>N0W[pd@tMe", (Map) hashMap0);
      jSONObject1.getJSONObject("D7E1]j>N0W[pd@tMe");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject1 = jSONObject0.append("0", "0");
      try { 
        jSONObject1.getJSONObject("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 92, 93);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(linkedList0, 69, 9);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("2>", (Object) null);
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{6)UoTRLPG@G%SjK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 16 of {6)UoTRLPG@G%SjK
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.0290330539463177
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("faSv-Y", 2414L);
      assertEquals(2414L, long0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6457928323748754
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0115053753997263
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject.quote(",=\n");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject1 = jSONObject0.accumulate("<gS;-gNI2Piw", stringArray0[1]);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8408307160111372
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append((String) null, "0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.9042552998214495
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("A=^@(X7", "A=^@(X7");
      Boolean boolean0 = Boolean.FALSE;
      try { 
        jSONObject1.getDouble("A=^@(X7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A=^@(X7\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.4192084046284599
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "issplit");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("\"lfu^8y", "\"lfu^8y");
      try { 
        jSONObject1.getInt("\"lfu^8y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"lfu^8y\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3719198209004677
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.014503320310728
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = JSONObject.quote("0.00");
      JSONArray jSONArray0 = new JSONArray();
      String string1 = JSONObject.valueToString(jSONArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0366739742537465
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      Object object0 = new Object();
      try { 
        jSONObject1.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.2865071652616695
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      jSONObject0.accumulate(" ", float0);
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put(" ", (-2326L));
      int int0 = jSONObject1.getInt(" ");
      assertEquals((-2326), int0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.915065541657381
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject.doubleToString(15L);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("15", (double) 15L);
      JSONObject jSONObject2 = jSONObject1.putOpt("15", "15");
      jSONObject1.optDouble("15");
      jSONObject1.length();
      jSONObject1.putOpt("A JSONArray text must start with '['", "15");
      JSONObject jSONObject3 = jSONObject1.put("A`2", (Object) null);
      jSONObject3.names();
      jSONObject2.getInt("15");
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.515911247030394
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      JSONArray jSONArray1 = jSONArray0.put((Map) hashMap0);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      String string0 = JSONObject.valueToString(hashMap0, (-103), 92);
      assertEquals("{}", string0);
      
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-63));
      jSONObject0.put("h@sh", (Object) byte0);
      JSONObject.getNames((Object) null);
      double double0 = jSONObject0.optDouble("h@sh");
      assertEquals((-63.0), double0, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.455709851581837
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      jSONObject0.append("] not found.", stringWriter0);
      jSONObject0.getJSONArray("] not found.");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("OaT7/5?b;e+ ;u/|MDd", (Collection) null);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("OaT7/5?b;e+ ;u/|MDd");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.573728452186073
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
      
      long long0 = jSONObject0.optLong("bktN:W,mm{xlT>&i6");
      assertEquals(0L, long0);
      
      JSONObject jSONObject1 = jSONObject0.put("", (double) 0L);
      jSONObject1.remove("getisNaN");
      double double0 = jSONObject1.optDouble("TLqkLUnJ'h-2Gf@S|");
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = jSONObject0.optDouble("");
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("HZKnUx==`O/vI`e", 640);
      long long0 = jSONObject0.optLong("HZKnUx==`O/vI`e");
      assertEquals(640L, long0);
      
      JSONObject jSONObject1 = jSONObject0.put("i_B-#6_+j31Pc<&n66J", (double) 640L);
      jSONObject1.remove("1");
      jSONObject1.optDouble("iCdZ*");
      double double0 = jSONObject0.optDouble("NkXVH");
      assertEquals(Double.NaN, double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("g)08Pi/YY-");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject.doubleToString(15L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("15", (double) 15L);
      jSONObject0.optBoolean("15");
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("'xzaijkprBp7{yR_-", false);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("[]", true);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.3791235169376774
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put((Object) null, boolean0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("D7E1]j>N0W[pd@tMe", (Map) hashMap0);
      Boolean boolean1 = Boolean.valueOf("getintValue");
      JSONObject.getNames((Object) boolean1);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("D7E1]j>N0W[pd@tMe");
      assertNotSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.9982641952531328
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "isckmpOre";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Unterminated string";
      JSONObject jSONObject1 = new JSONObject((Object) "Unterminated string");
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      Double double0 = Double.valueOf((-979.82495));
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap1.compute(double0, biFunction0);
      jSONObject0.opt((String) null);
      try { 
        jSONObject1.getJSONArray("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("^6B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ^6B
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "{}");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.6830462864787377
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("?4(]E]2UAdl3t!)j?v", (-543));
      jSONObject0.optLong("?4(]E]2UAdl3t!)j?v");
      Long long0 = new Long((-543L));
      String string0 = "tr";
      JSONTokener jSONTokener0 = new JSONTokener("tr");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of tr
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.3419408569062177
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("is", "is");
      jSONObject0.accumulate("is", jSONObject1);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.get("is");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" ", (Object) " ");
      boolean boolean0 = jSONObject1.isNull(" ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6526859306582085
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "QDt\"%/>+K8&/[");
      jSONObject0.toString((-3366));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ispush", false);
      try { 
        jSONObject0.getJSONArray("ispush");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ispush\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = JSONObject.valueToString("", 4123, 4123);
      assertNotNull(string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 107, 107);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.6100777751436999
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.3216806347675405
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "h");
      int int0 = jSONObject0.optInt("h", (-2266));
      assertEquals((-2266), int0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString((Object) null, 41, (-450));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 41, 41);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.05569358184064
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null, (-6L));
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.700404681812747
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble(",\n", (-1.0));
      assertEquals((-1.0), double0, 0.01);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.8002768021331352
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{.<%.%oYe", 593L);
      jSONObject1.optInt("{.<%.%oYe");
      JSONObject.getNames((Object) jSONObject0);
      String string0 = jSONObject0.optString("dou");
      String string1 = jSONObject1.toString(593, 593);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.1867915479384763
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.261360821988305
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getformat", (-567));
      String string0 = jSONObject0.toString((-567), (-567));
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7152607734658951
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = ",7<.7Rb D5w!B+c";
      stringArray0[2] = "Ek>/ cIt";
      jSONObject0.optString("{}", (String) null);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put(",7<.7Rb D5w!B+c", false);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("v*g0A~mw-f]rf%U", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject0.put("wai", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5290824729675774
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[10];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.6761598809519898
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "QDt\"%/>+K8&/[");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("QDt\"%/>+K8&/[", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.put("QDt\"%/>+K8&/[", (Object) jSONObject1);
      int int0 = jSONObject0.optInt("QDt\"%/>+K8&/[");
      assertEquals(2, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerFirst("] is not a number.");
      JSONObject jSONObject1 = jSONObject0.put("bYaY ^HW&qo\"", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = jSONObject1.append("bYaY ^HW&qo\"", jSONArray0);
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      jSONObject2.names();
      JSONArray jSONArray1 = jSONObject2.names();
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject.valueToString(jSONObject0, (-211), (-211));
      jSONObject0.put("{}", 0L);
      try { 
        jSONObject0.append("{}", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{}] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(24, 44);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.7098678211741523
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("islistIterator", (Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      String string0 = jSONObject1.optString("islistIterator");
      assertNotNull(string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Byte byte0 = new Byte((byte)101);
      String string0 = JSONObject.valueToString(byte0, (-1833), (byte)101);
      assertNotNull(string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("] not found.", "] not found.");
      String string0 = jSONObject0.toString((-557));
      assertNotNull(string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.202883501961465
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString((-267), (-267));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.108335652604384
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("23*@", "23*@");
      assertEquals(1, jSONObject1.length());
      
      jSONObject1.remove("23*@");
      int int0 = jSONObject0.optInt("23*@", 123);
      assertEquals(123, int0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.652376137750783
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("sj.i6YB+]NKe", (Collection) null);
      jSONObject0.getString("sj.i6YB+]NKe");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.9853278202731631
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "G/i~N-[Sy36iera<");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("Iexk)5@ExzVX+<A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Iexk)5@ExzVX+<A\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("x1a3;sg", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("= (K5ks`+vWVM|", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.9984990462103465
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Object) "{\"");
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.quote("CFyR`Dvqu-?TM{u</");
      assertEquals("\"CFyR`Dvqu-?TM{u<\\/\"", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-656.678096182));
      assertEquals("-656.678096182", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject1 = new JSONObject();
      Float float0 = new Float((-7.977473652072171));
      Object object0 = jSONObject1.opt("Untermin2ted sstring");
      assertNull(object0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.2488215410938253
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerFirst("] is not a number.");
      JSONObject jSONObject1 = jSONObject0.put("bYaY ^HW&qo\"", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      Double double0 = new Double(0.0);
      Integer integer0 = new Integer((-5201));
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute((Double) null, biFunction0);
      jSONObject1.opt("bYaY ^HW&qo\"");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = JSONObject.valueToString("5x");
      assertNotNull(string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null, 0L);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("(@", 123);
      assertEquals(123, int0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.631793326219471
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("gP%Ul3Ft]v%HD? C", 0.0);
      double double0 = jSONObject1.getDouble("gP%Ul3Ft]v%HD? C");
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      String string0 = jSONObject0.optString("xK\"Pt");
      assertEquals("", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.8880096555129784
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("isoptJSONObject", 0);
      JSONObject.quote("\"\"");
      JSONObject jSONObject1 = jSONObject0.put(": ", (-2693));
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.352464060620752
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gettoHexString", 2588.054);
      double double0 = jSONObject0.getDouble("gettoHexString");
      assertEquals(2588.054, double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.619418366446825
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject.testValidity("] not found.");
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Integer integer0 = new Integer(49);
      String string0 = JSONObject.quote("");
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.optString("", "\"\"");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("+1[h}b__(9]D");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("yA`!tVE", true);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("Oi&bFhIgqQz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Oi&bFhIgqQz\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Float float0 = new Float(209.159F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.308721800833922
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject.quote("Op=@sh");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\"Op=@sh\"", 580.3618761094066);
      jSONObject0.optDouble("\"Op=@sh\"", 580.3618761094066);
      jSONObject0.remove("Op=@sh");
      jSONObject0.optDouble("i_B-#6_+j31Pc<&n66J");
      jSONObject0.keys();
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("Expected '", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble(")5(<$CD[B\"~(lWe", 1.0);
      assertEquals(1.0, double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.448437455613918
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Lvt# H*/tJy%YN", 3L);
      double double0 = jSONObject1.optDouble("Lvt# H*/tJy%YN");
      assertEquals(3.0, double0, 0.01);
      
      boolean boolean0 = jSONObject0.isNull("E@jH%^yy");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("Oh=@sh");
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = jSONObject0.isNull("Oh=@sh");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("istoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = JSONObject.quote("QDZ\"%/b+K8&/[");
      assertEquals("\"QDZ\\\"%/b+K8&/[\"", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      int int0 = jSONObject0.optInt("{}");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("val");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"val\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("de:bO_D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of de:bO_D
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = JSONObject.quote("HZKnUx==`O/vI`e");
      assertEquals("\"HZKnUx==`O/vI`e\"", string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(9);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = JSONObject.quote("Br2aqH0");
      assertEquals("\"Br2aqH0\"", string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-2161), (-2161));
      JSONObject jSONObject1 = jSONObject0.put("{}", (double) (-2161));
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.accumulate(".E", ".E");
      try { 
        jSONObject0.getLong(".E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".E\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Lvt# H*/tJy%YN", 3324L);
      assertEquals(1, jSONObject0.length());
      
      long long0 = jSONObject1.getLong("Lvt# H*/tJy%YN");
      assertEquals(3324L, long0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("RHjBxMJ~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"RHjBxMJ~\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Short short0 = new Short((short) (-508));
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Double double0 = Double.valueOf((-2164.770169316522));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }
}
