/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 07:49:11 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4583342329129585
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("x}J^(SiSm1", (-1206));
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      jSONObject0.getInt("x}J^(SiSm1");
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9515347138866894
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float float0 = 0.0F;
      Float float1 = new Float(0.0F);
      Float.sum(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float1);
      jSONObject0.optBoolean((String) null, true);
      JSONObject jSONObject1 = jSONObject0.put("_8Jta5spa#F", (double) 0.0F);
      String string0 = "get";
      jSONObject1.put("get", (double) 0.0F);
      Double double0 = new Double(0.0F);
      JSONObject.getNames((Object) double0);
      Float.min(0.0F, 426.29F);
      String string1 = "%mcI]\"i&,fgF9c";
      jSONObject0.optInt("%mcI]\"i&,fgF9c");
      jSONObject1.getInt("_8Jta5spa#F");
      String string2 = "?I/lvX~Q[0$QxK";
      JSONObject jSONObject2 = jSONObject0.put("?I/lvX~Q[0$QxK", 92);
      jSONObject2.optInt("2b:[X");
      JSONObject jSONObject3 = jSONObject0.put("%mcI]\"i&,fgF9c", 0);
      jSONObject3.getInt("?I/lvX~Q[0$QxK");
      JSONObject.quote("?I/lvX~Q[0$QxK");
      // Undeclared exception!
      jSONObject0.toString(2453);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.865654050220857
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Boolean boolean0 = new Boolean("rev");
      Boolean.logicalAnd(true, true);
      Boolean.compare(false, true);
      Boolean.compare(true, true);
      Boolean.logicalOr(false, true);
      JSONObject.valueToString(boolean0, 94, 91);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "java.lang.Boolean@0000000001";
      Boolean.compare(false, true);
      stringArray0[1] = "java.lang.Boolean@0000000001";
      stringArray0[2] = "zx/QJ?/";
      stringArray0[3] = "rev";
      stringArray0[4] = "java.lang.Boolean@0000000001";
      stringArray0[5] = "rev";
      stringArray0[6] = "java.lang.Boolean@0000000001";
      stringArray0[7] = "java.lang.Boolean@0000000001";
      JSONObject jSONObject0 = new JSONObject("java.lang.Boolean@0000000001", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Boolean@0000000001", (-1));
      jSONObject0.names();
      jSONObject0.optDouble("java.lang.Boolean@0000000001");
      jSONObject0.put("1T:dL@L", true);
      JSONObject jSONObject2 = jSONObject1.append("A#[}4V^jc", "java.lang.Boolean@0000000001");
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5024200991857675
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wa", 50);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      jSONObject0.length();
      double double0 = jSONObject0.optDouble("wa", 0.0);
      assertEquals(50.0, double0, 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{9=^?N^S<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 9 of {9=^?N^S<
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5458396293393544
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("j1`W]A5Mjnl8", (Collection) null);
      Byte.valueOf((byte)39);
      JSONObject.quote("j1`W]A5Mjnl8");
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      hashMap0.put((Boolean) null, "j1`W]A5Mjnl8");
      JSONObject jSONObject2 = jSONObject1.put("\"j1`W]A5Mjnl8\"", (Map) hashMap0);
      jSONObject2.optDouble("j1`W]A5Mjnl8");
      // Undeclared exception!
      try { 
        jSONObject0.toString((-2081), (int) (byte)39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.746375567178911
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Object) "{}");
      String string0 = jSONObject0.toString(781);
      JSONObject.quote(string0);
      // Undeclared exception!
      jSONObject0.getInt(string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3741276616834948
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(106, 0.0);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.optString("", "");
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6965304465868734
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Object) "{}");
      String string0 = jSONObject0.toString(809);
      String string1 = JSONObject.quote(string0);
      // Undeclared exception!
      jSONObject0.get(string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject.quote("");
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.960841804955975
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("~+HA>Um}=.7&_-,i/", "~+HA>Um}=.7&_-,i/");
      JSONArray jSONArray0 = (JSONArray)jSONObject1.opt("~+HA>Um}=.7&_-,i/");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0362648524423852
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject.quote(",zF^oCV`V-s/sbf");
      Float float0 = new Float((-526.5730820167));
      JSONObject.testValidity(float0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("eCw", "eCw");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("eCw");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("(>F/9Q", (Map) hashMap0);
      jSONObject1.getJSONObject("(>F/9Q");
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "j1`W]A5Mjnl8";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("j1`W]A5Mjnl8", (Collection) null);
      jSONObject1.optLong("a~#0v</MUX3A#eMD", (-1L));
      byte byte0 = (byte)39;
      Byte.valueOf((byte)39);
      try { 
        jSONObject1.getBoolean("j1`W]A5Mjnl8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j1`W]A5Mjnl8\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6066699893655365
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      Float float0 = Float.valueOf((-1350.0F));
      hashMap0.put(float0, float0);
      Float float1 = new Float(Double.NaN);
      hashMap0.put(float1, float1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.7494502426070615
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float((double) 92);
      JSONObject jSONObject1 = new JSONObject(float0);
      Long long0 = Long.valueOf((-3493L));
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4402082378786427
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Byte byte0 = new Byte((byte)81);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.optJSONArray("<&?5<2q{`WvC4 dc3^");
      jSONObject0.length();
      jSONObject0.optLong("<&?5<2q{`WvC4 dc3^");
      Double double0 = new Double(Double.NaN);
      Double.max((-549.29), (-617.53745595556));
      Double.sum(0L, 596.15245);
      try { 
        jSONObject0.putOpt("<&?5<2q{`WvC4 dc3^", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6379940485425775
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-333), (-3547));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2377162401479307
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>();
      JSONObject jSONObject1 = jSONObject0.put("3\"2]_qvYUXt", (Map) hashMap0);
      JSONObject.getNames((Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONArray0.write(stringWriter0);
      Writer writer1 = jSONObject1.write(writer0);
      assertSame(stringWriter0, writer1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.7583688602213312
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONArray", "wheel.json.JSONArray");
      Float float0 = new Float(0.0);
      JSONObject jSONObject2 = new JSONObject(float0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject3 = jSONObject0.append("wheel.json.JSONArray", boolean0);
      assertSame(jSONObject3, jSONObject1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) "\"\"");
      boolean boolean0 = new Boolean("\"\"");
      try { 
        jSONObject0.append("\"\"", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2789389564075417
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("wSzFH[_>/Qz");
      assertEquals(0, int0);
      
      String string0 = JSONObject.quote("wSzFH[_>/Qz");
      assertEquals("\"wSzFH[_>/Qz\"", string0);
      
      boolean boolean0 = jSONObject0.optBoolean("wSzFH[_>/Qz");
      assertFalse(boolean0);
      
      int int1 = jSONObject0.optInt("wSzFH[_>/Qz", 0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3192204551301083
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("[]", (Object) "[]");
      jSONObject1.put("{}", 0L);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.valueToString(jSONObject2);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      double double0 = jSONObject1.getDouble("{}");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3629097002319064
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("MK7.y].fiP", 1882.814780889);
      jSONObject0.getDouble("MK7.y].fiP");
      JSONObject.valueToString(jSONObject0, 1658, 1658);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7940714044097708
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("{}", (Object) jSONObject0);
      long long0 = jSONObject1.optLong("{}", 2498L);
      assertEquals(2498L, long0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "cEq\"";
      stringArray0[1] = "{}";
      stringArray0[2] = "{}";
      stringArray0[3] = "{}";
      stringArray0[4] = "{}";
      stringArray0[5] = "{}";
      stringArray0[6] = "{}";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = jSONObject2.optJSONObject("{}");
      assertNotNull(jSONObject3);
      
      Float float0 = new Float(0.0);
      JSONObject.numberToString(float0);
      String string1 = JSONObject.quote("@");
      assertEquals("\"@\"", string1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.456667926512571
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{9=>^?N^S<";
      stringArray0[1] = "{9=>^?N^S<";
      stringArray0[2] = "{9=>^?N^S<";
      stringArray0[3] = "{9=>^?N^S<";
      stringArray0[4] = "{9=>^?N^S<";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.putOpt("{9=>^?N^S<", jSONObject1);
      JSONObject jSONObject3 = jSONObject2.optJSONObject("{9=>^?N^S<");
      assertEquals(0, jSONObject3.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.688499099047628
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(44, (-0.7666349318611195));
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8565954897428565
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) "{}");
      jSONObject1.put("{}", (Collection) null);
      String string0 = jSONObject1.toString(769);
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      JSONTokener jSONTokener1 = new JSONTokener(string0);
      HashMap<Double, String> hashMap1 = new HashMap<Double, String>();
      jSONObject0.put("{}", (Map) hashMap1);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      JSONObject jSONObject3 = new JSONObject(string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9608515511891014
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("V ]a", jSONArray0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[0];
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", 0.0);
      int int0 = jSONObject1.getInt("] is not a JSONObject.");
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.913020215599639
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 2878, 2878);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.05683960125994
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("si", 83);
      String string0 = JSONObject.quote("si");
      assertEquals("\"si\"", string0);
      
      int int0 = jSONObject0.optInt("si");
      assertEquals(83, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.0552573179404616
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("j1`W]A5Mjnl8", (Collection) null);
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject1.getDouble("j1`W]A5Mjnl8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j1`W]A5Mjnl8\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5428866763466784
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("(>F/9Q", (Map) hashMap0);
      jSONObject1.remove("(>F/9Q");
      boolean boolean0 = jSONObject1.isNull("(>F/9Q");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{9>^?N^S<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {9>^?N^S<
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.0983268013229894
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.toString(769);
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      JSONObject jSONObject1 = new JSONObject(string0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{DY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {DY
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      jSONObject0.put("{}", (Object) jSONObject0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONObject0.has("{}");
      boolean boolean0 = jSONObject0.optBoolean("{}");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.6195259631210703
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.accumulate("h", (Object) null);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7099284913365564
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.sum(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optString((String) null, (String) null);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1031808349614796
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.valueToString(linkedList0, 769, 769);
      JSONTokener jSONTokener0 = new JSONTokener("[]");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("ite");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ite
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("ha");
      jSONObject0.putOpt((String) null, (Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}Ra");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }Ra
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.valueToString(linkedList0);
      JSONTokener jSONTokener0 = new JSONTokener("[]");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of []
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-108));
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.216421177568106
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = JSONObject.quote(";\"b)RH-83d3J+m$");
      assertEquals("\";\\\"b)RH-83d3J+m$\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) ";\"b)RH-83d3J+m$");
      jSONObject0.toString(4, 4);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      String string0 = JSONObject.valueToString((Object) null, 111, 111);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.977183323425756
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNull(jSONArray0);
      
      String string0 = JSONObject.valueToString(hashMap0, (-30803738), 355);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.298455813519264
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(hashMap0, 3558, 3558);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(".8F+%!<_HUV1a8x=c9", ".8F+%!<_HUV1a8x=c9");
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.getJSONObject(".8F+%!<_HUV1a8x=c9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".8F+%!<_HUV1a8x=c9\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("j1`W]A5Mjnl8", (Collection) null);
      JSONObject.getNames((Object) "j1`W]A5Mjnl8");
      jSONObject1.accumulate("j1`W]A5Mjnl8", "j1`W]A5Mjnl8");
      Byte.valueOf((byte) (-24));
      JSONObject.valueToString("j1`W]A5Mjnl8");
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.0894379124341005
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Y)y%bKxM{6", "Y)y%bKxM{6");
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getString("Y)y%bKxM{6");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("tS");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1.0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put((Byte) null, jSONArray0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(hashMap0);
      hashMap0.clone();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.3128868859883
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(";eh\"YmZ&J", 191);
      String string0 = jSONObject0.optString(";eh\"YmZ&J", "}=FR]RVO0rwLpj&2$");
      assertNotNull(string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.7526708545233256
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject((Object) "flo");
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.put("flo", (Object) boolean0);
      boolean boolean1 = jSONObject0.getBoolean("flo");
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("Sl2,(bWR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Sl2,(bWR\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.742310129731777
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("]E@UjpLND?A->n;+");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put("]E@UjpLND?A->n;+", true);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = jSONObject0.getBoolean("]E@UjpLND?A->n;+");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null, 12L);
      jSONObject0.optBoolean((String) null);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.5764082587002846
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      jSONObject0.put("{}", (Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONArray0);
      String string1 = jSONObject0.optString("{}");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wSzFH[_>/Qz", true);
      String string0 = JSONObject.quote("wSzFH[_>/Qz");
      assertEquals("\"wSzFH[_>/Qz\"", string0);
      
      boolean boolean0 = jSONObject0.optBoolean("wSzFH[_>/Qz");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.3437537046719372
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "flo";
      Float float0 = new Float((-2267.344113376863));
      JSONObject jSONObject1 = jSONObject0.put("flo", (Object) float0);
      jSONObject1.getLong("flo");
      try { 
        jSONObject0.getBoolean("flo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"flo\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 987, 106);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("{}");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("toO", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{9=>^?N^S<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 10 of {9=>^?N^S<
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.567599783628397
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject.valueToString("istoString");
      JSONObject jSONObject0 = new JSONObject((Object) "\"java.lang.String@0000000001\"");
      // Undeclared exception!
      jSONObject0.toString(781);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1031808349614796
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.put("XBw/5uRB)G8\"o#j|", (Object) jSONArray0);
      JSONArray jSONArray1 = jSONObject0.getJSONArray("XBw/5uRB)G8\"o#j|");
      assertSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.2761809225159486
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("qu", "qu");
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.get("qu");
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.accumulate("", "");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("nsho2/Gh'{)`o Iy", 0L);
      jSONObject0.accumulate("nsho2/Gh'{)`o Iy", jSONObject1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("Ko<>r]N-ZT*fU %pMpw", 1561);
      assertEquals(1561, int0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("false", (-557));
      assertEquals((-557), int0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1851.36119190661);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.4205472719467087
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = JSONObject.doubleToString(528.016671);
      assertEquals("528.016671", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "528.016671");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      try { 
        jSONObject0.get("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "D";
      JSONObject jSONObject1 = jSONObject0.put("D", (Map) null);
      try { 
        jSONObject1.getInt("D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"D\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("true", (Map) hashMap0);
      jSONObject0.isNull("true");
      try { 
        jSONObject0.getLong("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = JSONObject.quote("M,\n");
      assertEquals("\"M,\\n\"", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.8767895290278123
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject((Object) "");
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.214734015212756
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("getoptInt", "getoptInt");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0499567067015643
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject(stringWriter0);
      jSONObject1.write(stringWriter0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("(S]24VS+goID*", false);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-2250L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("!_uqJ9`|7L;@", (-1260));
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject1.getJSONArray("!_uqJ9`|7L;@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!_uqJ9`|7L;@\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("d;H7(jW7c GHaaiB7", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      Object object0 = jSONObject0.opt("{}");
      assertNull(object0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("8s", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null, (-1L));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("iscompare", "iscompare");
      assertEquals("iscompare", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("3Ure2[shR&?l");
      assertEquals("", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("^+\"8>On-,5*");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.6047867698526947
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.1031808349614796
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("'|`m9Y;xw^_!V", (Object) jSONArray0);
      try { 
        jSONObject1.getBoolean("'|`m9Y;xw^_!V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'|`m9Y;xw^_!V\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0276242004980904
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.2603967218250913
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("flo", (Object) "flo");
      try { 
        jSONObject0.getBoolean("flo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"flo\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("sp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sp\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      int int0 = jSONObject0.optInt("n!C[!O/iN");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("84t)7<t{xl27 ?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"84t)7<t{xl27 ?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.5174714039166524
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = new Integer(735);
      String string0 = JSONObject.valueToString(integer0, 735, (-1024));
      assertNotNull(string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.2079297593205902
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject.doubleToString(528.016671);
      JSONObject jSONObject0 = new JSONObject((Object) "528.016671");
      // Undeclared exception!
      jSONObject0.toString(1167, 1167);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Double double0 = Double.valueOf(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 60, 78);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Double double0 = Double.valueOf(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("k:[\"E|U>_>", (Collection) linkedList0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.061093750171824
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.toString(9);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.404707054226512
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = JSONObject.quote("wSzFH[_>/Qz");
      assertEquals("\"wSzFH[_>/Qz\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"wSzFH[_>/Qz\"");
      jSONObject0.toString((-619));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.valueToString("] is not a JSONArray.", 62, 86);
      assertNotNull(string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 10, 10);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.1983857508370273
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString(93, 93);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.215270512339771
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "wSbzxH_>/Qz");
      jSONObject0.toString((-2052), (-2052));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = JSONObject.quote("\"1lkIu-_uqav2*#\"");
      assertEquals("\"\\\"1lkIu-_uqav2*#\\\"\"", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(72, 72);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-2103));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("d;H7(jW7c GHaaiB7", 498.21555274814);
      assertEquals(498.21555274814, double0, 0.01);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, (-1932.56250060057));
      assertEquals((-1932.56250060057), double0, 0.01);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("get", true);
      assertTrue(boolean0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("pawZm[)=J{@t*Nm", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.48717948717948717
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      jSONObject0.has("{}");
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"has\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("\"\"");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject.testValidity(";v?|dDZfK");
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("wSzFH[_>/Qz");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wSzFH[_>/Qz
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("ma");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ma
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = JSONObject.quote("T3/'{=d~d");
      assertEquals("\"T3/'{=d~d\"", string0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = JSONObject.quote("\r");
      assertEquals("\"\\r\"", string0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("flo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"flo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.202883501961465
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "UNLwb9{UB");
      long long0 = jSONObject0.optLong("UNLwb9{UB");
      assertEquals(3, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("] is not a Boolean.", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
