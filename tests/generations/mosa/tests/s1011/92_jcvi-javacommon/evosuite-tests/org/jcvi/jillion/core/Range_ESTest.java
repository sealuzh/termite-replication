/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 08:01:33 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0608843168111313
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range range1 = Range.of((-128L), 0L);
      Range range2 = Range.of((-128L));
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range2));
      //  // Unstable assertion: assertNotSame(range1, range2);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.6760295388499706
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2077L, 2077L);
      String string0 = range0.toString();
      assertEquals("[ 2077 .. 2077 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      range_Builder0.contractBegin(1636L);
      Range range1 = range_Builder0.build();
      Range range2 = Range.of(2077L, 4294967295L);
      boolean boolean0 = range1.equals(range2);
      Range range3 = range_Builder0.build();
      range3.spliterator();
      Range.of(9223372036854775553L);
      boolean boolean1 = range2.equals("[ 2077 .. 2077 ]/0B");
      assertTrue(boolean1 == boolean0);
      
      String string1 = range1.toString();
      assertEquals("[ 1636 .. 4294967294 ]/0B", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4424469472939303
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2077L, 2077L);
      String string0 = range0.toString();
      assertEquals("[ 2077 .. 2077 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      range_Builder0.contractBegin(2077L);
      Range range1 = range_Builder0.build();
      Range range2 = range1.intersection(range0);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(2077L, 4294967295L);
      boolean boolean0 = range1.equals(range3);
      assertFalse(range3.equals((Object)range1));
      assertFalse(boolean0);
      
      Range range4 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      String string1 = range4.toString(range_CoordinateSystem1);
      assertEquals("[ 2077 .. 4294967295 ]/SB", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5549300698297728
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(284L);
      range0.toString();
      Range.parseRange("[ 284 .. 284 ]/0B");
      // Undeclared exception!
      try { 
        Range.parseRange("[ 284 .. 284 ]/0B", (Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9782399831213344
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372034707292160L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372034707292161L, long0);
      
      range0.equals((Object) null);
      String string0 = range0.toString();
      assertEquals("[ 2147483647 .. 9223372034707292160 ]/0B", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.976432073516815
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      range0.split(9223372036854775436L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-127L), long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.318747962388838
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967326L, 4294967326L);
      Range range1 = Range.of(4294967326L, 4294967326L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(65535L, 9223372036854774136L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.6338548716668546
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(65546L, 9223372036854774136L);
      Range range1 = range0.asRange();
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Range.of(9223372036854774136L);
      Range range2 = Range.of(65546L, 9223372032559808513L);
      Object object0 = new Object();
      range0.equals(range2);
      long long0 = range1.getLength();
      //  // Unstable assertion: assertEquals(9223372036854708591L, long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.323100447758692
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(65549L, 9223372036854775525L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3274662176194347
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(65539L, 9223372036854775436L);
      Range range1 = Range.of(9223372036854775436L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.4071484120089406
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1642L, 32767L);
      Range range1 = Range.of(32767L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4097L, 9223372036854775807L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3866123593999244
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(4294966944L, 9223372036854774136L);
      Range.of((-1432L));
      Range range1 = Range.of((-1432L), 9223372036854774136L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      boolean boolean1 = range1.equals((Object) null);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.4410376186222225
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 1823L);
      Range range0 = Range.of(9223372032559808492L);
      Range range1 = Range.of((-1L), 65535L);
      range1.equals((Object) null);
      String string0 = range0.toString();
      assertEquals("[ 9223372032559808492 .. 9223372032559808492 ]/0B", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8921481463615892
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967326L, 4294967326L);
      Range range1 = Range.of(range_CoordinateSystem0, 4294967326L, 4294967326L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.541760006784195
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-9223372034707292305L), (-65518L));
      Range range1 = Range.of(373L);
      range0.equals(range0);
      range0.intersection(range1);
      Range range2 = Range.of((-9223372034707292305L), (-3506L));
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(65535L, 9223372036854775418L);
      Range range1 = Range.of(9223372036854775418L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1342954248533537
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775436L);
      range0.toString();
      Range range1 = Range.parseRange("[ 0 .. 9223372036854775435 ]/0B");
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2668415958029997
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(9223372036854775436L, 9223372036854775436L);
      long long0 = range0.getBegin();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range range1 = Range.ofLength(9223372036854775436L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      
      long long1 = range1.getLength();
      assertTrue(long1 == long0);
      assertEquals(9223372036854775436L, long1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.329337375063968
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.of(65535L, 9223372036854774136L);
      Range range0 = Range.of(9223372036854775436L);
      Range range1 = Range.of(9223372034707292160L, 9223372036854774136L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967326L, 4294967326L);
      Range range1 = Range.of(4294967326L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.8037819367551107
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.ofLength(1L);
      Range range0 = Range.of(1L, 1L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-105L), 127L);
      Object object0 = new Object();
      Long long0 = new Long((-105L));
      boolean boolean0 = range1.equals(long0);
      assertFalse(boolean0);
      
      Range range2 = Range.of(1L);
      Range range3 = range2.asRange();
      assertFalse(range3.isEmpty());
      assertSame(range3, range0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = 9223372036854775436L;
      Range range0 = Range.of(65535L, 9223372036854775436L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.440563010174192
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3668L, 4294934529L);
      Range range2 = Range.of(4294967295L);
      assertFalse(range2.isEmpty());
      
      range1.equals(range0);
      assertSame(range0, range2);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range3 = range1.asRange();
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(284L, 4294967295L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.8103048723364834
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Range.ofLength(2147483647L);
      Range.of((-3979L));
      Range.ofLength(2147483647L);
      Range range0 = Range.of((-1571L), (-1L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.contractEnd(0L);
      Long long0 = new Long(0L);
      Range range1 = range0.asRange();
      Object object0 = new Object();
      range0.equals(range1);
      assertTrue(range1.isEmpty());
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=4.083507409483803
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.split(2147483647L);
      Range range1 = Range.of(2147483647L);
      range0.split(2147483647L);
      range1.complement(range1);
      Range range2 = Range.of(2147483647L);
      range2.getBegin();
      long long0 = 1367L;
      Range range3 = Range.ofLength(2147483647L);
      range1.equals(range1);
      List<Range> list0 = range3.split(445L);
      long long1 = 32767L;
      Range.of(long0, long1);
      range1.complementFrom(list0);
      range2.toString();
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(65553L, 65553L);
      Range.ofLength(65553L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.5616180755208364
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1534L), (-1534L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 4294967295L, 4294967295L);
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
      
      Range range2 = range0.asRange();
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(9223372032559808513L, 9223372032559808513L);
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(4294967326L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of((-1432L), 32767L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.846572333719421
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(127L, 284L);
      Range range1 = range0.asRange();
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      assertEquals(0, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(284L, long0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6884526475116584
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775436L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 9223372036854775435 ]/0B", string0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.340986344011985
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = 9223372036854775552L;
      Range.of(9223372036854775552L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775552L, (-1690L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1690 would make range [9223372036854775552 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = 1161L;
      Range.of(1161L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 1161L, (-9223372036854775808L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=4.082466306877164
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.getLength();
      range0.split(2147483647L);
      Range range1 = Range.of(2147483647L);
      range1.complement(range0);
      range1.complement(range1);
      Range range2 = Range.of((-32768L), (-32768L));
      range2.getBegin();
      range2.toString();
      Range range3 = Range.of((-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder(range3);
      range_Builder0.shift((-32768L));
      Range range4 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range4.complement(range3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854743040 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.130860608303783
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(9223372036854775436L, 9223372036854775436L);
      range0.getBegin();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1342954248533537
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775436L);
      range0.toString();
      Range range1 = Range.parseRange("[ 0 .. 9223372036854775435 ]/0B");
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=4.137021187974974
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.split(2147483647L);
      Range range1 = Range.of(2147483647L);
      range1.complement(range0);
      range1.complement(range1);
      Range range2 = Range.ofLength(2147483647L);
      range2.getBegin();
      long long0 = (-2784L);
      Range range3 = Range.of((-2784L), 1367L);
      range2.equals((Object) null);
      long long1 = 445L;
      range3.split(445L);
      Range.of(1367L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = "ZERO_BASED";
      // Undeclared exception!
      try { 
        Range.parseRange("ZERO_BASED", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ZERO_BASED into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      Object object0 = new Object();
      range0.equals(range1);
      range1.asRange();
      long long0 = new Long(4294967295L);
      assertEquals(4294967295L, long0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.386434750022149
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Long long0 = new Long(0L);
      range1.asRange();
      Object object0 = new Object();
      range0.equals(object0);
      Range range2 = Range.of((-9223372036854775793L));
      range2.equals(range1);
      // Undeclared exception!
      try { 
        Range.of((-2147483648L), (-9223372036854775793L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1313650219229507
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(4294967312L, 9223372036854775807L);
      range0.getBegin();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.getBegin();
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=4.136571960943424
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.split(2147483647L);
      Range range1 = Range.of(2147483647L);
      range1.complement(range0);
      range1.complement(range1);
      Range range2 = Range.of(2147483647L);
      range2.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-32768L), (-1471L));
      range1.equals(range2);
      Range.of(1491L);
      Range range3 = Range.of(9223372036854774513L);
      // Undeclared exception!
      try { 
        range3.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854774513 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9794121442934958
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(4294967280L, 4294967280L);
      Range range1 = Range.of(4294967280L, 4294967280L);
      boolean boolean0 = range0.equals(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.541166733025435
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      range_Builder0.build();
      range0.getLength();
      Range range1 = range0.asRange();
      range1.equals(range0);
      Range.of(range_CoordinateSystem0, 0L, 1771L);
      range_Builder0.expandBegin(0L);
      // Undeclared exception!
      try { 
        Range.parseRange("'TTJ%nweY;", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 'TTJ%nweY; into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertEquals("[ 65535 .. 65534 ]/0B", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.428748492421972
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.386182706029501
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-4798L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.3268842301321655
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(905L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 905L, 905L);
      range1.equals(range_CoordinateSystem1);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Range range2 = range0.asRange();
      //  // Unstable assertion: assertNotSame(range2, range1);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = (-121L);
      Range range0 = Range.of((-121L));
      range0.equals(range0);
      // Undeclared exception!
      try { 
        range0.split((-121L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.2671143019073328
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(4294967287L, 4294967287L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.9794121442934958
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(65549L, 4294967295L);
      Range.of(65549L, 4294967295L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.2039179696972515
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L, 1L);
      Range range2 = Range.of(1L);
      boolean boolean0 = range1.equals(range2);
      assertFalse(range2.isEmpty());
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
      assertTrue(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of((-2147483661L), (-2147483661L));
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.3862395264912064
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range range1 = Range.ofLength(9223372036854775807L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(255L);
      boolean boolean0 = range0.equals(range2);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.9794121442934958
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(362L, 362L);
      Range range1 = Range.of(362L, 362L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.543203176509701
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1432L), 1642L);
      Range range1 = Range.ofLength(777L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(905L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.4936746603852664
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L, 1L);
      range1.isEmpty();
      range1.complement(range0);
      range0.split(1L);
      Range.of(255L, 255L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.554665162479187
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.ofLength(522L);
      range0.asRange();
      long long0 = (-9223372036854775793L);
      Object object0 = new Object();
      Range range1 = Range.of(1L);
      range0.equals(range1);
      Range.of((-1L));
      range1.equals(range0);
      long long1 = 1479L;
      // Undeclared exception!
      try { 
        Range.of(1479L, 522L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.3203691289568624
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(255L, 65549L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.441975924979248
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of((-118L));
      Range range1 = Range.of(130L);
      range1.complement(range0);
      Range range2 = Range.of(255L);
      Range range3 = Range.ofLength(2577L);
      boolean boolean0 = range3.equals(range2);
      assertNotSame(range2, range1);
      assertFalse(range3.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 421L, 421L);
      Range range1 = Range.of(608L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.9794121442934958
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(1872L, 1872L);
      Range range1 = Range.of(1644L, 1872L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.376681685151737
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      boolean boolean0 = range1.startsBefore(range0);
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 142L, 142L);
      Long.getLong("");
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.3385967288168596
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      long long0 = range0.getEnd();
      assertEquals((-128L), long0);
      
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.339982756955665
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(362L, 65535L);
      Range range1 = Range.of(362L, 65535L);
      Object object0 = new Object();
      boolean boolean0 = range1.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(953L, 9223372036854774801L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1432L), 1642L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.536923085468587
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-32768L), 0L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.202793348122149
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.1133442736467214
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.8896985514868954
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.of((-32771L), (-32771L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854775786L, (-32771L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32771 would make range [9223372036854775786 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("Zero Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Zero Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.62466089020451
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      Range range1 = Range.of((-32768L));
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.086870484872592
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of((-128L), 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.0873999066334123
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.ofLength(65549L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 65548 ]/0B", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.7557041935238757
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range.ofLength(3668L);
      Range.of(3668L);
      Range range1 = Range.ofLength(3668L);
      range1.complement(range0);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$RangeIterator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$RangeIterator into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.588695035517939
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(284L, 65587L);
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-32758L), (-32758L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.409219584492206
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of((-32758L), (-32758L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-32758L), long0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.2696985488293766
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775436L);
      range0.toString();
      Range.parseRange("[ 0 .. 9223372036854775435 ]/0B");
      // Undeclared exception!
      try { 
        range0.split(9223372036854775436L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -745 would make range [9223372036854775436 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      List<Range> list0 = range0.split(4294967295L);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.2671143019073328
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(4294967311L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.5439213735797686
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775436L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 9223372036854775435 ]/0B", string0);
      
      Range.parseRange("[ 0 .. 9223372036854775435 ]/0B");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.parseRange("[ 0 .. 9223372036854775435 ]/0B", range_CoordinateSystem0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.343884805251668
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(284L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.2331278603600313
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.32914830340581
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of((-131L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of((-128L));
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.491732273553991
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of((-248L), (-248L));
      Range range1 = Range.of((-95L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-32767L), long0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.680640902439383
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-627L), 377L);
      Range range2 = Range.of((-1203L), (-1L));
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.675541267533876
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range.ofLength(3668L);
      Range range1 = Range.of(3668L);
      Range.ofLength(3668L);
      range1.split(3668L);
      range0.getBegin();
      Range.of((-223L), (-1L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      range0.equals(range_CoordinateSystem1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.540872802686925
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(415L);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(415L);
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.05979471828628
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.4809416029180418
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-893L), 4294967295L);
      List<Range> list0 = range0.split(4294967295L);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-248L), (-248L));
      Range range1 = range0.asRange();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.2573961657836517
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 953L, 953L);
      range_Builder0.expandBegin(4294967295L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-15L), (-15L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 4294967295L;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long long0 = 9223372036854775436L;
      Range range0 = Range.ofLength(9223372036854775436L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854775436L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -745 would make range [9223372036854775436 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.1163608648986068
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of((-128L));
      String string0 = range0.toString();
      assertEquals("[ -128 .. -128 ]/0B", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.3841086524940116
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.of(4294967295L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.0577029806499434
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd((-3505L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854772304 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.contractBegin(111L);
      range_Builder0.expandBegin((-3134L));
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.4172741247635345
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      range0.equals(range1);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
      
      Range range2 = range0.asRange();
      //  // Unstable assertion: assertNotSame(range2, range1);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(3593L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.ofLength(4294967325L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.457663386901383
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-32768L));
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.408385208188493
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-32768L), (-32768L));
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.353627401079457
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.5087533227103065
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals((-32768L), long0);
      
      Range range1 = Range.of((-32768L), (-32768L));
      assertSame(range1, range0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.331048841891714
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(9223372036854775436L, 9223372036854775436L);
      String string0 = range0.toString();
      assertEquals("[ 9223372036854775436 .. 9223372036854775436 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 9223372036854775436 .. 9223372036854775436 ]/0B");
      List<Range> list0 = range0.complement(range1);
      assertSame(range1, range0);
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.984650895312298
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.ofLength(476L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.130285399790697
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(620L, 620L);
      assertFalse(range0.isEmpty());
      
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.590144787290092
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(65546L, 9223372036854774136L);
      Range range1 = range0.asRange();
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertFalse(list1.contains(range0));
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.5889504031491093
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      assertFalse(range0.equals((Object)range1));
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.4939272194023663
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range range1 = Range.of((-32768L), 4294967325L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
      
      Range range2 = Range.of((-769L));
      range0.equals(range2);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-248L), (-248L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of((-128L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      // Undeclared exception!
      try { 
        range0.split((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.868172051271905
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range1 = Range.ofLength(65535L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 2147483648L);
      range1.startsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range1.getBegin(range_CoordinateSystem1);
      assertEquals(1L, long1);
      
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder3.build();
      Range.Comparators.values();
      range0.intersection(range2);
      assertFalse(range2.isEmpty());
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.1180059052114126
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.ofLength(1872L);
      Range.Builder range_Builder0 = new Range.Builder(1872L);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(905L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.180683087165041
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.153339075995948
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(9223372036854775433L, 9223372036854775433L);
      long long0 = range0.getBegin();
      assertEquals(9223372036854775433L, long0);
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(9223372034707292160L, 9223372034707292160L);
      boolean boolean0 = range1.endsBefore(range0);
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.ofLength(1872L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.689532269643912
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775436L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 9223372036854775435 ]/0B", string0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.ofLength(1053L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.0567526361500623
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      List<Range> list0 = range0.split(32767L);
      // Undeclared exception!
      try { 
        range0.complementFrom(list0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.8664013756036453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(1672L);
      Range range1 = Range.of(255L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = range0.intersection(range1);
      range2.iterator();
      range1.spliterator();
      range0.complementFrom(list0);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
      assertFalse(list1.equals((Object)list0));
      
      range2.complement(range1);
      boolean boolean0 = range0.intersects(range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.8928447677478655
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of(75510L);
      Range range1 = Range.of(75510L);
      boolean boolean0 = range0.intersects(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.8940784789052407
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.7964122534878726
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of(321L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1223L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 930L, 4294967295L);
      range_Builder0.expandEnd((-42L));
      range_Builder0.expandBegin(9223372036851355440L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.697258623442196
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-357L), 0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem2);
      Range.of(0L, (-1L));
      range0.startsBefore(range0);
      range1.isSubRangeOf(range1);
      Range range2 = Range.ofLength(0L);
      range_CoordinateSystem0.getAbbreviatedName();
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 0L, 0L);
      range_Builder0.expandBegin((-1L));
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder0.build();
      range2.isEmpty();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.3755268803270857
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(136L);
      Range range0 = Range.of(136L, 136L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.2684214914498164
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of(9223372036854774136L, 9223372036854774136L);
      range0.getEnd();
      Object object0 = new Object();
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.463665787861767
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(0L);
      range1.getEnd();
      range1.endsBefore(range1);
      range0.startsBefore(range0);
      range0.toString();
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.5591151969151396
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals(4294967295L, long0);
      
      long long1 = range0.getLength();
      //  // Unstable assertion: assertEquals(1L, long1);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.2081819478882947
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854774136L, 9223372036854774136L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.0873999066334123
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 9223372036854775807 ]/RB", string0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.5887383058928766
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775436L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 0 .. 9223372036854775435 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 0 .. 9223372036854775435 ]/0B");
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.2041131932281943
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(1L, 1L);
      boolean boolean0 = range0.equals(range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.3979716615291404
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range range0 = Range.of((-3352L), 0L);
      Range range1 = Range.of((-3352L));
      Range range2 = Range.of(65546L);
      boolean boolean0 = range1.startsBefore(range2);
      assertFalse(range2.isEmpty());
      assertTrue(boolean0);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range range0 = Range.ofLength(3668L);
      Range range1 = Range.ofLength(3668L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.687420655767592
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range range0 = Range.of((-2318L));
      range0.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        range0.split((-2318L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(4294967296L, long0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range range0 = Range.of(1L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3667L, 3667L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 166
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range range0 = Range.of((-136L), (-136L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
