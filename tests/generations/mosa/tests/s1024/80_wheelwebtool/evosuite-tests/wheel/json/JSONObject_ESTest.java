/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 07 17:10:06 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = JSONObject.quote(">AI5/?ob!5S+");
      assertEquals("\">AI5/?ob!5S+\"", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{4wB<P4w/W72i2s");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {4wB<P4w/W72i2s
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{al8e");
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {al8e
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("O~H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of O~H
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject.testValidity("Expected a ',' or ']'");
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.8305236914828464
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(Double.NaN);
      linkedList0.add(float0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("*pf(i48YR", 15);
      Object object0 = jSONObject1.remove("*pf(i48YR");
      assertEquals(15, object0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("?C[Uew.:K", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = jSONObject0.optString("getvalueOf", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("%j.,k:bza#mx|7x\":", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("isforEach", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, (-1989L));
      assertEquals((-1989L), long0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONBbect", 1691L);
      long long0 = jSONObject1.optLong("wheel.json.JSONBbect");
      assertEquals(1691L, long0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("<|/f&!yl(yAopn$r7", (-701));
      long long0 = jSONObject0.optLong("<|/f&!yl(yAopn$r7");
      assertEquals((-701L), long0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("", 1869);
      assertEquals(1869, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6978169099032328
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("", 1505);
      int int0 = jSONObject0.optInt("");
      assertEquals(4, jSONObject0.length());
      assertEquals(1505, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7511755822413677
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Double double0 = new Double((-47.79221803947706));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.accumulate("islongBitsToDouble", double0);
      int int0 = jSONObject1.optInt("islongBitsToDouble");
      assertEquals(4, jSONObject0.length());
      assertEquals((-47), int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("WD|;sUom;(Q2 (z", 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(25);
      JSONObject jSONObject1 = jSONObject0.put("Null key.", (Object) integer0);
      double double0 = jSONObject1.optDouble("Null key.");
      assertEquals(25.0, double0, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSON does not allow non-finite numbers.", (-711));
      double double0 = jSONObject1.optDouble("JSON does not allow non-finite numbers.");
      assertEquals((-711.0), double0, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("] is not a number.", "] is not a number.");
      JSONArray jSONArray0 = (JSONArray)jSONObject0.opt("] is not a number.");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("null", (-50462705));
      boolean boolean0 = jSONObject1.has("null");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5088198909642434
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Double double0 = new Double(1904.468282);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("&'5", 1904.468282);
      jSONObject1.getString("&'5");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{&E", 0.0);
      long long0 = jSONObject1.getLong("{&E");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".", 1L);
      long long0 = jSONObject1.getLong(".");
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9251211907908183
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("E:(uL_G,#ZT@*LGZut", (-1157));
      jSONObject0.accumulate("E:(uL_G,#ZT@*LGZut", (Object) null);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("E:(uL_G,#ZT@*LGZut");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.540305825226517
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) float0);
      int int0 = jSONObject1.getInt("");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("i{?2@}`KQZm", (-629));
      int int0 = jSONObject1.getInt("i{?2@}`KQZm");
      assertEquals((-629), int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("put", 0.0);
      double double0 = jSONObject0.getDouble("put");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("^swsI", 15);
      double double0 = jSONObject1.getDouble("^swsI");
      assertEquals(15.0, double0, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9433483923290391
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 128, 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      jSONArray1.put((Map) null);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray1, 2147483645, (-649));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8308939447177783
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Float float0 = new Float((-2790.17));
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(4240);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-14530064));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7260509192674385
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(43, 43);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-691), (-691));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Long long0 = new Long((-622L));
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("=_\"._nd", "!");
      assertEquals("!", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.455500877075017
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.accumulate("", float0);
      jSONObject0.optString("", "");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("*-'", (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("qZ{zqIHh");
      assertNull(object0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.opt((String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5311386121723252
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Nnull", "Nnull");
      try { 
        jSONObject1.getLong("Nnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Nnull\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.4118191793225021
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("\"=9>IjS9x\"PfMc", (Collection) linkedList0);
      try { 
        jSONObject1.getInt("\"=9>IjS9x\"PfMc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"=9>IjS9x\\\"PfMc\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Unclosed comment", 1044);
      int int0 = jSONObject1.getInt("Unclosed comment");
      assertEquals(1044, int0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.3068894077018045
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("\"a1", (Collection) linkedList0);
      try { 
        jSONObject0.getDouble("\"a1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"a1\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("] is not a number.", "] is not a number.");
      Object object0 = jSONObject0.get("] is not a number.");
      assertEquals("] is not a number.", object0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("<(tK]mi, BOD.V/i>c%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<(tK]mi, BOD.V/i>c%\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("int");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of int
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("B/7SSdpTUCv0", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("java.lang.Float@0000000001.");
      assertNull(object0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.7960971655608418
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("=Q^b$2i4hRj}d_b}~", (Collection) null);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String string0 = JSONObject.valueToString(linkedList0, 3383, 3383);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 117, (-64089270));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 102, 188);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 128, 128);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.8228804629889481
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "wheel.json.JSONObject@0000000001");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.7911994487881284
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(52, 3302);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.8883105696787474
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Ii>$gs0 !.DV9h");
      jSONObject0.toString((-1198), 2);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.6904546939944762
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Float float0 = new Float(2930.743759483681);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.167723997949895
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = JSONObject.quote("r1':</%`*");
      assertEquals("\"r1':<\\/%`*\"", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = JSONObject.quote("z-fhEY\"P/s}k_NKKb2]");
      assertEquals("\"z-fhEY\\\"P/s}k_NKKb2]\"", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = JSONObject.quote("\b");
      assertEquals("\"\\b\"", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a JSONArray.", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".yUV3dM)q7`PWKO.", true);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getgetJSONArray", false);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5600040073151407
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Double double0 = new Double(1893.6022958041842);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt("] is not a JSONObject.", double0);
      jSONObject0.optString("] is not a JSONObject.");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("F`|mh)S_pdl", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("F`|mh)S_pdl");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4;ST9F|SNB{k5JW.-", (-249));
      double double0 = jSONObject1.optDouble("4;ST9F|SNB{k5JW.-", 2695.07438935663);
      assertEquals((-249.0), double0, 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.3292763863011157
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "gf+McG:puL");
      Float float0 = new Float(0.0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Double double0 = new Double(1.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.4085788142038693
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("i{?2@}`KQZm", (-630));
      long long0 = jSONObject1.getLong("i{?2@}`KQZm");
      assertEquals((-630L), long0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.7202025435261348
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("3:1{f=@", "3:1{f=@");
      long long0 = jSONObject0.optLong("3:1{f=@");
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wv#H|]NyQ", (-1653));
      try { 
        jSONObject0.getJSONObject("wv#H|]NyQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wv#H|]NyQ\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("\"a1", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("\"a1");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.9722469794234418
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("<|/f&!y;(yAope$r7", (-711));
      int int0 = jSONObject0.optInt("<|/f&!y;(yAope$r7", 1869);
      assertEquals((-711), int0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(": ", (-1429));
      double double0 = jSONObject1.getDouble(": ");
      assertEquals((-1429.0), double0, 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.6726254461503207
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = jSONObject0.put("g(Emp_+", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("g(Emp_+");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.568863045376497
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.put("Pn%", (Object) hashMap0);
      try { 
        jSONObject0.getBoolean("Pn%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Pn%\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.4080604617178538
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("min", (Object) "min");
      try { 
        jSONObject0.getBoolean("min");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"min\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("*pf(i48YR");
      JSONObject jSONObject1 = jSONObject0.put("*pf(i48YR", (Object) boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject1.getBoolean("*pf(i48YR");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-36733018));
      assertEquals("-3.6733018E7", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2644.937101852732);
      assertEquals("2644.937101852732", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.5047882836811908
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("] is not a number.", "] is not a number.");
      jSONObject0.append("] is not a number.", "] is not a number.");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("^swsI", 15);
      try { 
        jSONObject1.append("^swsI", "^swsI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[^swsI] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.9546458666826352
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Q6xItn-;^", 4);
      jSONObject0.accumulate("Q6xItn-;^", jSONObject1);
      // Undeclared exception!
      jSONObject0.toString((-38689130), 4);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("] not found.", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("q=%i:sx?(X", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject1.accumulate("", "");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                                                                                                                                    \"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n                                                                                                                                                    \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n                                                                          }");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertFalse(jSONTokener0.more());
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("*pf(i48YR", 15);
      boolean boolean0 = jSONObject0.isNull("*pf(i48YR");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.7913563426828252
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(16);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.6291821433649187
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Double double0 = new Double((-47.79221803947706));
      JSONObject jSONObject0 = new JSONObject(double0);
      int int0 = jSONObject0.optInt("islongBitsToDouble");
      assertEquals(0, int0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0, (-42), 308);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("E:(uL_G,#ZT@*LGZut", (-1157));
      try { 
        jSONObject1.getJSONArray("E:(uL_G,#ZT@*LGZut");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"E:(uL_G,#ZT@*LGZut\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("' and instead saw '", 675L);
      assertEquals(675L, long0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("Missing value");
      assertEquals("", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("*pf(i48YR");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1405L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }
}
