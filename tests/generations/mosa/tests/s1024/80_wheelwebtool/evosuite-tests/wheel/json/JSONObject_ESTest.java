/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 00:39:10 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3097800187994495
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(4, 4);
      JSONObject.quote("{\n        \"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n        \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n    }");
      jSONObject0.append("it", linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "it");
      jSONObject0.write(stringWriter1);
      jSONObject0.put("isspliterator", 4);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.584838202797333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getmax", 110);
      jSONObject0.getLong("getmax");
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7502720430473055
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("yQrv", (-895.94784));
      int int0 = jSONObject1.getInt("yQrv");
      jSONObject1.optDouble("yQrv", (-1695.984662564));
      jSONObject0.keys();
      jSONObject0.keys();
      jSONObject0.optLong("yQrv");
      JSONObject.valueToString(jSONObject0, (-895), 5);
      int int1 = jSONObject0.length();
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(linkedList0, 4, 4);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      jSONObject0.put("{}", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", hashMap0);
      JSONObject.getNames((Object) jSONObject1);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.accumulate("{}", object0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.875946768624191
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      Boolean boolean0 = new Boolean(false);
      hashMap0.put(jSONObject0, boolean0);
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) hashMap0);
      jSONObject1.getJSONObject("{}");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.put("Expected a ',' or ']'", false);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4205544484062713
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("{}", object0);
      JSONObject jSONObject2 = jSONObject1.put("{}", 2113.88586417331);
      double double0 = jSONObject2.optDouble("{}");
      assertEquals(2113.88586417331, double0, 0.01);
      
      boolean boolean0 = jSONObject1.optBoolean("{}");
      assertFalse(boolean0);
      
      String string0 = JSONObject.quote("{}");
      assertEquals("\"{}\"", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("' and instead saw '", (Object) jSONObject0);
      JSONObject jSONObject3 = jSONObject2.getJSONObject("' and instead saw '");
      assertNotSame(jSONObject2, jSONObject3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.562400482915316
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("V", true);
      boolean boolean0 = jSONObject1.optBoolean("V", true);
      assertTrue(boolean0);
      
      jSONObject0.toString((-1435307946), 128);
      boolean boolean1 = jSONObject1.has("V");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.28713943963701
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      jSONObject0.put("{}", (Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.put("{}", (Object) null);
      jSONObject0.optBoolean("B<?`=\"#.");
      JSONObject jSONObject2 = jSONObject0.optJSONObject("{}");
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4027439912703343
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      String string0 = jSONObject0.toString(3919, 4);
      String string1 = JSONObject.quote(string0);
      // Undeclared exception!
      jSONObject0.getJSONArray(string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      hashMap0.remove((Object) linkedList0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.421847739438074
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(true);
      jSONObject0.put("getwait", (Object) boolean0);
      boolean boolean1 = jSONObject0.optBoolean("getwait");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5185066006400834
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{aTT~<.g";
      stringArray0[1] = "{aTT~<.g";
      stringArray0[2] = "{aTT~<.g";
      stringArray0[3] = "{aTT~<.g";
      stringArray0[4] = "{aTT~<.g";
      JSONObject jSONObject0 = new JSONObject("{aTT~<.g", stringArray0);
      jSONObject0.put("{aTT~<.g", 3121.353192);
      jSONObject0.getDouble("{aTT~<.g");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{aTT~<.g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {aTT~<.g
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("20.572328718560110", true);
      Object object0 = JSONObject.NULL;
      boolean boolean0 = jSONObject1.getBoolean("20.572328718560110");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.401311666981295
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("{aTT~<.g", stringArray0);
      jSONObject0.put("{aTT~<.g", (-2127.55));
      jSONObject0.getDouble("{aTT~<.g");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{aTT~<.g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {aTT~<.g
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2380990152574354
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      String string0 = "rcw+TM:";
      JSONObject jSONObject1 = jSONObject0.put("rcw+TM:", false);
      jSONObject1.remove("rcw+TM:");
      try { 
        jSONObject1.getDouble(" u}]X6YB(lH`W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" u}]X6YB(lH`W\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3791235169376774
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("{}", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2271013424516264
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("qu", object0);
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject1.getLong("qu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"qu\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.905189915707041
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONObject jSONObject1 = jSONObject0.put("K7w^CfWO;nT", (Map) null);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.append("{}", object0);
      jSONObject1.toString(0, 0);
      jSONObject0.toString();
      String string0 = JSONObject.quote("{}");
      assertEquals("\"{}\"", string0);
      
      boolean boolean0 = jSONObject2.isNull("{}");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("s] o ", (Object) "s] o ");
      jSONObject1.accumulate("s] o ", "s] o ");
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3946141512731507
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("{}", object0);
      boolean boolean0 = jSONObject1.optBoolean("{}");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3437537046719372
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0340188405349524
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONObject jSONObject1 = jSONObject0.put("K7w^CfWO;nT", (Map) null);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.append("{}", object0);
      jSONObject2.optLong("{}");
      jSONObject1.toString(0, 0);
      jSONObject0.toString();
      JSONArray jSONArray0 = (JSONArray)jSONObject1.opt("{}");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.353363451324745
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("false", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("wheel.json.JSONArray", (-5656.4262));
      assertEquals((-5656.4262), double0, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.087698781999318
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("qzyW>{U)_", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      jSONObject0.put("SNTZ`7QY^[", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("val", (Object) "val");
      try { 
        jSONObject0.append("val", "val");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[val] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("flo", "flo");
      JSONObject jSONObject1 = jSONObject0.append("flo", "flo");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.2668998754679306
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-16519105), (-16519105));
      String string0 = JSONObject.valueToString("{}");
      JSONObject.doubleToString((-16519105));
      Short short0 = new Short((short)11);
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 47, 47);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4114161968362522
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6047867698526947
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add((Float) null);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      Object object0 = JSONObject.NULL;
      Object object1 = hashMap0.getOrDefault(object0, object0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(61);
      hashMap0.put((JSONObject) null, object1);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-12469282), (-12469282));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8113600491074715
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject.valueToString(hashMap0, (-12469270), (-12469270));
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 2012, 1743);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      boolean boolean0 = jSONObject0.isNull("{}");
      assertTrue(boolean0);
      
      String string0 = JSONObject.doubleToString(61.0115);
      assertEquals("61.0115", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5103090061340354
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("ThyX7)}N<wd;.ti", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.getJSONArray("ThyX7)}N<wd;.ti");
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7764225285748814
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.opt((String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Float float0 = new Float(0.0);
      hashMap0.put(float0, "\r");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.849273740147575
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ZDw]", (Object) jSONObject0);
      try { 
        jSONObject1.getBoolean("ZDw]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ZDw]\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6457928323748754
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.put((String) null, (-2619));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.154641420608782
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.names();
      jSONObject0.isNull("Expected a ',' or ']'");
      JSONObject jSONObject1 = jSONObject0.put("K7w^CfWO;nT", (Map) null);
      jSONObject1.optString("K7w^CfWO;nT", "K7w^CfWO;nT");
      String string0 = jSONObject0.toString();
      String string1 = JSONObject.quote("wheel.json.JSONObject@0000000004");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.9906188255641685
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{aTT~F<.g");
      int int0 = jSONObject0.optInt("{aTT~F<.g", 120);
      assertEquals(3, jSONObject0.length());
      assertEquals(120, int0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-1963), 101);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.2049733661202946
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.remove("");
      Float float1 = new Float((-2294.8252F));
      StringWriter stringWriter0 = new StringWriter(919);
      JSONObject.doubleToString((-2294.8252F));
      jSONObject0.optString("", "");
      try { 
        jSONObject0.getJSONArray("isfloatToIntBits");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isfloatToIntBits\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.2121883733353018
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{aTT~F<.g");
      // Undeclared exception!
      jSONObject0.toString(101, 1285);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean(",\n");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.2066113677582964
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Float float0 = new Float(879.4172183705311);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(55, 55);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.046085738959629
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optString("\f", "gethashCode");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
      
      String string1 = JSONObject.quote("] is not a Boolean.");
      assertEquals("\"] is not a Boolean.\"", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("(k']n<\"vFhn(9PVZ[3", (-2418L));
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("{}");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Wv=m)=s$uTDX91Fdo", false);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("Wv=m)=s$uTDX91Fdo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Wv=m)=s$uTDX91Fdo
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7308180040760877
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject.quote("l`");
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("\"l`\"", hashMap0);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.get("\"l`\"");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.2224298313620987
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("'`Uh(4RyHu", 0.0);
      jSONObject1.optDouble("'`Uh(4RyHu", Double.NaN);
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Short short0 = new Short((short)8);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("N@Jx_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"N@Jx_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 60, 60);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = JSONObject.quote("</IwW*?Q!0\"RRr2cPT");
      assertEquals("\"<\\/IwW*?Q!0\\\"RRr2cPT\"", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0, 32, 32);
      assertNotNull(string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1963153574622858
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString(549, 549);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("ZCU", 432L);
      assertEquals(432L, long0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.8058632507364383
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A JSONObject text must begin with '{'", (Object) jSONObject0);
      boolean boolean0 = jSONObject0.optBoolean("A JSONObject text must begin with '{'");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("getsubstring");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = JSONObject.quote("bJ[N>4PHpwuWUUBu+6");
      assertEquals("\"bJ[N>4PHpwuWUUBu+6\"", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("", (-6L));
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("vMX^", 1.0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("getrotateRight", 0L);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("ni]+.~ F0r", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("getgetLong");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetLong\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String string0 = JSONObject.doubleToString(39.823036771);
      assertEquals("39.823036771", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(34);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("1E^ZJCR`.L=u");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 1E^ZJCR`.L=u
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Double double0 = new Double((-530.5219199077));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.495914456064185
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("", false);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("getforEach");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getforEach\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1907131165659273
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      String string0 = JSONObject.quote("a-8v@_;LRQ]d}");
      assertEquals("\"a-8v@_;LRQ]d}\"", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("toS");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
