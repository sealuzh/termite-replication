/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 00:46:27 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.ReliefFAttributeEval;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.ConditionalDensityEstimator;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.M5P;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.Loader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.balltrees.BallNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.51915739789406
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("\n\n=== Error on training data ===\n");
      testInstances0.setSeed((-1457654536));
      evaluation0.unweightedMicroFmeasure();
      evaluation0.falsePositiveRate(1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1808698380099525
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.kappa();
      evaluation0.m_SumSchemeEntropy = (double) (-1);
      evaluation0.errorRate();
      evaluation0.SFMeanEntropyGain();
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0564961320422968
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4394.9513;
      doubleArray0[2] = (double) (-2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.numFalseNegatives((-1));
      int[] intArray0 = new int[8];
      intArray0[0] = (-2);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-2);
      intArray0[6] = (-1);
      intArray0[7] = (-2);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-1456206972));
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Capabilities capabilities0 = filteredClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@data";
      stringArray0[3] = ".arff";
      stringArray0[4] = "@relation";
      stringArray0[5] = "@data";
      AbstractClassifier.runClassifier(filteredClassifier0, stringArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) ".arff";
      objectArray0[2] = (Object) "@relation";
      objectArray0[3] = (Object) testInstances0;
      objectArray0[4] = (Object) evaluation0;
      objectArray0[6] = (Object) ".arff";
      objectArray0[7] = (Object) "getClass";
      objectArray0[8] = (Object) instances0;
      try { 
        evaluation1.evaluateModel((Classifier) cVParameterSelection0, instances1, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8037143984351165
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances.test((String[]) null);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double1 = evaluation0.m_Incorrect;
      double double2 = evaluation0.numFalsePositives(1);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3368883075390159
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\nSize of the tree : ");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[7];
      intArray0[0] = (-1859);
      intArray0[1] = 190;
      intArray0[2] = 103;
      intArray0[3] = 962;
      intArray0[4] = 3864;
      intArray0[5] = (-2888);
      intArray0[6] = 3337;
      SparseInstance sparseInstance0 = new SparseInstance(938.0854772179, doubleArray0, intArray0, 103);
      instances0.add((Instance) sparseInstance0);
      textDirectoryLoader0.getOptions();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6059565610476003
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.rootRelativeSquaredError();
      evaluation0.toMatrixString("\n                 TP Rate  FP Rate");
      textDirectoryLoader0.getStructure();
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toMatrixString();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.listOptions();
      evaluation0.evaluateModel((Classifier) logitBoost0, instances0, (Object[]) doubleArray0);
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = 'I';
      charArray0[2] = 't';
      charArray0[3] = '<';
      charArray0[4] = 'Y';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1623), charArray0, 496);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      evaluation0.rootRelativeSquaredError();
      evaluation0.toMatrixString("mu*NtmMX.jbU&");
      evaluation0.confusionMatrix();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.toMatrixString();
      LogitBoost logitBoost0 = new LogitBoost();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) evaluation1;
      objectArray0[1] = (Object) logitBoost0;
      objectArray0[2] = (Object) textDirectoryLoader0;
      try { 
        evaluation0.evaluateModel((Classifier) logitBoost0, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.classifiers.Evaluation cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumInstances(65);
      M5P m5P0 = new M5P();
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = 1.0E-5;
      evaluation0.updateMargins(doubleArray0, 2, 65);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0823115599799573
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4394.9513;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = 2390.6649;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) (-1);
      capabilities0.disableAllAttributes();
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.correlationCoefficient();
      // Undeclared exception!
      try { 
        evaluation0.numTrueNegatives(1187);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4947368421052632
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4492839105573694
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.meanPriorAbsoluteError();
      Float float0 = new Float(2.147483647E9);
      evaluation0.KBRelativeInformation();
      evaluation0.falseNegativeRate(1);
      // Undeclared exception!
      try { 
        evaluation0.precision(2391);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2391
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Float float0 = new Float((double) (-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-t <name of training file>\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.KBInformation();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.makeDistribution(0.0);
      Random.setNextRandom((-2));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1809520586087259
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.fMeasure(20);
      evaluation0.matthewsCorrelationCoefficient(101);
      evaluation0.weightedFalseNegativeRate();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.weightedMatthewsCorrelation();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.numFalsePositives(101);
      double[] doubleArray0 = evaluation2.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray0.length);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.894333968683803
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-2710.090805895091), (-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4394.9513;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-2);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.379821834666655
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 859.0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-0.5));
      evaluation0.meanPriorAbsoluteError();
      Float float0 = new Float(1915.4);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4394.9513;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = 2390.6649;
      simpleLinearRegression0.getRevision();
      doubleArray0[5] = (double) (-1);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.correlationCoefficient();
      // Undeclared exception!
      try { 
        evaluation0.weightedTruePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0644733866962657
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      double[] doubleArray0 = new double[2];
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("@relation");
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 110;
      intArray0[3] = 250;
      Instance instance0 = BallNode.calcCentroidPivot(250, (-2), intArray0, instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8942254499643238
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(0L);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.crossValidateModel((Classifier) simpleLinearRegression0, instances0, (-1073741824), (java.util.Random) mockRandom0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.errorRate();
      // Undeclared exception!
      try { 
        evaluation0.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.304921709163664
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), (-2));
      evaluation0.toMatrixString(" ");
      evaluation0.trueNegativeRate((-1));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (-1.7976931348623157E308);
      doubleArray0[4] = (-1.7976931348623157E308);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) adaBoostM1_0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.8646617728338635
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      int[] intArray0 = new int[0];
      Instance instance0 = BallNode.calcCentroidPivot(intArray0, instances0);
      instances0.add(instance0);
      evaluation0.setPriors(instances0);
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(117);
      try { 
        evaluation0.updateStatsForPredictor(1, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = Evaluation.MIN_SF_PROB;
      MultiScheme multiScheme0 = new MultiScheme();
      try { 
        evaluation0.evaluateModel((Classifier) multiScheme0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0705596562209854
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      double[] doubleArray0 = new double[2];
      Evaluation.handleCostOption((String) null, (-2));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[][] doubleArray1 = new double[5][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) (-2);
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      evaluation0.m_ConfusionMatrix = doubleArray1;
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) evaluation1;
      Object object1 = new Object();
      objectArray0[5] = object1;
      Object object2 = new Object();
      objectArray0[6] = object2;
      try { 
        evaluation1.evaluateModel((Classifier) logitBoost0, instances0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't normalize array. Sum is zero.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      double[] doubleArray0 = new double[2];
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("@relation");
      Evaluation.handleCostOption((String) null, (-2));
      double[][] doubleArray1 = new double[5][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) (-2);
      doubleArray1[2] = doubleArray2;
      testInstances0.setNumRelationalNumeric((-1));
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      M5P m5P0 = new M5P();
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.evaluateModel((Classifier) multiScheme0, instances0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.MultiScheme", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.606155025629507
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      evaluation0.m_ConfusionMatrix = doubleArray1;
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.numFalsePositives((-2));
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      IBk iBk0 = new IBk();
      Instances instances1 = iBk0.pruneToK(instances0, doubleArray0, (-2));
      try { 
        libSVMLoader0.getNextInstance(instances1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LibSVMLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[5];
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      int int0 = 20;
      textDirectoryLoader0.setRetrieval(20);
      TextDirectoryLoader.main(stringArray0);
      double[] doubleArray0 = new double[1];
      instances0.stringFreeStructure();
      doubleArray0[0] = (-1058.5134);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      instances0.spliterator();
      java.util.Random random0 = null;
      LWL lWL0 = new LWL();
      try { 
        Evaluation.evaluateModel((Classifier) lWL0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumAbsErr = (double) (-2);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-2.0);
      doubleArray0[4] = 859.0;
      doubleArray0[5] = (-2.0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 859.0);
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3340351649114237
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1253.1212560912), (-1));
      evaluation0.weightedAreaUnderROC();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      int[] intArray0 = new int[0];
      Instance instance0 = BallNode.calcCentroidPivot(37, (-869), intArray0, instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, instance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2055615117040683
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("\tThe random number seed. (default 1)");
      Evaluation evaluation0 = new Evaluation(instances0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      String string0 = Evaluation.getGlobalInfo(classifier0);
      assertEquals("\nSynopsis for weka.classifiers.rules.ZeroR:\n\nClass for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", string0);
      
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.numTruePositives(1);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.235672975515538
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(0L);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.unclassified();
      evaluation1.toClassDetailsString();
      DenseInstance denseInstance0 = new DenseInstance(0.0, (double[]) null);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction((double[]) null, (Instance) denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9379053472006187
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.numFalseNegatives(1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(7.916039749440842, doubleArray0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(2, testInstances0.getNumAttributes());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances2.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.listOptions();
      Instances instances0 = testInstances0.generate("D");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("D");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Q9v|:L6M~");
      try { 
        Evaluation.handleCostOption("D", (-2));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Q9v|:L6M~\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      Evaluation.handleCostOption((String) null, 26);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-926);
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) multiScheme0, instances0, objectArray0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.KBInformation();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.1995219101255112
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.truePositiveRate((-4391));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.KBInformation();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedFalseNegativeRate();
      double double3 = evaluation0.meanAbsoluteError();
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      String string0 = "PS";
      Instances instances0 = testInstances0.generate("PS");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(11);
      testInstances0.setNumRelationalString((-4740));
      String[] stringArray0 = testInstances0.getOptions();
      evaluation0.SFMeanSchemeEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization.main(stringArray0);
      evaluation0.numFalseNegatives(1094);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) multilayerPerceptron0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7659767920186922
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances.test(testInstances0.DEFAULT_WORDS);
      evaluation0.SFSchemeEntropy();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) randomSubSpace0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9084251348189811
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier1.getCostMatrix();
      evaluation0.precision(1);
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1877231874912297
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.KBInformation();
      double double0 = evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.pctUnclassified();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      Evaluation.makeOptionString(classifier0, true);
      MockRandom mockRandom0 = new MockRandom(6);
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel(classifier0, instances0, 4, (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.54479347205697
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-2));
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix1);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.695600427808076
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = (-2);
      // Undeclared exception!
      try { 
        evaluation0.addNumericTrainClass((-1), (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.86348392091719
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_TotalCost;
      evaluation0.setPriors(instances0);
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      double double2 = evaluation0.numTruePositives(558);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFEntropyGain();
      double double1 = evaluation0.SFMeanEntropyGain();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.095136422833189
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.getGlobalInfo(logitBoost0);
      evaluation0.addNumericTrainClass((-1), (-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      charArray0[1] = 'U';
      charArray0[2] = '}';
      charArray0[3] = 'o';
      charArray0[4] = 'w';
      charArray0[5] = '!';
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID((-2), charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrClass;
      evaluation0.areaUnderPRC(20);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6125169520700635
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), 199.716771599396);
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = reliefFAttributeEval0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setSeed((-2));
      SMOreg sMOreg0 = new SMOreg();
      evaluation1.equals(sMOreg0);
      double double0 = evaluation1.truePositiveRate(1);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.KBInformation();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5063874375065844
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("D");
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Classifier classifier0 = AbstractClassifier.makeCopy(serializedClassifier0);
      Evaluation.getGlobalInfo(classifier0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) (-2);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.234044601196686
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      evaluation0.errorRate();
      // Undeclared exception!
      try { 
        evaluation0.recall((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.1995219101255112
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation0.errorRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.recall(113);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      try { 
        evaluation0.evaluateModel((Classifier) multiScheme0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("o");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      AbstractClassifier.runClassifier(cVParameterSelection0, testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModel((Classifier) cVParameterSelection0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    s[i.classIndex()] = null;\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.790065811444522
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("setOptions");
      int[] intArray0 = new int[3];
      intArray0[0] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), intArray0, 5);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.confusionMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.988359345830926
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), (-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toSummaryString();
      Evaluation evaluation2 = new Evaluation(instances0);
      testInstances0.setSeed(16);
      evaluation2.m_SumKBInfo = (double) (-2);
      evaluation2.unweightedMacroFmeasure();
      evaluation2.weightedMatthewsCorrelation();
      evaluation2.KBInformation();
      Evaluation evaluation3 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        testInstances0.getRelationalFormat(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.86348392091719
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_TotalCost;
      evaluation0.setPriors(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      String string0 = Evaluation.getGlobalInfo(multiClassClassifier0);
      assertEquals("\nSynopsis for weka.classifiers.meta.MultiClassClassifier:\n\nA metaclassifier for handling multi-class datasets with 2-class classifiers. This classifier is also capable of applying error correcting output codes for increased accuracy.", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.0192398701063174
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1026.6145263), (-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.getRevision();
      double double0 = evaluation1.m_SumClass;
      // Undeclared exception!
      try { 
        evaluation0.precision((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.639348454964396
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("setOptions");
      int[] intArray0 = new int[3];
      intArray0[0] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), intArray0, 5);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.toClassDetailsString("@relation");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.falseNegativeRate((-2));
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7946065751184126
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SMO sMO0 = new SMO();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(sMO0);
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      Instances instances1 = testInstances0.generate(".csv");
      Evaluation evaluation1 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation0.kappa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      CSVLoader cSVLoader0 = new CSVLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getHeader();
      double double0 = evaluation0.recall(48);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("D");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate((-1));
      evaluation0.getHeader();
      double double1 = evaluation0.KBInformation();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5884672563391373
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double0 = evaluation0.m_TotalCost;
      evaluation0.setPriors(instances0);
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      try { 
        evaluation0.updateStatsForPredictor(1, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.5534095385694724
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), (-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getRevision();
      Evaluation evaluation2 = new Evaluation(instances0);
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2567.031;
      doubleArray1[1] = (double) (-2);
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) (-2);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (-2);
      doubleArray2[2] = 1.7976931348623157E308;
      doubleArray2[3] = (double) (-2);
      doubleArray2[4] = (double) 400;
      doubleArray2[5] = (double) (-1);
      doubleArray2[6] = (double) 400;
      doubleArray2[7] = (double) 400;
      doubleArray0[1] = doubleArray2;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      testInstances0.setClassType(400);
      evaluation2.toClassDetailsString("@data");
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(0.3337245616803034, evaluation0.weightedFalsePositiveRate(), 0.01);
      assertEquals(1.000975636240582, evaluation0.weightedPrecision(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, (-1289), 0.17499999701976776);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances.test(testInstances0.DEFAULT_WORDS);
      evaluation0.SFSchemeEntropy();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, binarySparseInstance0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      boolean boolean0 = evaluation0.equals((Object) null);
      assertFalse(boolean0);
      
      double double0 = evaluation0.truePositiveRate(20);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.KBInformation();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      boolean boolean0 = evaluation2.equals(evaluation1);
      assertTrue(boolean0);
      
      double double0 = evaluation2.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation2.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance(625);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator((ConditionalDensityEstimator) null, denseInstance0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("setOptions");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      int[] intArray0 = new int[3];
      instances0.enumerateInstances();
      intArray0[0] = (-2);
      intArray0[2] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), intArray0, 5);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedMatthewsCorrelation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2));
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setRetrieval(20);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumClassPredicted = (double) 20;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 2089, (-2.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2089
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setRetrieval(20);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation1.toSummaryString("@relation", true);
      ZeroR zeroR0 = new ZeroR();
      String string1 = Evaluation.wekaStaticWrapper(zeroR0, "@relation");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Evaluation.handleCostOption("", 119);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.avgCost();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1236.153595);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("D");
      Evaluation evaluation0 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance(625);
      double double0 = evaluation0.correct();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.1982020749289486
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TestInstances testInstances0 = new TestInstances();
      Evaluation.makeOptionString(costSensitiveClassifier0, false);
      double double1 = evaluation0.weightedRecall();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision(14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.8564909139241832
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      evaluation0.m_MissingClass = (-2.0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("PS");
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.042901725385895
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = Evaluation.getGlobalInfo(logitBoost0);
      assertEquals("\nSynopsis for weka.classifiers.meta.LogitBoost:\n\nClass for performing additive logistic regression. \nThis class performs classification using a regression scheme as the base learner, and can handle multi-class problems.  For more information, see\n\nJ. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.\n\nCan do efficient internal cross-validation to determine appropriate number of iterations.", string0);
      
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.falsePositiveRate((-1842177144));
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("g");
      Evaluation evaluation0 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance(600);
      boolean boolean0 = evaluation0.equals("g");
      assertFalse(boolean0);
      
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), (-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getRevision();
      double double0 = evaluation0.m_SumClass;
      evaluation1.pctIncorrect();
      // Undeclared exception!
      try { 
        evaluation0.precision((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.933541998291854
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      testInstances0.generate(".arff");
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.kappa();
      assertEquals(1.0, double0, 0.01);
      
      double double1 = evaluation0.numFalseNegatives(21);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.530286808575767
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      AbstractClassifier.runClassifier(simpleLinearRegression0, testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) simpleLinearRegression0, instances0, 2147483645, (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.3413628950806586
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      Instances instances0 = testInstances0.generate("setOptions");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      J48 j48_0 = new J48();
      Evaluation.getGlobalInfo(simpleLinearRegression0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      double double0 = 1058.3826583459795;
      evaluation0.addNumericTrainClass(1058.3826583459795, (-1));
      // Undeclared exception!
      try { 
        evaluation0.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      double double1 = evaluation0.SFMeanPriorEntropy();
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.falsePositiveRate(33);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.3483249510620676
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.areaUnderPRC((-2));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertFalse(testInstances0.getMultiInstance());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      double double1 = evaluation0.trueNegativeRate(100);
      assertEquals(0.0, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.5073381669387587
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString("2L~%F5ug");
      assertEquals("2L~%F5ug\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.numTrueNegatives((-1));
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.weightedFalsePositiveRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("o");
      testInstances0.generate("g");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanPriorAbsoluteError();
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), (-2));
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.KBInformation();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(2, testInstances0.getNumAttributes());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.3265171534282083
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation.makeOptionString(logitBoost0, true);
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "Qz.");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2748));
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("g");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
      
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double2 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("setOptions");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.2376830354502575
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.precision(1326);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString(".arff", true);
      assertEquals(".arff\nTotal Number of Instances                0     \n", string0);
      
      double double1 = evaluation0.incorrect();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.m_SumClassPredicted;
      MockRandom mockRandom0 = new MockRandom(1536L);
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 1859, (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.m_ClassIsNominal = false;
      evaluation0.areaUnderPRC((-2));
      try { 
        evaluation0.toMatrixString("   * @return        the revision\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.4234950611432036
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Evaluation.handleCostOption("", 119);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      wrapperSubsetEval0.getTechnicalInformation();
      try { 
        Evaluation.evaluateModel(classifier0, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.9669489783020988
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".bsi");
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.totalCost();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setRetrieval((-900));
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-900), charArray0, 2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.1995219101255112
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision(1326);
      evaluation0.sizeOfPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(118, (char[]) null, 1326);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.08611424224017
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.numFalsePositives((-530));
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-530));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -530
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce((-3338.04039), (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3338
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluationForSingleInstance((double[]) null, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double0 = evaluation0.m_TotalCost;
      evaluation0.setPriors(instances0);
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      try { 
        evaluation0.updateStatsForPredictor(1, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("g");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.totalCost();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("PS");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, "%e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.7161375354203159
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(20);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setDiscardPredictions(false);
      assertFalse(evaluation1.getDiscardPredictions());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalseNegatives(2);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[5];
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(0L);
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 855, (java.util.Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setRetrieval(20);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toSummaryString("@relation", true);
      evaluation1.setDiscardPredictions(true);
      assertTrue(evaluation1.getDiscardPredictions());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      Version.VERSION = "Class for building and using a multinomial Naive Bayes classifier. For more information see,\n\n";
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.meanPriorAbsoluteError();
      try { 
        Evaluation.handleCostOption("@data", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      evaluation0.m_TotalSizeOfRegions = 0.0;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      costSensitiveClassifier0.getCapabilities();
      evaluation0.fMeasure(1);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, 1, (java.util.Random) mockRandom0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      MockRandom mockRandom0 = new MockRandom(1);
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 6, (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanEntropyGain();
      double double1 = evaluation0.unweightedMacroFmeasure();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Float float0 = new Float((double) (-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanEntropyGain();
      double double1 = evaluation0.pctCorrect();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("@relation");
      try { 
        Evaluation.handleCostOption("@relation", (-3252));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      double double0 = evaluation0.m_MaxTarget;
      MockRandom mockRandom0 = new MockRandom((-1));
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, (-2), (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFPriorEntropy();
      double[] doubleArray0 = new double[0];
      evaluation1.m_TrainClassWeights = doubleArray0;
      try { 
        evaluation1.evaluateModelOnce((Classifier) logitBoost0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      evaluation0.correct();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      testInstances0.getRelationalClassFormat();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("PS");
      instances0.setClassIndex((-1));
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.getCapabilities();
      AbstractClassifier.runClassifier(cVParameterSelection0, testInstances0.DEFAULT_WORDS);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertFalse(testInstances0.getNoClass());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[5];
      try { 
        Evaluation.evaluateModel("", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.handleCostOption(" ", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
