/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 01:24:17 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2021678481610336
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854765367L, 9223372036854765367L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(4294967298L, 9223372036854765367L);
      boolean boolean0 = range1.equals((Object) null);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4000613103934803
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 21L, 21L);
      Range range1 = Range.of(21L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2670942167452757
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 444L, 9223372036854775411L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 444L, 9223372032559808745L);
      Range.of(9223372036854775411L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.8466069196591524
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 2271L, 2271L);
      Range range2 = Range.of((-580L));
      range2.startsBefore(range0);
      List<Range> list0 = range1.split(3445L);
      // Undeclared exception!
      try { 
        range2.complementFrom(list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372032559808745L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.206764854058508
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854765367L, 9223372036854765367L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2671143019073323
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3279L, (-9223372036854775808L));
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.696507861959039
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(4294966616L);
      Long long0 = new Long(9223372036854775807L);
      Range range1 = Range.of(65535L);
      Range.of((-4394L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 518L, 10439L);
      range2.equals(range1);
      Long long1 = new Long(10439L);
      Range range3 = range0.asRange();
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967062L, 9223372036854775806L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.266970744711691
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854765367L, 9223372036854765367L);
      Range range1 = Range.of(4294967295L, 9223372036854765367L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.059454851967032
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 21L, 127L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 21L, 21L);
      Range range1 = Range.of(21L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 21L, 21L);
      Range range1 = Range.of(21L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 127L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.ofLength(225L);
      Range range1 = Range.ofLength(225L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.89413587430213
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Long long0 = new Long((-9223372036854775808L));
      Range range0 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range1 = Range.ofLength(9223372036854775807L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, (-9223372036854775808L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.544529266219387
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      long long0 = range0.getBegin();
      assertEquals((-9223372036854775808L), long0);
      
      Range range1 = Range.of((-9223372036854775808L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-9223372036854775808L), (-9223372036854775808L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(465L, 65535L);
      Range range1 = Range.of(465L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-1101L), (-1101L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.797845357286787
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertSame(range1, range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.770515680200644
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 127L);
      Range range1 = Range.of(127L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(4294967295L, long0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.6476299110683836
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.of(9223372036854775807L);
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9794121442934958
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.542388970741509
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Long long0 = new Long(3450L);
      Range range0 = Range.of(3153L, 3152L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.ofLength(0L);
      range0.intersection(range1);
      assertTrue(range1.isEmpty());
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.059686199566801
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.equals(range_CoordinateSystem0);
      boolean boolean0 = range1.equals((Object) null);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.4419999547761964
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775783L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 9223372036854775782 ]/0B", string0);
      
      Range range1 = Range.ofLength(9223372036854775783L);
      List<Range> list0 = range0.complement(range1);
      assertSame(range1, range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.546470975773426
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Long long0 = new Long(2147483647L);
      Range.of((-9223372036854775808L));
      Range range0 = Range.of((-32768L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2025556956077046
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(449L, 449L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(449L, 4294967295L);
      boolean boolean0 = range1.equals(range_CoordinateSystem0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9792886722599112
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      long long0 = range0.getBegin();
      assertEquals((-9223372036854775808L), long0);
      
      Range range1 = Range.of((-9223372036854775808L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.7931511307298944
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2696985488293766
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(475L);
      Range range1 = Range.of(475L);
      Range range2 = Range.of(3152L);
      boolean boolean0 = range2.equals(range1);
      assertFalse(boolean0);
      
      range1.complement(range2);
      assertSame(range1, range0);
      assertFalse(range2.isEmpty());
      assertFalse(range1.equals((Object)range2));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-1308L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1308 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Long long0 = new Long(3450L);
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L));
      Long long1 = new Long(3450L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854775681L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.4419999547761964
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of(9223372036854775807L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.641775940281611
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      Range range1 = Range.of((-9223372036854775808L));
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.5421069787862236
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854774305L);
      Range range0 = range_Builder0.build();
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(1392L);
      Range range1 = Range.of(475L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0574866708943733
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(2147483647L, 2147483647L);
      Range range0 = Range.of(2147483647L, 2147483647L);
      long long0 = range0.getEnd();
      assertEquals(2147483647L, long0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.790334938148344
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.build();
      Range range1 = Range.of((-89L));
      Range range2 = Range.ofLength(1L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      Range range3 = Range.ofLength(1L);
      boolean boolean1 = range0.startsBefore(range1);
      assertTrue(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      List<Range> list0 = range3.complement(range1);
      assertFalse(list0.contains(range0));
      assertTrue(list0.contains(range2));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.equals((Object) null);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range0.equals(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.ofLength(1953L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.716441403228871
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      range0.getBegin();
      Range.of((-409L));
      Long long0 = new Long((-89L));
      range1.isEmpty();
      Range range2 = Range.of((-89L), 0L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Long long0 = new Long((-9223372036854775808L));
      Range range0 = Range.of((-32768L));
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.0577029806499434
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
      
      Object object0 = new Object();
      Range range1 = Range.of((-1L));
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.5523432904450774
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-32768L), 987L);
      range0.equals(range1);
      range0.asRange();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.2041131932281943
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-260L));
      Range range1 = Range.of((-5531L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-9223372036854775808L));
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.4424469472939303
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(231L);
      Range range1 = Range.of(231L, 231L);
      range1.equals(range0);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.1817377124206847
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 0 .. 0 ]/RB", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.0587765179553648
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.of(9223372036854775806L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775806L, 9223372036854775806L);
      range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(1249L, 9223372032559808513L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      range_Builder0.contractBegin((-1L));
      range0.equals(range_Builder0);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-594L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.691477450899438
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of((-963L));
      long long0 = range0.getBegin();
      assertEquals((-963L), long0);
      
      Range range1 = Range.of((-963L));
      Long long1 = new Long((-963L));
      boolean boolean0 = range0.equals(range1);
      boolean boolean1 = range1.startsBefore(range0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.758765726723146
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      long long0 = range0.getBegin();
      //  // Unstable assertion: assertEquals(2147483647L, long0);
      
      Range range1 = Range.of(2147483647L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      range0.equals((Object) null);
      Range range1 = range0.asRange();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-2147483648L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.equals("|w");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      long long0 = new Long((-2147483648L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.1320150760941314
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.toString();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-124L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -124 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.0600949885294986
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of((-1530L));
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1530 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of((-2163L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2162L), long0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.5544817637171233
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L), 32767L);
      range1.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.2664158827336083
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Range range1 = Range.of((-1L));
      range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.3372329503768197
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-1L), 65110L);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.086870484872592
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-1791L), 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of((-32772L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.541958335159319
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-195L), 65535L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.8071843240265384
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      Range.of((-1124L));
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list1.contains(range1));
      //  // Unstable assertion: assertFalse(list1.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.660596964555441
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 449L, 449L);
      Range range1 = Range.of(449L, 4294967295L);
      Range range2 = Range.of(4294967295L, 4294967295L);
      assertFalse(range2.isEmpty());
      
      boolean boolean0 = range1.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Range range3 = range1.intersection(range0);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.5658172048412924
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-1L), 225L);
      Range range1 = Range.ofLength(225L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      
      range0.iterator();
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.327189247670674
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(3153L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3153L, 3153L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range1.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.1000717878472392
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.ofLength(255L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.344292841368524
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.572069679665653
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775793L));
      Range range1 = Range.ofLength(9223372032559808680L);
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-9223372036854775800L), (-9223372036854775800L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.8364113549062924
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      long long0 = range1.getEnd();
      //  // Unstable assertion: assertEquals((-1L), long0);
      
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Range range2 = range_Builder0.build();
      //  // Unstable assertion: assertSame(range0, range1);
      //  // Unstable assertion: assertSame(range0, range2);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.7562650361899816
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      range_Builder0.contractBegin((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString();
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(255L);
      Range range2 = Range.of((-1416L));
      range2.split(255L);
      List<Range> list0 = range1.complement(range2);
      assertTrue(list0.contains(range1));
      
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      range2.iterator();
      Range range3 = Range.ofLength(2147483647L);
      range0.equals(range3);
      range3.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range3.getEnd(range_CoordinateSystem1);
      assertEquals(2147483646L, long1);
      assertSame(range3, range0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.2888296861163733
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-3473L));
      range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.6078037180095786
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-634L), 715L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      List<Range> list0 = range1.split(715L);
      assertSame(range1, range0);
      assertFalse(list0.contains(range0));
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.408275726120369
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.572397484021432
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.ofLength(1619L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Range range2 = Range.of(225L, 4294967295L);
      range0.isSubRangeOf(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range2));
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.8390344226784383
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(4294967295L);
      range0.equals(range_Builder0);
      List<Range> list0 = range0.split(4294967295L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertFalse(list1.equals((Object)list0));
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.615401082541052
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 9223372036854775807 .. 9223372036854775807 ]/0B", string0);
      
      Range range1 = Range.of(9223372036854775807L);
      //  // Unstable assertion: assertSame(range1, range0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.parseRange("[ 9223372036854775807 .. 9223372036854775807 ]/0B", range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      //  // Unstable assertion: assertTrue(range2.equals((Object)range0));
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.134006824564753
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.ofLength(3153L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder();
      Range range1 = range_Builder1.build();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.299145180131708
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(225L, 4294967295L);
      long long0 = range0.getBegin();
      assertEquals(225L, long0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(444L);
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(475L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.4421348317010025
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(231L);
      range0.equals(range0);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      
      range0.endsBefore(range0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.6213654816478
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775291L);
      range0.getBegin();
      Range range1 = Range.of(127L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      List<Range> list0 = range1.split(1L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.2035456965977054
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(2147483647L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(2147483648L, long0);
      
      String string0 = range0.toString();
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 2147483647 .. 2147483647 ]/0B");
      assertSame(range1, range0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.369738734381199
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(3153L);
      Range range1 = Range.of(3153L);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("bitLength must be >=0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.bitLength must be >=0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.717622692036118
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(32767L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.1147498264472473
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-114L), (-114L));
      Object object0 = new Object();
      range0.intersects(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.470391674901654
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-1851L), 3153L);
      Range range1 = Range.ofLength(485L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.889123342973809
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775779L), (-9223372036854775779L));
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.0558584483706284
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(4294967319L, 4294967319L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem1.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("`*[p-%TY", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse `*[p-%TY into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.6650860805714047
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(65L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.4406221852733103
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.ofLength(4294966616L);
      Range range1 = Range.of(4294966616L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.1134202517557954
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(1L);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.343763091394581
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.of(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.137327223435199
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(1L);
      long long0 = range0.getEnd();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.342538914916616
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-1L), 225L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of(132L);
      List<Range> list0 = range0.split(132L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-1919L));
      // Undeclared exception!
      try { 
        range0.split((-1919L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.ofLength(3153L);
      List<Range> list0 = range0.split(3153L);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.1972008459396317
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(4294967295L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.200113693165702
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(234L, 234L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.0558584483706284
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775792L), (-9223372036854775792L));
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.115960704834581
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -128 .. -128 ]/0B", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.1156141964683886
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.ofLength(3153L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 3153 ]/RB", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.4878637459546527
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-9223372036854775808L), long1);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.1792007145348498
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-128L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.ofLength(1989L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.ofLength(3153L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 3153L, 1265L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-222L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.242703796582509
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 302L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-712L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of(1619L, 1619L);
      Range range1 = Range.of(1619L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of(4294966616L);
      boolean boolean0 = range0.equals("-!P");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.0635838043705244
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(1989L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.7612448301326125
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of((-3723L), (-3723L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.3540755133711526
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      range0.equals("r-!P");
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.4931621442175658
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      String string0 = range0.toString();
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      
      Range range1 = Range.of(2147483647L);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.24418990450938
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      long long0 = range0.getBegin();
      assertEquals((-2147483648L), long0);
      
      Range range1 = Range.of((-2147483648L));
      assertSame(range1, range0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.1820566916870323
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      String string0 = range0.toString();
      assertEquals("[ -128 .. -128 ]/0B", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.ofLength(475L);
      Range.Builder range_Builder0 = new Range.Builder(475L, 475L);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.3605385140248165
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.ofLength(76L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      range0.equals(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.386495788903917
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of(1413L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.6334021657199447
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.ofLength(3153L);
      Range range1 = Range.ofLength(3153L);
      List<Range> list0 = range0.complement(range1);
      assertSame(range1, range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.632761975491991
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.of(231L);
      Range range1 = Range.of(231L, 231L);
      Range range2 = Range.of(1259L);
      Range range3 = range2.intersection(range1);
      range0.intersects(range3);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.1322080145467655
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of((-735L));
      range0.intersects(range1);
      List<Range> list0 = new LinkedList<Range>();
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.3279501861614795
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(65535L, 65535L);
      Range range1 = Range.ofLength(65535L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.7959184263273786
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.ofLength(3154L);
      Range.ofLength(3154L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertEquals(1L, long0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.210375892600888
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(9223372036854775520L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -289 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.expandBegin(9223372036854775807L);
      boolean boolean0 = range0.equals("Qt:Ua9\"bh6+q\"+@K<");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.327595366528126
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.contractEnd((-1927L));
      range_Builder0.shift(965L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(2147483647L);
      Range range0 = Range.of(range_CoordinateSystem0, 965L, 965L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 4294967295L;
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.200113693165702
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.contractBegin(2147483647L);
      Range range0 = Range.of(2147483647L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range range0 = Range.of((-2L), (-2L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.129966420524349
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range0 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(1L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=3.1925863485716692
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.of((-260L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-260L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=3.085091664483793
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(820L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range range0 = Range.of((-114L));
      assertFalse(range0.isEmpty());
  }
}
