/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 13 23:53:51 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Properties;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.evaluation.output.prediction.HTML;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.RandomForest;
import weka.clusterers.FilteredClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.Loader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.LinearNNSearch;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.067094546561575
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation0.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation0.updatePriors(instance0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9260204391364677
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(false);
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#|hfZRfkKq;jV)MW");
      IBk iBk0 = new IBk();
      // Undeclared exception!
      try { 
        evaluation0.falsePositiveRate((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1879925413846877
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, sparseInstance0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      evaluation0.m_Header = instances0;
      IBk iBk0 = new IBk(1);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderPRC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1837132182957943
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      int int0 = 7;
      CostMatrix costMatrix0 = new CostMatrix(7);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3204863871626777
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
      SGD sGD0 = new SGD();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) sGD0, instances1, 0, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7820195727673553
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      testInstances0.setNumString(2);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      LinearRegression linearRegression0 = new LinearRegression();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      HTML hTML0 = new HTML();
      hTML0.getHeader();
      MockRandom mockRandom1 = new MockRandom(2);
      try { 
        evaluation1.crossValidateModel((Classifier) costSensitiveClassifier0, (Instances) null, 1831, (Random) mockRandom1, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.listOptions();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk();
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0736556314531835
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("/j=x>,32Hu", protectedProperties0);
      instances0.setClass(attribute0);
      IBk iBk0 = new IBk((-1));
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.evaluateModel((Classifier) iBk0, instances0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1105300498329425
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.SFPriorEntropy();
      double double0 = evaluation0.numTruePositives(1);
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.306299183725675
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.matthewsCorrelationCoefficient(22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4947368421052632
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3690869641373813
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      
      IBk iBk0 = new IBk((-1));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double double1 = evaluation1.fMeasure(1);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9824315455618093
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.generate();
      double double0 = evaluation0.m_SumPriorEntropy;
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0423569973977633
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
      HashSet<BinarySparseInstance> hashSet0 = new HashSet<BinarySparseInstance>();
      instances0.addAll((Collection<? extends Instance>) hashSet0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.meanPriorAbsoluteError();
      try { 
        Evaluation.handleCostOption(".arff", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      evaluation0.SFMeanSchemeEntropy();
      LinearRegression linearRegression0 = new LinearRegression();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) linearRegression0, instances0, 2, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3186016652068098
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(4.9E-324, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3710103400849258
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1190.29916;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance(1190.29916, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.671875536399061
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.fMeasure(1);
      evaluation0.KBRelativeInformation();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 1261, 913.9106911);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MockFile mockFile0 = new MockFile(" ");
      MockRandom mockRandom0 = new MockRandom();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      DenseInstance denseInstance0 = new DenseInstance(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 0.975;
      doubleArray0[3] = (double) 1;
      evaluation0.updateMargins(doubleArray0, 2, 6);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5280928638631737
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setRetrieval((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation1.evaluationForSingleInstance((Classifier) costSensitiveClassifier0, instance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.priorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation1.weightedTrueNegativeRate();
      assertEquals(double2, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.418506036198219
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getRevision();
      IBk iBk0 = new IBk();
      evaluation1.coverageOfTestCasesByPredictedRegions();
      evaluation0.weightedAreaUnderPRC();
      Evaluation.makeOptionString(iBk0, true);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation.makeOptionString(decisionStump0, true);
      IBk iBk0 = new IBk();
      CSVLoader cSVLoader0 = new CSVLoader();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "UDD%";
      try { 
        Evaluation.evaluateModel((Classifier) decisionStump0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      SparseInstance sparseInstance0 = new SparseInstance(1800);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_TotalSizeOfRegions = (double) 6;
      evaluation0.numFalseNegatives((-193));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, sparseInstance0, (-193));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.012634800548594
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      double double0 = evaluation0.numFalseNegatives(1);
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      testInstances0.setNumInstances(2);
      double double1 = evaluation0.SFPriorEntropy();
      double double2 = evaluation1.SFSchemeEntropy();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      DenseInstance denseInstance0 = new DenseInstance(1975);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) inputMappedClassifier0, (Instance) denseInstance0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      evaluation0.areaUnderROC(1966);
      evaluation0.addNumericTrainClass(603.5783469, Double.NaN);
      evaluation0.areaUnderPRC((-2));
      evaluation0.addNumericTrainClass((-1), Double.NaN);
      evaluation0.areaUnderPRC((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.matthewsCorrelationCoefficient(94);
      assertEquals(0.0, double0, 0.01);
      
      RandomForest randomForest0 = new RandomForest();
      boolean boolean0 = evaluation0.equals(evaluation1);
      assertTrue(boolean0);
      
      org.evosuite.runtime.Random.setNextRandom((-2));
      double double1 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.009653988412479
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setWordSeparators("Can only do class based evaluation on the training data");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("", arrayList0, 1966);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getCapabilities();
      Capabilities capabilities0 = new Capabilities(regressionByDiscretization0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((double[]) null, (Instance) binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      int int0 = 117;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "    }\n");
      try { 
        Evaluation.handleCostOption(" ", 117);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9563668856621572
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      IBk iBk0 = new IBk();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.equals((Object) null);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldAllThrowIOExceptions();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      AllFilter allFilter0 = new AllFilter();
      Capabilities capabilities0 = allFilter0.getCapabilities(instances0);
      TestInstances.forCapabilities(capabilities0);
      MockFile mockFile0 = new MockFile(".arff", "    return toString();\n");
      IBk iBk0 = new IBk((-2));
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = 'B';
      charArray0[2] = '\"';
      charArray0[3] = 'F';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2), charArray0, 2500);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      DecisionStump decisionStump0 = new DecisionStump();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unclassified();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[1];
      intArray0[0] = 32;
      SparseInstance sparseInstance0 = new SparseInstance(1928.5062615793, doubleArray0, intArray0, 32);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) randomCommittee0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9907867545761528
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      ArrayDeque<SparseInstance> arrayDeque0 = new ArrayDeque<SparseInstance>();
      instances0.addAll((Collection<? extends Instance>) arrayDeque0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.errorRate();
      LMT lMT0 = new LMT();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) lMT0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.5532377812053753
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      evaluation0.addNumericTrainClass((-683.325), (-683.325));
      String string0 = evaluation0.toClassDetailsString(" ");
      assertEquals(" \n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      Integer integer0 = new Integer((-1));
      double double0 = evaluation0.m_WithClass;
      evaluation0.weightedAreaUnderPRC();
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = 'y';
      charArray0[2] = '\\';
      charArray0[3] = 'l';
      charArray0[4] = 'r';
      charArray0[5] = '\"';
      charArray0[6] = 'c';
      evaluation0.num2ShortID(12, charArray0, 1);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8835319301806641
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(1190.29916, 1190.29916);
      String string0 = evaluation1.toClassDetailsString(" ");
      assertEquals(" \n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation1.correct();
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      IBk iBk0 = new IBk();
      double double0 = evaluation1.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation1.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6714599763614508
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(10.0, doubleArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, denseInstance0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCapabilities();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      evaluation0.m_PriorEstimator = null;
      String string0 = evaluation0.toSummaryString("BS4|Xf?#MKO!# cc()", true);
      assertEquals("BS4|Xf?#MKO!# cc()\nTotal Number of Instances                0     \n", string0);
      
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      String string1 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string1);
      
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.2135668331778273
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      evaluation0.addNumericTrainClass((-683.325), (-683.325));
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFEntropyGain();
      double double2 = evaluation0.falseNegativeRate(1);
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.m_SumClassPredicted;
      assertNotEquals(double3, double0, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.510766958610196
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      DenseInstance denseInstance0 = new DenseInstance(297.0, (double[]) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.evaluationForSingleInstance((double[]) null, denseInstance0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      charArray0[1] = '`';
      charArray0[2] = 's';
      charArray0[3] = 'N';
      charArray0[4] = '{';
      charArray0[5] = 'X';
      charArray0[6] = 'K';
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID((-2), charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.9331935800160438
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      
      IBk iBk0 = new IBk((-1));
      CostMatrix costMatrix0 = new CostMatrix(1);
      evaluation0.m_CostMatrix = costMatrix0;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      double double1 = evaluation0.numTrueNegatives(1);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 2371, (-1339.1669895));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2371
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation.getGlobalInfo(regressionByDiscretization0);
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has beenspecified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(1800);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, sparseInstance0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.293397468937949
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      testInstances0.setNumString(2);
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances1);
      String string0 = evaluation1.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double0 = evaluation1.precision(1);
      assertEquals(0.0, double0, 0.01);
      
      evaluation1.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation1.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation1.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MockFile mockFile0 = new MockFile(".arff");
      MockFile mockFile1 = new MockFile(".bsi", ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.trueNegativeRate(1);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.m_WithClass;
      assertNotEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader1.getDebug());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.062232543010091
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      evaluation0.precision(499);
      evaluation0.rootRelativeSquaredError();
      double double0 = evaluation0.matthewsCorrelationCoefficient(499);
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      String string1 = evaluation0.num2ShortID(499, charArray0, 499);
      assertEqualsstring1);
      
      IBk iBk0 = new IBk(9);
      evaluation0.toSummaryString();
      evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanPriorEntropy();
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      double double0 = evaluation0.numInstances();
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      File file0 = textDirectoryLoader0.getDirectory();
      MockFile.createTempFile(".bsi", "W%TX", file0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.confusionMatrix();
      double double0 = evaluation0.falsePositiveRate(1);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_SumPredicted;
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".bsi";
      stringArray0[0] = ".arff";
      stringArray0[4] = ".bsi";
      Evaluation.main(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.7976931348623157E308;
      DenseInstance denseInstance0 = new DenseInstance(1.7976931348623157E308, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation.handleCostOption((String) null, 177);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader1.charSetTipText());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.289085672436611
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = evaluation0.makeDistribution(1);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      double double1 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanEntropyGain();
      double double1 = evaluation0.unweightedMacroFmeasure();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.falseNegativeRate(2340);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      IBk iBk0 = new IBk();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel(" ", instances0, (-2), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called:  
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(2);
      try { 
        evaluation0.updateStatsForPredictor(2, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.587973990795769
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.relativeAbsoluteError();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getOnDemandDirectory();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = '/';
      evaluation0.num2ShortID('m', charArray0, 1222);
      double double1 = evaluation0.m_SumClassPredicted;
      double double2 = evaluation1.m_SumPredicted;
      String string0 = evaluation0.toClassDetailsString("getMaxDepth");
      assertEquals("getMaxDepth\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double3 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double3, double0, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.3764662092693674
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostMatrix costMatrix0 = CostMatrix.parseMatlab("w._K;fh5Y5i]");
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.toMatrixString(".cost");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getCostMatrix");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      assertEquals(0.0, evaluation1.correct(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      DenseInstance denseInstance0 = new DenseInstance(12);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) stacking0, (Instance) denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.weightedRecall();
      ArffLoader arffLoader0 = new ArffLoader();
      Evaluation evaluation1 = new Evaluation(instances1);
      double double1 = evaluation1.unweightedMicroFmeasure();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updateStatsForPredictor((-1), (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.655658866069486
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(1);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      JSONLoader jSONLoader0 = new JSONLoader();
      try { 
        jSONLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.639629332079889
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setRetrieval((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.truePositiveRate(1);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.setPriors(instances0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      
      IBk iBk0 = new IBk((-1));
      double double1 = evaluation1.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.114556607890396
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      ArffLoader arffLoader0 = new ArffLoader();
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toMatrixString("@relation");
      assertEquals("@relation\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double double0 = Evaluation.MIN_SF_PROB;
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double1 = evaluation0.incorrect();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(2);
      try { 
        evaluation0.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.878119976013433
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_SumPriorEntropy;
      double double1 = evaluation1.m_SumPriorSqrErr;
      String string0 = evaluation1.toSummaryString("listOptions", false);
      assertEquals("listOptions\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.009653988412479
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(20);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.8564909139241834
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      IBk iBk0 = new IBk();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.priorEntropy();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      evaluation0.totalCost();
      try { 
        Evaluation.evaluateModel(".arff", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name .arff.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.8564909139241834
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IBk iBk0 = new IBk();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("YiA");
      testInstances0.setClassType(14);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.recall(110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 110
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.8501349548823627
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.precision(499);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      evaluation0.relativeAbsoluteError();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      double double1 = evaluation0.recall(1);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      evaluation1.avgCost();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("", textDirectoryLoader0.getCharSet());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 94;
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "   * Runs the classfier from commandline.\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.3817210450353814
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      testInstances0.setNumString(2);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      testInstances0.getWords();
      evaluation0.relativeAbsoluteError();
      evaluation0.SFSchemeEntropy();
      try { 
        evaluation0.evaluateModelOnce((Classifier) costSensitiveClassifier0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.44320744635261
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      evaluation0.toClassDetailsString();
      evaluation0.weightedFalseNegativeRate();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      try { 
        evaluation0.evaluateModelOnce((Classifier) serializedClassifier0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      IBk iBk0 = new IBk((-1));
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.evaluateModel((Classifier) iBk0, instances0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.lazy.IBk", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.638491391875056
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2549.29654096;
      textDirectoryLoader0.setCharSet("@data");
      doubleArray0[2] = (-1078.79754);
      DecisionStump decisionStump0 = new DecisionStump();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@data";
      AbstractClassifier.runClassifier(decisionStump0, stringArray0);
      inputMappedClassifier0.setSuppressMappingReport(false);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      evaluation0.useNoPriors();
      evaluation0.toSummaryString("@relation", false);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      evaluation0.toMatrixString();
      evaluation0.numTrueNegatives((-1127281206));
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(1084, charArray0, 2030);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.8493384930337249
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk((-2));
      evaluation0.m_Correct = 2285.7990433071;
      evaluation0.setPriors(instances0);
      evaluation0.areaUnderPRC(1);
      double double0 = evaluation0.numTrueNegatives(2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.5837007639017773
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.truePositiveRate(97);
      evaluation0.priorEntropy();
      evaluation0.avgCost();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".arff";
      evaluation0.m_WithClass = (double) 97;
      stringArray0[3] = "BMW$*Z cEBPO";
      stringArray0[4] = ".bsi";
      Evaluation.main(stringArray0);
      double double0 = evaluation0.m_SumSchemeEntropy;
      evaluation0.falsePositiveRate(97);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(97, (char[]) null, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      evaluation0.toSummaryString("@relation", true);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      double double1 = evaluation0.pctUnclassified();
      double double2 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double2, 0.01);
      
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      double double3 = evaluation0.errorRate();
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.234044601196686
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanPriorEntropy();
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.numTruePositives((-1));
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = filteredClusterer0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.4916440554450277
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      IBk iBk0 = new IBk((-2));
      evaluation1.falsePositiveRate((-1));
      evaluation1.weightedFMeasure();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CSVLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.423396787775542
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      IBk iBk0 = new IBk();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double0 = evaluation0.weightedAreaUnderPRC();
      evaluation0.setPriors(instances0);
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      M5Rules m5Rules0 = new M5Rules();
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk();
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.5285996593978584
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      IBk iBk0 = new IBk((-2));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double double0 = evaluation0.fMeasure(1);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.confusionMatrix();
      evaluation0.setNumericPriorsFromBuffer();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1139);
      try { 
        evaluation0.updateStatsForClassifier((double[]) null, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.8404427248166062
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      IBk iBk0 = new IBk((-2));
      double double0 = evaluation1.falsePositiveRate((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.areaUnderPRC((-2));
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      AbstractClassifier.runClassifier(inputMappedClassifier0, testInstances0.DEFAULT_WORDS);
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(2, testInstances0.getNumNominalValues());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      try { 
        Evaluation.evaluateModel((Classifier) sGDText0, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.SGDText:
         // 
         // -F
         // \tSet the loss function to minimize. 0 = hinge loss (SVM), 1 = log loss (logistic regression)
         // \t(default = 0)
         // -outputProbs
         // \tOutput probabilities for SVMs (fits a logsitic
         // \tmodel to the output of the SVM)
         // -L
         // \tThe learning rate (default = 0.01).
         // -R <double>
         // \tThe lambda regularization constant (default = 0.0001)
         // -E <integer>
         // \tThe number of epochs to perform (batch learning only, default = 500)
         // -W
         // \tUse word frequencies instead of binary bag of words.
         // -P <# instances>
         // \tHow often to prune the dictionary of low frequency words (default = 0, i.e. don't prune)
         // -M <double>
         // \tMinimum word frequency. Words with less than this frequence are ignored.
         // \tIf periodic pruning is turned on then this is also used to determine which
         // \twords to remove from the dictionary (default = 3).
         // -normalize
         // \tNormalize document length (use in conjunction with -norm and -lnorm)
         // -norm <num>
         // \tSpecify the norm that each instance must have (default 1.0)
         // -lnorm <num>
         // \tSpecify L-norm to use (default 2.0)
         // -lowercase
         // \tConvert all tokens to lowercase before adding to the dictionary.
         // -stoplist
         // \tIgnore words that are in the stoplist.
         // -stopwords <file>
         // \tA file containing stopwords to override the default ones.
         // \tUsing this option automatically sets the flag ('-stoplist') to use the
         // \tstoplist if the file exists.
         // \tFormat: one stopword per line, lines starting with '#'
         // \tare interpreted as comments and ignored.
         // -tokenizer <spec>
         // \tThe tokenizing algorihtm (classname plus parameters) to use.
         // \t(default: weka.core.tokenizers.WordTokenizer)
         // -stemmer <spec>
         // \tThe stemmering algorihtm (classname plus parameters) to use.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.12833456529567
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      Evaluation.makeOptionString(stacking0, true);
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.truePositiveRate(476);
      assertEquals(0.0, double0, 0.01);
      
      IBk iBk0 = new IBk(2494);
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.630874133662059
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(1, (-1.0));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      IBk iBk0 = new IBk(1);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.153178250512893
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ComplexityStatisticsAvailable = false;
      testInstances0.setNumRelationalNominal((-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation1.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      double double0 = evaluation1.rootMeanSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Capabilities capabilities0 = new Capabilities(principalComponents0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      
      double double1 = evaluation0.numFalseNegatives((-2));
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.precision(499);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2549.29654096;
      doubleArray0[2] = (-1078.79754);
      Evaluation.k_MarginResolution = (-178);
      evaluation0.numFalsePositives((-178));
      DecisionStump decisionStump0 = new DecisionStump();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, "Incorrectly Classified Instances   ");
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.7455196455710813
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.KBRelativeInformation();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      evaluation0.errorRate();
      evaluation0.weightedTruePositiveRate();
      evaluation0.numFalsePositives(554);
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      evaluation0.getClassPriors();
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, "@relation");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MockFile mockFile0 = new MockFile(".arff");
      MockFile mockFile1 = new MockFile(".bsi", ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double1 = evaluation0.pctIncorrect();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Evaluation.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double0 = evaluation0.precision(499);
      assertEquals(0.0, double0, 0.01);
      
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      evaluation0.setNumericPriorsFromBuffer();
      double double1 = evaluation0.weightedAreaUnderROC();
      double double2 = evaluation0.SFMeanEntropyGain();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk((-10));
      double[] doubleArray0 = evaluation0.m_MarginCounts;
      SparseInstance sparseInstance0 = new SparseInstance(2);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Stacking stacking0 = new Stacking();
      String string0 = Evaluation.makeOptionString(stacking0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.3175456484876826
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      try { 
        evaluation0.evaluateModelOnce((double) 1, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCapabilities();
      Evaluation.makeOptionString(costSensitiveClassifier0, true);
      MockFile mockFile0 = new MockFile(".arff", ".bsi");
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.576541015599165
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      evaluation0.KBInformation();
      evaluation1.toClassDetailsString();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[0];
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.confusionMatrix();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.SFMeanEntropyGain();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.makeDistribution((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) (-2), (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.toMatrixString("@data");
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.5881700089835453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.equals(testInstances0);
      evaluation0.rootMeanPriorSquaredError();
      String string0 = evaluation0.toClassDetailsString("@data");
      assertEquals("@data\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.avgCost();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.9704652436863546
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.weightedAreaUnderPRC();
      double double2 = evaluation0.SFPriorEntropy();
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Evaluation.handleCostOption("", 2);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      IBk iBk0 = new IBk(2);
      assertEquals(1, IBk.WEIGHT_NONE);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      IBk iBk0 = new IBk((-2));
      try { 
        evaluation0.evaluateModel((Classifier) iBk0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.handleCostOption(" ", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation1.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.501730978302286
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      evaluation0.weightedFalsePositiveRate();
      TestInstances testInstances0 = new TestInstances();
      evaluation0.toSummaryString(".arff", true);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(10, testInstances0.getNumInstancesRelational());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
