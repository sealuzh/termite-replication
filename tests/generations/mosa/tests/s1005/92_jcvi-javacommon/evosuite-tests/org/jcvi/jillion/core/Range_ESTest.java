/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 13 23:49:59 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 264L, 264L);
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1342954248533537
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(9223372036852919279L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 9223372036852919279 .. 9223372036852919279 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 9223372036852919279 .. 9223372036852919279 ]/0B", range_CoordinateSystem0);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertNotSame(range1, range0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.7642034221199743
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483636L), (-2147483636L));
      Range.of((-2147483636L));
      Range.of((-2147483636L));
      Range range1 = Range.of(9223372036852919281L);
      List<Range> list0 = range1.split(699L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>(list0);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483637 would make range [9223372036852919281 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2697954261503956
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of((-2147483654L), (-2147483654L));
      Object object0 = new Object();
      Range range1 = Range.of(263L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      
      Range range2 = Range.of((-2147483654L));
      range2.equals(range0);
      Range range3 = Range.of((-2147483654L), 1986L);
      assertNotSame(range3, range2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.79709058749954
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483636L), (-2147483636L));
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483636L), (-2147483636L));
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.059454851967032
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(263L, 4294967300L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 263L, 4294967300L);
      range0.equals(range_CoordinateSystem0);
      range1.equals(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.of((-339L));
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-339L), (-339L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1334393520871684
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-902L), 275L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.parseRange("`|+<eA9W1,5#T)Y>", range_CoordinateSystem1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9809066497880012
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967300L, 9223372036854775533L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 4294967300L, 9223372036854775533L);
      Range range1 = Range.of((-1620L), 4294967300L);
      range0.equals(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range1));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5542283688409473
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775798L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775798L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -21 would make range [9223372036854775798 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.7241530816502317
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-902L), 275L);
      List<Range> list0 = range0.split(1L);
      assertEquals(1178, list0.size());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.ofLength(1178L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.ofLength(4294967324L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2698564818026226
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(1986L, 1986L);
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals(1986L, long0);
      
      Range range1 = Range.ofLength(1986L);
      String string0 = range1.toString();
      assertEquals("[ 0 .. 1985 ]/0B", string0);
      
      Range range2 = Range.ofLength(1986L);
      Range range3 = Range.of(159L, 1986L);
      boolean boolean0 = range3.equals(range1);
      assertSame(range1, range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.415561107545189
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1985L, 9223372036852919288L);
      range0.equals((Object) null);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(9223372036852919288L, 9223372036852919288L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.of(992L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      range0.equals("");
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2015566946087035
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.ofLength(4294967308L);
      Range range1 = Range.of(4294967308L, 9223372036854775534L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7964122534878726
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      
      long long0 = range0.getLength();
      assertSame(range0, range1);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2013835344355432
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2596L, 2596L);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-122L));
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder((-122L), (-122L));
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-122L), 0L);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.iterator();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.756038924852759
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      range0.equals((Object) null);
      List<Range> list0 = new LinkedList<Range>();
      Range.of((-989L));
      List<Range> list1 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      //  // Unstable assertion: assertEquals(1, list1.size());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2227634799363307
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.of((-1L), 2147483647L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.ofLength(4294967324L);
      range0.equals("W!");
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(4294967300L, 4294967300L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-22L), (-22L));
      Long long0 = new Long(9223372036854773822L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.973278742811257
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1199L), (-1199L));
      range0.equals(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9794121442934958
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-337L), (-337L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-337L), (-337L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      boolean boolean1 = range1.equals(object0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.892400767303865
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-3453L), (-3453L));
      Object object0 = new Object();
      Range range1 = Range.of((-878L), (-878L));
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.290677179429909
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.of((-1L), 3047L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775681L, (-1438L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1438 would make range [9223372036854775681 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.7715215590235056
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = 1985L;
      Range.of(1985L, 9223372036854775807L);
      Range.of(1985L, 1985L);
      Range.ofLength(345L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-88L), 127L);
      // Undeclared exception!
      try { 
        Range.parseRange(";|y8}@Ml]TAhH)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ;|y8}@Ml]TAhH) into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.406843574312277
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(263L, 263L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.5885548911692595
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1985L, 9223372036854775807L);
      range0.toString(range_CoordinateSystem0);
      range0.equals(range0);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(2147483647L);
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.797208748908024
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483636L), (-2147483636L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2147483636L), (-61L));
      range0.equals(range1);
      range0.equals(range_CoordinateSystem1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9812029460842977
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483636L), (-2147483636L));
      Range range1 = Range.of((-2147483636L));
      range1.getEnd();
      range1.equals(range0);
      Range range2 = Range.of((-2147483636L));
      long long0 = range2.getEnd(range_CoordinateSystem0);
      assertEquals((-2147483635L), long0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      boolean boolean0 = range0.equals("W!");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2000428065800537
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(4294967300L);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(263L, 4294967300L);
      Object object0 = new Object();
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.751167291512385
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      range0.spliterator();
      long long0 = 9223372036854774943L;
      Range range1 = Range.of(9223372036854774943L, 9223372036854774943L);
      range0.split(9223372036854774943L);
      range1.toString();
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854774943 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9848941756717924
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(4294967298L);
      Range.ofLength(4294967298L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-111L));
      Object object0 = new Object();
      Long long0 = new Long((-4905L));
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.358991385753787
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-126L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-126L), (-126L));
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(274L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of((-3450L), (-3450L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.5130589312421763
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of((-88L));
      range0.split(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(4294967304L);
      range0.equals(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = 798L;
      Range range0 = Range.ofLength(798L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.3290811126512576
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-337L), (-337L));
      Range range1 = Range.of((-337L));
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      
      Range range2 = Range.ofLength(2125L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of((-1L), 3039L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.63677557268419
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-128L), 4294967295L);
      range0.split(4294967295L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.6574698603717675
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Range range1 = Range.of((-1467L), 32767L);
      range0.endsBefore(range1);
      Object object0 = new Object();
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.588695035517939
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036852919288L);
      long long0 = range0.getLength();
      //  // Unstable assertion: assertEquals(9223372036852919288L, long0);
      
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      boolean boolean0 = range0.isEmpty();
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.4930000331168323
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(1945L);
      Range range1 = Range.ofLength(1945L);
      range1.toString();
      Range range2 = Range.ofLength(0L);
      Range.of((-1L));
      Long.compareUnsigned(0L, (-2147485051L));
      Long.getLong((String) null);
      Object object0 = new Object();
      range2.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1483L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854773823L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.386970397351947
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.of(1987L, 1987L);
      long long0 = new Long(1987L);
      Range range0 = Range.ofLength(1987L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 1986 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 0 .. 1986 ]/0B", range_CoordinateSystem0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 264L, 264L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.9794121442934958
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483636L), (-2147483636L));
      Range range1 = Range.of((-2147483636L));
      long long0 = range1.getEnd();
      assertEquals((-2147483636L), long0);
      
      boolean boolean0 = range1.equals(range0);
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of((-503L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.9769701418514933
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(533L, 1821312L);
      String string0 = range0.toString();
      assertEquals("[ 533 .. 1821312 ]/0B", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(1614L, 9223372036854775806L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.3755268803270857
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3453L), (-3453L));
      List<Range> list0 = range0.split(14L);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.0607476767892687
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 720L, 720L);
      String string0 = range0.toString();
      assertEquals("[ 720 .. 720 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 720 .. 720 ]/0B");
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.252309862020003
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      boolean boolean1 = range1.intersects(range0);
      assertFalse(boolean1 == boolean0);
      assertSame(range1, range0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.357284162522736
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-337L), (-337L));
      range0.getBegin();
      Object object0 = new Object();
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.201200886033717
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(2573L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2573L, 2573L);
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.5406464687311736
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(992L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Range.of(992L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(2147483648L, long0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range range1 = range0.asRange();
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 255L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.06633045170451
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.1378615425587046
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 32767 .. 32767 ]/0B", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.2664158827336083
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.of(4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      long long0 = new Long(4294967295L);
      assertEquals(4294967295L, long0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.6757496828825085
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      range0.complementFrom(list0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.540320757051153
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(1010L, 2147483639L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483639L, 2147483639L);
      Range range1 = Range.of(1010L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854774815L, (-1175L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1175 would make range [9223372036854774815 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range range0 = Range.of(9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.ofLength(9223372036854775798L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775798L, (-1843L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1843 would make range [9223372036854775798 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.7943265948652374
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(992L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 992L, 65535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.iterator();
      Range range2 = Range.of(range_CoordinateSystem1, (-2147483637L), 0L);
      long long0 = range2.getEnd();
      assertEquals(0L, long0);
      
      Object object0 = new Object();
      range1.equals(object0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range3 = range_Builder0.build();
      assertSame(range3, range0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.440563010174192
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range range1 = Range.ofLength(3222L);
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(986L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(992L, 992L);
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of((-88L));
      Long long0 = Long.valueOf((-88L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.086870484872592
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of((-1L), 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.4746148431148205
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 1357L);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertFalse(range1.equals((Object)range0));
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertNotSame(range2, range0);
      //  // Unstable assertion: assertTrue(range2.equals((Object)range0));
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.21891840782811
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.ofLength(4294967298L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.280319103014584
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3097L), (-3097L));
      range1.startsBefore(range0);
      range0.equals(range1);
      range_Builder0.build();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.4323131119040644
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(255L, 255L);
      Range range1 = Range.of(32767L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(407L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.2725162479681478
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(6L);
      Range range1 = Range.ofLength(149L);
      List<Range> list0 = range1.split(6L);
      long long0 = range1.getEnd();
      //  // Unstable assertion: assertEquals(148L, long0);
      
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      
      boolean boolean0 = range0.isEmpty();
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(1L);
      range0.equals("W!");
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.2068737305139745
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(9223372036852919299L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 9223372036852919299 .. 9223372036852919299 ]/0B", string0);
      
      Range range1 = Range.of(9223372036852919299L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.3320897485505983
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(9223372036852919288L);
      String string0 = range0.toString();
      assertEquals("[ 9223372036852919288 .. 9223372036852919288 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 9223372036852919288 .. 9223372036852919288 ]/0B", range_CoordinateSystem0);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.2725676438704037
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.ofLength(3224L);
      List<Range> list0 = range0.split(6L);
      assertEquals(538, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of((-126L));
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractBegin((-126L));
      Range.Builder range_Builder1 = range_Builder0.shift((-126L));
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.2015566946087035
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(255L);
      range1.intersection(range0);
      assertTrue(range0.isEmpty());
      
      range1.split(4294966519L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.183615538893396
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(4294967294L);
      Range range1 = Range.of(4294967294L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.6062269438277785
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 264L, 264L);
      Range range1 = Range.of(255L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(range_CoordinateSystem0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.540818734019718
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range range1 = Range.ofLength(255L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.793494183903136
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerLast(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(1, list0.size());
      
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.1328844901090855
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-1151L));
      Range range1 = Range.ofLength(0L);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        range0.split((-1151L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of((-2295L), 4294959974L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-2147483649L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.5507198489260414
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 264L, 264L);
      Range range1 = Range.of(264L, 264L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
      
      range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1077L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.11285303678132
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.ofLength(650L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      long long1 = range0.getLength();
      assertEquals(650L, long1);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.0808360831049293
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      long long0 = range0.getBegin();
      assertEquals(4294967295L, long0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1087L, 1087L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1087L, long0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.4581715563647935
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.0543110595891974
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(1290L, 1290L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(992L, 992L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.130285399790697
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of(1589L, 1589L);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.4470602449153285
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483636L), (-2147483636L));
      range0.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2147483636L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.0845566287849624
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(9223372036852919279L);
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(9223372036852919279L);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of((-88L));
      Range range1 = Range.of((-88L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals((-88L), long0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.388149535673943
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of((-2265L));
      Range range1 = Range.of((-2265L));
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertSame(range1, range0);
      assertTrue(list1.isEmpty());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.ofLength(4294967324L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.2017210871781594
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-1199L));
      Object object0 = new Object();
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("68I2V6|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.68I2V6|
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.0574866708943733
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of(9990L, 9990L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      long long0 = range0.getLength();
      //  // Unstable assertion: assertEquals(1100L, long0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.18341320333714
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(4294967304L);
      Object object0 = new Object();
      Range range1 = range0.intersection(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.5537419828053327
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.getEnd();
      Range range1 = Range.of((-32768L), (-32768L));
      Range range2 = range1.asRange();
      assertSame(range2, range1);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.117073877376325
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(2459L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2459 .. 2460 ]/SB", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.192634675758092
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-337L), (-337L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-337L), (-337L));
      range1.isSubRangeOf(range0);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.167311705491535
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of(407L);
      long long0 = range0.getEnd();
      assertEquals(407L, long0);
      
      Long long1 = Long.valueOf((-4905L));
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-456L), (-456L));
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-455L), long0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals((-9223372036854775808L), long0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.2694831321776694
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = range0.asRange();
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.5145360972977477
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of(992L, 992L);
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      boolean boolean1 = range0.equals("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.151555559615189
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.7983225724456697
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      range1.getEnd(range_CoordinateSystem0);
      range1.isSubRangeOf(range0);
      Range range2 = Range.of((-2147483647L));
      List<Range> list0 = range2.complement(range1);
      range2.complementFrom(list0);
      range0.complementFrom(list0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.6334021657199447
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.ofLength(999L);
      Range range1 = Range.ofLength(999L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of(993L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.2660952157462746
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-2868L));
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1199L), (-1199L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-462L), (-462L));
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.309710421125441
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      range0.iterator();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-5569L), (-5569L));
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("unable to delete ", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse unable to delete  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Long long0 = new Long(4294967295L);
      Range range0 = Range.of(1722L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.9799561547384963
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483629L), (-2147483629L));
      range0.isSubRangeOf(range0);
      Range range1 = Range.of((-2147483629L), (-2147483629L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-2147483648L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin((-3242L));
      range_Builder0.expandBegin((-3242L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      long long0 = 2147483647L;
      Range.of(2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("Q_Y~okbW>mx}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Q_Y~okbW>mx} into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-462L), (-462L));
      Range range0 = Range.of((-462L));
      // Undeclared exception!
      try { 
        range0.split((-462L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of(998L);
      List<Range> list0 = range0.split(998L);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.080210692235636
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of(4294959974L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of((-1692L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.ofLength(1100L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of((-443L), (-443L));
      assertFalse(range0.isEmpty());
  }
}
