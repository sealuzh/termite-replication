/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 21:43:47 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3719198209004677
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      Float.isFinite(1063.197F);
      int int0 = 39;
      try { 
        JSONObject.valueToString(float0, 9, 39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.817893325924408
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(123);
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      jSONObject0.put("$cHn1`xsHB]3@j^/l", (Map) hashMap0);
      StringWriter stringWriter1 = stringWriter0.append('w');
      Writer writer0 = jSONObject0.write(stringWriter1);
      jSONObject0.write(writer0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.129095491985563
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("[]");
      assertEquals(0, int0);
      
      jSONObject0.put("gettoUnsignedString", 1.0);
      int int1 = jSONObject0.optInt("gettoUnsignedString");
      assertEquals(1, int1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.450181440026084
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("u#xW{f&JRf/%`i", object0);
      jSONObject1.put("u#xW{f&JRf/%`i", true);
      boolean boolean0 = jSONObject0.getBoolean("u#xW{f&JRf/%`i");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.689469326768329
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("null", "null");
      JSONObject jSONObject1 = new JSONObject();
      Double double0 = new Double(2193.482);
      jSONObject0.put("null", false);
      Short short0 = new Short((short)1361);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertNull(stringArray0);
      
      boolean boolean0 = jSONObject0.getBoolean("null");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8811868923448203
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ac", (-853));
      jSONObject0.optInt("ac");
      jSONObject0.optDouble("wUz&Xmbp{ ;", 2067.0);
      jSONObject0.put("wUz&Xmbp{ ;", (-1269));
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4226858321710085
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((-1159.8533443524561));
      JSONObject jSONObject1 = jSONObject0.accumulate("Wna=_pb'G", double0);
      boolean boolean0 = jSONObject0.optBoolean("2*F-4|");
      assertFalse(boolean0);
      
      jSONObject1.getInt("Wna=_pb'G");
      String string0 = jSONObject1.optString("JSONObject[");
      assertEquals("", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONTokener jSONTokener0 = new JSONTokener("{[");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[8];
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2801315622513108
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("_IS", "_IS");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject1.put("_IS", (Collection) linkedList0);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optBoolean("is");
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.getJSONArray("_IS");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.570271012943416
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject.doubleToString((-223.0917743101));
      JSONObject jSONObject0 = new JSONObject((Object) "-223.0917743101");
      // Undeclared exception!
      jSONObject0.toString(448);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5569795269143114
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.put("*v9=ot?&d", 0L);
      jSONObject1.getInt("*v9=ot?&d");
      jSONObject0.optInt("p<GOp@r", (-3223));
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isoptLong", true);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      boolean boolean0 = jSONObject0.optBoolean("isoptLong");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1506719848487332
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", (Collection) linkedList0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONObject jSONObject2 = jSONObject1.put("'XkgavM&J", (Collection) linkedList1);
      JSONArray jSONArray0 = jSONObject2.optJSONArray("'XkgavM&J");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {y
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("1MLl.$'^tblK}{</|");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.579628870616548
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "isequals";
      JSONObject jSONObject1 = jSONObject0.put("isequals", 0L);
      jSONObject0.optDouble("isequals");
      String string1 = "xxFq";
      jSONObject1.put("isequals", false);
      try { 
        jSONObject0.append("isequals", hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[isequals] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(1.0F);
      jSONObject0.put("jQG", (Object) float0);
      JSONObject.getNames(jSONObject0);
      long long0 = jSONObject0.optLong("jQG");
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("3c)$Pj3+b", (Collection) linkedList0);
      JSONObject.valueToString(linkedList0);
      jSONObject0.put("getvalueOf", true);
      JSONObject jSONObject2 = jSONObject1.put("getvalueOf", (Object) "3c)$Pj3+b");
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.259994146443613
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) " dYJ-G,,0%U2XDv&jS");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject0.toString(8192, (-4079));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1252245242436274
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("for", (-202L));
      assertEquals((-202L), long0);
      
      JSONObject jSONObject1 = jSONObject0.put("for", 1.0);
      int int0 = jSONObject1.getInt("for");
      assertEquals(1, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1863266043461413
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-1090));
      JSONObject jSONObject1 = jSONObject0.accumulate("_Ihp", integer0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      boolean boolean0 = jSONObject1.optBoolean("/CB)efhTzP?8pM7HbZ ");
      assertFalse(boolean0);
      
      Boolean.valueOf(true);
      double double0 = jSONObject1.optDouble("_Ihp");
      assertEquals((-1090.0), double0, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9499727481125522
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Short short0 = new Short((short)1151);
      Integer integer0 = new Integer((short)1151);
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(true);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>(linkedList0);
      Double double0 = new Double((short)1151);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("o2P<P2@W2w", "_Ihp");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject.quote("o2P<P2@W2w");
      jSONObject1.has("o2P<P2@W2w");
      JSONObject jSONObject2 = jSONObject1.put("_Ihp", 2107.3307554);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0921965331237558
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("toA", (Object) "toA");
      JSONObject jSONObject1 = jSONObject0.put("thPe~Rvf8", false);
      boolean boolean0 = jSONObject1.optBoolean("thPe~Rvf8");
      assertFalse(boolean0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.207304368451297
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Float float0 = new Float((-223.0917743101));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.append("cop", "cop");
      JSONObject.getNames(jSONObject1);
      Long long0 = new Long(112L);
      String string0 = JSONObject.valueToString(long0, (-2255), (-2255));
      assertNotNull(string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.885503389848818
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@00000000030", 1);
      jSONObject1.remove("java.lang.Float@00000000030");
      try { 
        jSONObject0.getJSONObject("nBI,1+k^}=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nBI,1+k^}=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("w1.0", (Collection) linkedList0);
      jSONObject0.accumulate("w1.0", jSONObject1);
      try { 
        jSONObject1.getBoolean("w1.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"w1.0\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("gettoHexString", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(1437);
      Writer writer0 = jSONObject0.write(stringWriter0);
      StringWriter stringWriter1 = new StringWriter(1437);
      assertFalse(stringWriter1.equals((Object)writer0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}o>4hjWh1V~Dl>7 :h&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }o>4hjWh1V~Dl>7 :h&
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.527062838287056
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 3843, 3843);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("%$EEXkCy8${J{IaB", (-985));
      boolean boolean0 = jSONObject1.isNull("%$EEXkCy8${J{IaB");
      assertFalse(boolean0);
      
      long long0 = jSONObject1.optLong("%$EEXkCy8${J{IaB");
      assertEquals((-985L), long0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0300388177574233
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("int", "int");
      try { 
        jSONObject1.getBoolean("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"int\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.912621690058974
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Short short0 = new Short((short)1151);
      Integer integer0 = new Integer((short)1151);
      JSONObject jSONObject0 = new JSONObject(integer0);
      String string0 = JSONObject.quote("gettoUnsignedInt");
      assertEquals("\"gettoUnsignedInt\"", string0);
      
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "2Goi7b{f\"< !";
      stringArray0[1] = "toH";
      JSONObject jSONObject1 = new JSONObject(object0, stringArray0);
      jSONObject0.opt((String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7890753446971144
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      Float.isFinite(0.0F);
      JSONObject.quote("wheel.json.JSONArray");
      JSONObject jSONObject1 = new JSONObject("wheel.json.JSONArray", stringArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject1.put("\"wheel.json.JSONArray\"", (Collection) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.opt("\"wheel.json.JSONArray\"");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.431947966391322
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ",\n";
      JSONObject.quote(",\n");
      jSONObject0.optInt(",\n", 0);
      try { 
        jSONObject0.getJSONObject("\",\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\",\\n\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("false", jSONArray0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject1.putOpt("getgetBytes", jSONArray0);
      jSONObject0.getJSONArray("false");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.287988646743151
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("null", "null");
      JSONArray jSONArray0 = jSONObject1.names();
      JSONObject jSONObject2 = jSONObject0.accumulate("null", jSONArray0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("_I1p", (Object) "_I1p");
      JSONObject jSONObject1 = jSONObject0.accumulate("_I1p", "_I1p");
      try { 
        jSONObject1.getBoolean("_I1p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_I1p\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      Double double0 = new Double(Double.NaN);
      Double double1 = new Double(0.0);
      hashMap0.put(double1, (Byte) null);
      Byte byte0 = new Byte((byte)57);
      hashMap0.putIfAbsent(double0, byte0);
      Byte.toUnsignedInt((byte)57);
      Byte.toUnsignedInt((byte) (-5));
      hashMap0.put((Double) null, (Byte) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      try { 
        jSONObject0.get("*gCjOi\"XPUDVE9Q4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*gCjOi\\\"XPUDVE9Q4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("nBI,1+k^}=", (-241));
      try { 
        jSONObject0.getJSONObject("nBI,1+k^}=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nBI,1+k^}=\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0020950905615602
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "=T~xwh");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("f)jnd7", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 4, 45);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.0115537715672924
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("h9", jSONArray0);
      try { 
        jSONObject0.getBoolean("h9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"h9\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("^pW)/w-.D", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.652376137750783
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Sp./IG/o)*|w?", 2);
      jSONObject0.optInt("Sp./IG/o)*|w?", 2);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONObject.getNames(jSONObject0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.3199044298479494
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("d?R_nCFe?Y;kaKt4", jSONObject0);
      String string0 = jSONObject0.getString("d?R_nCFe?Y;kaKt4");
      assertNotNull(string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "'v#DlJ:S:8st4m1/'");
      JSONObject jSONObject0 = new JSONObject("'v#DlJ:S:8st4m1/'", stringArray0);
      jSONObject0.append("'v#DlJ:S:8st4m1/'", "'v#DlJ:S:8st4m1/'");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.9607104090414063
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.9042552998214495
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "_I1p";
      JSONObject jSONObject1 = jSONObject0.accumulate("_I1p", "_I1p");
      try { 
        jSONObject1.getDouble("_I1p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_I1p\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{", 2563.7214);
      Double double0 = new Double(2563.7214);
      jSONObject1.getDouble("{");
      Double double1 = new Double(2563.7214);
      try { 
        jSONObject0.getJSONArray("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.9042552998214495
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("false", "false");
      try { 
        jSONObject1.getJSONArray("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8976492786748422
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (-2136.92));
      double double0 = jSONObject0.getDouble("");
      assertEquals((-2136.92), double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("false", object0);
      try { 
        jSONObject0.getJSONArray("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 62, 62);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 8448, 8448);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1147));
      JSONObject jSONObject1 = new JSONObject("{}");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(42);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.2002025435261348
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expected a ',' or ']'", 1370);
      jSONObject0.optDouble("Expected a ',' or ']'");
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      try { 
        jSONObject0.getJSONObject("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("flo", 97);
      jSONObject1.optDouble("flo", 0.0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote((String) null);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "\"\"");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.1958378231092612
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Long long0 = new Long(2239L);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.toString((-828), (-828));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.379451944903628
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(922, 922);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.6908746774461216
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(3714);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, 3714, 3442);
      assertEquals("{}", string0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "{}");
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.8058632507364383
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, 32, 32);
      assertEquals("{}", string0);
      
      boolean boolean0 = jSONObject0.isNull("{}");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String string0 = JSONObject.valueToString(linkedList0, 101, 101);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = JSONObject.quote("{>!#}_@K>%y/@");
      assertEquals("\"{>!#}_@K>%y/@\"", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = JSONObject.quote("'v#DlJ:S:8st4m1/_'");
      assertEquals("\"'v#DlJ:S:8st4m1/_'\"", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.4831586888679547
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.valueOf("w1.0");
      linkedList0.add(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("w1.0", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.put("'XkgavM&J", (Collection) linkedList0);
      jSONObject2.toString((-846), (-846));
      Object object0 = JSONObject.NULL;
      jSONObject2.append("'XkgavM&J", object0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      jSONObject0.accumulate("A/)OMfpEm?'da4VF5L", stringWriter0);
      try { 
        jSONObject0.append("A/)OMfpEm?'da4VF5L", ",Y3KSdr@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[A/)OMfpEm?'da4VF5L] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.6148634117460263
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      jSONObject0.put("bCWbO]p%J1", 1089L);
      jSONObject0.getLong("bCWbO]p%J1");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Map) hashMap0);
      jSONObject0.toJSONArray(jSONArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("$hx<'*t9h+*", (Collection) linkedList0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("gettoUpperCase", (Object) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.names();
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.6047867698526947
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      linkedList0.add((JSONArray) null);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("isvalueOf");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("O$np", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1459L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("", 0.0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.6245357148608477
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "Q&\"FLsBA";
      JSONObject jSONObject0 = new JSONObject((Object) "Q&\"FLsBA");
      jSONObject0.optBoolean("X)#@", false);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>(linkedList0);
      jSONObject0.put("", (Collection) linkedList1);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 1973, 1973);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.6537569593325672
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "Expected a ',' or '}'");
      assertEquals(1, stringArray0.length);
      
      JSONObject jSONObject0 = new JSONObject((Object) "Expected a ',' or '}'");
      jSONObject0.toString((-2262));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Integer integer0 = new Integer(177);
      String string0 = JSONObject.valueToString(integer0, (-12473307), 177);
      assertNotNull(string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("<1dLF\"", (-2476.05));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5640100761131712
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString((-1147));
      try { 
        jSONObject1.getJSONObject("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000003\\\": \\\"java.lang.Class@0000000004\\\"}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.3080561808079394
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("\r", 1247);
      jSONObject1.optString("\r", "\r");
      boolean boolean0 = jSONObject1.isNull("true");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.8149376608997776
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("_`p1", object0);
      boolean boolean0 = jSONObject1.optBoolean("_`p1");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.7522265859844643
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      jSONObject0.put("#5*s6F(^9U", (Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      String string0 = jSONObject0.optString("#5*s6F(^9U");
      assertNotNull(string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = JSONObject.valueToString("getdoubleToString");
      assertNotNull(string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("DH1g> aXk:", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer integer0 = new Integer(93);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.9975094371059428
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      String string1 = jSONObject0.toString();
      assertNotNull(string1);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Short short0 = new Short((short) (-1023));
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("wheel.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = JSONObject.quote("vi,)G+@>Gd\"w7!F`0");
      assertEquals("\"vi,)G+@>Gd\\\"w7!F`0\"", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("dqz|6egP+|L ?", 0L);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("000");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.6083963944770798
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("\f", true);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("6wS=!0ra_");
      assertEquals("", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("U");
      assertNull(object0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", true);
      Object object0 = jSONObject1.get("wheel.json.JSONException");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = Double.valueOf(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.9891373440826869
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      jSONObject0.put("0", 0.0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.7511893730418442
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{>!#}_@K>%y/@");
      try { 
        jSONObject0.getJSONArray("{>!#}_@K>%y/@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{>!#}_@K>%y/@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("istoHexString", (-1L));
      assertEquals((-1L), long0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.3350026060706126
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("v)r(IYK_XPVZ", 1860L);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-274), 79);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.207304368451297
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Float float0 = new Float((-898.607727));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.valueToString(jSONObject0, 310, 310);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.2001248812718097
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.valueToString(jSONObject1, (-1627), (-1627));
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-738), (-738));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.quote("6lBFm ");
      assertEquals("\"6lBFm \"", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("y&q?tjDX\r*n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y&q?tjDX\\r*n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("jSgp(Oc$+gFH$cl");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("DH1g> aXk:", "DH1g> aXk:");
      assertEquals("DH1g> aXk:", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("getsubstring", false);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.8782694008934335
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "toJ");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "toJ");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("i-#6C~=f 6a%ic?0-", "i-#6C~=f 6a%ic?0-");
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.getLong("i-#6C~=f 6a%ic?0-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"i-#6C~=f 6a%ic?0-\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.8121790402101223
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("qq](cZ", jSONObject0);
      boolean boolean0 = jSONObject0.optBoolean("qq](cZ");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("get", "get");
      JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("isfloatToIntBits");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.9853278202731631
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.6796742326465708
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("N", 0.0);
      long long0 = jSONObject0.getLong("N");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "q3";
      jSONObject0.put("q3", (Object) "q3");
      try { 
        jSONObject0.getInt("q3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"q3\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("KPccS.s`S]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"KPccS.s`S]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("*y+YoO7pV!q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*y+YoO7pV!q\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONObject$1", "wheel.json.JSONObject$1");
      boolean boolean0 = jSONObject1.optBoolean("wheel.json.JSONObject$1");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      long long0 = jSONObject0.optLong("Qyhl.y#>y2F?T%4u9o");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.6083963944770798
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("\r", (-2479));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.495914456064185
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("", 128);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("false");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.9797255793768046
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("nu");
      assertEquals(Double.NaN, double0, 0.01);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("&@YZN*cO@%rxG&1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&@YZN*cO@%rxG&1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      try { 
        jSONObject0.append((String) null, jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Float float0 = new Float((-3261.9774377940735));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("-Vta2d`", "-Vta2d`");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("getwait");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getwait
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("lis");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of lis
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{>!#}_@K>%y/@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 13 of {>!#}_@K>%y/@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
