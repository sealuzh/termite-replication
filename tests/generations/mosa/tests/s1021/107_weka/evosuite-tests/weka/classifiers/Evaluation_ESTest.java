/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 21:31:47 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Random;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.KStar;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.PART;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.HierarchicalClusterer;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CheckOptionHandler;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.Loader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.balltrees.BallNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8318355206134167
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-27);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.equals(evaluation0);
      evaluation0.SFPriorEntropy();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3354.781);
      doubleArray0[1] = 0.1;
      doubleArray0[2] = 0.1;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1078.4693);
      doubleArray0[5] = 0.1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.1, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-3354.781);
      doubleArray1[1] = (-3354.781);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray1, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6100081575815284
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.trueNegativeRate((-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.confusionMatrix();
      evaluation1.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation2 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation2.m_SumAbsErr = 1086.3532780392;
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation2.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.957500951064171
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      instances0.deleteAttributeType((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      evaluation0.areaUnderROC(9);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.m_MissingClass;
      evaluation0.weightedFalseNegativeRate();
      evaluation0.trueNegativeRate(26);
      evaluation0.toMatrixString();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      int[] intArray0 = new int[0];
      Instance instance0 = BallNode.calcCentroidPivot(intArray0, instances0);
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0841647202725087
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk((-2));
      LogitBoost logitBoost0 = new LogitBoost();
      instances0.lastIndexOf(iBk0);
      evaluation0.KBMeanInformation();
      evaluation0.addNumericTrainClass(4, 1);
      LWL lWL0 = new LWL();
      Evaluation evaluation1 = new Evaluation(instances0);
      PART pART0 = new PART();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.trueNegativeRate(1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk((-2));
      evaluation0.getRevision();
      LogitBoost logitBoost0 = new LogitBoost();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-1102.820243691324));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4124506531418066
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk((-2));
      evaluation0.KBRelativeInformation();
      Double double0 = new Double(2);
      LogitBoost logitBoost0 = new LogitBoost();
      PART pART0 = new PART();
      evaluation0.numTruePositives(1);
      evaluation0.trueNegativeRate((-1134));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk((-2));
      evaluation0.getRevision();
      LogitBoost logitBoost0 = new LogitBoost();
      instances0.lastIndexOf(iBk0);
      evaluation0.KBMeanInformation();
      evaluation0.addNumericTrainClass(4, 1);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.setNumericPriorsFromBuffer();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4572637190629707
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      DenseInstance denseInstance0 = new DenseInstance(3129);
      instances0.add((Instance) denseInstance0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, (Instance) null, 481.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.reset();
      MockRandom mockRandom0 = new MockRandom();
      ZeroR zeroR0 = new ZeroR();
      try { 
        evaluation0.crossValidateModel((Classifier) zeroR0, instances0, 357, (Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0953087915452815
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.truePositiveRate(2);
      IBk iBk0 = new IBk();
      IBk iBk1 = new IBk();
      Logistic logistic0 = new Logistic();
      try { 
        Evaluation.evaluateModel((Classifier) iBk1, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.lazy.IBk:
         // 
         // -I
         // \tWeight neighbours by the inverse of their distance
         // \t(use when k > 1)
         // -F
         // \tWeight neighbours by 1 - their distance
         // \t(use when k > 1)
         // -K <number of neighbors>
         // \tNumber of nearest neighbours (k) used in classification.
         // \t(Default = 1)
         // -E
         // \tMinimise mean squared error rather than mean absolute
         // \terror when using -X option with numeric prediction.
         // -W <window size>
         // \tMaximum number of training instances maintained.
         // \tTraining instances are dropped FIFO. (Default = no window)
         // -X
         // \tSelect the number of nearest neighbours between 1
         // \tand the k value specified using hold-one-out evaluation
         // \ton the training data (use when k > 1)
         // -A
         // \tThe nearest neighbour search algorithm to use (default: weka.core.neighboursearch.LinearNNSearch).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.097242790482881
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      textDirectoryLoader0.setCharSet("@relation");
      Version.MINOR = (-1642);
      Instances instances1 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.equals(evaluation0);
      evaluation1.coverageOfTestCasesByPredictedRegions();
      evaluation2.rootRelativeSquaredError();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".arff";
      stringArray0[2] = "@data";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "@data";
      stringArray0[5] = "@data";
      stringArray0[6] = "@data";
      Evaluation.main(stringArray0);
      evaluation0.fMeasure((-1642));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.reset();
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("@relation");
      double[] doubleArray0 = new double[2];
      MockRandom mockRandom0 = new MockRandom();
      ZeroR zeroR0 = new ZeroR();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) zeroR0, instances0, 357, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk((-1));
      evaluation0.getRevision();
      LogitBoost logitBoost0 = new LogitBoost();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2277.762));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1049561813316413
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      textDirectoryLoader0.setCharSet("@relation");
      Version.MINOR = (-1642);
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(false);
      evaluation0.numFalseNegatives((-1642));
      evaluation0.numInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      instances0.lastIndexOf(evaluation0);
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) logitBoost0;
      try { 
        evaluation0.toClassDetailsString("classifiersTipText");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.731668041939737
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      evaluation0.m_NumTrainClassVals = (-745);
      IBk iBk0 = new IBk((-745));
      iBk0.toString();
      LogitBoost logitBoost0 = new LogitBoost();
      int int0 = evaluation0.m_NumTrainClassVals;
      double double1 = evaluation0.m_MissingClass;
      Evaluation evaluation1 = new Evaluation(instances0);
      textDirectoryLoader0.getDirectory();
      // Undeclared exception!
      try { 
        evaluation0.addNumericTrainClass(0.0, (-745));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -745
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.641941897769324
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = new Instances(instances0, (-1));
      double double0 = evaluation0.m_Unclassified;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.precision(1);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      gaussianProcesses0.getOptions();
      evaluation0.toClassDetailsString();
      evaluation0.toSummaryString(false);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9314830515574797
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      LWL lWL0 = new LWL();
      Evaluation.getGlobalInfo(lWL0);
      evaluation0.equals((Object) null);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.unweightedMicroFmeasure();
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.reset();
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("@relation");
      evaluation0.weightedMatthewsCorrelation();
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteAttributeType((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      PART pART0 = new PART();
      evaluation0.trueNegativeRate((-1));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LogitBoost logitBoost0 = new LogitBoost();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.confusionMatrix();
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4689242585301465
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.numFalseNegatives(0);
      assertEquals(0.0, double0, 0.01);
      
      LogitBoost logitBoost0 = new LogitBoost();
      PART pART0 = new PART();
      Evaluation.makeOptionString(logitBoost0, false);
      double double1 = evaluation0.sizeOfPredictedRegions();
      double double2 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.numTruePositives(73);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double3 = evaluation0.KBInformation();
      assertEquals(0.0, double3, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0134399594822057
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3921682295364994
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-2));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation1.numTrueNegatives((-2));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.avgCost();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = new String[1];
      try { 
        Evaluation.evaluateModel((Classifier) gaussianProcesses0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.887402458770845
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.numFalseNegatives((-2));
      double double0 = evaluation0.weightedMatthewsCorrelation();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setCharSet("@relation");
      textDirectoryLoader0.getDataSet();
      IBk iBk0 = new IBk(2);
      iBk0.toString();
      double double1 = evaluation0.m_MinTarget;
      double double2 = evaluation0.falsePositiveRate(0);
      assertEquals(0.0, double2, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedRecall();
      double double3 = evaluation0.weightedTruePositiveRate();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      evaluation0.m_SumAbsErr = (-2.0);
      evaluation0.equals(evaluation1);
      evaluation0.weightedAreaUnderROC();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteAttributeType((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      PART pART0 = new PART();
      RandomTree randomTree0 = new RandomTree();
      evaluation0.equals(randomTree0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double1, double0, 0.01);
      
      String string0 = Evaluation.getGlobalInfo(randomTree0);
      assertEquals("\nSynopsis for weka.classifiers.trees.RandomTree:\n\nClass for constructing a tree that considers K randomly  chosen attributes at each node. Performs no pruning. Also has an option to allow estimation of class probabilities based on a hold-out set (backfitting).", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6781502623956532
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      evaluation0.weightedMatthewsCorrelation();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.855822103188824
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumRelationalString((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[2] = 0.0;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      evaluation0.updateMargins(doubleArray0, 1, 3105.8);
      double double1 = evaluation0.m_Unclassified;
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.4974540356785377
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk((-2));
      evaluation0.getRevision();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.addNumericTrainClass(2940.0578, 571.98);
      evaluation0.toCumulativeMarginDistributionString();
      LWL lWL0 = new LWL();
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      org.evosuite.runtime.Random.setNextRandom(4);
      evaluation0.addNumericTrainClass(5, 1114.7);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double1 = evaluation0.falseNegativeRate(1);
      assertEquals(0.0, double1, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      evaluation0.numTruePositives((-3609));
      evaluation0.trueNegativeRate(97);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-3146));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      Evaluation.k_MarginResolution = (-2);
      evaluation0.kappa();
      double[] doubleArray0 = new double[9];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1);
      try { 
        Evaluation.evaluateModel((Classifier) gaussianProcesses0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.GaussianProcesses:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -L <double>
         // \tLevel of Gaussian Noise wrt transformed target. (default 1)
         // -N
         // \tWhether to 0=normalize/1=standardize/2=neither. (default 0=normalize)
         // -K <classname and parameters>
         // \tThe Kernel to use.
         // \t(default: weka.classifiers.functions.supportVector.PolyKernel)
         // 
         // Options specific to kernel weka.classifiers.functions.supportVector.PolyKernel:
         // 
         // -D
         // \tEnables debugging output (if available) to be printed.
         // \t(default: off)
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \t(default: checks on)
         // -C <num>
         // \tThe size of the cache (a prime number), 0 for full cache and 
         // \t-1 to turn it off.
         // \t(default: 250007)
         // -E <num>
         // \tThe Exponent to use.
         // \t(default: 1.0)
         // -L
         // \tUse lower-order terms.
         // \t(default: no)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5049407903928866
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      instances0.deleteAttributeType((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.numFalsePositives(0);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.112802484056013
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk((-2));
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.addNumericTrainClass((-1), 571.98);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      LWL lWL0 = new LWL();
      evaluation0.addNumericTrainClass((-2.0), 1);
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(" ", arrayList0, 733);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6804812647266556
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet(".arff");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-40.416578389195);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2.0;
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray1, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.4147017042977548
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.kappa();
      assertEquals(1.0, double1, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (double) (-1);
      evaluation0.updateMargins(doubleArray0, 1, 0.0);
      evaluation0.updateMargins(doubleArray0, 0, (-2));
      assertEquals(1.0, evaluation0.kappa(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      evaluation0.kappa();
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      evaluation0.updateMargins(doubleArray0, 0, 0.0);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1263083539161145
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double1 = evaluation0.numTrueNegatives((-98));
      assertEquals(0.0, double1, 0.01);
      
      Vector<NaiveBayesMultinomialText> vector0 = new Vector<NaiveBayesMultinomialText>();
      instances0.retainAll(vector0);
      String string0 = evaluation0.toMatrixString("@relation");
      assertEquals("@relation\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double2 = evaluation0.unweightedMicroFmeasure();
      double double3 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double3, double2, 0.01);
      
      String string1 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string1);
      
      evaluation0.getClassPriors();
      double double4 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4147017042977548
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.kappa();
      assertEquals(1.0, double1, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (double) (-1);
      evaluation0.updateMargins(doubleArray0, 1, 0.0);
      double[] doubleArray1 = evaluation0.makeDistribution(1.0);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.5074328788566747
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      PART pART0 = new PART();
      evaluation0.numTruePositives((-2));
      String string0 = evaluation0.toClassDetailsString();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.518974051828361
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Object object0 = new Object();
      LWL lWL0 = new LWL();
      TimeZone.getAvailableIDs();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(0);
      evaluation0.KBInformation();
      String string0 = evaluation0.toClassDetailsString(" ");
      assertEquals(" \n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.rootRelativeSquaredError();
      evaluation1.confusionMatrix();
      double[] doubleArray0 = evaluation1.makeDistribution(Double.NaN);
      assertEquals(Double.NaN, evaluation1.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation1.rootMeanPriorSquaredError(), 0.01);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.reset();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.3422378125424395
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFMeanEntropyGain();
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.4480235265253993
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      int int0 = evaluation0.m_NumTrainClassVals;
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation1.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation1.weightedFMeasure();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3687935749982674
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk();
      IBk iBk1 = new IBk();
      Evaluation evaluation1 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation2 = new Evaluation(instances0, costMatrix0);
      assertEquals(0.0, evaluation2.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.4745190939537767
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      evaluation0.kappa();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 110, 679.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("File '");
      Instances instances1 = textDirectoryLoader0.getDataSet();
      IBk iBk0 = new IBk((-1456206972));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1456206972);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1069.0;
      int[] intArray0 = new int[7];
      intArray0[0] = (-1456206972);
      intArray0[2] = 2;
      intArray0[3] = (-1456206972);
      intArray0[4] = (-1456206972);
      intArray0[5] = (-1456206972);
      intArray0[6] = 1;
      SparseInstance sparseInstance0 = new SparseInstance((-1456206972), doubleArray0, intArray0, (-754));
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances1.add((Instance) sparseInstance1);
      iBk0.toString();
      evaluation0.numInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.falsePositiveRate(4);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.evaluateModel((Classifier) naiveBayesMultinomialText0, instances1, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      instances0.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances0);
      Object object0 = new Object();
      evaluation0.KBRelativeInformation();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.SFPriorEntropy();
      MultiScheme multiScheme0 = new MultiScheme();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      Instance instance0 = BallNode.calcCentroidPivot(100, 23, intArray0, instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) multiScheme0, instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      textDirectoryLoader0.setCharSet("File '");
      Instances instances1 = textDirectoryLoader0.getDataSet();
      IBk iBk0 = new IBk((-1456206994));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1456206994);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1456206994);
      intArray0[2] = 1;
      intArray0[3] = (-1456206994);
      intArray0[4] = (-1456206994);
      intArray0[5] = (-1456206994);
      SparseInstance sparseInstance0 = new SparseInstance((-1456206994), doubleArray0, intArray0, (-754));
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances1.add((Instance) sparseInstance1);
      iBk0.toString();
      evaluation0.numInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.falsePositiveRate(4);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.evaluateModel((Classifier) naiveBayesMultinomialText0, instances1, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.4361062274866856
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      evaluation0.fMeasure(481);
      evaluation0.KBRelativeInformation();
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.toClassDetailsString();
      evaluation0.correct();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4575.9087;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 481;
      doubleArray1[3] = 0.0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, (-4100.0));
      SMO sMO0 = new SMO();
      try { 
        evaluation0.evaluateModelOnce((Classifier) sMO0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.890380629973687
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      boolean boolean0 = evaluation0.equals(evaluation0);
      assertTrue(boolean0);
      
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      evaluation0.getClassPriors();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.966472477862128
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-1));
      instances0.randomize(mockRandom0);
      IBk iBk0 = new IBk();
      IBk iBk1 = new IBk();
      iBk1.toString();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.correlationCoefficient();
      double double1 = evaluation0.errorRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.11477503786003
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.areaUnderROC(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      sparseInstance0.setDataset(instances0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      instances0.deleteAttributeType((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      evaluation0.weightedFalseNegativeRate();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(1, testInstances0.getSeed());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.updateStatsForPredictor(2539.931117798547, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falseNegativeRate((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.7302602786175907
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setCharSet("@data");
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      evaluation0.setPriors(instances0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.weightedPrecision();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce((-3576.9524283337223), (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3576
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.912937526517249
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.weightedTruePositiveRate();
      double double0 = evaluation0.weightedAreaUnderPRC();
      evaluation0.SFMeanEntropyGain();
      double double1 = evaluation0.weightedFMeasure();
      double double2 = evaluation0.falseNegativeRate(2);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.weightedRecall();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteAttributeType((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double1, 0.01);
      
      LogitBoost logitBoost0 = new LogitBoost();
      PART pART0 = new PART();
      double double2 = evaluation0.numTruePositives((-1));
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.trueNegativeRate((-2));
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      textDirectoryLoader0.getOptions();
      instances0.stream();
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.avgCost();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7130415601881177
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      textDirectoryLoader0.setCharSet("@relation");
      evaluation0.weightedMatthewsCorrelation();
      IBk iBk0 = new IBk();
      evaluation0.toSummaryString(false);
      try { 
        evaluation0.setPriors(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.2961204233131967
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteAttributeType((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double1, 0.01);
      
      LogitBoost logitBoost0 = new LogitBoost();
      PART pART0 = new PART();
      double double2 = evaluation0.numTruePositives((-2));
      assertEquals(double2, double0, 0.01);
      
      evaluation0.setPriors(instances0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Relational class");
      instances0.deleteAttributeType((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.totalCost();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      String string1 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string1);
      
      evaluation0.setPriors(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.6430782887005804
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      boolean boolean0 = evaluation0.equals(evaluation1);
      assertTrue(boolean0);
      
      Evaluation evaluation2 = new Evaluation(instances1);
      double double0 = evaluation2.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation1.getHeader();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      double double1 = evaluation0.numTrueNegatives((-2));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.errorRate();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double3, 0.01);
      
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumRelationalString((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      Integer integer0 = new Integer((-67));
      evaluation0.numTrueNegatives(1134);
      evaluation0.numFalsePositives((-2));
      evaluation0.kappa();
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.12341771979318
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      double double0 = evaluation0.weightedMatthewsCorrelation();
      IBk iBk0 = new IBk((-667));
      iBk0.toString();
      evaluation0.unweightedMacroFmeasure();
      String string0 = evaluation0.toSummaryString(".arff", true);
      assertEquals(".arff\nTotal Number of Instances                0     \n", string0);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.rootMeanSquaredError();
      assertEquals(double1, double0, 0.01);
      
      evaluation1.setDiscardPredictions(false);
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.7978358662388025
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.fMeasure(481);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.numTrueNegatives(100);
      double double2 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.weightedTruePositiveRate();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.7073509586200628
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("File '");
      Instances instances1 = textDirectoryLoader0.getDataSet();
      IBk iBk0 = new IBk((-1456206972));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1456206972);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1069.0;
      int[] intArray0 = new int[7];
      intArray0[0] = (-1456206972);
      intArray0[2] = 2;
      intArray0[3] = (-1456206972);
      intArray0[4] = (-1456206972);
      intArray0[5] = (-1456206972);
      intArray0[6] = 1;
      SparseInstance sparseInstance0 = new SparseInstance((-1456206972), doubleArray0, intArray0, (-754));
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances1.add((Instance) sparseInstance1);
      iBk0.toString();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.405790674385462
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.toString();
      evaluation0.KBRelativeInformation();
      evaluation0.kappa();
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 122;
      evaluation0.rootMeanSquaredError();
      assertFalse(evaluation0.getDiscardPredictions());
      
      evaluation0.setDiscardPredictions(true);
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.448437455613918
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteAttributeType((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double1, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.7218793833070953
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedAreaUnderPRC();
      double double2 = evaluation0.weightedFMeasure();
      double double3 = evaluation0.KBMeanInformation();
      assertEquals(double3, double2, 0.01);
      
      evaluation0.KBRelativeInformation();
      double double4 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, (Instance) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      textDirectoryLoader0.setCharSet("@relation");
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, ".bsi");
      Evaluation evaluation1 = new Evaluation(instances0);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.0829906738453343
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteAttributeType((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      // Undeclared exception!
      try { 
        evaluation0.recall((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.855822103188824
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LWL lWL0 = new LWL();
      TimeZone.getAvailableIDs();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.recall(1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("@data");
      textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(170.94792889, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      SGD sGD0 = new SGD();
      AbstractClassifier.makeCopies(sGD0, 1);
      J48 j48_0 = new J48();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.3105281046280335
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumKBInfo;
      String string0 = evaluation0.toSummaryString(".bsi", false);
      assertEquals(".bsi\nTotal Number of Instances                0     \n", string0);
      
      evaluation0.kappa();
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(".arff");
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.337827080898473
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation.handleCostOption("", 47);
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      textDirectoryLoader0.setRetrieval((-5));
      evaluation0.falseNegativeRate(1065);
      evaluation0.weightedFMeasure();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1065;
      doubleArray0[1] = (double) 47;
      doubleArray0[2] = (double) 47;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      textDirectoryLoader0.setCharSet("@relation");
      evaluation0.weightedMatthewsCorrelation();
      IBk iBk0 = new IBk();
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.correlationCoefficient();
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.914800646287002
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.truePositiveRate(510);
      Instances instances2 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.listOptions();
      textDirectoryLoader0.setOutputFilename(false);
      evaluation0.numFalseNegatives(3);
      evaluation0.numInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      double[] doubleArray0 = new double[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(510, doubleArray0);
      instances2.add((Instance) binarySparseInstance0);
      int int0 = evaluation0.m_NumClasses;
      evaluation0.KBInformation();
      evaluation0.toSummaryString();
      evaluation0.rootRelativeSquaredError();
      binarySparseInstance0.toStringNoWeight();
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      evaluation0.num2ShortID(1, charArray0, 1);
      org.evosuite.runtime.Random.setNextRandom(1584);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      IBk iBk0 = new IBk();
      iBk0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumKBInfo;
      String string0 = evaluation0.toSummaryString("@data", true);
      assertEquals("@data\nTotal Number of Instances                0     \n", string0);
      
      double double1 = evaluation0.kappa();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      LogitBoost logitBoost0 = new LogitBoost();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LogitBoost logitBoost1 = new LogitBoost();
      int int0 = 2484;
      AbstractClassifier.makeCopies(logitBoost1, 2484);
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.15133290117123
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.truePositiveRate(510);
      Instances instances2 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.listOptions();
      textDirectoryLoader0.setOutputFilename(false);
      evaluation0.numFalseNegatives(3);
      evaluation0.numInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      double[] doubleArray0 = new double[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(510, doubleArray0);
      instances2.add((Instance) binarySparseInstance0);
      evaluation0.toSummaryString();
      evaluation0.rootRelativeSquaredError();
      evaluation0.KBMeanInformation();
      evaluation0.addNumericTrainClass(0.0, 3215.79);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-1));
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumRelationalString((-4));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.addNumericTrainClass((-4), (-1));
      String string0 = evaluation0.toMatrixString("\tThe exponent for the polynomial kernel.\n\t(default 1)");
      assertEquals("\tThe exponent for the polynomial kernel.\n\t(default 1)\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk((-2));
      evaluation0.getRevision();
      LogitBoost logitBoost0 = new LogitBoost();
      instances0.lastIndexOf(iBk0);
      evaluation0.KBMeanInformation();
      evaluation0.addNumericTrainClass(4, 1);
      try { 
        Evaluation.evaluateModel((Classifier) iBk0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.lazy.IBk:
         // 
         // -I
         // \tWeight neighbours by the inverse of their distance
         // \t(use when k > 1)
         // -F
         // \tWeight neighbours by 1 - their distance
         // \t(use when k > 1)
         // -K <number of neighbors>
         // \tNumber of nearest neighbours (k) used in classification.
         // \t(Default = 1)
         // -E
         // \tMinimise mean squared error rather than mean absolute
         // \terror when using -X option with numeric prediction.
         // -W <window size>
         // \tMaximum number of training instances maintained.
         // \tTraining instances are dropped FIFO. (Default = no window)
         // -X
         // \tSelect the number of nearest neighbours between 1
         // \tand the k value specified using hold-one-out evaluation
         // \ton the training data (use when k > 1)
         // -A
         // \tThe nearest neighbour search algorithm to use (default: weka.core.neighboursearch.LinearNNSearch).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk((-2));
      evaluation0.getRevision();
      instances0.lastIndexOf(iBk0);
      evaluation0.KBMeanInformation();
      evaluation0.addNumericTrainClass(4, 1);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteAttributeType((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel("@data", instances0, (-2), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @data
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setRetrieval(640);
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-2867));
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1078.4693), doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteAttributeType((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      try { 
        Evaluation.evaluateModel((Classifier) attributeSelectedClassifier0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.AttributeSelectedClassifier:
         // 
         // -E <attribute evaluator specification>
         // \tFull class name of attribute evaluator, followed
         // \tby its options.
         // \teg: \"weka.attributeSelection.CfsSubsetEval -L\"
         // \t(default weka.attributeSelection.CfsSubsetEval)
         // -S <search method specification>
         // \tFull class name of search method, followed
         // \tby its options.
         // \teg: \"weka.attributeSelection.BestFirst -D 1\"
         // \t(default weka.attributeSelection.BestFirst)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.J48)
         // 
         // Options specific to classifier weka.classifiers.trees.J48:
         // 
         // -U
         // \tUse unpruned tree.
         // -O
         // \tDo not collapse tree.
         // -C <pruning confidence>
         // \tSet confidence threshold for pruning.
         // \t(default 0.25)
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // \t(default 2)
         // -R
         // \tUse reduced error pruning.
         // -N <number of folds>
         // \tSet number of folds for reduced error
         // \tpruning. One fold is used as pruning set.
         // \t(default 3)
         // -B
         // \tUse binary splits only.
         // -S
         // \tDon't perform subtree raising.
         // -L
         // \tDo not clean up after the tree has been built.
         // -A
         // \tLaplace smoothing for predicted probabilities.
         // -J
         // \tDo not use MDL correction for info gain on numeric attributes.
         // -Q <seed>
         // \tSeed for random data shuffling (default 1).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet(".arff");
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) logitBoost0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteAttributeType((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      PART pART0 = new PART();
      evaluation0.numTruePositives(1857);
      evaluation0.trueNegativeRate((-3146));
      SparseInstance sparseInstance0 = new SparseInstance(1857);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) pART0, (Instance) sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.KBInformation();
      DenseInstance denseInstance0 = new DenseInstance(0);
      KStar kStar0 = new KStar();
      try { 
        evaluation0.evaluateModelOnce((Classifier) kStar0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, (-245.93));
      double double0 = evaluation0.SFMeanEntropyGain();
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.525267847901878
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.SFMeanEntropyGain();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.KBInformation();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = (-1);
      intArray0[2] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, intArray0, (-1));
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.9714549503478573
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      try { 
        evaluation0.evaluateModel((Classifier) additiveRegression0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0);
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      boolean boolean0 = evaluation1.equals(hierarchicalClusterer0);
      assertTrue(evaluation1.equals((Object)evaluation0));
      assertFalse(boolean0);
      
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      textDirectoryLoader0.setCharSet("@relation");
      evaluation0.weightedMatthewsCorrelation();
      IBk iBk0 = new IBk();
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.correlationCoefficient();
      try { 
        evaluation0.toMatrixString(":_EA7NFLS ?");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.402127258721947
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      instances0.deleteAttributeType((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String string0 = evaluation0.toMatrixString(".arff");
      assertEquals(".arff\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double1 = evaluation0.numFalsePositives((-1));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.areaUnderPRC((-1));
      assertNotEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Integer integer0 = new Integer((-3155));
      evaluation0.SFMeanPriorEntropy();
      evaluation0.numTrueNegatives(2);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      try { 
        evaluation0.evaluateModel((Classifier) naiveBayesMultinomialUpdateable0, instances0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Logistic logistic0 = new Logistic();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String[] stringArray0 = new String[1];
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.evaluateModel((Classifier) serializedClassifier0, instances0, (Object[]) stringArray0);
      double double0 = evaluation0.weightedRecall();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Logistic logistic0 = new Logistic();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String[] stringArray0 = new String[0];
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.evaluateModel((Classifier) serializedClassifier0, instances0, (Object[]) stringArray0);
      evaluation0.weightedRecall();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.reset();
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("@relation");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setOutputFilename(true);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.numFalseNegatives(854);
      evaluation0.numInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      instances0.lastIndexOf(logitBoost0);
      evaluation0.numTrueNegatives(13);
      evaluation0.numInstances();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-753.3513830519421));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.1346568241817123
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.reset();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(1000.0, 15.04253856929075);
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.errorRate();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Evaluation.handleCostOption((String) null, (-2));
      REPTree rEPTree0 = new REPTree();
      assertEquals(2.0, rEPTree0.getMinNum(), 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.reset();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      textDirectoryLoader0.setCharSet("abstract");
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances0);
      Object object0 = new Object();
      evaluation0.SFEntropyGain();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      assertFalse(gaussianProcesses0.getDebug());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.8466435205545344
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      IBk iBk0 = new IBk(95);
      iBk0.toString();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.reset();
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("@relation");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-40.416578389195);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumSqrClass = 0.3183098861837907;
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(19, false, false);
      String string0 = Evaluation.makeOptionString(simpleLogistic0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      String string1 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string1);
      
      evaluation0.correct();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-2));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.unclassified();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Xu", arrayList0, 1);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.6271230636904
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2101));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.toClassDetailsString();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation0.weightedTrueNegativeRate();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) gaussianProcesses1, instances0, 0, (Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      
      double double1 = evaluation0.falseNegativeRate((-569));
      double double2 = evaluation0.falsePositiveRate((-2));
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      try { 
        Evaluation.handleCostOption("getShrinkage", 86);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.7221489918454203
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      textDirectoryLoader0.setCharSet("@relation");
      Evaluation evaluation1 = new Evaluation(instances0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID(7, charArray0, (-293));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.5627467454959394
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      instances0.replaceAll(unaryOperator0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.matthewsCorrelationCoefficient((-2));
      evaluation0.addNumericTrainClass((-10.0), (-10.0));
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = 'R';
      charArray0[2] = ']';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1), charArray0, 84);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumRelationalString(1212);
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = '{';
      charArray0[2] = '#';
      evaluation0.num2ShortID(15, charArray0, 12);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      evaluation0.SFSchemeEntropy();
      evaluation0.unweightedMacroFmeasure();
      REPTree rEPTree0 = new REPTree();
      assertFalse(rEPTree0.getNoPruning());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = new Instances(instances0, (-1));
      int int0 = 357;
      MockRandom mockRandom0 = new MockRandom();
      ZeroR zeroR0 = new ZeroR();
      try { 
        evaluation0.crossValidateModel((Classifier) zeroR0, instances1, 357, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostMatrix costMatrix0 = new CostMatrix(10);
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClass;
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      evaluation1.kappa();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation1.updateMargins(doubleArray0, (-1778), 1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1778
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Evaluation.handleCostOption("", (-409));
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.evaluateModel(" ", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name  .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, "setLikelihoodThreshold");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      instances0.deleteAttributeType((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.reset();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      AbstractClassifier.makeCopies(gaussianProcesses0, 0);
      double double0 = evaluation0.truePositiveRate(1);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.totalCost();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TimeZone.getAvailableIDs(0);
      evaluation0.toMatrixString();
      evaluation0.unweightedMacroFmeasure();
      String[] stringArray0 = testInstances0.getOptions();
      assertEquals(40, stringArray0.length);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Instances instances0 = null;
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "6i+ ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      instances0.deleteAttributeType((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk((-2));
      evaluation0.getRevision();
      LogitBoost logitBoost0 = new LogitBoost();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        Evaluation.evaluateModel((Classifier) logitBoost0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.LogitBoost:
         // 
         // -Q
         // \tUse resampling instead of reweighting for boosting.
         // -P <percent>
         // \tPercentage of weight mass to base training on.
         // \t(default 100, reduce to around 90 speed up)
         // -F <num>
         // \tNumber of folds for internal cross-validation.
         // \t(default 0 -- no cross-validation)
         // -R <num>
         // \tNumber of runs for internal cross-validation.
         // \t(default 1)
         // -L <num>
         // \tThreshold on the improvement of the likelihood.
         // \t(default -Double.MAX_VALUE)
         // -H <num>
         // \tShrinkage parameter.
         // \t(default 1)
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.trees.DecisionStump:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk((-1456206972));
      iBk0.toString();
      evaluation0.numInstances();
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }
}
