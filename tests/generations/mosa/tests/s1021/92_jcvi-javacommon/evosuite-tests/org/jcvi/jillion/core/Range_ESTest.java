/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 21:13:09 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9782399831213344
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 65535L, 65535L);
      range_Builder1.build();
      Range range0 = range_Builder1.build();
      Object object0 = new Object();
      Object object1 = new Object();
      range_Builder0.expandEnd(1L);
      range0.equals((Object) null);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.5425461531384412
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483656L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1L));
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range1.complement(range0);
      range_Builder1.expandEnd(2147483646L);
      range0.equals(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range1));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4131656925981932
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 65568L;
      Range range0 = Range.of(65568L, 4294967283L);
      // Undeclared exception!
      range0.split(long0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Long long0 = new Long(4294967295L);
      Range range0 = Range.of(4294967295L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.8969194931939213
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483638L);
      Range.Builder range_Builder0 = new Range.Builder(2147483638L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder0.contractBegin((-1L));
      Range range1 = range_Builder2.build();
      range_Builder1.shift(2567L);
      range1.complement(range0);
      range_Builder2.expandEnd(2147483646L);
      range0.equals(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.of((-1L), 127L);
      List<Range> list0 = new LinkedList<Range>();
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(1L, 4294967295L);
      long long0 = range0.getLength();
      assertEquals(4294967295L, long0);
      
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(65559L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long((-650L));
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.getLength();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-32768L), 127L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5129354592085917
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(2153L, 20002L);
      Range range1 = Range.of(20002L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(65559L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(65535L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(255L);
      assertFalse(range1.isEmpty());
      
      long long0 = range0.getLength();
      assertEquals(9223372036854710273L, long0);
      
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.7004606329133596
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 65535L);
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(65529L);
      Range range2 = range1.intersection(range0);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
      
      Range range3 = range0.intersection(range1);
      assertSame(range1, range2);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7959184263273786
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 65535L, 65535L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range1.equals(object2);
      assertFalse(boolean0);
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 65535 .. 65535 ]/SB", string0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.059686199566801
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(1084L, 65517L);
      Range range1 = Range.of(617L, 65517L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.9041524501084415
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(1L, 65535L);
      Range range1 = range_Builder0.build();
      Range range2 = range_Builder0.build();
      List<Range> list0 = range0.complement(range2);
      range1.complement(range2);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(range_Builder0);
      List<Range> list1 = range2.complement(range1);
      assertFalse(list1.equals((Object)list0));
      assertEquals(0, list1.size());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1337941717205218
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-2147483669L), (-2147483669L));
      Range range1 = Range.of((-2147483669L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9795303057019797
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Long long0 = new Long(1L);
      Range range1 = Range.of(1L, 1L);
      range1.equals((Object) null);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.6167553406250117
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of((-2147483669L), 2130L);
      Range range1 = Range.of((-2147483669L));
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-1L), 4294967295L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2672123781537596
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range range1 = Range.of((-2147483648L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3883309415696345
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of((-2147483669L));
      Range range1 = Range.of((-2147483669L), 255L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range1));
      assertEquals(1, list0.size());
      
      range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2354L, 9223372036854775131L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2660952157462746
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1563L), (-1563L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(1L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.204400566065714
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.of((-1L), (-1L));
      Range range2 = Range.of(1091L, 4294967295L);
      long long0 = range1.getLength();
      assertSame(range1, range0);
      assertEquals(1L, long0);
      
      range2.equals((Object) null);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.357284162522736
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.8100231190722407
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-650L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-650L), long0);
      
      Range range1 = Range.of(range_CoordinateSystem0, (-650L), 32767L);
      List<Range> list0 = range0.complement(range1);
      boolean boolean0 = range0.equals(list0);
      assertFalse(boolean0);
      assertEquals(0, list0.size());
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372034707292161L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.9698337391780663
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.of((-117L), (-117L));
      range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.getBegin();
      linkedList0.push(range1);
      Range range2 = Range.of((-2764L));
      linkedList0.add(range1);
      linkedList0.add(range2);
      range0.getBegin();
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.parseRange("BdZyx,5T2-f8h_onr5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse BdZyx,5T2-f8h_onr5 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(4294967315L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.4279783730534703
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1563L), (-1563L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.4964675807012235
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.ofLength(8L);
      Range range1 = Range.of(8L, 8L);
      Range range2 = Range.of(255L);
      assertFalse(range2.isEmpty());
      
      long long0 = new Long(8L);
      range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertNotSame(range1, range2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1563L), (-1563L));
      Range range1 = Range.of((-1563L));
      long long0 = range1.getLength();
      //  // Unstable assertion: assertEquals(0L, long0);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range2 = range1.asRange();
      //  // Unstable assertion: assertTrue(range2.equals((Object)range0));
      //  // Unstable assertion: assertNotSame(range2, range0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1563L), (-1563L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = range0.equals(range0);
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.7034373757945303
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      assertTrue(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(0L);
      Range range1 = Range.of((-1L));
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      Range range2 = Range.of((-128L), 0L);
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.060601531374581
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(9223372036854773149L);
      Range range1 = Range.of((-2147483646L));
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        range1.complement(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483646 would make range [9223372036854773149 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(127L, 2147483647L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Long long0 = new Long(2147483647L);
      long long1 = (-2720L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2140L), (-2720L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.776926127571686
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.of((-1L));
      range0.intersection(range1);
      Range range2 = Range.of((-1L));
      long long0 = range2.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.equals(range2);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertTrue(range0.isEmpty());
      assertTrue(list0.contains(range1));
      assertSame(range1, range2);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3274662176194347
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(1232L, 4294967295L);
      Range range1 = Range.of(4294967295L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      range0.equals(range1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = 65535L;
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, (-194L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -194 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.798311588720541
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.269630142358124
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of(255L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.ofLength(255L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Long long0 = new Long(4294967297L);
      Range range0 = Range.ofLength(9223372036854774999L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967297L, 9223372036854774999L);
      assertFalse(range1.isEmpty());
      
      range0.equals(long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.6620676280516897
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(2177L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2177L, 2177L);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      long long0 = range1.getLength();
      //  // Unstable assertion: assertEquals(0L, long0);
      //  // Unstable assertion: assertSame(range1, range2);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.20243222357412
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.of(9223372036854774999L, 9223372036854774999L);
      Range range0 = Range.of(922L, 9223372036854774999L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(9223372036854774999L, 9223372036854774999L);
      range0.equals("G]s^iD");
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.633146798088774
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Long long0 = new Long(2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.387726255250662
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.386495788903917
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.of((-1L));
      Range range2 = Range.of((-1L), (-1L));
      range0.equals(range1);
      boolean boolean0 = range2.intersects(range0);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.79438837168257
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.590196429669651
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.of((-1L), (-1L));
      List<Range> list0 = range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.getBegin();
      linkedList0.push(range0);
      Range range2 = Range.of((-1L));
      linkedList0.add(range1);
      long long0 = range1.getBegin();
      assertEquals((-1L), long0);
      
      range1.complementFrom(linkedList0);
      assertTrue(linkedList0.contains(range2));
      
      range0.complementFrom(list0);
      assertEquals(0, list0.size());
      
      Range range3 = range0.intersection(range1);
      assertSame(range3, range2);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.0587765179553648
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of((-15L), (-7L));
      Range range1 = Range.of((-15L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774999L);
      boolean boolean0 = range0.equals("G]s^iD");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.823261770850257
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483638L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1L));
      Range range1 = range_Builder1.build();
      range_Builder0.shift(2567L);
      range1.complement(range0);
      range_Builder1.expandEnd(2147483646L);
      range0.equals(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range1));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.979856144737496
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Object object0 = new Object();
      range0.equals(object0);
      Long long0 = new Long(3675L);
      Range.Builder range_Builder0 = new Range.Builder((-1L), 2147483647L);
      range_Builder0.expandBegin(3675L);
      range_Builder0.expandBegin((-1L));
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.589066168773334
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-4322L), 65535L);
      range0.complement(range1);
      range0.getLength();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.0587765179553648
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of((-7L), (-7L));
      Range range1 = Range.of((-7L));
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.6336760341109677
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(19988L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 19988 .. 19988 ]/0B", string0);
      
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      Range range1 = Range.parseRange("[ 19988 .. 19988 ]/0B");
      assertSame(range1, range0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.059202231024756
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(788L);
      Range range1 = Range.of((-2147483648L));
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3274662176194347
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(1L, 4294967295L);
      Range range1 = Range.of(1L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.370119061208534
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Long long0 = new Long(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.4365620482095713
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of((-7L), (-1L));
      Range range1 = Range.of((-1L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.7279123310409545
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1020L, 9993L);
      Range range0 = Range.of(9993L);
      Range range1 = Range.ofLength(1020L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.6912004809506773
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of((-2147483669L));
      Range range1 = Range.of((-2147483669L));
      boolean boolean0 = range1.equals("length can not be negative");
      assertSame(range1, range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Long long0 = new Long(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.441320022969487
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      range0.getLength();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Long long0 = new Long(2147483647L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-2727L), (-540L));
      range0.getLength();
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.0587765179553648
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of((-7L), (-1L));
      Range range1 = Range.of((-1L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.3286261880929136
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.of((-1L));
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range2 = Range.ofLength(0L);
      long long0 = range0.getEnd();
      assertSame(range0, range2);
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.7224638219780135
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-637L), 32784L);
      Range range1 = Range.of(1L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range0);
      assertTrue(range0.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(2120L, 4294967297L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.3357153316356083
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of((-7L), 18L);
      Long long0 = new Long(9223372036854774999L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.796091586500539
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      range1.equals(range0);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.contains(range0));
      assertTrue(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.129966420524349
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(127L, 127L);
      Range range0 = Range.of(127L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(4294967312L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.676012534252088
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-650L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-650L), (-650L));
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      range1.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.6929510730627153
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-32768L));
      Range range2 = Range.of((-2631L));
      boolean boolean0 = range2.equals(range0);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
      assertSame(range0, range1);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(3957L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.623394240011706
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-1L), 4294967295L);
      String string0 = range0.toString();
      assertEquals("[ -1 .. 4294967295 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("[ -1 .. 4294967295 ]/0B", range_CoordinateSystem0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.1356178217257975
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.873283741528966
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2280L, 2280L);
      Range range1 = Range.of((-1839L));
      range0.complement(range1);
      range0.endsBefore(range1);
      range_CoordinateSystem0.getAbbreviatedName();
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.059454851967032
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-1269L), (-1269L));
      Range range1 = Range.of((-1269L));
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      
      Long.getLong("");
      range1.equals((Object) null);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.2244600795408203
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Long long0 = new Long(1L);
      Range range1 = Range.of(1L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-774L));
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.4200481249958505
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(78L);
      range0.spliterator();
      Range range1 = Range.of((-1168L));
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.7149543786878465
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(127L, 32767L);
      Range range0 = range_Builder0.build();
      Range.of(32767L, 32767L);
      Range range1 = Range.ofLength(2944L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.493339929056383
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(19988L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.1547558621110463
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774999L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.261241170292731
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(8L);
      Range range1 = Range.of(32767L);
      Range.of((-2684L));
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.1029322576989924
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(788L);
      Range range1 = Range.of((-2147483648L));
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.589789320526234
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.ofLength(4294967314L);
      Range range1 = Range.of(242L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of((-1L));
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.422606607367115
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of(809L, 809L);
      Range range1 = Range.of((-1L));
      long long0 = new Long(809L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.344292840121332
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.ofLength(4294967295L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.328262849006711
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(0L, 0L);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.2674340830645234
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.06633045170451
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(606L, 606L);
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(65535L);
      Range.Builder range_Builder0 = new Range.Builder();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.263456771844257
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of(78L, 78L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(78L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.691730071841714
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-2147483669L));
      Range range1 = Range.of((-2147483669L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.5369422238626655
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.of(4294967295L, 4294967295L);
      Range range1 = range0.asRange();
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.354100214318228
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(1756L, 1756L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.24418990450938
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      long long0 = range0.getEnd();
      assertEquals((-2147483648L), long0);
      
      Range range1 = Range.of((-2147483648L));
      assertSame(range1, range0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      long long0 = range0.getEnd();
      assertEquals(4294967294L, long0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.324647836540123
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of(9223372036854774999L, 9223372036854774999L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854775000L, long0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.2643476461270504
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(2147483647L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.ofLength(0L);
      long long0 = range1.getLength();
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.2805901879972827
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Long long0 = new Long(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range1.endsBefore(range0);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.4921351512518326
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(463L, 463L);
      Range range1 = Range.of(3188L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(2280L, 2280L);
      List<Range> list0 = range0.split(2280L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.1159572496416303
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-3536L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.340986344011985
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.of(2147483647L);
      Long long0 = new Long(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 9223372036854775570L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775570L, (-1849L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1850 would make range [9223372036854775570 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775566L, (-4294964499L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4294964499 would make range [9223372036854775566 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.4419999547761964
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of(1L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.539259279828685
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      
      range_CoordinateSystem0.toString();
      range1.iterator();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.2113352785938525
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854774999L, 9223372036854774999L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372036854774999 .. 9223372036854774999 ]/RB", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.2947356610848955
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-2147483647L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.386182706029501
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-811L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.3976800595209387
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of((-2147483639L), (-2147483639L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.2668415958029997
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-659L), 32784L);
      Range range1 = Range.of(1L);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-590L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(65535L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(65535L, long0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.2682408961528244
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of(2274L);
      Range.of(2274L);
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-32768L));
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.4406221852733103
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of(2130L);
      Range range1 = Range.ofLength(2130L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(2274L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.5631148128301753
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      List<Range> list0 = range0.split(1L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.2046944964042234
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of((-1L), 64901L);
      List<Range> list0 = range0.split(64901L);
      assertFalse(list0.contains(range0));
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.7346412007107
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(1091L, 4294967295L);
      List<Range> list0 = range0.split(4294967295L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.6330311617419575
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.ofLength(4294967314L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.4954595373955137
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.of(2177L);
      long long0 = range0.getBegin();
      assertEquals(2177L, long0);
      
      Range range1 = Range.of(0L, 2177L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.4931681709898883
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of((-3027L));
      range0.spliterator();
      long long0 = range0.getBegin();
      assertEquals((-3027L), long0);
      
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.30273127777412
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.of((-32768L));
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-2113L));
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of((-71L), (-71L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of((-71L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.4567394045567017
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.of((-1L), (-1L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(2567L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.135617821725798
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.iterator();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.06633045170451
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.9950339055202577
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-1L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of((-2147483669L));
      // Undeclared exception!
      try { 
        range0.split((-2147483669L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2147483648L), long0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.2641141459685947
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.of(2274L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2274L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.117041440123302
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      range_Builder0.expandEnd(0L);
      Long long1 = new Long(0L);
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-32768L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.9769701418514933
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483638L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractBegin((-1L));
      // Undeclared exception!
      try { 
        Range.of(4294967283L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.getBegin();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(505L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.1296233673511074
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(1034L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.4572291706616958
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=3.388207255731663
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range range0 = Range.of((-137L), (-137L));
      Range range1 = Range.of((-137L));
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertSame(range1, range0);
      assertTrue(list1.isEmpty());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("G]s^iD", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse G]s^iD into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-1168L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=3.094102065957274
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range.of(9223372036854775807L);
      Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=3.249220676740128
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range range0 = Range.ofLength(8L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder(8L);
      Range range1 = Range.of(0L);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=3.3177124373321116
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2354L, 9223372036854775131L);
      range_Builder0.build();
      Range range0 = Range.of(9223372036854775131L, 9223372036854775131L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 255L, (-846L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(3714L, (-2733L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Range range0 = Range.ofLength(65559L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 171
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Range range0 = Range.of((-21L), 26L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 172
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Range range0 = Range.of((-2818L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 173
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 22L, 22L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 174
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Range range0 = Range.of((-1264L), (-1264L));
      assertFalse(range0.isEmpty());
  }
}
