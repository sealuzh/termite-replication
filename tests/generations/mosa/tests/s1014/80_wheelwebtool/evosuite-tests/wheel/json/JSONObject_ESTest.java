/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 12:12:46 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.2401546837370474
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject.getNames((Object) "");
      Short short0 = new Short((short) (-1246));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("&ss!nYD|2gn>{;,r;n", (-3030.7898));
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("Ku8GRczxUwcBj#", (Collection) linkedList0);
      jSONObject0.optJSONArray("Ku8GRczxUwcBj#");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9908765816912628
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a JSONArray.", true);
      jSONObject0.getBoolean("] is not a JSONArray.");
      try { 
        jSONObject0.get("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSON does not allow non-finite numbers.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7242986702781118
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "iscopyVa$lueOf";
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("iscopyVa$lueOf", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3128868859883003
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("70~_Zfa-gd~Q");
      JSONObject jSONObject1 = jSONObject0.putOpt("70~_Zfa-gd~Q", boolean0);
      boolean boolean1 = jSONObject1.getBoolean("70~_Zfa-gd~Q");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.708098876326541
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.getNames(object0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 1263, 1263);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4026129204084
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject.quote("L~D$jn';|?<R9Q'YuW");
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4092847159802617
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wap(\"!\"BGYcC;", 728);
      jSONObject0.optDouble("wap(\"!\"BGYcC;");
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8552365847428796
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("vXt5:HE`eL+n>LXT", (-1552));
      jSONObject1.optDouble("vXt5:HE`eL+n>LXT");
      jSONObject1.toString((-1552));
      JSONObject jSONObject2 = new JSONObject("{\n\"java.lang.String@0000000004\": java.lang.Integer@0000000005,\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}");
      JSONObject.getNames(jSONObject1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.418256103242904
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("*", (Collection) linkedList0);
      jSONObject0.accumulate("{", linkedList0);
      jSONObject1.toString((-1697), (-1697));
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      jSONObject1.put("*", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("*");
      assertNotSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7161375354203159
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject1 = jSONObject0.putOpt("707;*", boolean0);
      boolean boolean1 = jSONObject1.optBoolean("707;*");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5428866763466784
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject1 = jSONObject0.put("0", (Map) hashMap0);
      jSONObject0.names();
      JSONObject jSONObject2 = jSONObject1.optJSONObject("0");
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.putOpt("gnull", boolean0);
      boolean boolean1 = jSONObject0.optBoolean("gnull");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      Boolean boolean0 = new Boolean(false);
      jSONObject0.accumulate("{{j%A3q,\"TlJI-", boolean0);
      int int0 = (-1690);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{{j%A3q,\"TlJI-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {{j%A3q,\"TlJI-
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.723732057793946
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 1185);
      jSONObject0.getLong(",:]}/\"[{;=#");
      JSONObject jSONObject2 = jSONObject1.putOpt(",:]}/\"[{;=#", jSONObject0);
      jSONObject2.accumulate(",:]}/\"[{;=#", hashMap0);
      JSONObject jSONObject3 = jSONObject1.putOpt("eljOH?sv", "eljOH?sv");
      JSONObject.doubleToString((-1.0));
      jSONObject3.optJSONArray("V");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject1, 1185, (-1));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.932625171221131
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("getgetJSONArray");
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject.quote((String) null);
      JSONObject jSONObject1 = jSONObject0.put("getgetJSONArray", 0L);
      jSONObject1.getLong("getgetJSONArray");
      jSONObject0.getDouble("getgetJSONArray");
      jSONObject0.optDouble("getgetJSONArray");
      JSONObject.valueToString(object0);
      boolean boolean0 = true;
      jSONObject0.put("\"java.lang.Object@0000000004\"", (Object) "\"java.lang.Object@0000000004\"");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2937601858869376
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] not found.", 0L);
      jSONObject1.getDouble("] not found.");
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7881502068860127
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("toS", 6);
      int int0 = jSONObject2.optInt("toS");
      assertEquals(6, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.optString("", "");
      String string0 = jSONObject0.toString(4, 4);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.443146874965715
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("is", (Collection) linkedList1);
      Float float0 = new Float(Double.NaN);
      Float.min(0.0F, 0.0F);
      linkedList1.add(float0);
      String string0 = "jse=k";
      JSONObject jSONObject2 = jSONObject1.accumulate("jse=k", linkedList1);
      try { 
        jSONObject2.toString((-1690), (-1690));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("true", "true");
      boolean boolean0 = jSONObject0.optBoolean("true");
      assertTrue(boolean0);
      
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5995350797109884
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("JSONArra initial value houldbe a string or collection or array.", "JSONArra initial value houldbe a string or collection or array.");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "JSONArra initial value houldbe a string or collection or array.";
      stringArray0[1] = "JSONArra initial value houldbe a string or collection or array.";
      stringArray0[2] = "JSONArra initial value houldbe a string or collection or array.";
      stringArray0[3] = "JSONArra initial value houldbe a string or collection or array.";
      stringArray0[4] = "JSONArra initial value houldbe a string or collection or array.";
      jSONObject1.put("C/6", 3154);
      stringArray0[5] = "JSONArra initial value houldbe a string or collection or array.";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.has("JSONArra initial value houldbe a string or collection or array.");
      Iterator iterator0 = jSONObject1.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArr5y.", (Collection) linkedList0);
      jSONObject1.append("] is not a JSONArr5y.", jSONObject0);
      try { 
        jSONObject0.getJSONObject("] is not a JSONArr5y.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArr5y.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1506719848487332
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.append("Qi(;", jSONObject1);
      JSONArray jSONArray0 = jSONObject2.optJSONArray("Qi(;");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.40032425924049
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("iscopyVa$lueOf", object0);
      jSONObject1.optBoolean("iscopyVa$lueOf");
      String string0 = jSONObject0.getString("iscopyVa$lueOf");
      assertNotNull(string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7988457068767891
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.getString("</B;xCh7t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<\\/B;xCh7t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1018193057530503
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("707;*", "707;*");
      JSONObject.valueToString("707;*");
      try { 
        jSONObject1.getDouble("707;*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"707;*\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      HashMap<JSONObject, Long> hashMap0 = new HashMap<JSONObject, Long>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7332674260787053
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject.quote("V23.p6+");
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("V23.p6+", "V23.p6+");
      Double double0 = new Double(1.0);
      JSONObject jSONObject2 = new JSONObject(double0);
      JSONObject jSONObject3 = jSONObject1.put("JSON does not allow non-finite numbers.", 1.0);
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(0L);
      Long.max(0L, 0L);
      JSONObject jSONObject4 = jSONObject2.accumulate("toJ", long0);
      JSONObject jSONObject5 = new JSONObject(jSONArray0);
      jSONObject5.toString(30, 30);
      jSONObject3.toJSONArray(jSONArray0);
      jSONObject0.getInt("JSON does not allow non-finite numbers.");
      jSONObject4.put("{\"java.lang.String@0000000017\": \"java.lang.Class@0000000018\"}", (Object) "JSON does not allow non-finite numbers.");
      assertEquals(5, jSONObject4.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("null", "null");
      jSONObject0.optBoolean(",:]}/\"[{;=#");
      jSONObject1.names();
      try { 
        jSONObject0.append("null", "null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[null] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("\n", object0);
      jSONObject1.optBoolean("\n");
      try { 
        jSONObject0.append("\n", "\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[
         // ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "Qi(;";
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.addLast(jSONObject0);
      jSONObject0.put("Qi(;", (Collection) linkedList0);
      jSONObject0.getJSONArray("Qi(;");
      try { 
        jSONObject0.getLong("Qi(;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Qi(;\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("707;*", jSONArray0);
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject1.optBoolean("707;*");
      JSONArray jSONArray1 = jSONObject0.getJSONArray("707;*");
      assertEquals(0, jSONArray1.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.680917130983091
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(32);
      JSONObject jSONObject1 = jSONObject0.putOpt("getcompare", double0);
      jSONObject0.optLong("getcompare");
      JSONObject.quote("getcompare");
      jSONObject1.toString();
      JSONObject jSONObject2 = jSONObject0.optJSONObject("\"getcompare\"");
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5714800659095065
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Float float0 = new Float((-1137.2));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "29'2D[Oo";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      jSONObject0.toString((-1));
      jSONObject0.put("29'2D[Oo", (Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      try { 
        jSONObject0.getJSONArray("29'2D[Oo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"29'2D[Oo\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0385256208092843
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Double double0 = new Double(682.2327584062592);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Float float0 = new Float(4087.66F);
      hashMap0.put(float0, "key");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.430758633903798
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.clone();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("*\"hAJ[C*w9!a,=2M", (-1652.91865404));
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject1.optLong("*\"hAJ[C*w9!a,=2M");
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.names();
      try { 
        jSONObject0.getBoolean("Y/N2q8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Y/N2q8\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.15022055411895
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (-978));
      jSONObject0.optLong("", 1127L);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.024436576861065
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("707;*", "707;*");
      try { 
        jSONObject0.getBoolean("707;*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"707;*\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9475649295046367
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("\n", jSONObject0);
      try { 
        jSONObject1.getBoolean("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\n\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.424943714670272
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.optString("na", (String) null);
      try { 
        jSONObject0.accumulate((String) null, "na");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.434799037944202
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong(",\n");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.toString(105, 363);
      jSONObject0.put("{}", (-2456));
      jSONObject0.toString(105);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("[]", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject.quote("3(y'DK*C-Mp6{");
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.282325506963904
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("vXt5:HE`eL+n>LXT", (-1552));
      String string0 = jSONObject1.toString((-1552));
      JSONObject jSONObject2 = new JSONObject("{\n\"java.lang.String@0000000004\": java.lang.Integer@0000000005,\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}");
      String string1 = JSONObject.quote("{\n\"java.lang.String@0000000004\": java.lang.Integer@0000000005,\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.9930083118246225
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Float float0 = new Float(19.77270136);
      JSONObject jSONObject0 = new JSONObject(float0);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      jSONObject0.put("*m\"G|LA{{gB", (Map) hashMap0);
      Long long0 = new Long(0L);
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.0545027463856176
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(687.2341367706525);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      jSONObject0.accumulate("Jp", jSONArray1);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray0, jSONArray2);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.343981616437465
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONObject", 0.0);
      Object object0 = JSONObject.NULL;
      jSONObject0.getInt("wheel.json.JSONObject");
      jSONObject0.putOpt("null", object0);
      try { 
        jSONObject0.getBoolean("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6408770888616577
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject.doubleToString((-484.1402221));
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = Byte.valueOf((byte) (-11));
      jSONObject0.putOpt("-484.1402221", byte0);
      JSONObject.quote("`@ZolD1TciiLGC^");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.toString((int) (byte) (-11), 126);
      int int0 = jSONObject0.getInt("-484.1402221");
      assertEquals((-11), int0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.7881502068860127
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("toS", (-2659));
      int int0 = jSONObject2.optInt("toS");
      assertEquals(1, jSONObject1.length());
      assertEquals((-2659), int0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.27660795407654
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("W*-%FWO4");
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("W*-%FWO4", 558L);
      try { 
        jSONObject1.getJSONArray("W*-%FWO4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"W*-%FWO4\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      jSONObject0.put("5Y`gIB5eY.Plf", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject1 = jSONObject0.put(",\n", (Collection) linkedList0);
      jSONObject0.keys();
      jSONObject1.optString(",\n", "SeX[k/6M&[*;Q");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString(",\n", ",\n");
      assertEquals(",\n", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = new Long((-1L));
      JSONObject jSONObject1 = jSONObject0.put("`~8?|]Us0/1`d3", (-1632));
      double double0 = jSONObject1.optDouble("`~8?|]Us0/1`d3", (double) (-1L));
      assertEquals(1, jSONObject0.length());
      assertEquals((-1632.0), double0, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.4120747171312216
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-4482.98639683656));
      jSONObject0.optBoolean(")I`1hj0O%T");
      JSONObject jSONObject1 = jSONObject0.put("-4482.98639683656", 0.0);
      double double0 = jSONObject1.optDouble("-4482.98639683656");
      assertEquals(1, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "[";
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      Long long0 = new Long((-2204L));
      Double double0 = new Double((-2204L));
      hashMap0.putIfAbsent(long0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("[", (Object) null);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8083695164005986
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("iscopyVa$lueOf", jSONObject0);
      boolean boolean0 = jSONObject1.optBoolean("iscopyVa$lueOf");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.4328055821531556
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject.quote("ws4X0I82fw[A2nO");
      JSONObject jSONObject0 = new JSONObject((Object) "7GAJ3($+(saDF.");
      // Undeclared exception!
      jSONObject0.toString(1557);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.49056603773584906
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject1.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject1 = jSONObject0.put("isfloatValue", (Map) hashMap0);
      try { 
        jSONObject1.getInt("isfloatValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isfloatValue\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("|xKXKr4?ut", "|xKXKr4?ut");
      try { 
        jSONObject1.getLong("|xKXKr4?ut");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|xKXKr4?ut\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8104399097753396
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.accumulate("*", linkedList0);
      jSONObject0.toString((-1751), (-1751));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.8734738482993778
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Long long0 = new Long(256L);
      JSONObject.getNames((Object) long0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wM?L", (Object) "~8i?|]Us0/1`d3");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.opt("wM?L");
      jSONObject1.toString();
      JSONObject.getNames(jSONObject0);
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.opt("j.V@!~^|q&A'");
      try { 
        jSONObject2.getJSONArray("j.V@!~^|q&A'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j.V@!~^|q&A'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString((-1552));
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.quote("{D^GzS&8IDzj");
      JSONTokener jSONTokener0 = new JSONTokener("{D^GzS&8IDzj");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 12 of {D^GzS&8IDzj
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      try { 
        jSONObject0.getString("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.817893325924408
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("\"\"", (Collection) linkedList0);
      jSONObject0.accumulate("\"\"", hashMap0);
      jSONObject0.toString(8192, (-1707));
      assertEquals(1, jSONObject0.length());
      
      String[] stringArray0 = JSONObject.getNames((Object) "{\"java.lang.String@0000000003\": [{}]}");
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("\r");
      try { 
        jSONObject0.put((String) null, (Object) "\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("gethashCode", 1.0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("false", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.59602161509298
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("707uc", "707uc");
      jSONObject1.accumulate("707uc", jSONObject0);
      // Undeclared exception!
      jSONObject1.toString(69, 69);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put(".FFnP0'xa7XBV^P\"R?y", (Collection) linkedList0);
      jSONObject0.accumulate(".FFnP0'xa7XBV^P\"R?y", linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean((String) null, false);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("-fRHc]h[NEgA*x", (Collection) linkedList0);
      try { 
        jSONObject0.getJSONObject("-fRHc]h[NEgA*x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-fRHc]h[NEgA*x\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.0853480590441764
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean(" of ");
      assertFalse(boolean0);
      
      int int0 = jSONObject0.optInt(" of ", 0);
      assertEquals(0, int0);
      
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 58, 83);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1077052571971504
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject.valueToString("] not found.", 2392, 2392);
      JSONObject jSONObject0 = new JSONObject((Object) "] not found.");
      jSONObject0.opt("8(b;yl;m");
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(2392);
      assertEquals("2392", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null, (-1L));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 120, 22);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.4224761046703536
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "1Fr*/F+aR9e4FDt@/SUW");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-2563), (-2563));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("Unterminated string", true);
      assertTrue(boolean0);
      
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("Expected a ',' or '}'");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("joi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"joi\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.948720592834763
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("su", 0.0);
      jSONObject0.put("su", (Object) "su");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      
      JSONObject jSONObject1 = jSONObject0.put("=P\"D", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.80276727550424
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("SG?jjJ_v1M", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 47, 1640);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.1983857508370273
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.1442505718342053
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("07;*", "07;*");
      jSONObject1.toString(9, 9);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.365544809952898
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("07;*", "07;*");
      jSONObject1.optBoolean("07;*");
      jSONObject0.optString("07;*");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.004186849033182
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Object) "getgetBytes");
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Long long0 = new Long((-47L));
      JSONObject.quote("K/k[(RcA=");
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("toS", false);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put(",\n", (Collection) linkedList0);
      boolean boolean0 = jSONObject0.isNull(",\n");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull(",\n");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.quote("1Fr*/h+aR9e4FDt@/SUW");
      assertEquals("\"1Fr*/h+aR9e4FDt@/SUW\"", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.3128868859883003
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject1 = jSONObject0.put(",\n", (Collection) linkedList0);
      jSONObject1.remove(",\n");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "par";
      try { 
        jSONObject0.put("par", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.05569358184064
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null, (-1));
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("b! ", 638);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble(",\n", (double) (-1L));
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("k6j2=?nCH");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.3911819977193867
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(9);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.3960882220782682
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Double double0 = new Double((-2523.027211));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((-1235));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.753440343014635
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(2034, 2034);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt(",\n", ",\n");
      JSONObject.valueToString(jSONObject0, (-18603944), (-18603944));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.2139520417656369
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";o@Esf}OGl0[32");
      // Undeclared exception!
      jSONObject0.toString(349, 349);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("b9'D@*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of b9'D@*
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("nv6", 0L);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.9080648236309732
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("j<w|)6Q}", "j<w|)6Q}");
      jSONObject0.get("j<w|)6Q}");
      try { 
        jSONObject1.getJSONObject("j<w|)6Q}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j<w|)6Q}\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("K}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.019726163288044
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("w+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"w+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Substring bounds error\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove((String) null);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "y0X*TgJ\"*2DZG;/Cs");
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("java.lang.Short@0000000003.");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of java.lang.Short@0000000003.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("27&nF9t", 733L);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = JSONObject.quote("M+\"\"uv$(");
      assertEquals("\"M+\\\"\\\"uv$(\"", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Short short0 = new Short((short)381);
      String string0 = JSONObject.valueToString(short0, (short)381, (short)381);
      assertNotNull(string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Double double0 = new Double(366.79970232918);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = JSONObject.quote("/]*#TXi=j+1F!;@2");
      assertEquals("\"/]*#TXi=j+1F!;@2\"", string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("5*V5\"NM}%[F");
      assertEquals(0L, long0);
      
      String string0 = JSONObject.quote("5*V5\"NM}%[F");
      assertEquals("\"5*V5\\\"NM}%[F\"", string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer integer0 = new Integer((-1634));
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      try { 
        jSONObject0.getLong("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("z0+EF[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"z0+EF[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "062R/BwKtNW#;`bb}7g");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("062R/BwKtNW#;`bb}7g", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = JSONObject.quote("] not found.");
      assertEquals("\"] not found.\"", string0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("nKszS_VO-v+ OEn<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nKszS_VO-v+ OEn<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of .
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
