/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 12:27:24 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Properties;
import java.util.Random;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.evaluation.output.prediction.CSV;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.LMT;
import weka.clusterers.Cobweb;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.tokenizers.Tokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.067094546561575
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.073401964633699
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Integer integer0 = new Integer((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.correlationCoefficient();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "@relation");
      SparseInstance sparseInstance0 = new SparseInstance(0);
      Evaluation evaluation2 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.weightedFalsePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3233711738906186
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.toMatrixString("@relation");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce(1.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9950260794521664
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      capabilities0.getAttributeCapabilities();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(20);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[2] = (double) 1;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.weightedRecall();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.143652409619771
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Capabilities capabilities0 = naiveBayes0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances1);
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = '*';
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.meanPriorAbsoluteError();
      evaluation1.weightedPrecision();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("{F'D*M>&", vector0, protectedProperties1);
      instances1.setClass(attribute0);
      try { 
        evaluation1.setPriors(instances1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8939941023645552
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Evaluation evaluation0 = new Evaluation(instances0);
      capabilities0.getAttributeCapabilities();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Integer integer0 = new Integer((-2));
      evaluation0.setPriors(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedMatthewsCorrelation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5372681784772917
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2.0);
      sMOreg0.enumerateMeasures();
      doubleArray0[1] = (-2.0);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 0.22499999403953552;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = 1000.0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2.0), doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
      evaluation0.totalCost();
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(3.0, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.5287499998696148, double0, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9282136249078539
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(0);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.weightedFalseNegativeRate();
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionStump decisionStump0 = new DecisionStump();
      int int0 = 989;
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) decisionStump0, instances0, 989, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.223212731270259
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      evaluation1.areaUnderPRC(2);
      LWL lWL0 = new LWL();
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1601497554250786
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      testInstances0.generate();
      try { 
        evaluation1.evaluateModelOnce((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1883852757980407
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = (-2.0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1842.0331244), doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
      assertEquals(-0.0, evaluation0.SFMeanSchemeEntropy(), 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.totalCost();
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.toMatrixString("1P]D1-kq*tc)5>bd ?");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.182036069448834
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-1));
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation1.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation1.areaUnderROC(17);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.weightedFMeasure();
      evaluation1.KBInformation();
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertNotNull(doubleArray0);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("!ipcaXw'4^");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 2;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0885183592464265
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        evaluation1.numTrueNegatives(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double0 = evaluation0.m_Unclassified;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double double1 = 851.586736397197;
      double[] doubleArray0 = new double[0];
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.evaluateModel((Classifier) inputMappedClassifier0, instances0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0885183592464265
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      System.setCurrentTimeMillis(2);
      // Undeclared exception!
      try { 
        evaluation1.falsePositiveRate(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0741957654274996
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.precision(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4948453608247423
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Integer integer0 = new Integer((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.correlationCoefficient();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      try { 
        evaluation1.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation.makeOptionString((Classifier) null, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      boolean boolean0 = evaluation0.equals(filteredClassifier0);
      assertFalse(boolean0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DenseInstance denseInstance0 = new DenseInstance(0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        evaluation0.weightedPrecision();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.350265954200701
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.numTruePositives(4);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.correlationCoefficient();
      // Undeclared exception!
      try { 
        evaluation1.matthewsCorrelationCoefficient(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2.0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.toClassDetailsString(" ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3099760230105293
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SGDText sGDText0 = new SGDText();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.priorEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedPrecision();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) sGDText0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8942254499643238
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.785115547999553
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.m_WithClass = 1.0E-10;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      evaluation1.totalCost();
      evaluation0.setPriors(instances0);
      assertEquals(0.0, evaluation0.SFMeanSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1488159223407965
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      evaluation0.SFEntropyGain();
      Instances instances1 = new Instances(instances0, 0, 0);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.setPriors(instances1);
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'q';
      charArray0[2] = '5';
      charArray0[3] = '1';
      evaluation1.num2ShortID(2, charArray0, 0);
      double[] doubleArray0 = null;
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'q';
      intArray0[1] = (int) 'q';
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) '5';
      intArray0[5] = (int) '5';
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.2, intArray0, (-5936));
      try { 
        coverTree0.nearestNeighbour(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4270514391208025
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate(18);
      evaluation0.SFSchemeEntropy();
      evaluation0.numTrueNegatives(18);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@data";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@data";
      stringArray0[4] = ".arff";
      stringArray0[5] = "@relation";
      jRip0.setOptions(stringArray0);
      int int0 = 856;
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      evaluation0.num2ShortID(32, charArray0, 32);
      MockRandom mockRandom0 = new MockRandom(856);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) mockRandom0;
      try { 
        evaluation0.crossValidateModel((Classifier) jRip0, instances0, 856, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockRandom cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.494949494949495
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      testInstances0.setNumNominal((-1160134845));
      evaluation0.numTruePositives(4);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.correlationCoefficient();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1);
      evaluation1.updateMargins(doubleArray0, 1, 1.0E-5);
      assertEquals(Double.NaN, evaluation1.errorRate(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.187390023949242
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
      evaluation0.totalCost();
      assertEquals(1.0, evaluation0.weightedTruePositiveRate(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.3946819089698845
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[0] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[4] = (double) 2;
      evaluation0.numTruePositives(2);
      evaluation0.rootRelativeSquaredError();
      // Undeclared exception!
      try { 
        evaluation0.weightedFMeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4965034965034965
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      try { 
        evaluation2.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3571639891354574
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Instances instances1 = new Instances(instances0, (-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_TotalSizeOfRegions = 904.7;
      evaluation0.sizeOfPredictedRegions();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.setPriors(instances0);
      evaluation0.SFMeanSchemeEntropy();
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.sizeOfPredictedRegions(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.unweightedMicroFmeasure();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(99);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      try { 
        evaluation0.updateStatsForPredictor(0.0, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.009653988412479
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      SGDText sGDText0 = new SGDText();
      double double0 = evaluation0.m_WithClass;
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.deleteAttributeType(1112551770);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      M5Rules m5Rules0 = new M5Rules();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.toSummaryString();
      evaluation0.setDiscardPredictions(true);
      SGDText sGDText0 = new SGDText();
      evaluation0.relativeAbsoluteError();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(0, testInstances0.getNumDate());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[4] = (double) 2;
      evaluation0.numTruePositives(2);
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.1916014530643806
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ConfusionMatrix = null;
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      // Undeclared exception!
      try { 
        evaluation0.unweightedMicroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5235917385818534
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OneR oneR0 = new OneR();
      TestInstances testInstances0 = new TestInstances();
      LMT lMT0 = new LMT();
      lMT0.getCapabilities();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.unweightedMicroFmeasure();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1250.791642914, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteAttributeType(34);
      evaluation0.setDiscardPredictions(false);
      M5Rules m5Rules0 = new M5Rules();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.toSummaryString();
      evaluation0.setDiscardPredictions(false);
      SGDText sGDText0 = new SGDText();
      evaluation0.relativeAbsoluteError();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(1, testInstances0.getSeed());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.9381987103666085
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      LWL lWL0 = new LWL();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        CostMatrix.parseMatlab(".arff");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances1);
      arffLoader0.getNextInstance(instances1);
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, (Instance) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SGDText sGDText0 = new SGDText();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.meanPriorAbsoluteError();
      double double2 = evaluation0.pctCorrect();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SGDText sGDText0 = new SGDText();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      gaussianProcesses0.listOptions();
      evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
      evaluation0.pctIncorrect();
      evaluation0.totalCost();
      evaluation0.KBMeanInformation();
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.trueNegativeRate(18);
      assertEquals((-2.0), evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      Instances instances2 = testInstances2.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      evaluation0.setPriors(instances0);
      System.setCurrentTimeMillis(191L);
      evaluation0.falsePositiveRate((-1));
      evaluation0.weightedFMeasure();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) serializedClassifier0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
      evaluation0.totalCost();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) null, (Instance) binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      DenseInstance denseInstance0 = new DenseInstance(12);
      try { 
        evaluation0.evaluateModelOnce((double) 12, (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.0611976639656677
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 750
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      CostMatrix costMatrix0 = new CostMatrix(18);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1263100866621598
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderPRC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.86207719526477
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SGDText sGDText0 = new SGDText();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives(1);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.91551620226727
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Instances instances1 = new Instances(instances0, (-2));
      LWL lWL0 = new LWL();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.truePositiveRate(0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances1);
      String string0 = evaluation0.toSummaryString("@relation", false);
      assertEquals("@relation\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.avgCost();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.586410640052171
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances1);
      String string0 = evaluation0.toClassDetailsString("@relation");
      assertEquals("@relation\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.m_SumPriorEntropy = (double) (-2);
      evaluation0.SFMeanEntropyGain();
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.052131062986155
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      DecisionStump decisionStump0 = new DecisionStump();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumInstancesRelational(1821);
      try { 
        evaluation0.crossValidateModel((Classifier) sMOreg0, instances0, (-2), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SGDText sGDText0 = new SGDText();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.precision(1);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.3479040459105582
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      evaluation0.m_WithClass = Double.NaN;
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray0.length);
      
      String string0 = evaluation0.toSummaryString("globalBlendTipText", true);
      assertEquals("globalBlendTipText\nTotal Number of Instances              NaN     \n", string0);
      
      double double1 = evaluation0.trueNegativeRate(502);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.606701665997008
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      evaluation0.m_SumKBInfo = 1469.68392805575;
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(147851.03220072703, double1, 0.01);
      
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double2 = evaluation0.meanAbsoluteError();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.2510532028293406
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      evaluation0.falsePositiveRate((-1));
      evaluation0.numInstances();
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.440769675320202
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      double double1 = evaluation0.m_WithClass;
      evaluation0.relativeAbsoluteError();
      double double2 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.5540139501830628
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString(".bsi");
      assertEquals(".bsi\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.unclassified();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate(18);
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.numTrueNegatives((-1));
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
      evaluation0.totalCost();
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SGDText sGDText0 = new SGDText();
      sGDText0.setOptions(testInstances0.DEFAULT_WORDS);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
      double double0 = evaluation0.totalCost();
      assertEquals(-0.0, evaluation0.SFMeanPriorEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.9678593488156242
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      regressionByDiscretization1.globalInfo();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization1, (Instance) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.5614581988359335
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString(".bsi");
      assertEquals(".bsi\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      SGDText sGDText0 = new SGDText();
      Evaluation evaluation1 = new Evaluation(instances0);
      String string1 = evaluation1.toMatrixString("H#xu");
      assertEquals("H#xu\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string1);
      
      evaluation0.falseNegativeRate(0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances0 = testInstances0.getData();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      evaluation0.SFMeanEntropyGain();
      try { 
        evaluation0.updateStatsForPredictor(0.9940302114769565, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1846726042887588
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      double[] doubleArray0 = new double[9];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      Instances instances1 = testInstances0.generate();
      binarySparseInstance0.setDataset(instances1);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
      evaluation0.totalCost();
      assertEquals(-0.0, evaluation0.relativeAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.7063260587210523
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.5628643772654813
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      SGDText sGDText0 = new SGDText();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double0 = evaluation0.SFPriorEntropy();
      double double1 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.unweightedMicroFmeasure();
      assertNotEquals(double2, double0, 0.01);
      
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.falsePositiveRate(2);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.numInstances();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.numInstances(), 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.403368586825856
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_WithClass = (-62.51050798535);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.toClassDetailsString("@relation");
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.meanPriorAbsoluteError();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalsePositiveRate();
      double double0 = evaluation0.matthewsCorrelationCoefficient((-449));
      assertEquals(-0.0, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.7879685715237008
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getEstimatorType();
      Instances instances2 = new Instances(instances0, (-2));
      Evaluation evaluation1 = new Evaluation(instances2);
      // Undeclared exception!
      try { 
        evaluation0.confusionMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.8834372182627477
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      try { 
        Evaluation.handleCostOption("%X)S844XITM?S", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 3638.49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ement");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "-misses");
      try { 
        Evaluation.handleCostOption("ement", 10000);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-misses\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5869843816913654
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SGDText sGDText0 = new SGDText();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString("@data");
      assertEquals("@data\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.matthewsCorrelationCoefficient(2494);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.146162485147767
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.numFalseNegatives(100);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.416988292563735
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.numFalsePositives((-1));
      try { 
        Evaluation.handleCostOption("L'[qx8]O>~;PRG#", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double1, double0, 0.01);
      
      String string0 = evaluation0.toMatrixString();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.2692404415462466
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SGDText sGDText0 = new SGDText();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double1, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString(false);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.unweightedMicroFmeasure();
      SparseInstance sparseInstance0 = new SparseInstance(5);
      try { 
        evaluation0.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.9074169042571496
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.sizeOfPredictedRegions();
      testInstances0.setNoClass(false);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-2), doubleArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = '8';
      charArray0[1] = 'P';
      charArray0[2] = ')';
      charArray0[3] = 'S';
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID((-2), charArray0, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      evaluation0.weightedAreaUnderROC();
      try { 
        evaluation0.evaluateModel((Classifier) filteredClassifier0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.101008517788351
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Version.REVISION = 462;
      evaluation0.setNumericPriorsFromBuffer();
      String string0 = evaluation0.toClassDetailsString("@relation");
      assertEquals("@relation\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Evaluation evaluation1 = new Evaluation(instances0);
      textDirectoryLoader0.getOptions();
      String string1 = evaluation1.toSummaryString(" is not assignable from ", true);
      assertTrue(evaluation1.equals((Object)evaluation0));
      assertEquals(" is not assignable from \nTotal Number of Instances                0     \n", string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@relation";
      Evaluation.main(stringArray0);
      Evaluation.main(stringArray0);
      evaluation1.equals((Object) null);
      assertEquals(Double.NaN, evaluation1.weightedFalsePositiveRate(), 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SGDText sGDText0 = new SGDText();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      SparseInstance sparseInstance0 = new SparseInstance(12);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) sGDText0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.setNumericPriorsFromBuffer();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(108, charArray0, 250007);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      Cobweb cobweb0 = new Cobweb();
      instances0.remove((Object) cobweb0);
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextDouble();
      Instances instances2 = instances0.resampleWithWeights((Random) mockRandom0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.setPriors(instances2);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.878119976013433
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation1.priorEntropy();
      assertEquals(0.9940302114769565, double1, 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.kappa();
      evaluation0.unweightedMacroFmeasure();
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.2692844896015285
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1144.0);
      doubleArray0[1] = (-1144.0);
      doubleArray0[2] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-1144.0), doubleArray0);
      instances0.add((Instance) denseInstance0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-448.1475830524984));
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.meanPriorAbsoluteError();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1144
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.getWords();
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-1466.2);
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 1973.4202661063553;
      DenseInstance denseInstance0 = new DenseInstance((-2), doubleArray0);
      instances0.add((Instance) denseInstance0);
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1466
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.842781498680439
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      AbstractClassifier.makeCopy(regressionByDiscretization0);
      Evaluation.getGlobalInfo(regressionByDiscretization0);
      MockRandom mockRandom0 = new MockRandom();
      double double1 = evaluation0.trueNegativeRate(1);
      assertEquals(0.0, double1, 0.01);
      
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      JRip jRip0 = new JRip();
      evaluation0.equals(jRip0);
      double double2 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.numTruePositives(2);
      double double3 = evaluation0.numTruePositives((-908));
      assertEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.correct();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OneR oneR0 = new OneR();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation.makeOptionString(oneR0, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      evaluation0.equals(filteredClassifier0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate((-1));
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation2.errorRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation1.getDiscardPredictions();
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.180066384203239
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.getWords();
      testInstances0.clone();
      DenseInstance denseInstance0 = new DenseInstance(116);
      instances0.add((Instance) denseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-2));
      LWL lWL0 = new LWL();
      assertEquals(0, LWL.LINEAR);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel(".arff", instances0, (-2), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .arff
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      double double0 = evaluation0.m_MissingClass;
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.0615098824653293
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray0.length);
      
      String string0 = evaluation0.toSummaryString("@data", false);
      assertEquals("@data\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray0.length);
      
      String string0 = evaluation0.toSummaryString("@data", true);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals("@data\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.9531145342224603
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.sizeOfPredictedRegions();
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      int int0 = 2147483645;
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel(classifier0, instances0, 2147483645, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.8587209728132237
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.sizeOfPredictedRegions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.areaUnderROC(1322);
      evaluation0.weightedPrecision();
      evaluation0.weightedFMeasure();
      evaluation0.KBInformation();
      // Undeclared exception!
      try { 
        evaluation0.recall(24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.1995219101255112
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedAreaUnderPRC();
      double double1 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double1, double0, 0.01);
      
      org.evosuite.runtime.Random.setNextRandom((-2956));
      double double2 = evaluation0.recall((-1114383320));
      assertNotEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.7820195727673553
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Capabilities capabilities0 = naiveBayes0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances1);
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = '*';
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation1.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.relativeAbsoluteError();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertFalse(testInstances0.getMultiInstance());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.251623955677366
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      sGDText0.setTokenizer(tokenizer0);
      double double0 = evaluation0.rootMeanSquaredError();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      double double1 = evaluation1.fMeasure((-3079));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      int int0 = 250007;
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(1, charArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SGDText sGDText0 = new SGDText();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      double double1 = evaluation0.weightedRecall();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.6753815449889018
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("#V6IICBZ");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.540472953786337
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.sizeOfPredictedRegions();
      Instances instances2 = new Instances(instances1, (-2));
      Evaluation evaluation1 = new Evaluation(instances2);
      evaluation1.sizeOfPredictedRegions();
      testInstances0.setNoClass(true);
      evaluation1.weightedAreaUnderROC();
      evaluation1.toClassDetailsString("@relation");
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 493, 317.4851159154771);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SGDText sGDText0 = new SGDText();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals("\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.8913741235084864
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Capabilities capabilities0 = naiveBayes0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = '*';
      evaluation0.num2ShortID(250007, charArray0, 18);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      AbstractClassifier.makeCopy(regressionByDiscretization0);
      try { 
        Evaluation.handleCostOption(" *****************", 2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.5063874375065844
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      SGDText sGDText0 = new SGDText();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.9907867545761528
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.530286446455506
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.toClassDetailsString();
      evaluation0.toClassDetailsString();
      evaluation0.weightedMatthewsCorrelation();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      DenseInstance denseInstance0 = new DenseInstance(1497);
      boolean boolean0 = false;
      evaluation0.weightedPrecision();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.5888083670994821
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(0, testInstances0.getNumRelationalDate());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.getRelationalClassFormat();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(100.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.293760185886937
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      double double1 = evaluation0.m_WithClass;
      evaluation0.relativeAbsoluteError();
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertNotNull(doubleArray0);
      
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      evaluation0.num2ShortID((-1127281206), charArray0, 250007);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.getRevision();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.numTrueNegatives((-1983997621));
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.incorrect();
      assertEquals(0.0, double3, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-2), (-2.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(4619, (char[]) null, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      String string0 = evaluation0.toMatrixString(" ");
      assertEquals(" \n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      evaluation0.meanPriorAbsoluteError();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(15);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      sGDText0.setTokenizer(tokenizer0);
      double double0 = evaluation0.rootMeanSquaredError();
      double double1 = evaluation0.fMeasure(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double2, 0.01);
      
      evaluation0.getClassPriors();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.6809837858852603
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(18);
      binarySparseInstance0.setDataset(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation2.evaluationForSingleInstance((double[]) null, binarySparseInstance0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.5134049813662336
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      OneR oneR0 = new OneR();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-11.0);
      doubleArray0[1] = (-11.0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-11.0), doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2500
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.0054387692281677
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.numTruePositives((-1));
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals((-2), TestInstances.NO_CLASS);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.056522348486779
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      SGDText sGDText0 = new SGDText();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.SFPriorEntropy();
      SparseInstance sparseInstance0 = new SparseInstance(1);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(0.95, 1463.58);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.8423454860407178
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      OneR oneR0 = new OneR();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives((-2));
      JRip jRip0 = new JRip();
      MockRandom mockRandom0 = new MockRandom();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      try { 
        evaluation0.crossValidateModel((Classifier) oneR0, (Instances) null, (-1), (Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.toClassDetailsString("@relation");
      MockRandom mockRandom0 = new MockRandom(856);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) serializedClassifier0;
      objectArray0[2] = (Object) mockRandom0;
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 856, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OneR oneR0 = new OneR();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      MockRandom mockRandom0 = new MockRandom(0L);
      try { 
        evaluation0.crossValidateModel((Classifier) oneR0, instances0, 1740, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 4);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedAreaUnderROC();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SGDText sGDText0 = new SGDText();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      double double0 = evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
      double double1 = evaluation0.totalCost();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.numInstances(), 0.01);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      try { 
        Evaluation.handleCostOption(" ", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      DenseInstance denseInstance0 = new DenseInstance(12);
      try { 
        evaluation0.evaluateModelOnce(0.95, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.setDisplayStdDevs(true);
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 4);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.sizeOfPredictedRegions();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 321.1243521683371;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, ".arff");
      assertNotNull(string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      try { 
        Evaluation.handleCostOption(".bsi", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.setDisplayStdDevs(false);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      int int0 = 485;
      Instances instances2 = new Instances(instances0, 485);
      Evaluation evaluation0 = new Evaluation(instances1);
      testInstances0.setNoClass(false);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 50.0;
      DenseInstance denseInstance0 = new DenseInstance(100.0, doubleArray0);
      instances1.add((Instance) denseInstance0);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.precision(0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.261452519856853
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation.makeOptionString(inputMappedClassifier0, true);
      Evaluation evaluation1 = new Evaluation(instances0);
      assertTrue(evaluation1.equals((Object)evaluation0));
      
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      boolean boolean0 = evaluation0.equals(instances0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      OneR oneR0 = new OneR();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation.makeOptionString(oneR0, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      try { 
        Evaluation.evaluateModel((Classifier) filteredClassifier0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.FilteredClassifier:
         // 
         // -F <filter specification>
         // \tFull class name of filter to use, followed
         // \tby filter options.
         // \teg: \"weka.filters.unsupervised.attribute.Remove -V -R 1,2\"
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.J48)
         // 
         // Options specific to classifier weka.classifiers.trees.J48:
         // 
         // -U
         // \tUse unpruned tree.
         // -O
         // \tDo not collapse tree.
         // -C <pruning confidence>
         // \tSet confidence threshold for pruning.
         // \t(default 0.25)
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // \t(default 2)
         // -R
         // \tUse reduced error pruning.
         // -N <number of folds>
         // \tSet number of folds for reduced error
         // \tpruning. One fold is used as pruning set.
         // \t(default 3)
         // -B
         // \tUse binary splits only.
         // -S
         // \tDon't perform subtree raising.
         // -L
         // \tDo not clean up after the tree has been built.
         // -A
         // \tLaplace smoothing for predicted probabilities.
         // -J
         // \tDo not use MDL correction for info gain on numeric attributes.
         // -Q <seed>
         // \tSeed for random data shuffling (default 1).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation1.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.5426761921176095
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      evaluation0.toMatrixString("8k!jm'.Dlco[%2");
      evaluation0.unweightedMicroFmeasure();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, intArray0, 7);
      try { 
        evaluation0.evaluateModelOnce((Classifier) filteredClassifier0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double0 = evaluation0.m_Unclassified;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(851.586736397197, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) inputMappedClassifier0, (Instance) sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      DenseInstance denseInstance0 = new DenseInstance(1497);
      evaluation0.weightedPrecision();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) multilayerPerceptron0, (Instance) denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(" -1       0    \n", string0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      try { 
        Evaluation.evaluateModel("getBuildRegressionTree", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name getBuildRegressionTree.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=2.693224729284613
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=2.106613053677038
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString(".bsi");
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      instances0.deleteWithMissingClass();
      doubleArray0[1] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 7.0);
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      try { 
        Evaluation.handleCostOption(".arff", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 46;
      AbstractClassifier.makeCopy((Classifier) null);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 171
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 172
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, "V/g>tHvO");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 173
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setSource();
      SGD sGD0 = new SGD();
      String[] stringArray0 = new String[1];
      try { 
        Evaluation.evaluateModel((Classifier) sGD0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 174
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, 9991);
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 175
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CostMatrix costMatrix0 = Evaluation.handleCostOption("", 10000);
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 176
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Evaluation.makeOptionString(linearRegression0, false);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      assertFalse(matlabLoader0.getUseRelativePath());
  }

  /**
  //Test case number: 177
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Evaluation.makeOptionString((Classifier) null, false);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      assertEquals("Use relative rather than absolute paths", matlabLoader0.useRelativePathTipText());
  }

  /**
  //Test case number: 178
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      try { 
        Evaluation.evaluateModel(classifier0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 179
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tGenerate unpruned decision list.");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\tGenerate unpruned decision list.", arrayList0, 627);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 180
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CSV cSV0 = new CSV();
      cSV0.getHeader();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 181
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
