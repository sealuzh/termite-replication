/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 07 09:19:51 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{+YUv=oP+QW$=,H8NfH");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 13 of {+YUv=oP+QW$=,H8NfH
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}.E?>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }.E?>
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject.testValidity("[]");
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("*3wciSqbNU#n.|mlw", "*3wciSqbNU#n.|mlw");
      Object object0 = jSONObject1.remove("*3wciSqbNU#n.|mlw");
      assertEquals("*3wciSqbNU#n.|mlw", object0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.optString("tr", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Float float0 = new Float((-1341.7965F));
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String string0 = jSONObject0.optString("toL", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("Ke(Hl#PuYTDr`.]*", 1801L);
      assertEquals(1801L, long0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("spl", (-1013L));
      assertEquals((-1013L), long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Gac~e8Kh:i}X3", 59);
      long long0 = jSONObject0.optLong("Gac~e8Kh:i}X3");
      assertEquals(59L, long0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.append("x_Hjdv#F:3r'!dr", object0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("x_Hjdv#F:3r'!dr");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("dSK:Vlo1", 59);
      assertEquals(59, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0981473891350673
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(108);
      JSONObject jSONObject1 = jSONObject0.putOpt("{}", integer0);
      int int0 = jSONObject1.optInt("{}");
      assertEquals(108, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1612871195761536
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Double double0 = new Double((-1551.665339));
      String[] stringArray0 = JSONObject.getNames((Object) "lJi");
      JSONObject jSONObject0 = new JSONObject("lJi", stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("lJi", double0);
      jSONObject1.optInt("lJi");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("{", (double) 2067);
      assertEquals(2067.0, double0, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(1092L);
      jSONObject0.accumulate("get", long0);
      double double0 = jSONObject0.optDouble("get");
      assertEquals(1092.0, double0, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("] is not a Boolean.", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("cop", (Map) hashMap0);
      Object object0 = jSONObject1.opt("cop");
      assertNotSame(jSONObject0, object0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "1964.8785974440761");
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.004479023231639
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Double double0 = new Double((-1551.665339));
      String[] stringArray0 = JSONObject.getNames((Object) "lJi");
      JSONObject jSONObject0 = new JSONObject("lJi", stringArray0);
      jSONObject0.putOpt("lJi", double0);
      boolean boolean0 = jSONObject0.isNull("lJi");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      boolean boolean0 = jSONObject1.has("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expected '", (-1439L));
      String string0 = jSONObject0.getString("Expected '");
      assertNotNull(string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("null", 0.0);
      long long0 = jSONObject1.getLong("null");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("wheel.json.JSONObject@0000000001", 110);
      long long0 = jSONObject0.getLong("wheel.json.JSONObject@0000000001");
      assertEquals(2, jSONObject0.length());
      assertEquals(110L, long0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)5001);
      jSONObject0.append("", short0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7326587201992076
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-2023.96F));
      jSONObject0.putOpt("getto1Sriig", float0);
      int int0 = jSONObject0.getInt("getto1Sriig");
      assertEquals((-2023), int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Hr", 0.0);
      double double0 = jSONObject0.getDouble("Hr");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("~<#Pp", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7925821432141584
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 4621, 4621);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9433483923290391
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7846300761330085
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      // Undeclared exception!
      jSONObject0.toString(3605, 3605);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9430096637858085
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "1964.8785974440761");
      // Undeclared exception!
      jSONObject0.toString(741);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 96);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.2092536248090335
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.put((String) null, 1694.588);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      Float float0 = new Float(978.5082467740561);
      Long long0 = new Long(0L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(float0, long0, biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(linkedList0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(2249, 2249);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = JSONObject.quote(".k`n<DoSC'a%m/@");
      assertEquals("\".k`n<DoSC'a%m/@\"", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("lis", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("1ac'GA&9*x0>lZ'", "1ac'GA&9*x0>lZ'");
      assertEquals("1ac'GA&9*x0>lZ'", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8678801716292002
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Double double0 = new Double((-1551.665339));
      String[] stringArray0 = JSONObject.getNames((Object) "lJi");
      JSONObject jSONObject0 = new JSONObject("lJi", stringArray0);
      jSONObject0.putOpt("lJi", double0);
      jSONObject0.optString("lJi", "O=((");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expected '", (-1439L));
      double double0 = jSONObject0.optDouble("Expected '", (-1.0));
      assertEquals((-1439.0), double0, 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("] is not a JSONObject.", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("java.lang.Float@0000000005.");
      assertNull(object0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Byte byte0 = new Byte((byte)9);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("", (Collection) linkedList0);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      jSONObject0.put("@*,41?`52>d", (Map) hashMap0);
      JSONObject jSONObject1 = (JSONObject)jSONObject0.get("@*,41?`52>d");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("{j*k)R>t_m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{j*k)R>t_m\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                                                                        \"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n                                                                                        \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n                                            }");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertFalse(jSONTokener0.more());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{1@g_^hl8b2l`K");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 14 of {1@g_^hl8b2l`K
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{(1@g_^hl8b2 l`BK=");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 17 of {(1@g_^hl8b2 l`BK=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("MErX%:/h+kuflD");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of MErX%:/h+kuflD
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("}I!.)/9nS8l", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("2T=E=)PD*u}=P", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("*3wciSqbNU#n.|mlw");
      assertNull(object0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7960971655608418
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put(",\n", (Collection) linkedList0);
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.8558085030413587
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      jSONObject0.put("JSONArray[", (Map) hashMap0);
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0, (-2965), (-2965));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>(46, 46);
      String string0 = JSONObject.valueToString(hashMap0, 46, 351);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 3597, 79);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-135), 18);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 77, 77);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-135), (-135));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<JSONObject, Long> hashMap0 = new HashMap<JSONObject, Long>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0579054247036734
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Short short0 = new Short((short)3);
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.8869312248636236
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a JSONArray.");
      jSONObject0.toString((-2246), 3591);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.7260509192674385
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(12, (-1609));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.6867831479680375
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.193549604098133
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2067, (double) 2067);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      try { 
        jSONObject0.toJSONArray(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float float0 = new Float((-28.622F));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Double double0 = new Double((-1723.1310777165481));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.6816102690529532
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("Fql~r`5bk[\u0000Kps/uT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Fql~r`5bk[\\u0000Kps/uT\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = JSONObject.quote("64][j9,\":Te");
      assertEquals("\"64][j9,\\\":Te\"", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.quote("\f");
      assertEquals("\"\\f\"", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",/:AhAd", false);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Float float0 = new Float((-0.24348512F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("Missing value", (Collection) null);
      jSONObject1.optString("Missing value");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("Substring bounds error");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("}m", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("}m");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("x_Hjdv#F:3r'!dr");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("gA1a2o3hy;lg", (-2236L));
      double double0 = jSONObject0.optDouble("gA1a2o3hy;lg");
      assertEquals((-2236.0), double0, 0.01);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.4311119194329756
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Float float0 = new Float((-1513.4971F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("sp", true);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.4085788142038693
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.5294599036351055
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Null pointer", (Map) null);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("Null pointer");
      assertNotSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.334105175248606
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("4/m:1N", "4/m:1N");
      try { 
        jSONObject1.getJSONObject("4/m:1N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4/m:1N\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("", jSONArray0);
      JSONArray jSONArray1 = jSONObject1.getJSONArray("");
      assertSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.334105175248606
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("4/m:1N", "4/m:1N");
      try { 
        jSONObject1.getJSONArray("4/m:1N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4/m:1N\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(2);
      JSONObject jSONObject1 = jSONObject0.accumulate("0", integer0);
      int int0 = jSONObject1.getInt("0");
      assertEquals(2, int0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.0981473891350673
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) null);
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ha", 1805L);
      double double0 = jSONObject1.getDouble("ha");
      assertEquals(1805.0, double0, 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.3068894077018045
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("+U\rqoY", (Object) "+U\rqoY");
      try { 
        jSONObject0.getLong("+U\rqoY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+U\\rqoY\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.0837660374856477
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("false", "false");
      boolean boolean0 = jSONObject0.optBoolean("false");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.553848341566947
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("toS", "toS");
      try { 
        jSONObject1.getBoolean("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toS\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean(false);
      jSONObject0.accumulate("val", boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject0.getBoolean("val");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2281.022));
      assertEquals("-2281.022", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("", (Collection) linkedList0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.append("", boolean0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", 92);
      try { 
        jSONObject1.append("{}", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{}] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("opt", (Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("opt", linkedList0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("7\"", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.4681399390162087
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("toS", "toS");
      Integer integer0 = new Integer(40);
      jSONObject0.accumulate("toS", integer0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\n                                                                                  \"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n                                                                                  \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n                                         }");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{1@g_^hl8 2\"`BK=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 12 of {1@g_^hl8 2\"`BK=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.4708084763221114
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.091138882620417
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Double double0 = new Double((-1551.665339));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("lJi", stringArray0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("lJi", object0);
      boolean boolean0 = jSONObject1.isNull("lJi");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.6731947481222245
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("g{u Q", object0);
      try { 
        jSONObject0.getBoolean("g{u Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g{u Q\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-1641));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("dj<Mw0ICdmo2N");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("getgetChars", (-1052));
      assertEquals((-1052), int0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("|3=", (-20664796));
      assertEquals(1, jSONObject0.length());
      
      long long0 = jSONObject1.getLong("|3=");
      assertEquals((-20664796L), long0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("Expected a ':' after a key");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("{");
      assertEquals("", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.8883748344162048
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a JSONArray.");
      jSONObject0.toString((-2246), (-2246));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("U|w", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.1752045970807579
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("tri");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tri\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }
}
