/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 18:17:33 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import java.awt.CheckboxMenuItem;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.sql.Time;
import java.util.Date;
import java.util.Locale;
import javax.swing.InputVerifier;
import javax.swing.JPanel;
import javax.swing.MenuElement;
import javax.swing.event.AncestorListener;
import org.apache.batik.css.parser.Parser;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.tilesources.OsmTileSource;
import plugins.map.FreeMindMapController;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-245), (-245), 39, 39, 'K');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(15, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8961408868334586
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.scrollbar;
      jDayChooser0.setAlwaysFireDayProperty(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 160, 160, 160, 2925, '$');
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.800854989187817
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2119), (-2119), 38, 38, '5');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2049554530011566
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(58);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 58, 58, 58, 58, '}');
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.dayPanel = null;
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getDayPanel();
      // Undeclared exception!
      try { 
        jDayChooser0.add((Component) null, (Object) null, 35);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal component position
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(58);
      jDayChooser0.setMonth(387);
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8008429327153
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, 0L, 38, 38, '5');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
      
      jDayChooser0.setDay(38);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1424370175081084
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.days = null;
      // Undeclared exception!
      try { 
        jDayChooser0.setMaxDayCharacters(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.235909808131518
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getHierarchyBoundsListeners();
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.setDayBordersVisible(false);
      String string0 = "Twenty-One";
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Twenty-One");
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.drawDays();
      Color color0 = jDayChooser0.selectedColor;
      jDayChooser0.setWeekdayForeground(color0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2323.0F);
      floatArray0[1] = (-3095.0F);
      Color.getColor("Twenty-One", color0);
      Color.getColor("3", color0);
      floatArray0[2] = 2379.16F;
      floatArray0[3] = (-1264.6443F);
      color0.getRGBComponents(floatArray0);
      floatArray0[4] = 0.0F;
      color0.getRGBComponents(floatArray0);
      Color color1 = Color.getColor("day", color0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.setDecorationBackgroundColor(color1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i-! ";
      stringArray0[1] = "day";
      stringArray0[2] = "3";
      stringArray0[3] = "Twenty-One";
      stringArray0[4] = "Twenty-One";
      stringArray0[5] = "Twenty-One";
      stringArray0[6] = "0";
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      UnmarshallingContext unmarshallingContext0 = null;
      try {
        unmarshallingContext0 = new UnmarshallingContext((-2913), stringArray0, stringArray0, stringArray0, stringArray0, iBindingFactory0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.168776429604453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(2);
      Locale locale0 = Locale.KOREA;
      jDayChooser0.setLocale(locale0);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 43, 43, 40, 40, 'd');
      jDayChooser0.getMouseWheelListeners();
      keyEvent0.setKeyChar('d');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1771683501486114
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      jDayChooser0.setMaxDayCharacters(2);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-2456L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.getForeground();
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.695552336533544
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      assertSame(date1, date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Time time0 = new Time(0L);
      jDayChooser0.setMinSelectableDate(time0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 'j', 'j', 'j', 36, 'j');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8961031581030303
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 576, 3133L, 33, 33, 'j');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMinSelectableDate((Date) null);
      Color color0 = jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Class<FreeMindMapController.ChangeTileSource> class0 = FreeMindMapController.ChangeTileSource.class;
      jDayChooser0.getListeners(class0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.696303767023144
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      
      System.setCurrentTimeMillis((-1L));
      JDayChooser jDayChooser1 = new JDayChooser();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Font.getFont("accessories.plugins.time.JDayChooser$DecoratorButton");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addListeners(3);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      Locale locale0 = new Locale("day");
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1917, 1917, 1917, 1917, ';');
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(3);
      assertEquals(3, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay((-1431));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.896128488346074
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getMaxSelectableDate();
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setForeground(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 12288, 12288, 2001, 12288, '~');
      jDayChooser0.keyTyped(keyEvent0);
      CheckboxMenuItem checkboxMenuItem0 = null;
      try {
        checkboxMenuItem0 = new CheckboxMenuItem();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.US;
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-1097), "day", (-1097));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.1337304777448702
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(387);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(387);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.896090218646746
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 1031;
      jDayChooser0.getAncestorListeners();
      jDayChooser0.transferFocus();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1031, true);
      focusEvent0.getOppositeComponent();
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getDecorationBackgroundColor();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1031);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8008307070291334
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 44, 44, 44, 44, '[');
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.setMaxDayCharacters((-1341));
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.695529662081982
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(8201);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.setMaxDayCharacters(94);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.896128488346074
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.BLACK;
      jDayChooser0.setSundayForeground(color0);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Font.getFont("day");
      jDayChooser0.setFont((Font) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.0632544422073003
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      jDayChooser0.decorationBackgroundColor = null;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getSelectedDay();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      Parser parser0 = new Parser();
      parser0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.365647144510297
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.transferFocusUpCycle();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.drawWeeks();
      jDayChooser0.getDayPanel();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setYear(0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.init();
      jDayChooser0.getLocale();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      MenuElement[] menuElementArray0 = new MenuElement[7];
      MapDialog mapDialog0 = new MapDialog();
      jDayChooser0.setDay(2801);
      // Undeclared exception!
      try { 
        mapDialog0.getRegistration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.HookAdapter", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-2267));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.forLanguageTag("day");
      jDayChooser0.setLocale(locale0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.800890177739808
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(164, color0.getBlue());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.darkGray;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.800890177739808
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      Font.getFont("day");
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.3421335109632575
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      jDayChooser0.day = 2235;
      jDayChooser0.setMaxDayCharacters((-4));
      jDayChooser0.removeAll();
      jDayChooser0.init();
      jDayChooser0.setMonth((-4));
      jDayChooser0.drawDays();
      jDayChooser0.setYear((-4));
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setName("Dialog Plain 11");
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      Color color0 = Color.RED;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.1374996972165046
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jDayChooser0.day = 2235;
      jDayChooser0.setMaxDayCharacters((-4));
      jDayChooser0.removeAll();
      jDayChooser0.init();
      jDayChooser0.setMonth((-4));
      jDayChooser0.drawDays();
      jDayChooser0.setYear((-4));
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setName("Dialog Plain 11");
      jDayChooser0.initDecorations();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap0.getAttributionImage();
      jDayChooser0.checkImage((Image) null, 2235, (-1798), (ImageObserver) jPanel0);
      FocusEvent focusEvent0 = new FocusEvent(jPanel0, 132, false);
      focusEvent0.paramString();
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear((-471));
      jDayChooser0.isValidateRoot();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(31);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }
}
