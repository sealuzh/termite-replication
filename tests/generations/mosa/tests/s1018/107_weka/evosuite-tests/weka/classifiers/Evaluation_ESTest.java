/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 18:33:23 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.InfoGainAttributeEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.IntervalEstimator;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.M5P;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.AllFilter;
import weka.filters.Filter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      double[] doubleArray0 = new double[3];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 102261132;
      testInstances0.setNumRelationalNominal(102261132);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.824399944067943
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_WithClass = (double) (-1);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double0 = evaluation0.kappa();
      assertEquals(-0.0, evaluation0.SFMeanPriorEntropy(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.generate("1;d");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, (-1), (-564.3069204));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.595818992578724
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.parallelStream();
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-2);
      doubleArray1[1] = (double) (-2);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      Evaluation.k_MarginResolution = (-1);
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) (-2);
      doubleArray2[3] = (-2.147483648E9);
      doubleArray2[4] = (double) (-2);
      doubleArray2[5] = (double) (-1);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-2.147483648E9);
      doubleArray3[1] = (double) (-1);
      doubleArray3[2] = (double) (-1);
      doubleArray3[3] = (-64.3276096);
      doubleArray3[4] = (double) (-2);
      doubleArray0[2] = doubleArray3;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      evaluation0.falseNegativeRate((-1));
      double[] doubleArray4 = new double[2];
      doubleArray4[1] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray4);
      evaluation0.toClassDetailsString(" ");
      Evaluation evaluation1 = new Evaluation(instances0);
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter0);
      Capabilities capabilities0 = new Capabilities(filter0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1197063574156068
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(4.8, doubleArray0);
      double double0 = evaluation1.SFSchemeEntropy();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation2.truePositiveRate(14);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      String string0 = evaluation0.num2ShortID(6, charArray0, 860);
      assertEqualsstring0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".arff");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        Evaluation.handleCostOption(".arff", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \".bsi\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.errorRate();
      MockRandom mockRandom0 = new MockRandom(1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Object object0 = new Object();
      MockRandom mockRandom1 = new MockRandom(2);
      try { 
        evaluation0.crossValidateModel((Classifier) sMOreg0, instances0, 97, (Random) mockRandom1, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(false);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5891783264039585
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      sMOreg0.buildClassifier(instances0);
      instances0.deleteWithMissingClass();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.49056603773584906
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.errorRate();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3196715916147084
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.falsePositiveRate(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.rootRelativeSquaredError();
      double double1 = evaluation0.precision(0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.420130491538706
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("S.w");
      capabilities0.toString();
      testInstances0.setClassIndex(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      SMO sMO0 = new SMO();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 2);
      double double0 = evaluation0.m_SumErr;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double1 = evaluation1.m_SumPredicted;
      // Undeclared exception!
      try { 
        evaluation1.unweightedMicroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6714599763614508
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance(1398.78, (double[]) null);
      MockRandom mockRandom0 = new MockRandom(0L);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Object object0 = new Object();
      try { 
        evaluation0.crossValidateModel((Classifier) inputMappedClassifier0, instances0, Integer.MAX_VALUE, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0171869213426303
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      evaluation0.truePositiveRate(5);
      Evaluation evaluation1 = new Evaluation(instances0);
      char[] charArray0 = new char[0];
      textDirectoryLoader0.reset();
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID(18, charArray0, 12);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.322283111617058
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("S.w");
      capabilities0.toString();
      testInstances0.setClassIndex(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      SMO sMO0 = new SMO();
      sMO0.getCapabilities();
      instances0.deleteWithMissingClass();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0);
      evaluation0.addNumericTrainClass(2.0, 0.0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.unclassified();
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4530014063936125
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Cannot print complexity statistics ('-k') without training file ('-t')!");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getWords();
      evaluation0.areaUnderROC((-1457654536));
      double double0 = evaluation0.correct();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double1, 0.01);
      
      testInstances0.setMultiInstance(true);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Instances instances1 = new Instances(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, (-1));
      OneR oneR0 = new OneR();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) oneR0, (Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.9784724942075065
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IBk iBk0 = new IBk();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.25;
      double double0 = evaluation1.SFSchemeEntropy();
      double double1 = evaluation1.truePositiveRate(1);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      String string0 = evaluation0.num2ShortID(1, charArray0, 2);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals("BB", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.numTrueNegatives(1);
      testInstances0.setRelation(".bsi");
      testInstances0.generate();
      double[] doubleArray0 = evaluation0.m_MarginCounts;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(700.0, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) costSensitiveClassifier0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2246935662934058
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.equals((Object) null);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.129899128884771
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.m_WithClass = (double) (-1);
      evaluation0.toSummaryString("0qze0t:a^84uz", true);
      assertEquals(-0.0, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9753765189753083
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IBk iBk0 = new IBk();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.25;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = 0.25;
      doubleArray0[4] = (double) 2;
      DenseInstance denseInstance0 = new DenseInstance(2, doubleArray0);
      zeroR0.getCapabilities();
      SparseInstance sparseInstance0 = new SparseInstance((-2183.0903432834725), doubleArray0);
      Instances instances1 = new Instances(instances0);
      sparseInstance0.setDataset(instances1);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction((Classifier) naiveBayesMultinomialText0, (Instance) sparseInstance0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8911601612408218
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      SparseInstance sparseInstance0 = new SparseInstance(23);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.m_ClassPriorsSum;
      evaluation0.meanPriorAbsoluteError();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.507402013706516
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      zeroR0.getCapabilities();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("S.w");
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      try { 
        evaluation0.updateStatsForIntervalEstimator((IntervalEstimator) null, (Instance) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[2] = (Object) textDirectoryLoader0;
      objectArray0[3] = (Object) instances0;
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-2.0), doubleArray0);
      sparseInstance0.setDataset(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) logitBoost0, (Instance) sparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't normalize array. Sum is zero.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0144864535881952
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("S.w");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      instances0.deleteWithMissingClass();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0825387921412726
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = 0.25;
      doubleArray0[1] = 0.25;
      doubleArray0[4] = 0.25;
      doubleArray0[5] = 0.25;
      doubleArray0[11] = 0.25;
      DenseInstance denseInstance0 = new DenseInstance(0.25, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      sparseInstance0.setDataset(instances0);
      double double0 = evaluation1.evaluateModelOnceAndRecordPrediction((Classifier) zeroR0, (Instance) sparseInstance0);
      evaluation1.toMatrixString();
      double double1 = evaluation2.truePositiveRate(118);
      assertNotEquals(double1, double0, 0.01);
      
      evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4347240733919024
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 3385.559;
      DenseInstance denseInstance0 = new DenseInstance(3385.559, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(0.25, doubleArray0);
      sparseInstance0.setDataset(instances0);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction((Classifier) zeroR0, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.329469961213988
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = instances0.resampleWithWeights((Random) mockRandom0);
      Evaluation evaluation3 = new Evaluation(instances1);
      evaluation3.getRevision();
      evaluation1.confusionMatrix();
      evaluation2.weightedFalseNegativeRate();
      MockRandom mockRandom1 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) gaussianProcesses0, instances1, 1288, (Random) mockRandom1, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      assertTrue(evaluation1.equals((Object)evaluation0));
      
      evaluation1.m_SumSqrPredicted = (double) (-1);
      evaluation1.m_SumSchemeEntropy = (-340.3546764);
      evaluation1.equals(evaluation0);
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6819128689012444
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      evaluation0.m_ConfLevel = (double) (-2);
      evaluation0.weightedFalseNegativeRate();
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation.makeOptionString((Classifier) null, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      // Undeclared exception!
      try { 
        textDirectoryLoader0.getNextInstance((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.converters.TextDirectoryLoader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.67983920262086
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.assign(testInstances1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation.makeOptionString(classificationViaRegression0, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.toClassDetailsString();
      evaluation0.SFPriorEntropy();
      Evaluation.makeOptionString(classificationViaRegression0, true);
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = 'W';
      charArray0[2] = 'L';
      charArray0[3] = 'n';
      charArray0[4] = 'E';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1), charArray0, 288);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9830491532464083
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.SFSchemeEntropy();
      double double0 = evaluation2.m_SumSchemeEntropy;
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID(16, (char[]) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(1176.7723919, doubleArray0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7966711772942014
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.meanPriorAbsoluteError();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.m_ClassIsNominal = false;
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses1, (Instance) null, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.960552392877732
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate("seedTipText");
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      instances0.deleteWithMissingClass();
      CostMatrix costMatrix0 = null;
      CostMatrix costMatrix1 = null;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.m_NumClasses = 2514;
      evaluation0.priorEntropy();
      // Undeclared exception!
      try { 
        evaluation1.weightedAreaUnderROC();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9286068427278553
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.falseNegativeRate((-2));
      evaluation0.sizeOfPredictedRegions();
      evaluation0.KBRelativeInformation();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.trueNegativeRate(0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      assertEquals("The kernel to use.", gaussianProcesses0.kernelTipText());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      double double0 = evaluation0.m_MaxTarget;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation0.updatePriors(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.4804329492445527
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_MaxTarget;
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation1.updateStatsForPredictor((-1), (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0883345837790173
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IBk iBk0 = new IBk();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteWithMissingClass();
      evaluation0.rootRelativeSquaredError();
      evaluation0.unclassified();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("S.w");
      capabilities0.toString();
      testInstances0.setClassIndex(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      sMO0.getCapabilities();
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4947368421052632
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("S.w");
      capabilities0.toString();
      testInstances0.setClassIndex(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_SumPriorEntropy;
      try { 
        evaluation0.toMatrixString("weka/core/Capabilities.props");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      boolean boolean0 = evaluation1.equals(evaluation0);
      assertTrue(boolean0);
      
      double double0 = evaluation0.trueNegativeRate((-2));
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.3181226458588844
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(false);
      double[] doubleArray0 = new double[1];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumErr;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1);
      evaluation0.SFSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("S.w");
      Object object0 = new Object();
      CostMatrix costMatrix0 = new CostMatrix(1);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.9526489610121387
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation1.m_PriorEstimator = univariateKernelEstimator0;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      gaussianProcesses0.setOptions(testInstances0.DEFAULT_WORDS);
      evaluation1.weightedAreaUnderPRC();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses2 = new GaussianProcesses();
      evaluation0.truePositiveRate(0);
      evaluation1.falseNegativeRate(2);
      evaluation1.numFalseNegatives(0);
      try { 
        Evaluation.handleCostOption("reset", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.2497298171595617
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.falsePositiveRate(0);
      evaluation0.rootRelativeSquaredError();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertFalse(testInstances0.getNoClass());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
      
      double double1 = evaluation0.avgCost();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1878840226652085
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("S.w");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-2106), false, true);
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision((-1977));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.errorRate();
      evaluation0.SFMeanSchemeEntropy();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      testInstances0.generate();
      // Undeclared exception!
      try { 
        evaluation0.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      JSONLoader jSONLoader0 = new JSONLoader();
      double double0 = evaluation0.falseNegativeRate(0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IBk iBk0 = new IBk();
      Evaluation.handleCostOption((String) null, 1598);
      System.setCurrentTimeMillis(120L);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IBk iBk0 = new IBk();
      CostMatrix costMatrix0 = Evaluation.handleCostOption("", 2);
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3914337620844703
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.22499999403953552, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(3, true, true);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.2943261032910622
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.toSummaryString(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setDiscardPredictions(false);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 388.2517;
      doubleArray0[1] = 388.2517;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (-1.7976931348623157E308);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-2);
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, (-2));
      evaluation0.SFMeanEntropyGain();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String string0 = evaluation1.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      evaluation1.weightedTrueNegativeRate();
      evaluation1.KBInformation();
      evaluation1.getRevision();
      evaluation1.numTruePositives(0);
      double double0 = evaluation1.falsePositiveRate(117);
      double double1 = evaluation1.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, evaluation1.rootMeanPriorSquaredError(), 0.01);
      assertTrue(evaluation1.equals((Object)evaluation0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1880966755094402
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("S.w");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      SMO sMO0 = new SMO();
      Capabilities capabilities1 = sMO0.getCapabilities();
      capabilities0.assign(capabilities1);
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) 1;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 10.0);
      evaluation0.SFMeanEntropyGain();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      int int0 = 478;
      // Undeclared exception!
      try { 
        evaluation1.falsePositiveRate(478);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Cannot print complexity statistics ('-k') without training file ('-t')!");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getWords();
      evaluation0.areaUnderROC((-1457654536));
      evaluation0.correct();
      evaluation0.pctCorrect();
      testInstances0.setMultiInstance(true);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.evaluateModel((Classifier) gaussianProcesses0, instances1, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.rootMeanPriorSquaredError();
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.truePositiveRate((-2));
      assertEquals(0.0, double2, 0.01);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Bagging bagging0 = new Bagging();
      evaluation0.equals(bagging0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      Instances.test(testInstances0.DEFAULT_WORDS);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double1 = evaluation0.falsePositiveRate(532);
      assertEquals(0.0, double1, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'P';
      String string1 = evaluation0.num2ShortID((-2), charArray0, 532);
      assertEqualst", string1);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.5715939441398947
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Ru6^C&*dk6F");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getWords();
      evaluation0.areaUnderROC((-1));
      double double0 = evaluation0.numFalsePositives((-2));
      double double1 = evaluation0.pctCorrect();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 15;
      GaussianProcesses[] gaussianProcessesArray0 = new GaussianProcesses[4];
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double2, double1, 0.01);
      
      gaussianProcessesArray0[0] = gaussianProcesses0;
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      gaussianProcessesArray0[1] = gaussianProcesses1;
      GaussianProcesses gaussianProcesses2 = new GaussianProcesses();
      double double3 = evaluation0.truePositiveRate(0);
      assertNotEquals(double3, double2, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double4 = evaluation0.SFSchemeEntropy();
      assertEquals(double4, double0, 0.01);
      
      double double5 = evaluation1.KBRelativeInformation();
      assertEquals(0.0, double5, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = 'z';
      evaluation1.num2ShortID(99, charArray0, 0);
      assertEquals(0.0, evaluation1.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = new Instances(instances0);
      evaluation0.weightedAreaUnderPRC();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses2 = new GaussianProcesses();
      GaussianProcesses[] gaussianProcessesArray0 = new GaussianProcesses[1];
      gaussianProcessesArray0[0] = gaussianProcesses1;
      instances0.toArray(gaussianProcessesArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      evaluation0.updateMargins(doubleArray0, 0, 1000.0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances1);
      try { 
        Evaluation.handleCostOption(".bsi", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.6401506477791985
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.toMatrixString(".bsi");
      evaluation1.falsePositiveRate((-2));
      evaluation1.getDiscardPredictions();
      evaluation0.rootRelativeSquaredError();
      evaluation1.SFEntropyGain();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.635312548150816
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.numFalseNegatives((-1));
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.clone();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.8558221031888238
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanPriorAbsoluteError();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double1 = evaluation0.truePositiveRate(1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanAbsoluteError();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.9174992175431913
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      TestInstances.main(testInstances1.DEFAULT_WORDS);
      Instances instances0 = testInstances1.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.falsePositiveRate((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.numTruePositives((-1));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("S.w");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
      testInstances0.setNumClasses((-754));
      evaluation0.SFMeanEntropyGain();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.setPriors(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.toSummaryString("@data", true);
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.unweightedMacroFmeasure();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(0, testInstances0.getNumNumeric());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.1645439226000835
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.weightedAreaUnderPRC();
      ZeroR zeroR0 = new ZeroR();
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, "@data");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.0611976639656677
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      instances0.spliterator();
      testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation.makeOptionString(classificationViaRegression0, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1), charArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.6711986885232726
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-1));
      evaluation0.areaUnderPRC((-1));
      // Undeclared exception!
      try { 
        evaluation0.recall(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.1463096566766366
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      ZeroR zeroR1 = new ZeroR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.recall(21);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.035614573758802
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("S.w");
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      instances0.setClassIndex((-1126487641));
      evaluation0.m_SumSchemeEntropy = (double) (-1);
      evaluation0.KBMeanInformation();
      evaluation0.SFSchemeEntropy();
      evaluation0.toMatrixString();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.9696189082731257
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteWithMissingClass();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5959667860226068
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-1));
      evaluation0.areaUnderPRC((-1));
      String string0 = evaluation0.toClassDetailsString(" ");
      assertEquals(" \n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      String[] stringArray0 = new String[0];
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.evaluateModel((Classifier) null, instances0, (Object[]) stringArray0);
      String string0 = evaluation1.toCumulativeMarginDistributionString();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertEquals(" -1       0    \n", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.7659767920186922
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IBk iBk0 = new IBk();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteWithMissingClass();
      double double0 = evaluation0.m_Correct;
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("S.w");
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      evaluation0.relativeAbsoluteError();
      evaluation0.pctUnclassified();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(0.8333333333333333, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      Classifier classifier0 = null;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) instances0;
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 12, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IBk iBk0 = new IBk();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteWithMissingClass();
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.291596258442564
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMacroFmeasure();
      double double1 = evaluation0.falsePositiveRate((-1930));
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel("@relation", instances0, (-2), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @relation
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("S.w");
      capabilities0.toString();
      testInstances0.setClassIndex(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      TestInstances testInstances1 = new TestInstances();
      try { 
        Evaluation.evaluateModel((Classifier) sMOreg0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.SMOreg:
         // 
         // -C <double>
         // \tThe complexity constant C.
         // \t(default 1)
         // -N
         // \tWhether to 0=normalize/1=standardize/2=neither.
         // \t(default 0=normalize)
         // -I <classname and parameters>
         // \tOptimizer class used for solving quadratic optimization problem
         // \t(default weka.classifiers.functions.supportVector.RegSMOImproved)
         // -K <classname and parameters>
         // \tThe Kernel to use.
         // \t(default: weka.classifiers.functions.supportVector.PolyKernel)
         // 
         // Options specific to optimizer ('-I') weka.classifiers.functions.supportVector.RegSMOImproved:
         // 
         // -T <double>
         // \tThe tolerance parameter for checking the stopping criterion.
         // \t(default 0.001)
         // -V
         // \tUse variant 1 of the algorithm when true, otherwise use variant 2.
         // \t(default true)
         // -P <double>
         // \tThe epsilon for round-off error.
         // \t(default 1.0e-12)
         // -L <double>
         // \tThe epsilon parameter in epsilon-insensitive loss function.
         // \t(default 1.0e-3)
         // -W <double>
         // \tThe random number seed.
         // \t(default 1)
         // 
         // Options specific to kernel ('-K') weka.classifiers.functions.supportVector.PolyKernel:
         // 
         // -D
         // \tEnables debugging output (if available) to be printed.
         // \t(default: off)
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \t(default: checks on)
         // -C <num>
         // \tThe size of the cache (a prime number), 0 for full cache and 
         // \t-1 to turn it off.
         // \t(default: 250007)
         // -E <num>
         // \tThe Exponent to use.
         // \t(default: 1.0)
         // -L
         // \tUse lower-order terms.
         // \t(default: no)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.8834372182627477
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      Instances instances0 = testInstances0.generate("@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("graphType");
      instances0.deleteWithMissingClass();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) null, instance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.KBInformation();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.trueNegativeRate((-2));
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.9753765189753083
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      ZeroR zeroR1 = new ZeroR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.makeDistribution(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tonly the options are saved to the XML file, not the model.\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      try { 
        evaluation0.evaluateModel((Classifier) votedPerceptron0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.8058632507364383
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("S.w");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-2));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4162.3;
      doubleArray0[2] = (double) 15;
      doubleArray0[3] = (double) (-1);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce(0.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) (-2), (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRevision();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision((-2));
      double double0 = evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteWithMissingClass();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getRevision();
      double double0 = evaluation1.numTrueNegatives((-1));
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.765976792018692
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      double[] doubleArray0 = new double[3];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Correct;
      evaluation0.coverageOfTestCasesByPredictedRegions();
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "5}/x]A,,B");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      instances0.getRandomNumberGenerator((-2));
      evaluation0.kappa();
      evaluation0.relativeAbsoluteError();
      evaluation0.addNumericTrainClass((-2), (-1));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IBk iBk0 = new IBk();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      evaluation0.weightedFalseNegativeRate();
      MockRandom mockRandom0 = new MockRandom();
      LinearRegression linearRegression0 = new LinearRegression();
      try { 
        evaluation0.crossValidateModel((Classifier) linearRegression0, instances0, 2, (Random) mockRandom0, (Object[]) iBk0.TAGS_WEIGHTING);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      evaluation0.weightedFalseNegativeRate();
      MockRandom mockRandom0 = new MockRandom();
      LinearRegression linearRegression0 = new LinearRegression();
      try { 
        evaluation0.crossValidateModel((Classifier) linearRegression0, instances0, (-1), (Random) mockRandom0, (Object[]) linearRegression0.TAGS_SELECTION);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      // Undeclared exception!
      try { 
        testInstances0.setWords("measureNumRules");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At least 2 words must be provided!
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      evaluation0.areaUnderPRC((-2));
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.7260705604728712
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 5.55555;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5.55555, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, binarySparseInstance1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 112);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.86207719526477
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("S.w");
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      String string0 = evaluation0.toSummaryString(".arff", false);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(".arff\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.correct();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      double double0 = evaluation0.m_MaxTarget;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.updateStatsForPredictor((-1), binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IBk iBk0 = new IBk();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-1.0E100));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.trueNegativeRate((-1));
      assertEquals(0.0, double0, 0.01);
      
      evaluation1.getDiscardPredictions();
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.106613053677038
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(63);
      evaluation0.pctCorrect();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.numInstances();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      M5P m5P0 = new M5P();
      TestInstances testInstances1 = new TestInstances();
      try { 
        Evaluation.evaluateModel((Classifier) m5P0, testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.trees.M5P:
         // 
         // -N
         // \tUse unpruned tree/rules
         // -U
         // \tUse unsmoothed predictions
         // -R
         // \tBuild regression tree/rule rather than a model tree/rule
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf
         // \t(default 4)
         // -L
         // \tSave instances at the nodes in
         // \tthe tree (for visualization purposes)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.246611300733833
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      infoGainAttributeEval0.getCapabilities();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanPriorEntropy();
      String string0 = evaluation0.toMatrixString((String) null);
      assertEquals("null\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double1 = evaluation0.weightedPrecision();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.726990074270243
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Object object0 = new Object();
      evaluation0.toMatrixString("@relation");
      evaluation0.weightedMatthewsCorrelation();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(0, testInstances0.getNumDate());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      IBk iBk0 = new IBk();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteWithMissingClass();
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      
      String string0 = evaluation0.toMatrixString();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.6314008456303224
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.areaUnderPRC((-1));
      evaluation0.toSummaryString();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.5519316986530005
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation1.setDiscardPredictions(false);
      instances0.enumerateInstances();
      evaluation0.SFMeanEntropyGain();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String string0 = evaluation1.toClassDetailsString("getValidationThreshold");
      assertEquals("getValidationThreshold\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.setDiscardPredictions(true);
      try { 
        Evaluation.handleCostOption(" ", 731);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[3];
      intArray0[0] = 2657;
      intArray0[1] = (-4307);
      intArray0[2] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3432.8784106754683), intArray0, (-594));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) regressionByDiscretization0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.kappa();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) naiveBayesUpdateable0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      double[] doubleArray0 = new double[3];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominal(102261132);
      testInstances0.setSeed(102261132);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      ZeroR zeroR0 = new ZeroR();
      try { 
        evaluation0.evaluateModelOnce((Classifier) zeroR0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.setPriors(instances0);
      ZeroR zeroR0 = new ZeroR();
      try { 
        evaluation0.evaluateModelOnce((Classifier) zeroR0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.042901725385895
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      evaluation0.trueNegativeRate(25);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("S.w");
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("S.w");
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      String string0 = evaluation0.toMatrixString("@data");
      assertEquals("@data\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      evaluation0.totalCost();
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.655658866069486
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Instances instances0 = testInstances0.generate("graphType");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalsePositives(1);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = Evaluation.makeOptionString((Classifier) null, false);
      try { 
        Evaluation.handleCostOption(string0, 2091);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".w");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-2), (-500.2606098));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("S.w");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("classifications");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.5063874375065844
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      double[] doubleArray0 = new double[3];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.add((Instance) binarySparseInstance0);
      double double0 = evaluation0.m_Correct;
      evaluation0.coverageOfTestCasesByPredictedRegions();
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      double[] doubleArray0 = new double[3];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteWithMissingClass();
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      IBk iBk0 = new IBk();
      M5P m5P0 = new M5P();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.getRevision();
      AbstractClassifier.makeCopy(sMOreg0);
      String[] stringArray0 = new String[8];
      try { 
        Evaluation.evaluateModel((Classifier) sMOreg0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.276913075817346
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      evaluation0.weightedAreaUnderPRC();
      ZeroR zeroR0 = new ZeroR();
      String string1 = Evaluation.wekaStaticWrapper(zeroR0, " -1       0    \n");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      ZeroR zeroR0 = new ZeroR();
      AbstractClassifier.makeCopy(zeroR0);
      try { 
        Evaluation.evaluateModel((Classifier) zeroR0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String string0 = Evaluation.getGlobalInfo(serializedClassifier0);
      assertEquals("\nSynopsis for weka.classifiers.misc.SerializedClassifier:\n\nA wrapper around a serialized classifier model. This classifier loads a serialized models and uses it to make predictions.\n\nWarning: since the serialized model doesn't get changed, cross-validation cannot bet used with this classifier.", string0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Stacking stacking0 = new Stacking();
      try { 
        Evaluation.evaluateModel(" ", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name  .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
