/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 07:24:34 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.2725021163642891
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      jSONObject0.put("v~", (Map) hashMap0);
      jSONObject0.put(")L9", (Map) hashMap0);
      String string0 = JSONObject.doubleToString((-30803738));
      assertEquals("-3.0803738E7", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6066699893655365
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      Float float1 = new Float(Double.NaN);
      Float.max(0.0F, (-246.9F));
      Float.min(0.0F, 221.1631F);
      try { 
        JSONObject.valueToString(float1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2895969744897835
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("isintBitsToFloat", hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 2181, (-967));
      assertNotNull(string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7115163554621082
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Float float0 = new Float((-15.668122437867366));
      Float.sum(1482.3212F, 2251.0757F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.optJSONObject("~Rx&'Z` ");
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2874859649545503
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.valueToString("getgetInt", 7070, 7070);
      JSONObject jSONObject1 = jSONObject0.put("getgetInt", 0.0);
      jSONObject1.getDouble("getgetInt");
      Float float0 = new Float(2648.0088);
      JSONObject jSONObject2 = jSONObject1.append("\"java.lang.String@0000000002\"", float0);
      jSONObject1.keys();
      jSONObject1.names();
      jSONObject1.names();
      StringWriter stringWriter0 = new StringWriter(7070);
      stringWriter0.write("getgetInt");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject3 = jSONObject1.put("", (Collection) linkedList0);
      jSONObject2.optLong("\"java.lang.String@0000000002\"", 0L);
      jSONObject1.write(stringWriter0);
      jSONObject1.optDouble("getgetInt");
      JSONObject.doubleToString(0.0);
      Integer.getInteger("0");
      Integer.getInteger("0");
      jSONObject2.accumulate("getgetInt", (Object) null);
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject4 = jSONObject3.put("", 7070);
      Boolean boolean0 = Boolean.valueOf("");
      try { 
        jSONObject4.accumulate((String) null, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3784563114784643
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("co", jSONArray0);
      jSONObject1.put("co", true);
      boolean boolean0 = jSONObject0.optBoolean("co");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "{uk\"sS-TY\\~Tq7OW5";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{uk\"sS-TY~Tq7OW5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {uk\"sS-TY~Tq7OW5
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
      
      jSONObject0.keys();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string0 = JSONObject.valueToString(linkedList0, (-1182), 32);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4746818494671943
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] not found.", (Map) null);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optJSONObject("] not found.");
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.valueToString(jSONObject0);
      StringWriter stringWriter1 = stringWriter0.append('&');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "] not found.");
      jSONObject0.write(stringWriter2);
      try { 
        jSONObject0.getBoolean("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.166330769463752
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("i", jSONObject0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("i");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.998129064925034
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("isputOpt", (-649));
      JSONObject jSONObject2 = jSONObject0.put("isputOpt", (Object) hashMap0);
      jSONObject1.put("getputOpt", (Map) hashMap0);
      jSONObject2.names();
      JSONObject jSONObject3 = jSONObject0.put("isputOpt", 5);
      jSONObject1.put("getputOpt", (double) (-649));
      jSONObject3.optLong((String) null);
      jSONObject0.putOpt("getgetJSONArray", jSONObject1);
      jSONObject0.optLong("getputOpt");
      int int0 = 34;
      // Undeclared exception!
      jSONObject0.toString(34);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6864398575151536
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONArray0.put((Object) null);
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      try { 
        jSONObject1.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.576408258700284
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("", jSONArray0);
      jSONObject1.toJSONArray(jSONArray0);
      JSONArray jSONArray1 = jSONObject1.optJSONArray("");
      assertNotSame(jSONArray0, jSONArray1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.436757025719721
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("false", (Collection) linkedList0);
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalAnd(true, true);
      linkedList0.add(boolean0);
      JSONObject jSONObject2 = jSONObject1.put("A JSONArray text must start with '['", (Object) "false");
      jSONObject2.accumulate("i7f4e$Wn", "false");
      jSONObject2.getBoolean("A JSONArray text must start with '['");
      try { 
        jSONObject0.getBoolean(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.661882361328402
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optLong(",\n");
      JSONObject jSONObject1 = jSONObject0.putOpt(",\n", object0);
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      jSONObject1.put(",\n", (Map) hashMap0);
      jSONObject0.getJSONObject(",\n");
      jSONObject1.names();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7242986702781118
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "K6,j2G5$'^D\\B3L$Z";
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("K6,j2G5$'^DB3L$Z", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3396379742930384
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject.quote("K+l,#B(>/0kn[oBQq");
      JSONObject jSONObject0 = new JSONObject((Object) "K+l,#B(>/0kn[oBQq");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 123, 4294);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5668831328453874
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      jSONObject1.put("Jyrhef99Qn9/,m=B", (Map) hashMap0);
      jSONObject1.toString(69, (-2603));
      boolean boolean0 = jSONObject1.isNull("Jyrhef99Qn9/,m=B");
      assertEquals(2, jSONObject1.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.844047895106879
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "gHzc'~<W]RjJcJah");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("gHzc'~<W]RjJcJah", (Collection) linkedList0);
      jSONObject0.optJSONArray("gHzc'~<W]RjJcJah");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5520313131629173
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.quote("LZVkB_tV");
      JSONObject jSONObject1 = jSONObject0.put("\"LZVkB_tV\"", (double) (-1L));
      jSONObject1.optDouble((String) null);
      jSONObject1.optInt("y#19]");
      jSONObject1.optInt("\"LZVkB_tV\"");
      jSONObject0.accumulate("LZVkB_tV", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("CdI</$mv06Wp&.l]");
      assertEquals("\"CdI<\\/$mv06Wp&.l]\"", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3071631898077594
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getgetJSONArray", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("", (Map) hashMap0);
      jSONObject0.put("", (Object) hashMap0);
      jSONObject1.toString(4184, 6);
      // Undeclared exception!
      jSONObject2.toString(4184);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.235672975515538
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      jSONObject1.write(stringWriter0);
      jSONObject1.optDouble("lJ7umIDqs+}");
      String string0 = jSONObject0.toString((-123), (-2935));
      assertNotNull(string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.96203654649755
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Double double0 = new Double((short)1148);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      Double.sum((-1.0), (short)1148);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      double double1 = jSONObject0.optDouble(",\n");
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6988608687809186
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("Null pointer", 1053.1473);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(566, (Collection) linkedList0);
      jSONObject1.toJSONArray((JSONArray) null);
      jSONObject1.optInt("Null pointer");
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.131752263532908
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(48, (double) 48);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(49, jSONArray2.length());
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.4590655744311833
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("] not found.", "] not found.");
      JSONObject jSONObject2 = new JSONObject((Object) "] not found.");
      jSONObject0.accumulate("] not found.", jSONObject1);
      jSONObject1.optJSONObject("] not found.");
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.valueToString(jSONObject1);
      StringWriter stringWriter1 = stringWriter0.append('&');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "] not found.");
      // Undeclared exception!
      jSONObject0.write(stringWriter2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9512287120207144
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("", 4738);
      jSONObject0.optJSONArray("");
      jSONObject1.toString();
      jSONObject1.get("");
      jSONObject1.getInt("");
      jSONObject0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{\"java.lang.String@0000000003\":java.lang.Integer@0000000004}";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.optString("{\"java.lang.String@0000000003\":java.lang.Integer@0000000004}", stringArray0[1]);
      jSONObject2.put("isnotify", (double) 4738);
      assertEquals(2, jSONObject2.length());
      
      Double double0 = new Double(4945.7);
      JSONObject jSONObject3 = new JSONObject((Object) "");
      assertEquals(3, jSONObject3.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~s'<Bz(6mgfX.;HXg8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~s'<Bz(6mgfX.;HXg8
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.39641635693781
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject1 = jSONObject0.put("tr", (Map) hashMap0);
      // Undeclared exception!
      jSONObject1.toString((-1230), 8192);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.7740154702356479
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.putOpt(",\n", object0);
      JSONObject jSONObject2 = jSONObject1.accumulate(",\n", ",\n");
      Long long0 = new Long((-1230));
      JSONObject jSONObject3 = new JSONObject(long0);
      jSONObject2.getJSONArray(",\n");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or ']'", (Collection) null);
      JSONObject.doubleToString((-2106.065366454129));
      JSONArray jSONArray0 = jSONObject1.getJSONArray("Expected a ',' or ']'");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.398324020088797
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Byte byte0 = new Byte((byte)7);
      JSONObject jSONObject1 = jSONObject0.putOpt("li98Ik2E5Twb,}Y7e%", byte0);
      jSONObject0.getInt("li98Ik2E5Twb,}Y7e%");
      jSONObject1.optDouble((String) null);
      jSONObject0.optDouble("getgetLong");
      try { 
        jSONObject1.getBoolean("getgetLong");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetLong\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6840218797770445
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 4738);
      jSONObject1.toString();
      jSONObject0.get("");
      jSONObject1.getInt("");
      jSONObject0.toString();
      jSONObject0.optString((String) null, "");
      jSONObject1.put("(jd2@)#z7", (double) 4738);
      Double double0 = new Double((-142.4345));
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.589891712070819
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(8192, 5);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.put("$!%!u!/s\u0005D", (double) (-87L));
      jSONObject0.getLong("$!%!u!/s\u0005D");
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote((String) null);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.7539479937314992
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("iswait", "iswait");
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      try { 
        jSONObject1.getJSONArray("iswait");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iswait\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.280294755752536
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("{|]U", object0);
      boolean boolean0 = jSONObject0.optBoolean("{|]U");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.571664888689127
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("000", false);
      jSONObject1.keys();
      jSONObject0.toString(174, (-1266));
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer0 = new Integer(3194);
      Short short0 = new Short((short)97);
      hashMap0.put(integer0, short0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.put("g[,ObV2@6Rht,O!", false);
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}");
      JSONObject jSONObject3 = new JSONObject(jSONTokener0);
      jSONObject1.has("000");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      boolean boolean0 = jSONObject0.isNull("false");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "int";
      stringArray0[1] = "|clD+SOb";
      stringArray0[2] = "tc";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("] is not a JSONObject.");
      jSONObject0.putOpt("] is not a JSONObject.", boolean0);
      boolean boolean1 = jSONObject0.optBoolean("] is not a JSONObject.");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("false", "false");
      boolean boolean0 = jSONObject0.optBoolean("false");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(415);
      hashMap0.put((JSONObject) null, (JSONObject) null);
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-2882), (-2882));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2670824025440983
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject.doubleToString(565.739258647371);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("565.739258647371", "565.739258647371");
      jSONObject1.getDouble("565.739258647371");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("565.739258647371");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 565.739258647371
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.116024570124787
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("par", 859);
      double double0 = jSONObject1.getDouble("par");
      assertEquals(859.0, double0, 0.01);
      
      JSONArray jSONArray1 = jSONArray0.put(644, (double) 644);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(645, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
      
      boolean boolean0 = jSONObject0.optBoolean("par");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-548), (-548));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = new Object();
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.9870937622107916
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("!`]JtH=tzi3T$ocL\"V", false);
      jSONObject0.remove("!`]JtH=tzi3T$ocL\"V");
      jSONObject0.keys();
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject1.getLong("!`]JtH=tzi3T$ocL\"V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!`]JtH=tzi3T$ocL\\\"V\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("VMn", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.624330177995208
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.7861175788307196
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.putOpt(",\n", object0);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.accumulate("getremainderUnsigned", object1);
      jSONObject2.opt("getremainderUnsigned");
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 4, (-557));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.0992338308014475
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.putOpt(",\n", object0);
      jSONObject0.toString((-1230));
      JSONObject jSONObject2 = new JSONObject("{\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\",\n\"java.lang.String@0000000004\": null\n}");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{cDEzkKELKkS+$4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 16 of {cDEzkKELKkS+$4
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isai", 0L);
      jSONObject0.accumulate("isai", "isai");
      try { 
        jSONObject0.getBoolean("isai");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isai\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5823133712725188
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 3144.2133627914213);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("va", "va");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      Boolean boolean0 = new Boolean("A JSONObject text must begin with '{'");
      jSONObject0.accumulate("A JSONObject text must begin with '{'", boolean0);
      boolean boolean1 = jSONObject0.getBoolean("A JSONObject text must begin with '{'");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("iswait", "iswait");
      jSONObject1.put("iswait", true);
      boolean boolean0 = jSONObject0.getBoolean("iswait");
      assertTrue(boolean0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("+", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("@p~[", "");
      jSONObject1.opt("va");
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.9844935290697798
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("BC<jW*{", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.124037468419206
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("'iD", "'iD");
      jSONObject1.getString("'iD");
      try { 
        jSONObject0.getBoolean("'iD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'iD\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.6061091099782105
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("]dNDer D", 5);
      jSONObject0.keys();
      jSONObject1.optLong("]dNDer D");
      JSONObject.getNames(jSONObject1);
      jSONObject1.optDouble("]dNDer D");
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      jSONObject2.keys();
      try { 
        jSONObject1.getLong("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = JSONObject.quote("_k1/p_3r:J1A00D|");
      assertEquals("\"_k1/p_3r:J1A00D|\"", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 61, 61);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.8978107426074624
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", 1231.0);
      double double0 = jSONObject1.optDouble("false", 341.9945);
      assertEquals(1231.0, double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      long long0 = jSONObject0.optLong((String) null, (long) 8192);
      assertEquals(8192L, long0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1201.0112);
      jSONObject1.optDouble("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1899));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(97);
      JSONObject.testValidity(jSONObject0);
      Object object0 = jSONObject0.opt("{}");
      assertNull(object0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6864076396222765
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString();
      jSONObject0.put("{\"java.lang.String@0000000003\":\"java.lang.Class@0000000004\"}", 1L);
      long long0 = jSONObject0.getLong("{\"java.lang.String@0000000003\":\"java.lang.Class@0000000004\"}");
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("gettoString", (Map) hashMap0);
      jSONObject0.names();
      try { 
        jSONObject1.getLong("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoString\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5952629603288853
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, linkedList0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.8791457211896438
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "$A!%!u!/s");
      jSONObject0.optJSONArray("$A!%!u!/s");
      JSONObject jSONObject1 = jSONObject0.put("$A!%!u!/s", (Object) null);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.9930083118246225
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "$!%!u!/s");
      jSONObject0.optJSONArray("$!%!u!/s");
      JSONObject jSONObject1 = jSONObject0.accumulate("$!%!u!/s", (Object) null);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.41699590857414
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(70, (-85));
      jSONObject0.toString();
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      jSONObject0.put("nM4V.PmPgk+X6*", (Map) hashMap0);
      jSONObject0.optString("nM4V.PmPgk+X6*", "}[_e)q`jRE9]`[JZ,]Q");
      try { 
        jSONObject0.getBoolean("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.3778722346154972
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("iswait", 1.0);
      String string0 = jSONObject0.optString("iswait");
      assertNotNull(string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.316808454615751
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("li98Ik2E5Twb,}Y%", object0);
      boolean boolean0 = new Boolean("li98Ik2E5Twb,}Y%");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.optString("li98Ik2E5Twb,}Y%");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.9042552998214495
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "isai";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("isai", "isai");
      try { 
        jSONObject1.getDouble("isai");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isai\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble((String) null, 0.0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Q8+)t", "Q8+)t");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject1.put("Q8+)t", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.append("Q8+)t", jSONObject1);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Oste", "Oste");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject0.append("Oste", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Oste] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("li98Ik2E5Twb,}Y%", jSONObject0);
      try { 
        jSONObject0.getBoolean("li98Ik2E5Twb,}Y%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"li98Ik2E5Twb,}Y%\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.8083695164005986
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("{|]U", jSONObject0);
      boolean boolean0 = jSONObject1.optBoolean("{|]U");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("isai", "isai");
      try { 
        jSONObject0.getBoolean("isai");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isai\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.4718068329449787
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2270.011543171);
      assertEquals("2270.011543171", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "2270.011543171");
      String string1 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string1);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0276242004980904
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt(",\n", ",\n");
      try { 
        jSONObject0.getJSONObject(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.207304368451297
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("joi", "joi");
      long long0 = jSONObject0.optLong("joi");
      assertEquals(0L, long0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "iswait";
      JSONObject jSONObject1 = jSONObject0.accumulate("iswait", "iswait");
      try { 
        jSONObject1.getInt("iswait");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iswait\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("iswait", "iswait");
      Object object0 = jSONObject0.get("iswait");
      assertEquals("iswait", object0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.3085781000463086
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("/dM+SUA.", true);
      String[] stringArray0 = new String[14];
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.1091821433649187
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.optLong("f,", 0L);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("f,");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean((String) null, false);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.7152607734658951
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.217057396609233
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getremainderUnsigned");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.getLong("getremainderUnsigned");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getremainderUnsigned\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Short short0 = Short.valueOf((short)8192);
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.771294323446676
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = jSONObject0.optString("{}", "-1.00");
      assertEquals("-1.00", string0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("n;{).._n?X(.");
      assertEquals("", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", (-148.3));
      assertEquals((-148.3), double0, 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("toS", (-541));
      assertEquals((-541), int0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("y", 1.0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 2420, 2420);
      jSONObject0.put("{}", 2420);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      Float float1 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("iswait", "iswait");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("iswait");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of iswait
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("10lwO>4QM&3ZFv)iky:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"10lwO>4QM&3ZFv)iky:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-2724), (-2724));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.6796691473414684
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject.quote("0");
      JSONObject jSONObject0 = new JSONObject((Object) "\"0\"");
      jSONObject0.put("0", (Object) "0");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("Jk[7&8^[lom0k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Jk[7&8^[lom0k\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.2022413954579148
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString((-1181), (-1181));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.2696172122480425
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString((-1228));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.2119281599603342
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "isai");
      jSONObject0.toString(83, 83);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Byte byte0 = new Byte((byte)69);
      String string0 = JSONObject.valueToString(byte0, (byte)69, 13);
      assertNotNull(string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("%E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%E\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.5952629603288853
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.2603967218250913
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Float float0 = new Float((-1493.2055761894));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Long long0 = new Long((-2077L));
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Byte byte0 = new Byte((byte)103);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean(";d~N)}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";d~N)}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("MI{eo|zov^'A", 128);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.925900524116222
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ",";
      jSONObject0.optInt(",", 0);
      jSONObject0.toString(252);
      try { 
        jSONObject0.getDouble("istoBinaryString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoBinaryString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = JSONObject.quote("SJIa6U 'l/>7^Vx");
      assertEquals("\"SJIa6U 'l/>7^Vx\"", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.4278545372819558
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.toString(0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0, (-1197), (-1197));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("wheel.json.JSONObject");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove((String) null);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("$A!%!u!/s");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of $A!%!u!/s
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("jo", 829L);
      assertEquals(829L, long0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("uA", (-203L));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt("getparseFloat", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = JSONObject.quote("o#qtnk_u");
      assertEquals("\"o#qtnk_u\"", string0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("v*s|e.IEqL");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("bX{J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"bX{J\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean(" of ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
