/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 07:08:09 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.27142322107428
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(9223372036854775255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775255L, 9223372036854775255L);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      range0.getBegin();
      List<Range> list0 = range0.complement(range1);
      range1.equals(list0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.437880518783705
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(1686L, 1686L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1686 .. 1686 ]/0B", string0);
      
      Range range1 = Range.of(1558L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 0L);
      range0.equals((Object) null);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      
      boolean boolean1 = range0.equals("");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9797520106127435
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483610L, 2147483610L);
      Long long0 = new Long(2147483610L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 2147483610L, 2147483610L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(1, list0.size());
      
      String string0 = range1.toString();
      assertSame(range1, range0);
      assertEquals("[ 2147483610 .. 2147483609 ]/0B", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.ofLength(1674L);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.540585429849406
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.of(9223372036854775807L);
      Range range0 = Range.of(1079L, 9223372036854775807L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 9223372034707292162L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3303231706458116
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(9223372036854676193L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-777L), 9223372036854676193L);
      Range range2 = Range.of((-777L), 9223372036854676193L);
      boolean boolean0 = range2.equals(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range3 = Range.of(range_CoordinateSystem0, 9223372036854676193L, 9223372036854676193L);
      //  // Unstable assertion: assertNotSame(range3, range0);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.443377408041175
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(9223372036854676193L);
      Range range1 = Range.ofLength(9223372036854676193L);
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range2.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertTrue(list0.contains(range2));
      
      boolean boolean0 = range0.equals(range2);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertFalse(range2.equals((Object)range0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4775952357303237
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.of(1686L, 1686L);
      Range range0 = Range.of((-1L), 127L);
      Long long0 = new Long((-705L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range.of(2704257L);
      Object object0 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("C_af'gNv$j,z?kC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.C_af'gNv$j,z?kC
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.4405019712924245
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of((-1052L), 9223372036854676193L);
      range1.equals((Object) null);
      range1.equals(range0);
      Range range2 = Range.of((-1980L));
      // Undeclared exception!
      try { 
        range2.split((-1052L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.ofLength(4294967300L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 4294967300L, 4294967300L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-777L), 1029L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854676193L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.4434902125630247
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(9223372036854676193L);
      Range range1 = Range.ofLength(9223372036854676193L);
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range2.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertTrue(list0.contains(range2));
      
      Range range3 = range0.intersection(range1);
      //  // Unstable assertion: assertNotSame(range3, range0);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9796434918932646
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Long long0 = new Long(2147483647L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ 2147483647 .. 2147483646 ]/0B", string0);
      
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      
      long long1 = range1.getLength();
      assertSame(range1, range0);
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.ofLength(56813L);
      Range range0 = Range.of(65535L, 2147483646L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9792886722599112
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-2133L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2133L), (-1581L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(1686L, 1686L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(617L);
      range0.split(617L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range1.equals((Object) null);
      boolean boolean1 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2015566946087035
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(4294967321L);
      Range range1 = Range.of(4294967321L, 9223372036854775807L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3976800595209387
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-1450L), 32767L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.6764036653314447
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(1671L);
      String string0 = range0.toString();
      assertEquals("[ 1671 .. 1671 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1671L, 65534L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      Range range2 = Range.ofLength(65534L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9794121442934958
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(1686L, 1686L);
      Range range1 = Range.of(1079L, 1686L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2433546687129593
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.ofLength(3616L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(66830L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.060601531374581
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.ofLength(299L);
      long long0 = range1.getLength();
      //  // Unstable assertion: assertEquals(1L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range2 = Range.of((-4180L));
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.ofLength(30L);
      Range range1 = Range.of(30L, 30L);
      range0.equals(range1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.6336765186190916
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range range1 = Range.of(9223372036854775807L);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -128 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775789L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 66830L, 4294967298L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of((-9223372036854769852L), (-9223372036854769852L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.370119061208534
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L, 1L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(4294967300L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2021678481610336
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2899L), (-2899L));
      Long long0 = new Long((-2899L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
      
      Range range1 = Range.of((-2899L), (-2899L));
      boolean boolean1 = range1.equals(long0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.44089287987566
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Range range1 = Range.ofLength(32767L);
      Range range2 = range0.intersection(range1);
      range2.intersection(range1);
      List<Range> list0 = range2.complement(range1);
      //  // Unstable assertion: assertEquals(2, list0.size());
      
      range0.equals((Object) null);
      //  // Unstable assertion: assertNotSame(range0, range2);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L, 1L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of((-1L), 65534L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      Range range1 = Range.ofLength(1L);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0605245787004756
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of((-1633L));
      Range range1 = Range.of(9223372036854775807L);
      range1.endsBefore(range0);
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1633 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.059067004520361
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range range1 = Range.of((-467L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.2049446110400983
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1L));
      Range.of((-1L), (-1L));
      range1.equals(range0);
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
      assertSame(range1, range0);
      
      Range range2 = Range.of((-241L));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.130582753344072
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(1079L, 2147483647L);
      Long long0 = new Long((-60L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-9223372036854769852L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = 3683L;
      Range range0 = Range.of(3683L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(1079L, 9223372036854775807L);
      range1.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.328262849006711
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.parseRange("7-9P,5Zead(rL");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(509L, 509L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-32737L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32737 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.4794267203850113
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.of(2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.3292763361822004
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-3519L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3274L), 251L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.0558584483706284
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.440165879632461
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(182L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=4.021349968398407
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of((-2339L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 127L, 127L);
      range1.iterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-2339L), 127L);
      Range range3 = range2.asRange();
      range3.toString();
      range3.complement(range1);
      range3.complement(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.6460486764132503
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      assertFalse(range0.isEmpty());
      
      Range.of((-1256L), 2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      long long0 = range0.getBegin();
      assertEquals(9223372036854775807L, long0);
      
      Range range1 = Range.ofLength(4294967295L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range range0 = Range.of((-2147483648L));
      range0.equals(range_Builder0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967367L, 4294967367L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.386434750022149
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.1288146483987673
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      boolean boolean0 = range0.endsBefore(range0);
      Range range1 = Range.of((-128L));
      boolean boolean1 = range1.intersects(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.5725501926120784
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854676193L);
      Range range1 = Range.of(255L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.2338964389284612
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854676193L);
      Range range1 = range0.intersection(range0);
      boolean boolean0 = range0.intersects(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(137L, 2147483646L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-1776L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of((-32768L), 4294967334L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of((-1633L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.829051833887086
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(9223372036854774102L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854774102L);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = Range.ofLength(1681L);
      range1.isSubRangeOf(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      long long0 = 1161L;
      Range range3 = Range.of(1161L, 1167L);
      Range range4 = Range.of(1167L);
      range3.isSubRangeOf(range4);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3412 would make range [9223372036854774102 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-22L));
      Object object0 = new Object();
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.328939839782712
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1705L, 1705L);
      range0.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      Range range1 = Range.of(range_CoordinateSystem1, 1705L, 65486L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      range0.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem2);
      assertEquals("[ 1705 .. 1704 ]/0B", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.1322080145467655
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.intersects(range0);
      Range range1 = Range.of((-740L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 298L, 4294967367L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.0646924500665085
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-128L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -129 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-4365L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-4365L), long0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-1081L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1080L), long0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.3015923459972427
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-32781L));
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-32780L), long0);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-32780L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.3976800595209387
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(1773L);
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.391635058590899
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      Long long1 = new Long(2147483647L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.4407352754627367
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.ofLength(9223372036854774170L);
      Range range2 = range1.intersection(range0);
      List<Range> list0 = range1.complement(range2);
      assertTrue(list0.contains(range1));
      
      Range range3 = range2.intersection(range0);
      assertFalse(range1.isEmpty());
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.6293840526592174
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertFalse(list1.contains(range1));
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.4420693109199947
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(65486L);
      List<Range> list0 = range0.split(9223372036854775807L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.4406221852733103
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(1902L);
      Range range1 = Range.ofLength(1902L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.145998322976767
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(4294967300L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.260876836483037
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(149L);
      Range range1 = Range.ofLength(1683L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.5742822621779347
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-6825L), 1500L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.3279501861614795
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1705L, 1705L);
      range0.split(65486L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1705L, 65486L);
      range1.intersection(range0);
      range0.equals(range1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.4407893441299437
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(66830L);
      Range range1 = Range.ofLength(66830L);
      Range range2 = range0.intersection(range1);
      // Undeclared exception!
      try { 
        range1.complement(range2);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/RB", string0);
      
      Range range1 = Range.parseRange("[ 0 .. 0 ]/RB", range_CoordinateSystem0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(356L);
      boolean boolean0 = range0.equals("<");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(1L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.4433051923183675
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854676193L);
      Range range1 = Range.of(9223372036854676193L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      
      Range range2 = Range.ofLength(9223372036854676193L);
      boolean boolean0 = range2.isSubRangeOf(range1);
      assertFalse(range2.equals((Object)range1));
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.1328844901090855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.ofLength(1841L);
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.691477450899438
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of((-32781L));
      Range range1 = Range.of((-32781L));
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.8896985514868954
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1861L, 66874L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-4294901759L), (-4294901759L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.227337257933446
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1662L, 1662L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.060276460265276
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775766L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775766L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -85 would make range [9223372036854775766 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.117392856642673
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
      
      String string0 = range0.toString();
      assertEquals("[ 65535 .. 65535 ]/0B", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.178008108691081
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = range0.asRange();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.4788589671551255
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(66830L, 66830L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.9848941644582636
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(4294967405L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.2528537823732186
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.9799561547384963
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of((-1633L));
      Range range1 = Range.of(9223372036854775807L);
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range1.isSubRangeOf(range0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.4919118408202356
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      range1.intersects(range0);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertNotSame(range2, range1);
      //  // Unstable assertion: assertTrue(range2.equals((Object)range1));
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.5891119514278125
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1L));
      Range range2 = Range.of((-1L), (-1L));
      //  // Unstable assertion: assertSame(range2, range0);
      
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.4425378384820298
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of(0L);
      List<Range> list0 = range0.split(1L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.2068792409148563
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(9223372036854676193L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      Range range1 = range0.intersection(range0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertSame(range1, range0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.491732273553991
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of((-117L), (-117L));
      Range range1 = Range.of((-1630L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.0574866708943733
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(9223372036854775792L, 9223372036854775792L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775796L));
      // Undeclared exception!
      try { 
        range0.split((-9223372036854775796L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.7081008720263373
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.getBegin();
      long long0 = range0.getLength();
      assertEquals(9223372036854775807L, long0);
      
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.1133442736467214
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.getEnd();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.1801903236392537
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(3452L);
      range0.complementFrom(linkedList0);
      long long0 = range0.getEnd();
      assertEquals(3452L, long0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.6881336682453103
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.ofLength(66849L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.479296876150945
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 1L);
      Range range0 = Range.of(1L);
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.998151248650114
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(255L);
      range_Builder0.shift(4956L);
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-173L), (-2336L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of((-1524L), (-1524L));
      long long0 = range0.getBegin();
      assertEquals((-1524L), long0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-42L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.270288905081936
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      long long0 = range0.getBegin();
      assertEquals(2147483647L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.152991288216747
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.ofLength(2147483645L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.2042908026059695
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854676193L);
      Range range1 = Range.of(9223372036854676193L);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertNotSame(range2, range1);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(65535L, long0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.266970744711691
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of(255L, 255L);
      range0.getLength();
      range0.equals("");
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractBegin(1L);
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.139347425455401
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(3L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 4 .. 4 ]/RB", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.358409398266518
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.ofLength(3133L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.ofLength(4294967405L);
      Long long0 = new Long(4294967405L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.ofLength(9992L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(9992L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.3637131171994192
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(13L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      String string0 = range0.toString();
      assertEquals("[ 0 .. 12 ]/0B", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.1322080145467655
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.build();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.parseRange("zXmp?XUa/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse zXmp?XUa/ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.4925064671023778
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1841L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.625379462356204
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-2014L));
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-32768L));
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      Range range2 = Range.of(1148L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = 1L;
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.087698781999318
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3338L, 3338L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(63L);
      assertNotSame(range_Builder0, range_Builder2);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.0538382463504266
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-625L), (-625L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1861L, 1861L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of(298L, 298L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.2838685127595846
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of((-118L), 878L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.0555153951973866
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of((-32766L), (-32766L));
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.of((-2147483635L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.parseRange(",U=^w PC^-t+T", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ,U=^w PC^-t+T into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(32767L, 32767L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=3.1092039256657937
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 877L, 877L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(4294971407L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((-278L), (-2187L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
