/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 13:53:08 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1699928274620777
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject1 = jSONObject0.put("!T90", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('D');
      jSONObject1.write(stringWriter0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("QFF6,/-", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = new Object();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge((JSONObject) null, "%~`ZvHjvVvT2w", biFunction0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.504610936757659
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.put("java.lang.Long@0000000003.", (-3349L));
      jSONObject0.toString((-319), (-1654));
      jSONObject0.length();
      double double0 = jSONObject0.getDouble("java.lang.Long@0000000003.");
      assertEquals((-3349.0), double0, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.05683960125994
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.valueOf(false);
      linkedList0.add(boolean0);
      jSONObject0.put("ihashCde", (Collection) linkedList0);
      JSONObject.quote("] is not a Boolean.");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("ihashCde");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1868601258864917
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("=:H", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.200387414649157
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("z#FKtNm`)`t2OO:o", 0L);
      jSONObject1.put("z#FKtNm`)`t2OO:o", (-50462705));
      jSONObject1.getLong("z#FKtNm`)`t2OO:o");
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject1.getLong("inZ` ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"inZ` \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5324180020373843
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(false, false);
      Boolean.getBoolean((String) null);
      Boolean.compare(false, false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = "A JSONObject text must end with '}'";
      jSONObject0.remove("A JSONObject text must end with '}'");
      String string1 = "qDMd(8G4uIi/C/3qcl.";
      JSONObject jSONObject1 = jSONObject0.put("qDMd(8G4uIi/C/3qcl.", 3461L);
      jSONObject1.keys();
      Boolean.logicalAnd(false, false);
      jSONObject0.optInt("qDMd(8G4uIi/C/3qcl.");
      JSONObject jSONObject2 = jSONObject0.put("qDMd(8G4uIi/C/3qcl.", (double) 3461);
      try { 
        jSONObject2.getJSONObject("A JSONObject text must end with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONObject text must end with '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4100004751111084
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      String string0 = "\\u";
      Byte byte0 = new Byte((byte)123);
      jSONObject0.accumulate(string0, byte0);
      long long0 = jSONObject0.getLong(string0);
      assertEquals(123L, long0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9828215546090028
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      try { 
        jSONObject1.getInt(" MQ!=zK</dw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" MQ!=zK<\\/dw\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.639533074673903
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("] is not a Boolean.", 0L);
      jSONObject0.toString((-319), (-319));
      int int0 = jSONObject2.getInt("] is not a Boolean.");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.8620369094664571
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject.quote("Ud8`BYKg0W]YW;/");
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6045317805301225
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short) (-1974));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject.getNames(jSONObject0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put("", (Map) hashMap0);
      Long long0 = new Long((short) (-1974));
      JSONObject jSONObject1 = new JSONObject(long0);
      jSONObject0.isNull("");
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7284924318543142
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      JSONObject.valueToString(float0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000002", (Collection) linkedList0);
      jSONObject0.optInt((String) null);
      Float.min(0.0F, 1.0F);
      jSONObject1.put("sh", (Collection) linkedList0);
      boolean boolean0 = jSONObject0.has("java.lang.Float@0000000002");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.57639916032546
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a Boolean.");
      JSONObject jSONObject1 = jSONObject0.put("%oRRO>z>&w%\u0005N", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("] is not a Boolean.", 0L);
      jSONObject2.toString((-319), (-319));
      assertEquals(5, jSONObject1.length());
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.452888727960641
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(4044L);
      jSONObject0.putOpt("6\"<PAeGL-i|", long0);
      jSONObject0.getInt("6\"<PAeGL-i|");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("6\"<PAeGL-i|");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.499913833521607
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("+?<", (-749));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      int int0 = jSONObject0.getInt("+?<");
      assertEquals((-749), int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{85");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {85
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6550825543781893
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject.quote("istoString");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("\"istoString\"", stringArray0);
      jSONObject0.length();
      jSONObject0.names();
      jSONObject0.optDouble("istoString");
      JSONObject jSONObject1 = new JSONObject((Object) "\"istoString\"");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject1, 4539, 0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(Double.NaN);
      Double.max(1205.97102275, Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.318905384795703
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put("", (Map) hashMap0);
      jSONObject0.opt((String) null);
      jSONObject0.optBoolean("getgetBytes");
      assertEquals(2, jSONObject0.length());
      
      JSONObject.testValidity((Object) null);
      JSONObject jSONObject1 = new JSONObject((Object) "");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.436520321463159
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      hashMap0.put((JSONObject) null, "\t");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Map) hashMap0);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      jSONObject0.toJSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONObject0.toString(6057);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.277095400555787
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      String string0 = "] is not a JSONArray.";
      JSONObject jSONObject1 = jSONObject0.append("] is not a JSONArray.", "p#&`yP ");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject1.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("etz2H*![1n}?", "etz2H*![1n}?");
      Long long0 = new Long(1L);
      jSONObject1.append("etz2H*![1n}?", long0);
      String string0 = JSONObject.quote("etz2H*![1n}?");
      assertEquals("\"etz2H*![1n}?\"", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.562026907050865
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "?kZl";
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("?kZl", 92);
      double double1 = jSONObject0.optDouble("rem", 1.0);
      assertEquals(1.0, double1, 0.01);
      
      JSONArray jSONArray0 = jSONObject1.names();
      assertNotNull(jSONArray0);
      
      double double2 = jSONObject0.optDouble("?kZl");
      assertEquals(92.0, double2, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("Null pointer");
      jSONObject0.put("$&w=Qddef6iPRpnRKmC", 0L);
      double double0 = jSONObject0.getDouble("$&w=Qddef6iPRpnRKmC");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      Collection<Float> collection0 = null;
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8900800488877194
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("va", (Map) null);
      jSONObject0.put(",\n", 0L);
      JSONObject.quote(",\n");
      JSONObject jSONObject1 = jSONObject0.optJSONObject("va");
      assertNotSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5684132580539654
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Map) hashMap0);
      jSONObject1.remove("] is not a JSONArray.");
      String string0 = jSONObject0.toString((-1017));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4286687697449683
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(2779);
      assertEquals("{}", string0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      jSONObject0.put("{}", 8192);
      long long0 = jSONObject0.optLong("{}");
      assertEquals(8192L, long0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = new Object();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.3826174754261613
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean.compare(false, true);
      String string0 = "N";
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      Double double0 = Double.valueOf((double) (-1));
      hashMap0.put((Long) null, double0);
      jSONObject0.put("N", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-522), (-522));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.953093269754322
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      jSONObject0.put("p&2htJPsb-|", (Map) hashMap0);
      try { 
        jSONObject0.getDouble("p&2htJPsb-|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"p&2htJPsb-|\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.439734068584852
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = "N";
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      Long long0 = new Long(1L);
      Double double0 = new Double(Double.NaN);
      hashMap0.put(long0, double0);
      jSONObject0.put("N", (Map) hashMap0);
      try { 
        jSONObject0.toString((-522), (-522));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.4458711841009912
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\f";
      jSONObject0.put("\f", 1166.3238);
      try { 
        jSONObject0.append("\f", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\f] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ": ";
      jSONObject0.accumulate(": ", ": ");
      try { 
        jSONObject0.append(": ", ": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[: ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0021041445470193
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject1 = jSONObject0.put("ismin", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("'w)ETrfrZ_[eX(q", (Object) hashMap0);
      jSONObject1.optJSONObject("isoptJSONArray");
      JSONObject.testValidity(jSONObject0);
      boolean boolean0 = new Boolean("isoptJSONArray");
      Integer integer0 = new Integer(61);
      jSONObject0.optInt("n2D`)CxQ47L@[mY");
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(integer0, 61, 0);
      String string0 = jSONObject1.toString(61, 0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject3 = jSONObject0.put("] is not a Boolean.", (Collection) linkedList0);
      jSONObject1.getJSONObject("ismin");
      JSONObject jSONObject4 = new JSONObject(integer0);
      jSONObject2.optDouble("n2D`)CxQ47L@[mY");
      String string1 = jSONObject3.optString("'w)ETrfrZ_[eX(q", "c0?SioGAE9cQ");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("get", (Object) "get");
      String string0 = jSONObject0.optString("get");
      assertNotNull(string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.append("etz2H*![1n}?", boolean0);
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      jSONObject1.put("etz2H*![1n}?", (Map) hashMap0);
      jSONObject1.getJSONObject("etz2H*![1n}?");
      jSONObject0.isNull("etz2H*![1n}?");
      boolean boolean1 = jSONObject1.isNull("etz2H*![1n}?");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1342L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      try { 
        jSONObject1.getInt("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.9164675226849917
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put("", (Map) hashMap0);
      jSONObject0.opt("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2786339548781145
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", 34);
      String string1 = jSONObject1.getString("wheel.json.JSONObject@0000000001");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.112704644485289
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("Null key.", "Null key.");
      try { 
        jSONObject0.getBoolean("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0475672204411104
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put("", (Map) hashMap0);
      jSONObject0.accumulate("", object0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(": ", ": ");
      jSONObject1.accumulate(": ", ": ");
      boolean boolean0 = jSONObject0.isNull(": ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote((String) null);
      try { 
        jSONObject0.put((String) null, (-2360));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "SuA[=x4c<");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("SuA[=x4c<", stringArray0);
      jSONObject0.put("SuA[=x4c<", false);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.2507841823307615
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "QU8`BKg0gW];/");
      // Undeclared exception!
      jSONObject0.toString(2147483645, 2147483645);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getintern", false);
      jSONObject0.getBoolean("getintern");
      String[] stringArray0 = new String[4];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("z]dP+4", "z]dP+4");
      boolean boolean0 = jSONObject0.optBoolean("z]dP+4");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(": ", ": ");
      StringWriter stringWriter0 = new StringWriter(22);
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.048844359649284
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("s.WODq_jP$hl");
      JSONObject jSONObject1 = jSONObject0.putOpt("s.WODq_jP$hl", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.3300185960211162
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject.valueToString(hashMap0, (-231), 70);
      Boolean boolean0 = new Boolean("0.mTXPr_P/j?Lm|<2~");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9632800269699417
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("%&+K6x&#ba!", "%&+K6x&#ba!");
      jSONObject1.get("%&+K6x&#ba!");
      try { 
        jSONObject1.getInt("%&+K6x&#ba!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%&+K6x&#ba!\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-46638682));
      assertEquals("-4.6638682E7", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3987405541121611
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("j[u", 0.0);
      try { 
        jSONObject0.getBoolean("j[u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j[u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.1756407392813153
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("etz2*![1n}?", "etz2*![1n}?");
      String string0 = jSONObject0.toString((-575), 86);
      assertNotNull(string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("PLq?@8#.'2ovV", (Collection) null);
      try { 
        jSONObject1.getJSONObject("PLq?@8#.'2ovV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"PLq?@8#.'2ovV\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject("{}");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.0966173996135877
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject1 = jSONObject0.put(".", (Map) hashMap0);
      jSONObject1.toString((-522), (-522));
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000003\": {}}");
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.1003470033431912
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short) (-1974));
      JSONObject jSONObject0 = new JSONObject(short0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      jSONObject1.toString((int) (short) (-1974), (int) (short) (-1974));
      JSONObject jSONObject2 = new JSONObject("{\n\"java.lang.String@0000000006\": {},\n\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"\n}");
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{(r C`S:) <I{iA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 13 of {(r C`S:) <I{iA
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{nCK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {nCK
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("}NH@S)Mx;.t*C^*>]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }NH@S)Mx;.t*C^*>]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.9948516297969727
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.196486797046588
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.put("to", (Object) float0);
      jSONObject1.optDouble("to", 0.0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.3987046532661278
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("opt");
      JSONObject jSONObject0 = new JSONObject((Object) "\"opt\"");
      // Undeclared exception!
      jSONObject0.toString(1393);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("4aWY#oLC", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      Long long0 = new Long((-456L));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt("");
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer integer0 = new Integer(4);
      String string0 = JSONObject.valueToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("ihashCde", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("ihashCde");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = JSONObject.quote("MB*3r&_/0J^2}eJC");
      assertEquals("\"MB*3r&_/0J^2}eJC\"", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.7322201838634412
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Long long0 = new Long(0L);
      Long.max(0L, 2167L);
      JSONObject jSONObject0 = new JSONObject(long0);
      String string0 = jSONObject0.optString("w/#_sF", (String) null);
      assertNull(string0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject.valueToString((Object) null, 83, 83);
      Object object0 = new Object();
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 548, 548);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("z#FKtNm`)`t2OO:o", 0L);
      long long0 = jSONObject1.getLong("z#FKtNm`)`t2OO:o");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("@O[@DXR.M0lw[", "@O[@DXR.M0lw[");
      try { 
        jSONObject1.getLong("@O[@DXR.M0lw[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@O[@DXR.M0lw[\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(34, 34);
      jSONObject0.put("{}", 34);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      jSONObject0.put("] is not a JSONObject.", (Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2868.0);
      assertEquals("2868", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1867915479384763
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("000", (-2125L));
      assertEquals((-2125L), long0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.9828215546090028
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.0325330653044436
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "$WY(>qU 96WicsOb>6#_");
      jSONObject0.remove("$WY(>qU 96WicsOb>6#_");
      try { 
        jSONObject0.getLong("$WY(>qU 96WicsOb>6#_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$WY(>qU 96WicsOb>6#_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.078395752078857
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject.quote("TSB;:&[Y%YmajDN`wZf");
      Float float0 = new Float((-521.977F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("\"TSB;:&[Y%YmajDN`wZf\"", (Collection) linkedList0);
      jSONObject0.optJSONArray("\"TSB;:&[Y%YmajDN`wZf\"");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.8497459008048849
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.append("W.@ jYYES}-k.Kx:m", boolean0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = new JSONObject((Object) "W.@ jYYES}-k.Kx:m");
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      jSONObject1.isNull("W.@ jYYES}-k.Kx:m");
      jSONObject0.optJSONArray("W.@ jYYES}-k.Kx:m");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("\"hBPQD_'Y9s<Zf*HYt", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.9758040107493536
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = JSONObject.valueToString("Null key.");
      assertNotNull(string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.append("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.7749673832258979
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      jSONObject0.toString((-522), (-522));
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.valueToString("", 13, 13);
      jSONObject0.toString(13);
      jSONObject1.optString("Unterminated string");
      jSONObject0.optString("Unterminated string", "");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.3871696044639985
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString(455);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.3987405541121611
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("7^3XA", (-2173.16448380581));
      try { 
        jSONObject0.getBoolean("7^3XA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7^3XA\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble((String) null, 294.0366973130272);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.3350026060706126
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean(",\n", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.824743563920588
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("issum", true);
      String[] stringArray0 = new String[10];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("] is not a number.");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ] is not a number.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.700404681812747
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long.max((-1L), (-1L));
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = jSONObject0.optString("w/#_sF", "w/#_sF");
      assertEquals("w/#_sF", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.7213192226263727
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("[]", 2067L);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.630212085018754
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("\"q]}@sARK$,&P", 0L);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("3-X");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toS\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("ZAhZ]rpy$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ZAhZ]rpy$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(jSONObject0, (-4122), (-3002));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.3336889061514894
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-28));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.2146303757773043
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "6P}E@>%QP");
      jSONObject0.toString(47, 47);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("{85", true);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.5993966494065037
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = Double.NaN;
      JSONObject.doubleToString(Double.NaN);
      String string0 = "9yN\\^qr";
      JSONObject.quote("9yN^qr");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null, 0);
      String string1 = "] is not a JSONObject.";
      try { 
        jSONObject0.get("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = JSONObject.quote("9>t1Xhj\")A");
      assertEquals("\"9>t1Xhj\\\")A\"", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2696.59817181);
      assertEquals("2696.59817181", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      try { 
        jSONObject0.getString("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Short short0 = new Short((short)21);
      String string0 = JSONObject.valueToString(short0, (short)21, (short)21);
      assertNotNull(string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, (-56592943), (-56592943));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Double double0 = new Double(1.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ] not found.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, (-2457));
      assertEquals((-2457), int0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("s<p ih|", 9);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      int int0 = jSONObject0.optInt("wheel.json.JSONObject@0000000001");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("Null pointer");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSON does not allow non-finite numbers.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "E8~U\"QTLwPf}Su_8z'";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = JSONObject.quote("] not found.");
      assertEquals("\"] not found.\"", string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("vg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vg\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("jo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
