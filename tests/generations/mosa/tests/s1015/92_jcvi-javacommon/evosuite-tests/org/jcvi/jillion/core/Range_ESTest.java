/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 13:42:37 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.269042622949001
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range_Builder1.build();
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.435176803932062
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range range1 = Range.of(1L, 195L);
      range0.equals(range1);
      Range.ofLength(1L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483646L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(2147483646L);
      Range range0 = range_Builder1.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.equals(linkedList0);
      long long0 = range0.getLength();
      //  // Unstable assertion: assertEquals(0L, long0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.329337375063968
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(4735L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range range1 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.ofLength(4735L);
      boolean boolean0 = range2.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483646L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(2147483646L);
      Range range0 = range_Builder1.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals((Object) null);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.634519557059754
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.equals(">|#buUFQM3x_");
      Range range1 = Range.of(276L, 9223372034707297361L);
      Range range2 = Range.of(9223372034707297361L);
      boolean boolean0 = range0.equals(range2);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range2.complementFrom(list0);
      assertEquals(1, list1.size());
      assertFalse(list1.contains(range2));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.5821739010559357
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(245L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-899L), 32767L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.608478664809294
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.of((-1L), 5194L);
      Range range0 = Range.of((-1L), 127L);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1349250982103
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.of(255L);
      long long0 = range0.getEnd();
      assertSame(range0, range1);
      assertEquals(255L, long0);
      
      Range range2 = Range.ofLength(65556L);
      boolean boolean0 = range2.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.979024296846825
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 255L, 255L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 255L);
      boolean boolean0 = range0.endsBefore(range1);
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
      
      long long0 = range0.getLength();
      assertSame(range0, range1);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775798L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(9223372036854775798L);
      range1.equals(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1351203217412427
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of((-1562L));
      assertFalse(range0.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1562L), (-1562L));
      Range range2 = Range.of((-2114L), (-1036L));
      boolean boolean0 = range2.equals(range1);
      assertSame(range1, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.797208748908024
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of((-1573L));
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      Range range1 = Range.of((-2116L));
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.134006824564753
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of((-1573L));
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      Range range1 = Range.of((-2116L), (-1573L));
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.059454851967032
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775801L));
      Range range1 = Range.of((-9223372036854775801L), (-9223372036854775801L));
      range1.equals(range0);
      range1.equals("qFN}iLxI2f<y");
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.of((-166L), 3501L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.133133660972153
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Long long0 = new Long((-1455L));
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.equals(long0);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Long long0 = new Long((-1459L));
      Range range0 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.72426161434636
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Object object0 = new Object();
      Range.ofLength(9223372036854775807L);
      Range range1 = Range.of((-746L));
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -746 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 255L, 255L);
      Range range0 = range_Builder0.build();
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      Long long1 = new Long(6411L);
      range0.equals((Object) null);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-33L), (-33L));
      Long long0 = new Long((-33L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7946485850575375
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-376L), (-376L));
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.equals(range_CoordinateSystem0);
      assertSame(range1, range0);
      assertFalse(boolean0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.441171005310231
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of(4698L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Range range1 = Range.of(4824L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 255L, 255L);
      Range range0 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.388207255731663
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-33L));
      Range range1 = Range.of((-33L), 116L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-33L), long0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(116L, 116L);
      Long long0 = new Long(8L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.of(4294967295L);
      Range range0 = Range.of(4294967295L, 4294967295L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, (-376L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -377 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=4.055791960229506
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(7110L, 32767L);
      Range range1 = Range.of((-128L), (-128L));
      Range.ofLength(7110L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = Range.of(32767L);
      range2.spliterator();
      List<Range> list0 = range2.complement(range0);
      range2.complementFrom(list0);
      assertTrue(list0.isEmpty());
      
      Range range3 = Range.ofLength(32767L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(1729L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(5201L, 2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.5081884866819193
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      Range range1 = Range.of(65535L);
      range1.intersects(range0);
      Range range2 = Range.of(1729L, 65535L);
      range0.equals(range2);
      Range.of(1729L, 65535L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(7110L, 7110L);
      Range range1 = Range.of(3489L, 7110L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range range2 = range0.asRange();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.2015566946087035
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.of((-32768L), (-32768L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.4006036255977308
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775802L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775802L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -13 would make range [9223372036854775802 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.contractBegin(2147483646L);
      Range range0 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.971572873102881
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(7110L, 65535L);
      Range range1 = Range.of((-128L), (-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range1);
      range1.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.of(27L, (-2349L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = (-32L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-32L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.3846246314593835
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(3489L, 9223372036854775807L);
      range1.equals(range0);
      Range range2 = range1.asRange();
      assertSame(range2, range1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.892632114903634
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      Long long0 = new Long(1839L);
      range1.equals(range0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8899587648618628
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      range0.toString();
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.386182706029501
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.of((-1733L), 2147483647L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.6342893966520413
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      range1.complement(range0);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(1729L, 4294967296L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of(4118L, 9223372036854775806L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=4.127589063074428
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range2 = Range.of((-1L), 1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, (-1L), 9223372036854710283L);
      range0.endsBefore(range3);
      String string0 = range2.toString(range_CoordinateSystem1);
      assertEquals("[ 0 .. 2 ]/RB", string0);
      
      Range range4 = Range.of(range_CoordinateSystem0, (-1055L), (-1L));
      List<Range> list0 = range4.complement(range1);
      List<Range> list1 = range4.complementFrom(list0);
      assertFalse(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.590283728016888
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(range_CoordinateSystem0, (-3485L), 2147483647L);
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Range range1 = Range.of((-3485L), 2147483647L);
      //  // Unstable assertion: assertNotSame(range1, range0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.4777981404489164
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.of(1L);
      range0.complement(range1);
      Range range2 = range1.intersection(range0);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range0 = Range.of(2147483646L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(4294967295L, 4294967295L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.4406795806701997
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(1L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.3702568396841768
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      
      Range range2 = range0.asRange();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.111534645219026
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.3866123593999244
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 2278L);
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder((-1816L), 2278L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Comparators.values();
      Object object0 = new Object();
      range0.endsBefore(range0);
      Range.of(0L);
      // Undeclared exception!
      try { 
        Range.parseRange("[ -2147483648 .. 2278 ]/0B", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.199278271277649
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.of(1534L, 5194L);
      String string0 = "9-1r<S<x.p:He";
      // Undeclared exception!
      try { 
        Range.parseRange("9-1r<S<x.p:He");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.2037023750152533
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(1729L, 65535L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1729 .. 65535 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 1729 .. 65535 ]/0B");
      assertSame(range1, range0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.0606758531880334
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(6248L);
      Range.of(255L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.4419009081004504
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range1.equals(range0);
      range0.startsBefore(range0);
      // Undeclared exception!
      try { 
        range1.complement(range0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.388244098321697
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range range1 = Range.of((-2147483648L));
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(4698L);
      range0.getEnd();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.4420466346688325
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(10L);
      List<Range> list0 = range0.split(347L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.equals(range0);
      range0.equals(range_CoordinateSystem0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.5050443279352606
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-33L));
      Range range1 = Range.of((-33L), 116L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.892400767303865
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of((-1836L), 7110L);
      Range range1 = Range.of((-1836L), (-1836L));
      boolean boolean0 = range1.equals(range1);
      assertTrue(boolean0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of((-360L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.0808360831049293
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.getBegin();
      Object object0 = new Object();
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.8671053537959956
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2673L), 4721L);
      List<Range> list0 = range0.split(701L);
      List<Range> list1 = range0.complementFrom(list0);
      assertFalse(list0.contains(range0));
      assertEquals(0, list1.size());
      assertEquals(11, list0.size());
      
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(4721L, long0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-128L));
      boolean boolean0 = range0.equals("`z=]XTof)RL[BM");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.0587765179553648
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.of((-1L));
      range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.3644032483243334
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Long long0 = new Long(0L);
      range0.getEnd();
      String string0 = range0.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.2838685127595846
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-128L), 5194L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.2227634799363307
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-2778L), 65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of((-514L), 4294967296L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775779L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.2456149533173155
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.6844998972931466
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.ofLength(9956L);
      Range range1 = Range.of((-204L), 9956L);
      boolean boolean0 = range1.intersects(range0);
      assertTrue(boolean0);
      
      Range range2 = Range.of(9223372036854775806L, 9223372036854775806L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.150176419224593
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(1729L);
      Range range1 = Range.of(1729L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.2573961657836517
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 347L, 347L);
      Range range1 = range0.asRange();
      long long0 = range1.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.442381365997716
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(1358L);
      Range range1 = Range.of(1358L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.3880020896497194
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.4470602449153285
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-2147483648L), long0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.ofLength(4294967296L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      List<Range> list0 = range0.split(4294967295L);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(9223372036854775080L, 9223372036854775080L);
      List<Range> list0 = range0.split(9223372036854775080L);
      assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.1131212451455865
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of(258L);
      range0.isSubRangeOf(range1);
      Object object0 = new Object();
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.25091617769584
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.ofLength(2147483647L);
      long long0 = range1.getLength();
      assertEquals(2147483647L, long0);
      
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 9223372036854775807 .. 9223372036854775807 ]/0B", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.0636744551907324
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(2147478446L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(2147478446L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.1517986823729784
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.6083562637318707
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(255L, long0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.2664158827336083
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      List<Range> list0 = range1.complement(range0);
      range1.equals(list0);
      assertTrue(list0.contains(range1));
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Long long0 = new Long((-2147483648L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.6912004809506773
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-3993L));
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-1786L), (-1786L));
      // Undeclared exception!
      try { 
        range0.split((-1786L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.984894110603048
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.ofLength(9956L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775088L, (-1135L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1136 would make range [9223372036854775087 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(288L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.3584884981309253
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-376L), (-376L));
      Range range0 = Range.of((-376L), (-128L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.5891119514278125
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range range1 = range0.asRange();
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      range1.complementFrom(list1);
      range0.complementFrom(list1);
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.shift((-1L));
      range_Builder1.contractBegin(1L);
      range0.endsBefore(range1);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(6L);
      range_Builder0.contractBegin(6L);
      Range range0 = range_Builder0.build();
      List<Range> list0 = range0.split(6L);
      assertTrue(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4698L, 1522L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 32767L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.2380188789437025
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-2147483645L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of(1001L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.1825257970077145
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.equals(range_CoordinateSystem0);
      range0.iterator();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.2459638325100846
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      //  // Unstable assertion: assertFalse(range1.equals((Object)range0));
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(5L, 5L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.6881336682453103
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.ofLength(8L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(65535L, (-1063L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2035L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(4294967296L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.388149535673943
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of((-2375L));
      Range range1 = Range.of((-2375L));
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertSame(range1, range0);
      assertTrue(list1.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-622L), (-622L));
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.0923850344529913
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(22L);
      range_Builder0.build();
      Range range0 = Range.of(22L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.0577029806499434
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of((-29777L));
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.of((-140L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-140L), (-140L));
      range_Builder0.expandEnd((-140L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775801L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.4403091441812106
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of((-4294971308L), (-4294971308L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -4294971307 .. -4294971307 ]/RB", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(22L);
      range_Builder0.contractBegin(22L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(0L);
      boolean boolean0 = range0.endsBefore(range1);
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of((-22L), (-22L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.299145180131708
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.2796666627182693
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775801L));
      Long long0 = new Long((-9223372036854775801L));
      long long1 = range0.getBegin();
      assertEquals((-9223372036854775801L), long1);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.1479893632953337
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-9223372036854775808L), long0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of((-2912L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-3485L), (-3485L));
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals((-3485L), long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.4803585782766824
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of(728L, 4294967296L);
      String string0 = range0.toString();
      assertEquals("[ 728 .. 4294967296 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(728L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.ofLength(2086L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.137723996281925
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.of(9223372036854775088L, 9223372036854775088L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.151798682372979
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = 2147478447L;
      Range range0 = Range.ofLength(2147478447L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-3575L), (-3575L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.2880966068153166
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 3234L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.133310203178477
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-495L));
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.3344475601975287
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertNotSame(range2, range0);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.152991288216747
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.ofLength(2147478447L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.4411277208882947
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.7955428394729185
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      range0.intersection(range1);
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.20490554701416
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of(20L, 20L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(21L, long0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.483218900314081
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-3485L), 2147483647L);
      range_Builder0.copy();
      range_Builder0.contractEnd(255L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals((-3485L), long0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(22L);
      range_Builder0.contractBegin(22L);
      Range range0 = Range.of(22L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.ofLength(2147478447L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.133680985529237
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.of(1L, 1L);
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.ofLength(1L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.299979556435421
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range range0 = Range.of(9986L, 9986L);
      range0.getEnd();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.357284162522736
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      range0.getEnd();
      Object object0 = new Object();
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.06633045170451
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(0L, long0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range range0 = Range.of((-32L), 17L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("0B", string0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(4294967296L, long0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=3.0840133560770506
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.ofLength(2147478447L);
      Range.Builder range_Builder0 = new Range.Builder(2147478447L);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
