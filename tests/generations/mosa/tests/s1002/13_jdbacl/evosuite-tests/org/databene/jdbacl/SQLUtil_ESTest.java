/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 13 20:59:09 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.2544482339725715
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
      
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "--";
      stringArray0[2] = "";
      String string1 = SQLUtil.innerJoin("J", stringArray0, "J", "--", stringArray0);
      assertEquals("J as -- on J. = --. and J.-- = --.-- and J. = --.", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("ExcepAo6in ol>bJack");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ExcepAo6in ol>bJack", defaultDBTable0, (-1803634497), "=\"w]Msh5tiwt/%ZQ/V");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=\"w]Msh5tiwt/%ZQ/V");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("\"<v;Jmu", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6470104076670853
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "PROJECT-FILTER";
      SQLUtil.mutatesDataOrStructure("PROJECT-FILTER");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("PROJECT-FILTER");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "PROJECT-FILTER";
      stringArray0[1] = "PROJECT-FILTER";
      stringArray0[2] = "PROJECT-FILTER";
      stringArray0[3] = "PROJECT-FILTER";
      stringArray0[4] = "PROJECT-FILTER";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "PROJECT-FILTER";
      objectArray0[1] = (Object) "PROJECT-FILTER";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-818), "BLOB");
      Integer integer0 = new Integer((-818));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("BLOB BLOB NOT NULL", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("null = null AND null = null", stringArray0);
      assertEquals("null = null AND null = null.null, null = null AND null = null.null", string1);
      
      DBSchema dBSchema0 = new DBSchema(" AUTHORIZATION ", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string2 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertNotNull(string2);
      assertEquals("unique constraint constraint", string2);
      
      String string3 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, )", string3);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("SELECT * gmOM ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[2] = "SELECT * gmOM ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SELECT * gmOM ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("B.MV-d");
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertSame(dBTable0, defaultDBTable0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 3121, "7");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" 7 NULL", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "u\"[1cg80(dzl";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderValue(stringBuilder0);
      int int0 = (-630);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-671), (long) (-671));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -671
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.076104579100767
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
      
      String string1 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string1);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("null", (DBSchema) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "4OLDok2Ka(<|";
      stringArray0[2] = "4OLDok2Ka(<|";
      stringArray0[3] = null;
      stringArray0[4] = "4OLDok2Ka(<|";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("4OLDok2Ka(<|", false, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (4OLDok2Ka(<|, , 4OLDok2Ka(<|, , 4OLDok2Ka(<|) REFERENCES null(4OLDok2Ka(<|, , 4OLDok2Ka(<|, , 4OLDok2Ka(<|)", string2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6176496511936216
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = SQLUtil.normalize(":h+8JWtDbl|Z*+9B", true);
      assertEquals(": h + 8JWtDbl | Z * + 9B", string0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(":h+8JWtDbl|Z*+9B", (DBTable) null, (-2034), "");
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      TableContainer tableContainer0 = new TableContainer("[lrpPZ.]");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[lrpPZ.]", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance((-95115025), "Bz<");
      Integer integer0 = new Integer((-95115025));
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" BZ<(0) NULL", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 955, "");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("deletJe", defaultDBTable0, 955, "deletJe");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("deletJe, deletJe", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("org.apache.derby.impl.sql.execute.rts.RealSetOpResultSet8tatistics", (DBCatalog) null);
      dBSchema0.getTable("org.apache.derby.impl.sql.execute.rts.RealSetOpResultSet8tatistics");
      DBDataType dBDataType0 = DBDataType.getInstance((-2), "org.apache.derby.impl.sql.execute.rts.RealSetOpResultSet8tatistics");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.execute.rts.RealSetOpResultSet8tatistics", (DBTable) null, dBDataType0);
      defaultDBColumn0.setDefaultValue("SELECT * FROM ");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("org.apache.derby.impl.sql.execute.rts.RealSetOpResultSet8tatistics ORG.APACHE.DERBY.IMPL.SQL.EXECUTE.RTS.REALSETOPRESULTSET8TATISTICS DEFAULT SELECT * FROM  NULL", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.585624392740027
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      DBDataType dBDataType0 = DBDataType.getInstance(2282, "ltweas9");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ltweas9", (DBTable) null, dBDataType0, integer2);
      Integer integer3 = RawTransaction.ABORT;
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer3, integer4);
      SQLUtil.renderColumn(defaultDBColumn1);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "* %+|8*{<yd");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1, stringBuilder0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("ltweas9");
      assertNull(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLUtil.isQuery("select into");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[Zk}.shAr");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("remove() is not supported by ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("executeupdateshort");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4841997459989975
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("z9itmw&SAqYzo");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z9itmw&SAqYzo");
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) jdbcDataSource0);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(1244);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("z9itmw&SAqYzo");
      jdbcConnectionPool0.setLogWriter(mockPrintWriter0);
      PrintWriter printWriter0 = jdbcConnectionPool0.getLogWriter();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "z9itmw&SAqYzo";
      stringArray0[1] = "z9itmw&SAqYzo";
      stringArray0[2] = "z9itmw&SAqYzo";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("z9itmw&SAqYzo", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1015830955806851
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1506, "BLOB");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("[=T", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.toString();
      SQLUtil.renderColumn(defaultDBColumn0);
      Boolean boolean0 = Boolean.valueOf("[=T");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.585624392740027
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("z9itmw&SAqYzo");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z9itmw&SAqYzo");
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      DBDataType dBDataType0 = DBDataType.getInstance(2270, "z9itmw&SAqYzo");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("z9itmw&SAqYzo", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "z9itmw&SAqYzo Z9ITMW&SAQYZO(1) NULL");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("z9itmw&SAqYzo Z9ITMW&SAQYZO(1) NULL");
      assertNull(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SQLUtil.removeComments("^=-d_!!8UAHS_8@(");
      SQLUtil.isDDL("^=-d_!!8UAHS_8@(");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NOT NULL");
      String[] stringArray0 = new String[5];
      stringArray0[0] = " NOT NULL";
      stringArray0[1] = "^=-d_!!8UAHS_8@(";
      stringArray0[2] = "^=-d_!!8UAHS_8@(";
      stringArray0[3] = "j u";
      stringArray0[4] = " NOT NULL";
      String[] stringArray1 = new String[6];
      stringArray1[0] = " NOT NULL";
      stringArray1[1] = "j u";
      stringArray1[2] = "98.wh.c ;-m5$godZ";
      stringArray1[3] = "^=-d_!!8UAHS_8@(";
      stringArray1[4] = "^=-d_!!8UAHS_8@(";
      stringArray1[5] = "^=-d_!!8UAHS_8@(";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("^=-d_!!8UAHS_8@(", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      String string0 = "d1K:!";
      DataStore dataStore0 = new DataStore("b+YdrC!FK%lGFX");
      VirtualFile virtualFile0 = new VirtualFile("d1K:!", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "-NJ6", (Object[]) stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "qeiCBz1%oSqxIM", false, stringArray0);
      defaultDBTable0.getReferrers();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Nlqk=&qv`M");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("`xMwI626[LbjRSh", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream((byte[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.8053415898278653
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = SQLUtil.normalize("=6;i5Bm", true);
      assertEquals("= 6 ; i5Bm", string0);
      
      SQLUtil.parseColumnTypeAndSize("= 6 ; i5Bm");
      Character character0 = Character.valueOf('$');
      String string1 = SQLUtil.renderValue(character0);
      assertEquals("'$'", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Character character0 = Character.valueOf('W');
      String string0 = SQLUtil.substituteMarkers("deletJe", "updateblob", character0);
      assertEquals("deletJe", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLUtil.removeComments("[NANTV@Y02AbL+]1S");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[NANTV@Y02AbL+]1S";
      stringArray0[1] = "a@g";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join("iyvLV", "a@g", stringArray0, ">L1dJ", ">L1dJ", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("]THuQ7PvaD?X2*s", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("ExcepAo6in ol>bJack");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1842632844), "!e");
      dBDataType0.isAlpha();
      Integer integer0 = new Integer(48);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("!e", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("!e !E(48,48) NULL", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getComponents();
      DBSchema dBSchema0 = new DBSchema("SELECT * FROM ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ");
      defaultDBTable0.getIndex("drop indexisvalid(int)");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "", "");
      assertEquals("''", string0);
      
      String string1 = SQLUtil.substituteMarkers("", "c3BnG", "%Ca");
      assertEquals("", string1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7011978535928471
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "n=&' *)WVr>9T[>Q";
      stringArray0[2] = ":h+8JWtDbl|Z*+9B";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "K";
      stringArray1[1] = "null = null AND n=&' *)WVr>9T[>Q = 'n=&' *)WVr>9T[>Q' AND :h+8JWtDbl|Z*+9B = ':h+8JWtDbl|Z*+9B'";
      stringArray1[2] = "null = null AND n=&' *)WVr>9T[>Q = 'n=&' *)WVr>9T[>Q' AND :h+8JWtDbl|Z*+9B = ':h+8JWtDbl|Z*+9B'";
      stringArray1[5] = "null = null AND n=&' *)WVr>9T[>Q = 'n=&' *)WVr>9T[>Q' AND :h+8JWtDbl|Z*+9B = ':h+8JWtDbl|Z*+9B'";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("n=&' *)WVr>9T[>Q", stringArray1, "n=&' *)WVr>9T[>Q", "set def", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.join("iyvLV", "iyvLV", stringArray0, "eTU@", "iyvLV", stringArray0);
      assertEquals("iyvLV join eTU@ as iyvLV on iyvLV.null = iyvLV.null and iyvLV.null = iyvLV.null and iyvLV.null = iyvLV.null and iyvLV.null = iyvLV.null and iyvLV.null = iyvLV.null", string0);
      
      String[] stringArray1 = new String[0];
      String string1 = SQLUtil.leftJoin("iyvLV", stringArray1, "iyvLV", "iyvLV", stringArray0);
      assertEquals("left join iyvLV as iyvLV on ", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("--", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (--) REFERENCES null(--)", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[10];
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("insertunable to load the class {0} responsible for the datatype {1}", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(450);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) "", 450, 450);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 450, end 450, s.length() 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLUtil.removeComments(" W4zR> ");
      SQLUtil.normalize(" W4zR> ", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance(472, " W4zR> ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[3];
      stringArray1[0] = "W4zR >";
      stringArray1[1] = " W4zR> ";
      stringArray1[2] = " W4zR> ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("?P", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) jdbcDataSource0);
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = SQLUtil.normalize("[;,tBpuv:L<6[", true);
      assertEquals("[ ;, tBpuv : L < 6 [", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      String[] stringArray0 = new String[6];
      SQLUtil.join(",", "checkpoint end", stringArray0, " NOT", "checkpoint end", stringArray0);
      VersionNumber.valueOf(" NOT");
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "inner";
      stringArray0[1] = "|`1*dQw1AR9Hh+@5M3!";
      stringArray0[2] = "!`gZ/(H{fRp6r6EP";
      stringArray0[3] = "|`1*dQw1AR9Hh+@5M3!";
      stringArray0[4] = "inner";
      stringArray0[5] = "inner";
      stringArray0[6] = "iyvLV";
      stringArray0[7] = "inner";
      stringArray0[8] = "iyvLV";
      String string0 = SQLUtil.join("inner", "|`1*dQw1AR9Hh+@5M3!", stringArray0, "inner", "inner", stringArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("I");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" AND ", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "I", true, stringArray0);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT I UNIQUE ()", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("K}iqTk{>RZ#+bqi");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("K}iqTk{>RZ#+bqi", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "qeiCBz1%oSqxIM", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "|vyU29B>i.ul");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      StringBuilder stringBuilder3 = stringBuilder2.append(1538);
      StringBuilder stringBuilder4 = stringBuilder3.append((float) 1538);
      StringBuilder stringBuilder5 = stringBuilder4.append("org.apache.derby.impl.store.raw.data.DeleteOperation");
      StringBuilder stringBuilder6 = stringBuilder5.append(2411L);
      SQLUtil.addRequiredCondition((String) null, stringBuilder6);
      assertEquals("|vyU29B>i.ul or null15381538.0org.apache.derby.impl.store.raw.data.DeleteOperation2411 and null", stringBuilder6.toString());
      assertEquals("|vyU29B>i.ul or null15381538.0org.apache.derby.impl.store.raw.data.DeleteOperation2411 and null", stringBuilder0.toString());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      columnDescriptorList0.add((Object) integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("qxYoa7?h92");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table qxYoa7?h92", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = SQLUtil.normalize("B.a9z> >1#3HtV`Dk'", false);
      assertEquals("B.a9  z > > 1 # 3HtV ` Dk ''", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.5849073991677757
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLUtil.normalize("!m|K", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("!m|K", defaultDBTable0, (DBDataType) null, integer0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.6614754642876286
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\u0001\u0182", defaultDBTable0, 129, "\u0001\u0182");
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\u0001\u0182");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(";");
      assertNull(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("LECT * FOM ");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6522895046372623
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("SELECT * FROM ", stringBuilder0);
      stringBuilder1.append(true);
      assertEquals("SELECT * FROM true", stringBuilder1.toString());
      
      SQLUtil.normalize("SELECT * FROM ", true);
      StringBuilder stringBuilder2 = new StringBuilder();
      DBSchema dBSchema0 = new DBSchema("drop materi");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",qZRv>%Z{})", dBSchema0);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder2);
      assertEquals("", stringBuilder2.toString());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.4779266835803924
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure(";G%W9u'Ba");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "q#r+ i";
      stringArray0[1] = "q#r+ i";
      String string0 = SQLUtil.join(";G%W9u'Ba", ";G%W9u'Ba", stringArray0, "truncatedrop materi", "truncatedrop materi", stringArray0);
      assertEquals(";G%W9u'Ba join truncatedrop materi as truncatedrop materi on ;G%W9u'Ba.q#r+ i = truncatedrop materi.q#r+ i and ;G%W9u'Ba.q#r+ i = truncatedrop materi.q#r+ i", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",h!|X_vfA|Y1~r1");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      boolean boolean1 = SQLUtil.isDML("truncatedrop materi");
      assertTrue(boolean1);
      
      DefaultDBTable defaultDBTable2 = new DefaultDBTable(";G%W9u'Ba join truncatedrop materi as truncatedrop materi on ;G%W9u'Ba.q#r+ i = truncatedrop materi.q#r+ i and ;G%W9u'Ba.q#r+ i = truncatedrop materi.q#r+ i");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable2, stringArray0);
      String string1 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("exec");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execute/`womr%t^-;");
      assertNull(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.0358196128697856
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * QFROM", true, (String) null, "SELECT * QFROM");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"SELECT * QFROM\" CHECK SELECT * QFROM", string0);
      
      String string1 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"SELECT * QFROM\" ", string1);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("SELECT * QFROM");
      boolean boolean0 = SQLUtil.isQuery("SELECT * QFROM");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[12];
      String string0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "=kThppkyNQ_O`*", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "=kThppkyNQ_O`*");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("=kThppkyNQ_O`*", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.append("=kThppkyNQ_O`*");
      // Undeclared exception!
      try { 
        stringBuilder3.appendCodePoint((-878));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("selectsetbigdecimal(string,bigdecimal)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"string\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "insertrange_index");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK insertrange_index", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = SQLUtil.normalize("selectselect relname from pgbcatalog.pg_class where oid = ?", true);
      assertEquals("selectselect relname from pgbcatalog.pg_class where oid = ?", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[12];
      String string0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "=kThppkyNQ_O`*", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "=kThppkyNQ_O`*");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("=kThppkyNQ_O`*", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.append("=kThppkyNQ_O`*");
      // Undeclared exception!
      try { 
        stringBuilder3.appendCodePoint((-878));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "<\u0001+Ck<`nfzHM", "<\u0001+Ck<`nfzHM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String[] stringArray1 = new String[6];
      stringArray1[0] = "@T([a*U~]9OaJu";
      stringArray1[1] = "//";
      stringArray1[2] = "alter index";
      stringArray1[4] = null;
      stringArray1[5] = null;
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, stringArray0, "@T([a*U~]9OaJu", "//", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.ABORT;
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("drop materialized viewconstraint", stringArray0, "executeconstraint", "drop materialized viewconstraint", (String[]) null);
      assertEquals("executeconstraint as drop materialized viewconstraint on ", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.568155382556487
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("rcname");
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("hYn&n-'/@mOQKCt", (String[]) null, "hYn&n-'/@mOQKCt", "hYn&n-'/@mOQKCt", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("dropindex@ki([a*u~]9oa\"ju");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: dropindex@ki([a*u~]9oa\"ju
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = SQLUtil.normalize("drop materialized viewdropindex@ki([a*u~]9oa\"ju", false);
      assertEquals("drop materialized viewdropindex @ ki ([ a * u ~ ] 9oa \"ju\"", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("Unable to load the class {0} responsible for the datatype {1}", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      boolean boolean0 = SQLUtil.isDDL("$it%DH");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create table");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.2772569862978458
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.join("truncate", (String) null, stringArray0, "iyvLV", "c*I", stringArray0);
      assertEquals("truncate join iyvLV as c*I on null.null = c*I.null and null.null = c*I.null and null.null = c*I.null and null.null = c*I.null and null.null = c*I.null", string0);
      
      boolean boolean0 = SQLUtil.isDML("truncate join iyvLV as c*I on null.null = c*I.null and null.null = c*I.null and null.null = c*I.null and null.null = c*I.null and null.null = c*I.null");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncate");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLUtil.removeComments(" WHERE ");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" WHERE ", true, " WHERE ", " WHERE ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      assertTrue(columnDescriptorList0.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLUtil.removeComments(" WHERE ");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" WHERE ", false, " WHERE ", " WHERE ");
      dBCheckConstraint0.setName(" WHERE ");
      Object object0 = new Object();
      StringBuilder stringBuilder0 = new StringBuilder("create materialized viewh(f");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("create materialized viewh(fCONSTRAINT \" WHERE \" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLUtil.isDDL(" REFERENCES ");
      StringBuilder stringBuilder0 = new StringBuilder("create materialized viewh(f");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("unable t", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FmOM ", true, "SELECT * FmOM ", "SELECT * FmOM ");
      StringBuilder stringBuilder0 = new StringBuilder(8);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      SQLUtil.addRequiredCondition("c", stringBuilder1);
      assertEquals("CONSTRAINT \"SELECT * FmOM \"  and c", stringBuilder1.toString());
      assertEquals("CONSTRAINT \"SELECT * FmOM \"  and c", stringBuilder0.toString());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FmOM ", true, "SELECT * FmOM ", "SELECT * FmOM ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("SELECT * FmOM ", stringBuilder0);
      assertEquals("CONSTRAINT \"SELECT * FmOM \"  and SELECT * FmOM ", stringBuilder0.toString());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = SQLUtil.renderValue("Unable to load the class {0} responsible for the datatype {1}");
      assertEquals("'Unable to load the class {0} responsible for the datatype {1}'", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.leftJoin("renameselect * from", stringArray0, "renameselect * from", "'Unable to load the class {0} responsible for the datatype {1}'", stringArray0);
      assertEquals("left join renameselect * from as 'Unable to load the class {0} responsible for the datatype {1}' on ", string1);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.join("B", "B", stringArray0, "insertupdatebyte(", "drop tableupdatebyte(", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[13];
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, (String) null, (String[]) null, (String) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("!RTNl^,q3Sc[(rw)", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ELECT * FmOM ", false, "ELECT * FmOM ", "ELECT * FmOM ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK ELECT * FmOM ", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = SQLUtil.normalize("7J0_I3*Z&o/g^9/!K)", true);
      assertEquals("7J0_I3 * Z & o / g ^ 9 / ! K)", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("OYv&k%rm", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.437465328065844
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("qeoCBz1%oSqxIM");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("qeoCBz1%oSqxIM");
      DBDataType dBDataType0 = DBDataType.getInstance(370, "qeoCBz1%oSqxIM");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("qeoCBz1%oSqxIM", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("QEOCBZ1%OSQXIM", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[13];
      SQLUtil.leftJoin("select into", stringArray0, "select into", "select into", stringArray0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("select into");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.48717948717948717
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("lTwEaS9");
      assertNull(boolean0);
      
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.leftJoin("null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, "lTwEaS9", "null = null AND null = null AND null = null AND null = null AND null = null", stringArray0);
      assertEquals("left join lTwEaS9 as null = null AND null = null AND null = null AND null = null AND null = null on null = null AND null = null AND null = null AND null = null AND null = null.null = null = null AND null = null AND null = null AND null = null AND null = null.null and null = null AND null = null AND null = null AND null = null AND null = null.null = null = null AND null = null AND null = null AND null = null AND null = null.null and null = null AND null = null AND null = null AND null = null AND null = null.null = null = null AND null = null AND null = null AND null = null AND null = null.null and null = null AND null = null AND null = null AND null = null AND null = null.null = null = null AND null = null AND null = null AND null = null AND null = null.null and null = null AND null = null AND null = null AND null = null AND null = null.null = null = null AND null = null AND null = null AND null = null AND null = null.null", string1);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("iyvLV", true, "iyvLV", "iyvLV");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK iyvLV", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.7842068034002125
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FmOM ", true, "SELECT * FmOM ", "SELECT * FmOM ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"SELECT * FmOM \" CHECK SELECT * FmOM ", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("updateLong", true, "updateLong", "SELECT * QFROM");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT updateLong CHECK SELECT * QFROM", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "from";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "from", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT from PRIMARY KEY (from)", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Could not save properties ", defaultDBTable0, (DBDataType) null, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("Could not save properties , Could not save properties ", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Could not save properties ", defaultDBTable0, (DBDataType) null, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.join("iyvLV", "iyvLV", stringArray0, "iyvLV", "insert", stringArray0);
      assertEquals("iyvLV join iyvLV as insert on iyvLV.null = insert.null and iyvLV.null = insert.null and iyvLV.null = insert.null and iyvLV.null = insert.null and iyvLV.null = insert.null", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create table");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.5732052067491771
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = SQLUtil.normalize("^=-d_!!8UAHS_8@(", false);
      assertEquals("^ = - d_ ! !  8UAHS_8 @ (", string0);
      
      TableContainer tableContainer0 = new TableContainer("rename");
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).toString();
      tableContainer0.setOwner(compositeDBObject0);
      String string1 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("null.rename", string1);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.parseColumnTypeAndSize(" ORDER BY ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{!M?4'0\fm]aOpYJ%v";
      stringArray0[1] = " ORDER BY ";
      stringArray0[2] = " ORDER BY ";
      stringArray0[3] = "";
      stringArray0[4] = " ORDER BY ";
      stringArray0[5] = "?{F_R'(x7jy^K-o";
      stringArray0[7] = " ORDER BY ";
      stringArray0[8] = " ORDER BY ";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("({!M?4'0\fm]aOpYJ%v,  ORDER BY ,  ORDER BY , ,  ORDER BY , ?{F_R'(x7jy^K-o, ,  ORDER BY ,  ORDER BY )", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(20, "JCw<#{o-3JMB|K.Hj$");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("JCw<#{o-3JMB|K.Hj$", defaultDBTable0, dBDataType0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("JCw<#{o-3JMB|K.Hj$ JCW<#{O-3JMB|K.HJ$ NULL", string1);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("GS6IMx\"j%?c9*?", (DBTable) null, (DBDataType) null, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("drop maeri");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) jdbcDataSource0);
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall(" REFERENCES ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("op_attach ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join("iyvLV", "GS6IMx\"|j2n?c6*?", stringArray0, "iyvLV", "GS6IMx\"|j2n?c6*?", stringArray0);
      assertEquals("iyvLV join iyvLV as GS6IMx\"|j2n?c6*? on GS6IMx\"|j2n?c6*?.null = GS6IMx\"|j2n?c6*?.null and GS6IMx\"|j2n?c6*?.null = GS6IMx\"|j2n?c6*?.null", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("SOCKET", (String[]) null, "SOCKET", "SOCKET", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
