/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 13 20:24:09 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeListener;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.help.ForwardAction;
import javax.swing.Action;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.border.Border;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicLabelUI;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jDayChooser0.setYear(24);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setDayBordersVisible(false);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0966040333564617
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.days = null;
      // Undeclared exception!
      try { 
        jDayChooser0.updateUI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.151027626853596
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JButton[] jButtonArray0 = new JButton[16];
      JButton jButton0 = new JButton((Action) null);
      jButtonArray0[0] = jButton0;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ImageIcon imageIcon0 = new ImageIcon("day", "day");
      JButton jButton1 = new JButton(imageIcon0);
      jButtonArray0[1] = jButton1;
      String string0 = "20";
      JButton jButton2 = new JButton("20");
      jButtonArray0[2] = jButton2;
      jDayChooser0.weeks = jButtonArray0;
      int int0 = 1093;
      // Undeclared exception!
      try { 
        jDayChooser0.setMonth(1093);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.14246308463095
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.15605401524258
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 7;
      jDayChooser0.setMaxDayCharacters(7);
      JButton[] jButtonArray0 = new JButton[0];
      jDayChooser0.days = jButtonArray0;
      // Undeclared exception!
      try { 
        jDayChooser0.setDay(238);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.177217605772988
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(4);
      Locale locale0 = Locale.KOREAN;
      jDayChooser0.setLocale(locale0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.151027626853596
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JButton[] jButtonArray0 = new JButton[3];
      JButton jButton0 = new JButton((Action) null);
      jButtonArray0[0] = jButton0;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getSelectedIcon();
      JButton jButton1 = new JButton((Icon) null);
      jButtonArray0[1] = jButton1;
      String string0 = "20";
      JButton jButton2 = new JButton("20");
      jButtonArray0[2] = jButton2;
      jDayChooser0.weeks = jButtonArray0;
      int int0 = 1093;
      // Undeclared exception!
      try { 
        jDayChooser0.setMonth(1093);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8961031581030303
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      int int0 = 47;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 47, 47, 33, 33, 'H', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.setSource(menuSelectionManager0);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(menuKeyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.800890177739808
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1042, 26438400000L, 36, 36, 'Q', menuElementArray0, menuSelectionManager0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.isFocusOwner();
      jDayChooser0.setMonth(41);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.800934927977544
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(1093);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jDayChooser0.day = 1093;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1093, 1093, 7, 7, '_', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setMonth(7);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.211194114045486
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      menuSelectionManager0.getSelectedPath();
      jDayChooser0.setMaxDayCharacters(1);
      Color color0 = jDayChooser0.weekdayForeground;
      jDayChooser0.setForeground(color0);
      jDayChooser0.getMaxSelectableDate();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9832344089853255
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Color color0 = Color.getColor("1!", (-364));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      Color color1 = Color.GRAY;
      jDayChooser0.setForeground(color0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.isDecorationBackgroundVisible();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 9313, 0L, 4, 90, 'S');
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0633100131992426
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser_DecoratorButton0.getMaximumSize();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setDay(245);
      jDayChooser0.setMaxDayCharacters((-1068));
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 42, false);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      Color color0 = Color.darkGray;
      jDayChooser0.setForeground(color0);
      jDayChooser0.getWeekdayForeground();
      // Undeclared exception!
      try { 
        java.sql.Date.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1725683763376606
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(2304);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2304, 896, 415, 2304, 'R');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.updateUI();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.repaint();
      jDayChooser0.setYear(472);
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.800866879935626
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setSundayForeground((Color) null);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.getDaysInMonth();
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.801977559579708
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.US;
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      boolean boolean0 = new Boolean("day");
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ActionEvent actionEvent0 = new ActionEvent("Mi3j,<% iK}/\"+]+]@", 449, "month");
      JDayChooser jDayChooser2 = new JDayChooser(true);
      ActionEvent actionEvent1 = new ActionEvent(jDayChooser_DecoratorButton0, (-80), "Mi3j,<% iK}/\"+]+]@", (-80), (-80));
      // Undeclared exception!
      try { 
        jDayChooser2.actionPerformed(actionEvent1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1509516053141597
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(2953);
      jDayChooser0.setMonth(2953);
      assertEquals(29, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 1590, "day", 1590);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2218415191322416
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JComponent.getDefaultLocale();
      jDayChooser0.doLayout();
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getFloatingColor();
      jDayChooser0.decorationBackgroundColor = null;
      jDayChooser0.updateUI();
      Color.getColor("", (Color) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1603), true);
      focusEvent0.setSource(jDayChooser0);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.weeks = null;
      jDayChooser0.setWeekOfYearVisible(true);
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar(calendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.800890177739808
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JComponent.getDefaultLocale();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      jDayChooser0.addPropertyChangeListener("Center", (PropertyChangeListener) basicLabelUI0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setDay(5);
      jDayChooser0.setMonth(5);
      assertEquals(5, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertNull(jButton0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6090497473625858
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-1008));
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.800854989187817
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 14, (-463L), (-376), 4507, '`', 0);
      keyEvent0.getExtendedKeyCode();
      int int0 = SwingConstants.SOUTH_WEST;
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.decorationBordersVisible = false;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, false);
      focusEvent0.setSource(keyEvent0);
      jDayChooser0.focusLost(focusEvent0);
      Date date0 = jDayChooser0.maxSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxSelectableDate(date1);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(6);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay((-300));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.896307971211069
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-78), (-78), (-78), (-78), (-78), 1);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth((-1015));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(49, (-1015), 1, 1919, (-1015), 1);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=49,MONTH=-1015,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1919,HOUR_OF_DAY=1919,MINUTE=-1015,SECOND=1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      jDayChooser0.setFocus();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      
      jDayChooser0.updateUI();
      jDayChooser0.isWeekOfYearVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.800890177739808
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getAccessibleContext();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.isWeekOfYearVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.896987831782037
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 4200, false);
      focusEvent0.setSource("G}ca");
      jDayChooser0.focusLost(focusEvent0);
      Color color0 = Color.getColor("", (-2320));
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setBorder((Border) null);
      jDayChooser0.setForeground(color0);
      jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1677717028005006
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertTrue(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setForeground((Color) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.9831272903573964
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1958), "6");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.getDay();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1708460440638633
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      JMonthChooser jMonthChooser0 = jDayChooser1.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.242832027078787
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JDayChooser jDayChooser2 = new JDayChooser();
      JComponent.isLightweightComponent(jDayChooser0);
      jDayChooser0.hasFocus();
      JDayChooser jDayChooser3 = new JDayChooser(true);
      jDayChooser3.setDayBordersVisible(true);
      jDayChooser3.init();
      jDayChooser1.setEnabled(true);
      jDayChooser3.setWeekOfYearVisible(false);
      assertFalse(jDayChooser3.isDecorationBordersVisible());
      
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8009457487317504
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 415, 415, 415, 415, 'R');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-3342));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.096688477532829
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addListeners(14);
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(164, color0.getRed());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getLocale();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertSame(date1, date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ForwardAction forwardAction0 = new ForwardAction(jDayChooser_DecoratorButton0);
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setMaxDayCharacters(1);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }
}
