/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 13 20:22:17 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.576408258700284
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      jSONObject0.put("", (-287L));
      jSONObject0.optDouble("");
      double double0 = jSONObject0.optDouble("", 0.0);
      assertEquals((-287.0), double0, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4249827225934997
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("(z", object0);
      jSONObject1.toString(376, 24);
      boolean boolean0 = jSONObject1.isNull("(z");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0966481059669446
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = JSONObject.doubleToString(31.472753331);
      assertEquals("31.472753331", string0);
      
      Float float0 = new Float(1812.97F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject.numberToString(float0);
      Float float1 = new Float((double) 1812.97F);
      JSONObject jSONObject0 = new JSONObject(float1, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      Double double0 = new Double(0.0);
      String string0 = ">B<j(kt}Xy*%|2";
      hashMap0.put(double0, ">B<j(kt}Xy*%|2");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
      
      Long long0 = new Long((-2085L));
      JSONObject.valueToString(long0);
      String string0 = JSONObject.valueToString(linkedList0, 13, 2069);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7651334011390136
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or ']'", true);
      jSONObject1.put("isdivideUnsigned", (-2332L));
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0552573179404616
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("getoptJSONArray", 0L);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("getoptJSONArray", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.630060224484236
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[1] = "V,m";
      stringArray0[2] = "e";
      stringArray0[3] = ",";
      stringArray0[4] = "I'X}ig%xe'ba";
      stringArray0[5] = "/,4s28mMO9ka{B47R z";
      stringArray0[6] = "iU+G5g";
      JSONObject jSONObject0 = new JSONObject(object1, stringArray0);
      jSONObject0.put(",", (-3L));
      JSONObject jSONObject1 = jSONObject0.put("?BkZ{/%ilv&d6K; O", true);
      long long0 = jSONObject1.getLong(",");
      assertEquals((-3L), long0);
      
      Short short0 = new Short((short) (-3505));
      String[] stringArray1 = JSONObject.getNames((Object) short0);
      assertEquals(5, stringArray1.length);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4588165268297475
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "=0-zh";
      stringArray0[1] = "java.lang.Long@0000000003.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("=0-zh", 0.0);
      jSONObject1.getDouble("=0-zh");
      jSONObject0.optDouble("U");
      try { 
        jSONObject0.getBoolean("U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"U\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.630060224484236
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[1] = "V,m";
      stringArray0[2] = "e";
      stringArray0[3] = ",";
      stringArray0[4] = "I'X}ig%xe'ba";
      stringArray0[5] = "/,4s28mMO9ka{B47R z";
      stringArray0[6] = "iU+G5g";
      JSONObject jSONObject0 = new JSONObject(object1, stringArray0);
      jSONObject0.put(",", 0L);
      JSONObject jSONObject1 = jSONObject0.put("?BkZ{/%ilv&d6K; O", true);
      jSONObject1.getLong(",");
      Short short0 = new Short((short) (-3505));
      String[] stringArray1 = JSONObject.getNames((Object) short0);
      assertEquals(5, stringArray1.length);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8753013613649663
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.optString("f@3$", (String) null);
      assertNull(string0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, linkedList0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.7932765402874764
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0126200936538066
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("WpuEF", "WpuEF");
      try { 
        jSONObject1.getLong("WpuEF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WpuEF\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject.valueToString(linkedList0);
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.accumulate("A JSONObject text must end with '}'", jSONObject0);
      JSONObject jSONObject3 = jSONObject1.getJSONObject("A JSONObject text must end with '}'");
      assertNotSame(jSONObject3, jSONObject2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.092447766411238
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Float float0 = new Float(1521.0365F);
      Short short0 = new Short((short)1655);
      JSONObject jSONObject0 = new JSONObject(short0);
      Integer integer0 = new Integer((short)1655);
      Integer.getInteger("\t", integer0);
      Integer.toUnsignedLong((short)1655);
      JSONObject jSONObject1 = jSONObject0.putOpt("\t", integer0);
      double double0 = jSONObject1.optDouble("\t");
      assertEquals(2, jSONObject0.length());
      assertEquals(1655.0, double0, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "Y?A+ow?l%bG");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("Y?A+ow?l%bG", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      Object object1 = jSONObject0.opt((String) null);
      assertNull(object1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 1 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("fo", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string1 = jSONObject1.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5802615437584318
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Integer integer0 = new Integer((-2189));
      JSONObject jSONObject1 = jSONObject0.putOpt("\n", integer0);
      double double0 = jSONObject1.getDouble("\n");
      assertEquals((-2189.0), double0, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.321991904460089
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Long long0 = new Long(1658L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject jSONObject1 = jSONObject0.put(",\n", (double) 1658L);
      jSONObject1.getDouble(",\n");
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0072056891357897
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      JSONObject jSONObject0 = new JSONObject(jSONArray1);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.accumulate("4pB\rF?[1b0H*k<B,F&", jSONArray1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 2585);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.024436576861065
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("|I]", "|I]");
      try { 
        jSONObject0.getBoolean("|I]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|I]\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", false);
      jSONObject1.getBoolean("] is not a Boolean.");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4205850996799887
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("?L4BD\"", (Collection) null);
      String string0 = jSONObject0.toString(693, 693);
      jSONObject0.optJSONArray("?L4BD\"");
      String string1 = jSONObject0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("^'^VuCCDc(6%", object0);
      Object object1 = jSONObject1.opt("^'^VuCCDc(6%");
      assertSame(object0, object1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.100963336162914
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", true);
      jSONObject1.toString((-1295), (-1295));
      jSONObject1.put("isdoubleToLongBits", true);
      jSONObject0.toString((-1295));
      JSONObject jSONObject2 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000003\n}");
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0978100054573563
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.append("Expected a ',' or '}'", "Expected a ',' or '}'");
      jSONObject0.toString((-1295));
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000003\": [\"java.lang.String@0000000003\"]}");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8674440561887975
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      Double.min(0.0, 0.0);
      jSONObject1.optLong("^'^VuCCDc(6%", (-2747L));
      JSONObject jSONObject2 = jSONObject0.append("cdi?l4XlBQ%0f{i1", "(!{GkW~vm;WEQ|lg");
      int int0 = 2326;
      JSONObject.valueToString(jSONObject1, (-108916131), 2326);
      JSONObject.valueToString("(!{GkW~vm;WEQ|lg", (-4147), 2861);
      JSONObject jSONObject3 = new JSONObject();
      Float float0 = new Float((double) (-4147));
      JSONObject.testValidity(float0);
      jSONObject0.put("^'^VuCCDc(6%", (Object) "(!{GkW~vm;WEQ|lg");
      String string0 = "\\u";
      jSONObject1.put(string0, (Object) jSONObject2);
      StringWriter stringWriter0 = new StringWriter();
      Byte.toUnsignedInt((byte) (-64));
      JSONObject.numberToString(float0);
      // Undeclared exception!
      jSONObject2.write(stringWriter0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put("isformat", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("WpuEF", (Collection) linkedList0);
      jSONObject0.accumulate("WpuEF", "WpuEF");
      JSONObject jSONObject1 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("VXQ;9dT}\"Czq?sw6Oc", (Object) jSONArray0);
      JSONObject jSONObject2 = jSONObject1.accumulate("VXQ;9dT}\"Czq?sw6Oc", jSONArray0);
      jSONObject2.remove("VXQ;9dT}\"Czq?sw6Oc");
      boolean boolean0 = jSONObject1.isNull("VXQ;9dT}\"Czq?sw6Oc");
      assertEquals(1, jSONArray0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6622723639144015
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      Double.min(0.0, 0.0);
      jSONObject1.optLong("^'^VuCCDc(6%", (-2747L));
      JSONObject jSONObject2 = jSONObject0.append("cdi?l4XlBQ%0f{i1", "(!{GkW~vm;WEQ|lg");
      JSONObject.valueToString(jSONObject1, (-108916131), 2326);
      JSONObject.valueToString("(!{GkW~vm;WEQ|lg", (-4147), 2861);
      JSONObject jSONObject3 = new JSONObject();
      Float float0 = new Float((double) (-4147));
      jSONObject0.put("^'^VuCCDc(6%", (Object) "(!{GkW~vm;WEQ|lg");
      jSONObject1.put("", (Object) jSONObject2);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.numberToString(float0);
      Object object0 = jSONObject3.opt("] not found.");
      assertNull(object0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.7511893730418442
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "");
      Long long0 = new Long((-1788L));
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.171867957756722
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "3");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "3");
      jSONObject0.toString(1325);
      jSONObject0.opt("3");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.3373641978673163
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("", "");
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote("");
      Object object0 = jSONObject0.get("");
      assertFalse(object0.equals((Object)string0));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("Null pointer", "Null pointer");
      StringWriter stringWriter0 = new StringWriter(870);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("Expected a ',' or '}'", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 3, 3);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.048844359649284
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8796281119286729
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, (Object) null);
      String string0 = JSONObject.valueToString(jSONObject0, 2005, 2005);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, (-24), (-24));
      JSONObject jSONObject1 = new JSONObject("{}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.8516164363638437
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("tM%ue", true);
      boolean boolean0 = jSONObject1.optBoolean("tM%ue");
      boolean boolean1 = jSONObject0.isNull("tM%ue");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("B~}LCgtv'je<=0%", true);
      boolean boolean0 = jSONObject0.isNull("B~}LCgtv'je<=0%");
      boolean boolean1 = jSONObject0.getBoolean("B~}LCgtv'je<=0%");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.651329986995002
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", true);
      jSONObject1.toString((-1295), (-1295));
      JSONObject jSONObject2 = jSONObject0.put("Expected a ',' or '}'", 101);
      jSONObject2.optInt("Expected a ',' or '}'", 101);
      boolean boolean0 = jSONObject2.has("Expected a ',' or '}'");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("*B[liDHMH|m5Ra^_om", 0L);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8133224558281076
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      HashMap<Short, Boolean> hashMap1 = new HashMap<Short, Boolean>(hashMap0);
      Boolean boolean0 = new Boolean("lI>a");
      hashMap1.put((Short) null, boolean0);
      HashMap<Object, Boolean> hashMap2 = new HashMap<Object, Boolean>(hashMap1);
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap1, (-3356), (-3356));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.1691974514149126
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Kf)~;.I LWFGMF", (Object) hashMap0);
      jSONObject0.put("V=/A", (Collection) null);
      String string0 = jSONObject1.toString((-1318), 1986);
      assertNotNull(string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1668));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0, 34, 34);
      Double double0 = new Double(34);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-936));
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.4886065653255873
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1.0);
      Short short0 = new Short((short)2);
      JSONObject jSONObject1 = new JSONObject(short0);
      JSONObject jSONObject2 = jSONObject0.append("jhmvvAO", jSONObject1);
      Boolean boolean0 = new Boolean("jhmvvAO");
      Double.min(Double.NaN, Double.NaN);
      JSONObject jSONObject3 = jSONObject2.append("jhmvvAO", short0);
      jSONObject2.toString((int) (short)2, 759);
      JSONObject jSONObject4 = new JSONObject();
      jSONObject3.getJSONArray("jhmvvAO");
      jSONObject0.length();
      JSONObject jSONObject5 = new JSONObject(short0);
      try { 
        jSONObject5.getDouble("~>Hya");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~>Hya\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("JSONObject[", 1.0);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.547067373853964
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "Substring bounds error";
      JSONObject.getNames((Object) "Substring bounds error");
      JSONObject jSONObject0 = new JSONObject((Object) "Substring bounds error");
      JSONObject.getNames((Object) jSONObject0);
      // Undeclared exception!
      jSONObject0.toString(1325);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 2005, (-8323563));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("^3_*OsF]X}-mz{S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ^3_*OsF]X}-mz{S
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 2560, 2560);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = JSONObject.quote("4/CxKf$NhCcqa");
      assertEquals("\"4/CxKf$NhCcqa\"", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.1809006880307935
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("WpuF", "WpuF");
      jSONObject1.names();
      try { 
        jSONObject0.getDouble("WpuF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WpuF\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.011138612172325
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("b4},bM)l+Y_tZ 7jPI", "b4},bM)l+Y_tZ 7jPI");
      jSONObject0.optInt("X", 0);
      JSONObject.quote("len");
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.3199044298479494
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("WpuEF", "WpuEF");
      boolean boolean0 = jSONObject0.isNull("WpuEF");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("wheel.json.JSONTokener", false);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.112704644485289
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("null", jSONObject0);
      try { 
        jSONObject0.getBoolean("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.964293467729211
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double double0 = new Double(2107.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString(8192, 8192);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expected a ':' after a key", (Object) null);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.3342298951481277
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("1v:w0D0hKb5955G", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.3437537046719372
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("69?;?w!%\"\"!-5*", 2094L);
      jSONObject1.accumulate("69?;?w!%\"\"!-5*", "69?;?w!%\"\"!-5*");
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (Map) hashMap0);
      String string0 = jSONObject1.getString("Bad value from toJSONString: ");
      assertNotNull(string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      try { 
        jSONObject0.getString("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.put("", (-267L));
      jSONObject0.optDouble("", 0.0);
      jSONObject0.put("Bad value from toJSONString: ", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("tz", 0.0);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("4-_6ayVMjV*#TdJ?G", (-805));
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.names();
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("isdecode", (-1654.7));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.8747936044560056
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
      
      jSONObject0.put("istoLowerCase", 0L);
      double double0 = jSONObject0.optDouble("istoLowerCase");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      double double0 = jSONObject0.optDouble("{}");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.0675802366583103
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("WpuEF", "WpuEF");
      jSONObject1.put("WpuEF", 12);
      jSONObject1.optLong("WpuEF");
      try { 
        jSONObject0.getBoolean("WpuEF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WpuEF\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("b4@E=PLD", (-3505L));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("Missing value", 1658L);
      assertEquals(1658L, long0);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(";QF[C:lp5C");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.5764082587002846
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.put("", (Object) "");
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.0978100054573563
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("\"2", "\"2");
      jSONObject1.optLong("\"2");
      boolean boolean0 = jSONObject1.optBoolean("\"2");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Map) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "{N}.6yp3_Zs1j[U-'";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{N}.6yp3_Zs1j[U-'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {N}.6yp3_Zs1j[U-'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "{)iUX1/,XV";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{)iUX1/,XV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {)iUX1/,XV
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(false);
      JSONObject.getNames((Object) jSONArray0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("getappend", jSONArray0);
      Integer integer0 = new Integer(1240);
      jSONObject1.append("getappend", integer0);
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = JSONObject.quote("@CBX6\"(E'WMF IM\"6");
      assertEquals("\"@CBX6\\\"(E'WMF IM\\\"6\"", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-40));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Double double0 = new Double(2107.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.437973641118805
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("\"d2", "\"d2");
      jSONObject0.optLong("\"d2");
      jSONObject1.optBoolean("\"d2");
      jSONObject1.names();
      Object object0 = JSONObject.NULL;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject1.put("\"d2", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.append("\"d2", object0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("\"d2", "\"d2");
      jSONObject1.optBoolean("\"d2");
      jSONObject1.names();
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.append("\"d2", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"d2] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.7526708545233256
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.append("", "");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("z[", 2975);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(boolean0, (-677), (-677));
      assertNotNull(string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.4528887279606404
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", false);
      jSONObject1.isNull("] is not a Boolean.");
      String string0 = jSONObject1.optString("] is not a Boolean.", "] is not a Boolean.");
      assertNotNull(string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.8423943585863412
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", 0L);
      jSONObject1.getInt("false");
      String string0 = JSONObject.quote("false");
      assertEquals("\"false\"", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.7202245016325666
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Float float0 = new Float(728.9F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(299, 299);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("getgetBytes", (Collection) linkedList0);
      String string0 = jSONObject1.optString("getgetBytes");
      assertNotNull(string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.4220522760854704
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getnumberToString");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = JSONObject.valueToString("getintern");
      assertNotNull(string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = JSONObject.quote("dYak.)I8V/u");
      assertEquals("\"dYak.)I8V/u\"", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.563172808538253
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("lujc_z1/", (-1072.43));
      assertEquals(1, jSONObject0.length());
      
      int int0 = jSONObject0.getInt("lujc_z1/");
      assertEquals((-1072), int0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.3128868859883
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".", false);
      jSONObject1.remove(".");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("null");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.3350026060706126
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\u";
      boolean boolean0 = jSONObject0.optBoolean(string0, true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("isdoubleToLongBits");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("getjoin");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getjoin
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = new Object();
      Float float0 = new Float((float) 6);
      String string0 = JSONObject.valueToString(float0, 6, 6);
      assertNotNull(string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("xmg'P");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("x|i<L?)sUbq&<");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("isclear");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isclear\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(37, 37);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("\"d2", "\"d2");
      jSONObject1.toString((-40));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.2699205313489008
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(1837, 1837);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-3852));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("Y[BW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Y[BW\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("ryvF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ryvF
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a Boolean.", 0.0);
      JSONObject.valueToString(jSONObject0);
      try { 
        jSONObject0.getJSONArray("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      try { 
        jSONObject0.getJSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("WBa+V(8,;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WBa+V(8,;\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("re", "re");
      assertEquals("re", string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = JSONObject.quote("sbrrW");
      assertEquals("\"sbrrW\"", string0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.9873982136479044
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "J_(Gg=");
      String string0 = jSONObject0.optString("J_(Gg=");
      assertEquals(3, jSONObject0.length());
      assertEquals("", string0);
  }
}
