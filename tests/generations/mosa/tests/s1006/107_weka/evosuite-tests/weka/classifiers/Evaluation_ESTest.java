/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 01:16:01 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Random;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.PART;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.Loader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.KDTree;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<!-- technical-bibtex-start -->";
      stringArray0[1] = "<!-- technical-plaintext-start -->";
      stringArray0[2] = "<!-- technical-plaintext-start -->";
      stringArray0[4] = "<!-- technical-plaintext-end -->";
      stringArray0[5] = "g=q;$L";
      stringArray0[6] = "<!-- technical-plaintext-end -->";
      stringArray0[7] = "<!-- technical-plaintext-end -->";
      try { 
        Evaluation.evaluateModel((Classifier) simpleLogistic0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6593387642402389
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.SFMeanPriorEntropy();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      evaluation0.m_NoPriors = true;
      Double double0 = new Double((-2));
      evaluation0.areaUnderROC((-2));
      double double1 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.SFMeanEntropyGain();
      evaluation0.falseNegativeRate(378);
      evaluation0.kappa();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.unweightedMicroFmeasure();
      MockRandom mockRandom0 = new MockRandom(0L);
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 2502, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_WithClass = 4.6;
      evaluation0.SFMeanEntropyGain();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      DecisionStump decisionStump0 = new DecisionStump();
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(0.0, evaluation0.SFMeanSchemeEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2968749834703894
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      sGDText0.setLowercaseTokens(true);
      PART pART0 = new PART();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.trueNegativeRate(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.priorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.precision(2819);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2819
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0202828965748285
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.errorRate();
      evaluation0.SFPriorEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance((-2), doubleArray0);
      try { 
        evaluation1.updateStatsForPredictor(1.3, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1474346503786346
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation.getGlobalInfo(decisionStump0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_WithClass = (double) (-1);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(-0.0, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(-0.0, double0, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6215868310806103
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a>!Im");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = 0.0;
      evaluation0.evaluationForSingleInstance(doubleArray0, instance0, true);
      evaluation0.avgCost();
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(1.0, evaluation0.numInstances(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3914337620844703
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumClasses((-2));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = 1.050000000745058;
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = 0.001;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      double[] doubleArray1 = new double[0];
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5564314311861276
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instances instances1 = testInstances0.getData();
      DenseInstance denseInstance0 = (DenseInstance)converterUtils_DataSource0.nextElement(instances1);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.SFEntropyGain();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_DiscardPredictions = false;
      double[] doubleArray0 = new double[4];
      denseInstance0.s_numericAfterDecimalPoint = denseInstance0.s_numericAfterDecimalPoint;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = 0.0;
      evaluation1.evaluationForSingleInstance(doubleArray0, denseInstance0, false);
      Evaluation.getGlobalInfo(logitBoost0);
      double double0 = evaluation1.SFMeanPriorEntropy();
      assertEquals(100.0, evaluation1.pctUnclassified(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5245856325330407
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instances instances1 = testInstances0.getData();
      DenseInstance denseInstance0 = (DenseInstance)converterUtils_DataSource0.nextElement(instances1);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.SFEntropyGain();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      denseInstance0.s_numericAfterDecimalPoint = denseInstance0.s_numericAfterDecimalPoint;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = 0.0;
      evaluation1.evaluationForSingleInstance(doubleArray0, denseInstance0, false);
      Evaluation.getGlobalInfo(logitBoost0);
      double double0 = evaluation1.pctUnclassified();
      assertEquals(1.0, evaluation1.numInstances(), 0.01);
      assertEquals(100.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4437432935435304
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instances instances1 = testInstances0.getData();
      Instance instance0 = converterUtils_DataSource0.nextElement(instances1);
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 2915.557671781237;
      doubleArray0[4] = (double) (-1);
      evaluation0.evaluationForSingleInstance(doubleArray0, instance0, false);
      assertEquals(0.0, evaluation0.pctCorrect(), 0.01);
      
      String string0 = Evaluation.getGlobalInfo(logitBoost0);
      assertEquals("\nSynopsis for weka.classifiers.meta.LogitBoost:\n\nClass for performing additive logistic regression. \nThis class performs classification using a regression scheme as the base learner, and can handle multi-class problems.  For more information, see\n\nJ. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.\n\nCan do efficient internal cross-validation to determine appropriate number of iterations.", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9999683577390486
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.truePositiveRate(1);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.451920750018101
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.enumerateInstances();
      evaluation0.SFEntropyGain();
      evaluation0.precision((-702));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1717.935615792862;
      doubleArray0[1] = (double) (-702);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) (-1);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.050487881474211
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      MockRandom mockRandom0 = new MockRandom(42L);
      SMO sMO0 = new SMO();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.numTruePositives(0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.009653988412479
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalseNegatives((-2));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = Evaluation.MIN_SF_PROB;
      double double2 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.areaUnderPRC((-2));
      assertNotEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.numFalseNegatives((-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1);
      evaluation0.KBMeanInformation();
      evaluation1.weightedMatthewsCorrelation();
      evaluation1.updateMargins(doubleArray0, 1, 0.0);
      assertEquals(0.0, evaluation1.correct(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      LinkedList<NaiveBayesMultinomialUpdateable> linkedList0 = new LinkedList<NaiveBayesMultinomialUpdateable>();
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      
      String string0 = evaluation0.toMatrixString("Percentage split value needs be >0 and <100.");
      assertEquals("Percentage split value needs be >0 and <100.\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.461934648705106
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumClasses(12);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("{.*/OpdkQI4", arrayList0, 12);
      instances1.enumerateInstances();
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.SFEntropyGain();
      evaluation0.precision((-2));
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".csv";
      stringArray0[1] = ".csv";
      stringArray0[2] = "";
      stringArray0[3] = ".csv";
      stringArray0[4] = "@relation";
      Evaluation.main(stringArray0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(12, charArray0, 12);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5935617836176046
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.toString();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instances0.iterator();
      evaluation0.numFalsePositives(1789569706);
      int[] intArray0 = new int[6];
      intArray0[0] = 1789569706;
      intArray0[1] = (-2611);
      evaluation0.errorRate();
      Evaluation.main(testInstances1.DEFAULT_WORDS);
      Evaluation evaluation1 = new Evaluation(instances0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1572623877519446
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumNumeric((-2827));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation.handleCostOption("", (-2));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation.makeOptionString(decisionStump0, true);
      char[] charArray0 = new char[2];
      charArray0[0] = ':';
      charArray0[1] = '%';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1), charArray0, 3301);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9160175838494786
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "LEF @.[");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives((-1));
      testInstances0.generate(" ");
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      try { 
        Evaluation.handleCostOption(" ", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"LEF\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.284572124801077
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation.handleCostOption("", (-2));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation.makeOptionString(decisionStump0, true);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5103090061340354
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-11.0), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-927.18663336), doubleArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("9+T@])&K]^R6k3fpI");
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVLoader cSVLoader0 = new CSVLoader();
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (byte)10;
      doubleArray1[1] = (double) (byte)60;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = 0.8;
      doubleArray1[4] = (double) (-1);
      doubleArray1[5] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.8;
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) (byte)60;
      doubleArray2[3] = (double) (byte)60;
      doubleArray2[4] = (-29.948432422);
      doubleArray2[5] = 0.8;
      doubleArray2[6] = 0.8;
      doubleArray2[7] = 1477.7809581102;
      doubleArray2[8] = (double) (byte)10;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-29.948432422);
      doubleArray3[1] = 0.8;
      doubleArray3[2] = (double) (byte)60;
      doubleArray3[3] = 0.8;
      doubleArray3[4] = (double) (-2);
      doubleArray3[5] = 1477.7809581102;
      doubleArray3[6] = (double) (byte)10;
      doubleArray3[7] = 1.7976931348623157E308;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) (-2);
      doubleArray4[1] = (double) (-2);
      doubleArray4[2] = 1477.7809581102;
      doubleArray4[3] = 1.7976931348623157E308;
      doubleArray4[4] = (double) (byte)60;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (double) (-1);
      doubleArray5[1] = (double) (-2);
      doubleArray5[2] = 1.7976931348623157E308;
      doubleArray5[3] = 2.0;
      doubleArray5[4] = (double) (byte)60;
      doubleArray5[5] = (-29.948432422);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = (double) (byte)60;
      doubleArray6[1] = 0.8;
      doubleArray6[2] = (double) (byte)60;
      doubleArray6[3] = 2.0;
      doubleArray6[4] = (double) (byte)60;
      doubleArray6[5] = 1477.7809581102;
      doubleArray6[6] = 0.8;
      doubleArray6[7] = 1477.7809581102;
      doubleArray6[8] = (double) (byte)10;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 2.0;
      doubleArray7[1] = 1477.7809581102;
      doubleArray7[2] = (double) (byte)60;
      doubleArray7[3] = 3064.5;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = (-29.948432422);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[9];
      doubleArray9[0] = 3064.5;
      doubleArray9[1] = (double) (-2);
      doubleArray9[2] = 3064.5;
      doubleArray9[3] = (double) (byte)10;
      doubleArray9[4] = 3064.5;
      doubleArray9[5] = (double) (byte)10;
      doubleArray9[6] = 3064.5;
      doubleArray9[7] = 1194.2;
      doubleArray9[8] = 124.955835043;
      doubleArray0[8] = doubleArray9;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      evaluation0.numFalsePositives(66);
      evaluation0.matthewsCorrelationCoefficient((byte)60);
      double double0 = evaluation0.falsePositiveRate(19);
      assertEquals((-4.013917314776915), evaluation0.weightedFalsePositiveRate(), 0.01);
      assertEquals(0.12893982808022922, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8913741235084864
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = (double) (-2);
      doubleArray0[8] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 305.79593);
      evaluation0.SFEntropyGain();
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.8646617728338635
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      DecisionTable decisionTable0 = new DecisionTable();
      Capabilities capabilities0 = decisionTable0.getCapabilities();
      DenseInstance denseInstance0 = new DenseInstance(109);
      instances0.add((Instance) denseInstance0);
      capabilities0.disableAllAttributes();
      decisionTable0.getRevision();
      capabilities0.disableAllClassDependencies();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.getGlobalInfo(decisionTable0);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.384693857457614
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.numFalseNegatives((-1));
      evaluation0.errorRate();
      evaluation0.setPriors(instances0);
      Stacking stacking0 = new Stacking();
      Evaluation.makeOptionString(stacking0, true);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.69420484659984
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a>!Im");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-1));
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.26368224870517
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.SFEntropyGain();
      evaluation0.rootRelativeSquaredError();
      LinearRegression linearRegression0 = new LinearRegression();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(linearRegression0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) additiveRegression0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.329107391186153
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      testInstances0.setNumClasses(9);
      instances0.enumerateInstances();
      CSVLoader cSVLoader1 = new CSVLoader();
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double1 = evaluation0.truePositiveRate(0);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.SFPriorEntropy();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6922927242817396
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      testInstances0.setClassIndex(15);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.enumerateInstances();
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.precision((-1));
      assertEquals(0.0, double1, 0.01);
      
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Bagging bagging0 = new Bagging();
      double double2 = evaluation0.sizeOfPredictedRegions();
      double double3 = evaluation0.recall((-2));
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1704367784108074
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Version.MAJOR = (-1);
      evaluation0.toSummaryString("]Uq [.\nl%z.f+|'CbH", false);
      evaluation0.toClassDetailsString("@data");
      evaluation0.meanPriorAbsoluteError();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5935617836176046
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.numFalsePositives(1789569706);
      testInstances0.setNumNumeric(0);
      CSVLoader cSVLoader0 = new CSVLoader();
      testInstances1.setNumRelationalNominalValues(102261132);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNumeric((-2827));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation.handleCostOption("", (-2));
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9665436750589036
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("getDistanceWeighting");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.unclassified();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.generate();
      testInstances0.setNumNumeric((-2859));
      testInstances0.setNumRelationalNominalValues((-2859));
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "9:4c{+jX:ZB`.`$Y");
      assertNotNull(string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9074169042571496
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation1 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance((-1), (double[]) null);
      try { 
        evaluation0.evaluationForSingleInstance((double[]) null, denseInstance0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      JRip jRip0 = new JRip();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_ConfLevel;
      assertEquals(0.95, double1, 0.01);
      
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      System.setCurrentTimeMillis((-1));
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.measureBDeuScore();
      try { 
        Evaluation.evaluateModel((Classifier) bayesNet0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.bayes.BayesNet:
         // 
         // -D
         // \tDo not use ADTree data structure
         // 
         // -B <BIF file>
         // \tBIF file to compare with
         // 
         // -Q weka.classifiers.bayes.net.search.SearchAlgorithm
         // \tSearch algorithm
         // 
         // -E weka.classifiers.bayes.net.estimate.SimpleEstimator
         // \tEstimator algorithm
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.SFMeanPriorEntropy();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.m_NoPriors = true;
      Double double0 = new Double((-2));
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.913737189449991
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.falsePositiveRate((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.4905246476565126
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.KBRelativeInformation();
      JRip jRip0 = new JRip();
      evaluation0.kappa();
      // Undeclared exception!
      try { 
        evaluation0.recall((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      J48 j48_0 = new J48();
      Capabilities capabilities0 = j48_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instances instances1 = testInstances0.getData();
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      DenseInstance denseInstance0 = new DenseInstance(instance0);
      instances1.add(instance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumNumeric((-2));
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      AbstractClassifier.makeCopies(j48_0, 21);
      double double0 = evaluation0.falseNegativeRate(16);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.updatePriors(instance0);
      double double1 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      testInstances0.setSeed(1);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1922.07, doubleArray0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, binarySparseInstance0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instances instances1 = testInstances0.generate();
      Instance instance0 = converterUtils_DataSource0.nextElement(instances1);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.SFEntropyGain();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      double double0 = evaluation0.evaluationForSingleInstance(doubleArray0, instance0, true);
      assertEquals(1.0, evaluation0.unclassified(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNominal(721);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, "getUnpruned");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      SGDText sGDText0 = new SGDText();
      sGDText0.setLowercaseTokens(true);
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      double double0 = evaluation0.sizeOfPredictedRegions();
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.231739065208693
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.incorrect();
      evaluation0.pctUnclassified();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) textDirectoryLoader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      instances0.removeIf(predicate2);
      evaluation0.weightedAreaUnderROC();
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8734738482993778
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate("9+T@])&K]^R6k3fpI");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1));
      evaluation0.weightedAreaUnderPRC();
      evaluation0.SFSchemeEntropy();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.makeDistribution(Double.NaN);
      evaluation0.incorrect();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(0, testInstances0.getNumString());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "+*[!Io#s;N+#5+IOPy");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.1620414873432927
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-1));
      evaluation0.weightedAreaUnderPRC();
      double double0 = evaluation0.m_SumSqrPredicted;
      MockRandom mockRandom0 = new MockRandom(0L);
      SGDText sGDText0 = new SGDText();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      try { 
        evaluation0.crossValidateModel((Classifier) sGDText0, (Instances) null, (-740), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      MockRandom mockRandom0 = new MockRandom(0L);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) textDirectoryLoader1;
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 2502, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      evaluation0.truePositiveRate(1);
      try { 
        evaluation0.evaluateModel((Classifier) stacking0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a>!Im");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.numFalsePositives((-1));
      MockRandom mockRandom0 = new MockRandom(23);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.evaluateModel((Classifier) regressionByDiscretization0, instances0, objectArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.453246655483453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2.0), intArray0, 378);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Attribute attribute0 = new Attribute("s&+KqDrMY o~o", vector0, 2580);
      binarySparseInstance0.setValue(attribute0, (double) 2);
      try { 
        evaluation0.evaluateModelOnce(1.1000000014901161, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" RlT/0TG(h.w;");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.relativeAbsoluteError();
      evaluation0.toCumulativeMarginDistributionString();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.numTrueNegatives(89);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation1.updateStatsForPredictor((-1), (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1843752507353837
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.numFalsePositives(1789569706);
      int[] intArray0 = new int[6];
      intArray0[0] = 1789569706;
      intArray0[1] = (-2611);
      intArray0[2] = 0;
      intArray0[3] = 1840700269;
      intArray0[5] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2011.3769398918357), intArray0, 0);
      try { 
        evaluation0.evaluateModelOnce((double) (-2), (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NumericPredictor");
      double[] doubleArray0 = new double[0];
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      double[] doubleArray1 = evaluation0.getClassPriors();
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.truePositiveRate(1);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.560679657603879
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("getNorm");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.883591658417188
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.931046877304123
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a>!Im");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double0 = evaluation0.numFalsePositives(1);
      assertEquals(0.0, double0, 0.01);
      
      testInstances0.generate("synopsis");
      evaluation0.toSummaryString("Kl", false);
      evaluation0.confusionMatrix();
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double1, 0.01);
      
      double double2 = evaluation0.unweightedMicroFmeasure();
      double double3 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = evaluation0.pctCorrect();
      assertEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanSquaredError();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.9414406814336382
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-1));
      // Undeclared exception!
      try { 
        evaluation0.precision((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.9155162022672703
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFEntropyGain();
      double double1 = evaluation0.precision(1);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      evaluation0.areaUnderROC((-2));
      try { 
        Evaluation.evaluateModel("@data", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name @data.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(2546.898, 1371.7036058047097);
      double double0 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.0017415543612302
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("9+T@])&K]^R6k3fpI");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorEntropy;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation1.pctUnclassified();
      assertEquals(Double.NaN, double1, 0.01);
      
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      evaluation0.equals(technicalInformationHandlerJavadoc0);
      technicalInformationHandlerJavadoc0.updateJavadoc();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      evaluation1.setDiscardPredictions(false);
      assertFalse(evaluation1.getDiscardPredictions());
      
      double double2 = evaluation0.numTrueNegatives(1);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.generate(" ");
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(4286.77859452436, doubleArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, sparseInstance0, 1000.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-2));
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      try { 
        evaluation0.evaluateModelOnce(classifier0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumClasses((-2));
      evaluation0.m_TotalSizeOfRegions = 100.0;
      instances0.enumerateInstances();
      evaluation0.unweightedMicroFmeasure();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      SparseInstance sparseInstance0 = new SparseInstance(3207);
      try { 
        evaluation0.evaluateModelOnce((Classifier) additiveRegression0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel(" ", instances0, (-2), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called:  
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.8727808476063772
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctUnclassified();
      evaluation0.weightedAreaUnderROC();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      charArray0[1] = 'o';
      charArray0[2] = '_';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      charArray0[3] = 'N';
      charArray0[4] = 'E';
      charArray0[5] = 'X';
      charArray0[6] = '7';
      charArray0[7] = 'd';
      String string1 = evaluation0.num2ShortID(44, charArray0, 44);
      assertEquals("                                          EE", string1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.803345559381074
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ZeroR zeroR0 = new ZeroR();
      zeroR0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation.getGlobalInfo(zeroR0);
      zeroR0.setDebug(true);
      CSVLoader cSVLoader0 = new CSVLoader();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[13];
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) testInstances0;
      objectArray0[3] = object0;
      objectArray0[5] = (Object) evaluation0;
      try { 
        evaluation0.evaluateModel((Classifier) zeroR0, instances0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.9625509092346767
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("89GD+E&z\"P+2 ^Z");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      DecisionStump decisionStump0 = new DecisionStump();
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.809037385567197
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.useNoPriors();
      evaluation1.KBRelativeInformation();
      testInstances0.getRelationalClassFormat();
      evaluation0.weightedMatthewsCorrelation();
      Instances instances1 = testInstances0.generate("@data");
      Stacking stacking0 = new Stacking();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.falsePositiveRate(0);
      Evaluation evaluation3 = new Evaluation(instances1);
      try { 
        evaluation2.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      JRip jRip0 = new JRip();
      try { 
        evaluation0.evaluateModel((Classifier) jRip0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double0 = evaluation0.numFalseNegatives((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.errorRate();
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.getRevision();
      double double3 = evaluation0.pctCorrect();
      double double4 = evaluation0.weightedPrecision();
      assertEquals(double4, double3, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.7682623296415776
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.relativeAbsoluteError();
      evaluation0.toSummaryString("distributionForInstance", false);
      // Undeclared exception!
      try { 
        evaluation0.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.7814128705605983
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a>!Im");
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances1 = new TestInstances();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      
      SGDText sGDText0 = new SGDText();
      double double1 = evaluation0.falseNegativeRate(1);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.8204997297048613
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.045558893889891
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      capabilities0.enableAllAttributeDependencies();
      evaluation0.trueNegativeRate(95);
      KDTree kDTree0 = new KDTree(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.useNoPriors();
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.pctUnclassified();
      evaluation1.toSummaryString("weka/core/Capabilities.props", true);
      evaluation1.weightedFalseNegativeRate();
      evaluation1.confusionMatrix();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation1.crossValidateModel((Classifier) inputMappedClassifier0, instances0, 95, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.6866994899585297
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.numTrueNegatives((-2));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      textDirectoryLoader0.setDirectory(file0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.correct();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.7849620783010631
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation.makeOptionString(decisionStump0, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(17);
      try { 
        evaluation0.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(5.0, 5.0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      zeroR0.getCapabilities();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(11, (char[]) null, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.3877511086452388
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.KBRelativeInformation();
      JRip jRip0 = new JRip();
      instances0.clear();
      evaluation0.kappa();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-411.730329681));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -411
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      try { 
        Evaluation.evaluateModel((Classifier) simpleLogistic0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.SimpleLogistic:
         // 
         // -I <iterations>
         // \tSet fixed number of iterations for LogitBoost
         // -S
         // \tUse stopping criterion on training set (instead of
         // \tcross-validation)
         // -P
         // \tUse error on probabilities (rmse) instead of
         // \tmisclassification error for stopping criterion
         // -M <iterations>
         // \tSet maximum number of boosting iterations
         // -H <iterations>
         // \tSet parameter for heuristic for early stopping of
         // \tLogitBoost.
         // \tIf enabled, the minimum is selected greedily, stopping
         // \tif the current minimum has not changed for iter iterations.
         // \tBy default, heuristic is enabled with value 50. Set to
         // \tzero to disable heuristic.
         // -W <beta>
         // \tSet beta for weight trimming for LogitBoost. Set to 0 for no weight trimming.
         // 
         // -A
         // \tThe AIC is used to choose the best iteration (instead of CV or training error).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(";1,|_%{}l,U0Gkj3l>", arrayList0, 121);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      Double double1 = new Double((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray0.length);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.0514067711534194
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostMatrix.parseMatlab("          s[j] = new Double(i.value(j));\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctUnclassified();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      Evaluation.k_MarginResolution = (-347);
      evaluation0.equals(testInstances0);
      evaluation0.SFPriorEntropy();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(1, (char[]) null, (-1632920973));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Integer integer0 = new Integer((-2));
      double double0 = evaluation0.trueNegativeRate((-2));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double1, 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.6634060097316206
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.KBMeanInformation();
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.updateMargins((double[]) null, (-1), (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      testInstances1.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_SumSchemeEntropy = 779.9184875739;
      Evaluation.getGlobalInfo(zeroR0);
      testInstances1.setNumNumeric((-1593));
      CSVLoader cSVLoader0 = new CSVLoader();
      double double0 = evaluation0.SFEntropyGain();
      assertEquals((-779.9184875739), double0, 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.710027779724208
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      String[] stringArray0 = new String[0];
      testInstances0.setNoClass(false);
      Evaluation.main(stringArray0);
      DecisionStump decisionStump0 = new DecisionStump();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.KBMeanInformation();
      try { 
        Evaluation.handleCostOption("getUseWordFrequencies", 500);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.149642131914571
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_TotalCoverage = (double) (-2);
      Evaluation.k_MarginResolution = (-2);
      evaluation0.KBInformation();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.areaUnderROC((-1));
      Classifier classifier0 = null;
      evaluation0.weightedAreaUnderPRC();
      testInstances0.generate(".bsi");
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double0 = evaluation0.numFalseNegatives(18);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.errorRate();
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFMeanEntropyGain();
      double double2 = evaluation0.KBMeanInformation();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.getHeader();
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.234044601196686
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double0 = evaluation0.numFalseNegatives((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.errorRate();
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.pctIncorrect();
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.6330680280640992
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.priorEntropy();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.9940302114769565, double1, 0.01);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("prefix");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation1.makeDistribution(0.1);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = evaluation1.numFalseNegatives((-1));
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Unclassified = (double) (-1);
      testInstances0.setNumNumeric((-1));
      evaluation0.SFEntropyGain();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.falseNegativeRate((-1));
      try { 
        evaluation0.evaluateModelOnce((double) (-2), (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.2891028794535475
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      JRip jRip0 = new JRip();
      double double1 = evaluation0.numTruePositives((-1));
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("getClass");
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.8, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-2.0), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a>!Im");
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.8;
      doubleArray0[1] = 0.8;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instances instances1 = testInstances0.generate();
      DenseInstance denseInstance0 = (DenseInstance)converterUtils_DataSource0.nextElement(instances1);
      testInstances0.setWords("\"R(Nw;OR,|B\"8");
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.SFEntropyGain();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      denseInstance0.s_numericAfterDecimalPoint = denseInstance0.s_numericAfterDecimalPoint;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = 0.0;
      evaluation1.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
      double double0 = evaluation0.evaluateModelOnce(doubleArray0, (Instance) denseInstance0);
      assertEquals(0.0, evaluation0.SFMeanPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a>!Im");
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(99.8094102, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.386053230591938
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      SGD sGD0 = new SGD();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) sGD0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.9614154699306983
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-1));
      Evaluation.main(testInstances1.DEFAULT_WORDS);
      assertEquals(1, testInstances1.getNumDate());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.numFalsePositives((-2));
      evaluation0.rootRelativeSquaredError();
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.0480299305141
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.numFalsePositives((-2));
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-1), 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.0774821261524856
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMacroFmeasure();
      evaluation0.numFalseNegatives((-2));
      double double1 = Evaluation.MIN_SF_PROB;
      double double2 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.errorRate();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CSVLoader cSVLoader0 = new CSVLoader();
      String[] stringArray0 = new String[0];
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.m_TrainClassWeights;
      evaluation0.incorrect();
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, 98);
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      ArffLoader arffLoader0 = new ArffLoader();
      CostMatrix costMatrix0 = Evaluation.handleCostOption("", (-2));
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_TotalCoverage = (double) (-2);
      Evaluation.k_MarginResolution = (-2);
      evaluation0.KBInformation();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFPriorEntropy();
      Object object0 = new Object();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      double[] doubleArray0 = evaluation0.m_ClassPriors;
      assertEquals(2, doubleArray0.length);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double0 = evaluation0.numInstances();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.errorRate();
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[2];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2));
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.numTruePositives((-1));
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("9+T@])&K]^R6k3fpI");
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<!-- technical-bibtex-end -->");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.8, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      LinearRegression linearRegression0 = new LinearRegression();
      try { 
        Evaluation.handleCostOption("wxk3", 21);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertFalse(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.7774503447663808
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumClasses((-2));
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(linearRegression0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) linearRegression0, (Instance) binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.86207719526477
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("@relation", false);
      JRip jRip0 = new JRip();
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", jRip0.foldsTipText());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      double double0 = evaluation0.m_SumSqrPredicted;
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double1 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.totalCost();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.575784003562876
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(".bsi", true);
      String string0 = evaluation0.toClassDetailsString(" ");
      assertEquals(" \n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setDebug(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      
      Stacking stacking0 = new Stacking();
      String string1 = Evaluation.getGlobalInfo(stacking0);
      assertEquals("\nSynopsis for weka.classifiers.meta.Stacking:\n\nCombines several classifiers using the stacking method. Can do classification or regression.\n\nFor more information, see\n\nDavid H. Wolpert (1992). Stacked generalization. Neural Networks. 5:241-259.", string1);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      File file0 = textDirectoryLoader0.getDirectory();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setDirectory(file0);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.useNoPriors();
      double double0 = evaluation0.m_SumPredicted;
      System.setCurrentTimeMillis(1L);
      evaluation0.pctUnclassified();
      evaluation0.equals(instances0);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(0, false, false);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      testInstances0.setSeed(0);
      doubleArray0[1] = (-2112.71918678);
      DenseInstance denseInstance0 = new DenseInstance((-655.0), doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) simpleLogistic0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.005438769228167
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.pctUnclassified();
      assertTrue(evaluation1.equals((Object)evaluation0));
      
      evaluation1.equals(testInstances0);
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.KBMeanInformation();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals((Object) null);
      try { 
        Evaluation.handleCostOption("@relation", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a>!Im");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives((-1));
      MockRandom mockRandom0 = new MockRandom(23);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Object[] objectArray0 = new Object[6];
      try { 
        evaluation0.evaluateModel((Classifier) regressionByDiscretization0, instances0, objectArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      JRip jRip0 = new JRip();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.pctUnclassified();
      evaluation0.falseNegativeRate((-1));
      evaluation0.SFMeanEntropyGain();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      MockRandom mockRandom0 = new MockRandom((-2));
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 90, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      LogitBoost logitBoost0 = new LogitBoost();
      MockRandom mockRandom0 = new MockRandom((-1));
      try { 
        evaluation0.crossValidateModel((Classifier) logitBoost0, instances0, (-1), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a>Im");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_ClassIsNominal = false;
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 23;
      Instances instances0 = new Instances("attributes", arrayList0, 23);
      CostMatrix costMatrix0 = new CostMatrix(23);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toMatrixString("@relation");
      assertEquals("@relation\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setDebug(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      Stacking stacking0 = new Stacking();
      evaluation0.priorEntropy();
      evaluation0.incorrect();
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.useNoPriors();
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
