/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 01:01:14 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.634651045608745
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967269L, 9223372032559808545L);
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals(9223372032559808545L, long0);
      
      Range range1 = Range.of(9223372032559808545L);
      range1.equals((Object) null);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertFalse(list1.equals((Object)list0));
      //  // Unstable assertion: assertFalse(list1.contains(range1));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2048654877264138
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of((-2147483686L), (-2147483686L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of((-2147483686L), (-694L));
      Range range2 = range1.intersection(range0);
      long long0 = range2.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(4294965986L, 4294965986L);
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = 4294967313L;
      long long1 = 495L;
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.540504671741848
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), (-5L));
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-128L), 127L);
      range_Builder0.build();
      range0.getEnd();
      Range range1 = Range.ofLength(127L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6884526475116584
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.ofLength(65570L);
      range0.equals(range0);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 65569 ]/0B", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0609493574615376
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775797L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of(255L, 9223372036854775797L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range range2 = range_Builder0.build();
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9772143420956936
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      boolean boolean1 = range0.equals(range0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.8655776169280527
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775797L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 4934L, 9223372036854775807L);
      Range range1 = Range.of(2147483647L, 9223372036854775807L);
      range0.spliterator();
      range1.equals((Object) null);
      range1.complement(range0);
      Range.ofLength(9223372036854775797L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0618047033734874
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(1L);
      range0.endsBefore(range1);
      Range range2 = range_Builder0.build();
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
      
      long long1 = range2.getBegin();
      assertEquals(0L, long1);
      
      boolean boolean0 = range2.equals((Object) null);
      assertFalse(boolean0);
      
      Range range3 = Range.ofLength(1L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.216779633057546
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.ofLength(4294965994L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range.CoordinateSystem) null, 65570L, 65570L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.558127496267051
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(65570L);
      Range range1 = Range.of(0L, 65570L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("unable to mkdir for ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse unable to mkdir for  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      range0.equals("(d+)s*..s*(d+)");
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.5881522799479098
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Range range1 = Range.of(65535L);
      range0.spliterator();
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range2 = Range.ofLength(2147483647L);
      assertFalse(range2.isEmpty());
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(1L, 65570L);
      Range range1 = Range.ofLength(65570L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.639712007417701
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.of((-2147483648L), (-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-2147483648L), (-694L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of((-2147483648L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ -2147483648 .. -694 ]/0B", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775797L);
      Range range1 = Range.of(0L, 9223372036854770874L);
      range1.equals(range0);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-201L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(9223372036854775797L);
      Range.of(1467L, 1467L);
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.7565485504053844
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.ofLength(65570L);
      Range range1 = Range.of(65570L, 65570L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.ofLength(3252556L);
      boolean boolean0 = range2.equals(range0);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range2);
      assertEquals(0, list0.size());
      
      Object object0 = new Object();
      range0.equals(object0);
      Range range3 = Range.ofLength(65570L);
      assertSame(range3, range0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2086987437539287
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 522L, 4294967313L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.36103398575363
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.ofLength(65570L);
      Range range1 = Range.of(1L, 65570L);
      range1.equals(range0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2028955619269524
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Range range1 = Range.of(65535L);
      range0.spliterator();
      long long0 = range0.getBegin();
      assertEquals(65534L, long0);
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.371176166783867
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of((-436L), (-436L));
      Range range1 = Range.of((-436L), 1L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775797L);
      Range range1 = Range.ofLength(9223372036854775797L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 4294965986L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775797L);
      Range range1 = Range.of(255L, 9223372036854775797L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.658983124803942
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of((-2147483686L), (-3626L));
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3626 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.979856144737496
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of((-2147483648L), (-694L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.201877361596037
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1275L, 9223372036854775807L);
      Range.ofLength(2147483647L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4928421001435863
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(1L, 127L);
      Range range1 = Range.of(127L);
      Range range2 = Range.ofLength(1L);
      range2.intersection(range1);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      
      range0.equals(range2);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.130860608303783
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.spliterator();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(1L, (-885L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = 9223372036854775785L;
      Range range0 = Range.ofLength(9223372036854775785L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-68L), (-68L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      range0.spliterator();
      long long0 = range0.getEnd();
      assertEquals((-69L), long0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.2671143019073323
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 747L, 4294967340L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.7154058068545575
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-2508L);
      range_CoordinateSystem1.toString();
      Range range0 = Range.of(range_CoordinateSystem0, (-2508L), (-2508L));
      long long1 = 9223372036854775807L;
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range1.complement(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2508 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.269362915788168
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.ofLength(65535L);
      Range range0 = Range.of(32767L, 32767L);
      Range range1 = Range.ofLength(1959L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      Range range2 = Range.ofLength(1959L);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.1327282156912077
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.ofLength(65570L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 9223372032559808511L, (-9223372036854775808L));
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(4294967313L, 4294967313L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.426145476929101
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775797L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of(255L, 9223372036854775797L);
      range_Builder0.expandEnd(9223372036854775797L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1337941717205218
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-17L), (-17L));
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of((-78L));
      range0.spliterator();
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, (-78L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.3866123593999244
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), (-5L));
      Range range1 = Range.of((-5L), (-5L));
      range1.equals(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(2, list0.size());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2643476461270504
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.267638227190276
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775797L);
      Range range1 = Range.of(9223372036854775797L, 9223372036854775797L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      String string0 = range1.toString();
      assertEquals("[ 9223372036854775797 .. 9223372036854775797 ]/0B", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-281L));
      range0.spliterator();
      range0.equals((Object) null);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.2013835344355432
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = 65535L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1363L, 1363L);
      long long1 = 1422L;
      Range range0 = Range.ofLength(1422L);
      long long2 = 255L;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 747L, 4294967340L);
      range0.getBegin();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 747L, 4294967340L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.7931511307298944
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 11L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.9884117310180804
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-17L), (-17L));
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(1563L);
      Spliterator<Long> spliterator0 = range1.spliterator();
      Range range2 = Range.of(2147483647L, 2147483647L);
      range2.equals(spliterator0);
      range0.split(1563L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-1939L), 32767L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("4nP@!xwZa\"", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 4nP@!xwZa\" into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.483036076595393
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.of(1L);
      Range range0 = Range.of(1L);
      List<Range> list0 = range0.split(1L);
      assertEquals(1, list0.size());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-436L), (-436L));
      range0.equals(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.3733842298852665
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      range0.forEach(consumer0);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = 747L;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 747L, 747L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.056474781190351
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967313L);
      range0.spliterator();
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=4.038157969296988
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 4294967295L;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1716L), 4378L);
      List<Range> list0 = range1.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.ofLength(79L);
      range2.complementFrom(list0);
      long long1 = 1589L;
      // Undeclared exception!
      try { 
        Range.of(4378L, 933L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.662957574549869
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(9223372036854775797L, 9223372036854775797L);
      Range range1 = Range.ofLength(0L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(579L);
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.3938263850785098
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of((-436L), (-436L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1442L), (-436L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.9792886722599112
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of((-436L), (-436L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1450L), (-436L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.9792886722599112
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of((-1604L), (-1604L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1604L), (-1604L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.581560633272795
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of((-1L), 1L);
      range0.iterator();
      Range range1 = Range.of((-1L));
      range1.isSubRangeOf(range0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775797L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range0.isEmpty();
      range0.complement(range1);
      assertFalse(range1.isEmpty());
      
      Long long0 = new Long(1L);
      boolean boolean1 = range0.equals(long0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.9672216911868405
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 127L, 9223372036854775807L);
      range0.spliterator();
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      Range range2 = Range.of((-692L));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.262760150457981
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(1L, 65570L);
      Range range1 = Range.ofLength(65570L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(1L, 65535L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.056474781190351
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(1L, 0L);
      range0.getEnd(range_CoordinateSystem0);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = (-3358L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775796L, (-3358L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3358 would make range [9223372036854775796 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1363L, 1363L);
      boolean boolean0 = range0.equals("g)}Q");
      assertFalse(boolean0);
      
      range0.spliterator();
      long long0 = range0.getEnd();
      assertEquals(1362L, long0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.973278742811257
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 722L, 722L);
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1363L, 1363L);
      range0.equals(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      boolean boolean0 = range0.equals("g)}Q");
      assertFalse(boolean0);
      
      long long0 = range0.getEnd();
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.6560206204611774
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Range range1 = Range.of(65535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 65535L, 65535L);
      range1.spliterator();
      range0.getBegin();
      range0.equals(range1);
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.6778047022961275
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 11L, 11L);
      range0.equals("(d+)s*..s*(d+)");
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 11 .. 11 ]/SB", string0);
      
      Range range1 = Range.of((-900L), (-437L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = Range.ofLength(392L);
      boolean boolean0 = range2.intersects(range0);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775796L, (-416L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -417 would make range [9223372036854775795 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.165754881412656
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of((-128L));
      long long0 = range0.getBegin();
      assertEquals((-128L), long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.6211382079596963
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of((-632L), (-632L));
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 2148L);
      Range range1 = Range.ofLength(1L);
      range0.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, (-1361L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1362 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=4.186372228082835
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1L);
      long long1 = 4294967295L;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      range0.equals("(d+)s*..s*(d+)");
      range0.toString(range_CoordinateSystem0);
      range0.spliterator();
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.equals(range1);
      range0.split(4294967295L);
      range_CoordinateSystem0.toString();
      Range range2 = Range.of((-1L));
      range2.startsBefore(range1);
      range2.endsBefore(range0);
      long long2 = 4294967293L;
      range2.complement(range1);
      // Undeclared exception!
      range0.split(53251L);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), (-5L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = 1304L;
      Range range0 = Range.of(1L, 1304L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.130582753344072
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.6994764510345335
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2147483647L), long0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      long long1 = range1.getEnd();
      assertEquals((-1L), long1);
      
      Range range2 = range_Builder0.build();
      range2.complement(range1);
      Range range3 = range1.intersection(range2);
      assertSame(range3, range2);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 294L, 294L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.5350691901980973
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-1L), 960L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.7388003699586245
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(701L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 701L, 701L);
      Range range2 = range0.intersection(range1);
      range2.intersects(range1);
      assertTrue(range1.isEmpty());
      
      List<Range> list0 = range0.split(701L);
      assertTrue(list0.contains(range0));
      assertFalse(list0.contains(range2));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.3846246314593835
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(4934L);
      range0.spliterator();
      assertTrue(range0.isEmpty());
      
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.160396175932441
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.startsBefore(range0);
      boolean boolean1 = range1.endsBefore(range0);
      assertFalse(boolean1 == boolean0);
      assertFalse(range0.isEmpty());
      
      range1.getEnd();
      Range range2 = range_Builder0.build();
      assertSame(range2, range1);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.979856144737496
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      boolean boolean0 = range1.equals(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.327991619194251
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(65570L, 4294965986L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372032559808511L, 9223372032559808511L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.ofLength(1007L);
      Range range1 = Range.of(255L, 1007L);
      range1.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.892632114903634
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      
      String string0 = range0.toString();
      assertEquals("[ 1 .. 1 ]/0B", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.509404383375104
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(960L, 960L);
      Range range1 = Range.of(264L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      
      String string0 = range1.toString();
      assertEquals("[ 264 .. 264 ]/0B", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-694L), 2147483647L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.6137033744198748
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-3807L));
      Range.of((-694L), (-694L));
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.1860594162939453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.8899587648618628
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4554L, 9223372036854775543L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 4553 .. 9223372036854775542 ]/0B", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(65570L, 4294965986L);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(4294967295L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.134384432418997
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of((-2147483686L), (-2147483686L));
      Range range1 = range0.intersection(range0);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.4394884841169353
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range1.intersects(range0);
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.of(2066L, 2066L);
      Range range0 = Range.of(2066L);
      Long long0 = new Long(2066L);
      range0.equals(long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of(747L, 747L);
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.389143256667664
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(747L, 4294967295L);
      Range range1 = Range.of(3252556L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.ofLength(1660L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.589001637031784
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775797L);
      Range range1 = Range.ofLength(1L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.38788419570711
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(9223372036854775797L, 9223372036854775797L);
      Range range1 = Range.ofLength(9223372036854775797L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.4316889481926167
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      range0.getEnd();
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.3203691289568624
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(255L, 255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1245L), (-1245L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.0908756444812773
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(65588L);
      Range range1 = Range.of(65588L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.3043018899917618
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of((-436L), (-436L));
      Range range1 = Range.of((-1450L));
      range0.intersects(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.669662259811829
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 4294967283L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.2843551328440377
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 248L, 4294965986L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372032559808511L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-128L), (-128L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.4507470807426985
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.408385208188493
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.of((-905L), (-905L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-905L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.115053675356123
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(651L);
      long long0 = range0.getEnd();
      assertEquals(651L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-464L), (-464L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.569010158234719
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775797L);
      Range range1 = Range.of(9223372036854775797L, 9223372036854775797L);
      range1.toString();
      Range range2 = Range.parseRange("[ 9223372036854775797 .. 9223372036854775797 ]/0B");
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.9801447450260965
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("[ 65535 .. 65535 ]/RB", range_CoordinateSystem1);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.3041655004759583
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      Range range1 = Range.of(65535L, 65535L);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967321L, 4294967321L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.5873928183218178
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(65570L, 65570L);
      Range range1 = Range.ofLength(65570L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.0567526361500623
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 960L, 960L);
      List<Range> list0 = range0.split(960L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertTrue(list1.contains(range0));
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.060276460265276
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.4346284263570905
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.of((-685L), 65570L);
      Range.Builder range_Builder0 = new Range.Builder(65570L);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.471465904142174
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-1L), 4294966792L);
      Range range1 = Range.ofLength(960L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
      
      String string0 = range1.toString();
      assertEquals("[ 0 .. 959 ]/0B", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(1730L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("RpjZ#'mC$a@N~e", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse RpjZ#'mC$a@N~e into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.4406221852733103
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range range1 = Range.of(32767L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertFalse(list0.contains(range1));
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.35944788412389
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of((-436L), (-436L));
      String string0 = range0.toString();
      assertEquals("[ -436 .. -436 ]/0B", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.130582753344072
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-488L), (-488L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(")#!5TGRE,;Uv%^,XH$", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse )#!5TGRE,;Uv%^,XH$ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.476741444655379
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range0));
      assertEquals(1, list0.size());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.323921794922607
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-281L), (-281L));
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-281L), long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem1);
      assertEquals((-281L), long1);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.2688293237435406
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.of((-2147483686L), (-2147483686L));
      Range.of((-2147483686L), (-2147483686L));
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-2147483686L));
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.2584896642387338
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.spliterator();
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Long long1 = new Long(0L);
      range0.equals(long1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.6877906150720685
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775797L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(1L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.491856304561743
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2147483647L);
      Range range1 = Range.of((-795L));
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.0599988624120327
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2147483647L);
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of(4294967297L, 4294967297L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.4921351512518326
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range range1 = Range.of(2147483647L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of(1401L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of(3026L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.1985918821853003
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2464L);
      range0.getBegin();
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertEquals(2464L, long0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-694L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of(1L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.3639573174436195
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 1 ]/RB", string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.2838685127595846
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of((-128L), 1666L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-694L), 4294967295L);
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.0555153951973866
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.of((-436L), (-436L));
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of((-2147483670L), (-694L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.6280842159660085
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-685L));
      Range range0 = Range.of((-685L), (-685L));
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-694L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854775807L);
      List<Range> list0 = range0.split(9223372036854775807L);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.3880676104307272
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range range0 = Range.of(65570L, 65570L);
      List<Range> list0 = range0.split(3405L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range range0 = Range.of((-32768L), 0L);
      long long0 = range0.getLength();
      assertEquals(32769L, long0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.793494183903136
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range range0 = Range.of((-32769L));
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=3.2227634799363307
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range range0 = Range.of((-1179L), 75546L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.9792886722599112
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775797L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Long long0 = new Long(9223372036854775797L);
      Range range1 = range_Builder1.build();
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Long long0 = new Long((-2147483648L));
      Range range0 = Range.of((-2147483648L), (-694L));
      // Undeclared exception!
      try { 
        range0.split((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=2.9835367867743026
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range range0 = Range.of(680L, 4934L);
      List<Range> list0 = range0.split(680L);
      assertEquals(7, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 167
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=2.6877906150720685
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 1 ]/SB", string0);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=3.2397208470799024
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 170
  /*Coverage entropy=2.7957357779255525
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(986L);
      range0.getBegin(range_CoordinateSystem0);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 986 .. 986 ]/0B", string0);
  }

  /**
  //Test case number: 171
  /*Coverage entropy=3.441765182374996
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775797L);
      Range range1 = Range.ofLength(9223372036854775797L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 172
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372032559808511L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 173
  /*Coverage entropy=2.890202965106063
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Range range0 = Range.of((-1L), 960L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ -1 .. 960 ]/0B", string0);
  }

  /**
  //Test case number: 174
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-128L), (-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 175
  /*Coverage entropy=3.5886727851118687
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Range range0 = Range.of(747L, 4294967295L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 176
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(2464L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(2465L, long0);
  }

  /**
  //Test case number: 177
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Range range0 = Range.of(9223372036854773375L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 178
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 522L, 522L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 179
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2822L), (-2822L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 180
  /*Coverage entropy=3.0543110595891974
  */
  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.expandBegin(2147483647L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }
}
