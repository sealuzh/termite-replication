/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 06 17:52:53 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.018553436736682
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(1489L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1489L, 3411L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.939099261288858
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(129L, 129L);
      List<Range> list0 = range0.split(1L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0778507209190007
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(65546L, 65546L);
      Range range1 = Range.ofLength(65546L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0778507209190007
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(9223372032559808513L, 9223372036854775806L);
      Range range1 = Range.ofLength(9223372032559808513L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.15462219691272
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(4294967297L);
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2733427787872356
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of((-1L), 1687L);
      Range range1 = Range.ofLength(1687L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.755549790664179
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9909112080063878
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-682L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9530375303326304
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of((-127L), 32767L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.864738512190568
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 127L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Residue Based", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6484383345463107
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.648438334546311
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-1L));
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7782254130184443
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(4294967291L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(4294967291L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.925202764171108
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(6534L, 6534L);
      long long0 = range0.getEnd();
      assertEquals(6534L, long0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0424758762113333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775801L), (-9223372036854775801L));
      long long0 = range0.getEnd();
      assertEquals((-9223372036854775801L), long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7886260379670387
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.778225413018444
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(9223372036854775807L, long0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.755549790664179
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.ofLength(823L);
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of(9223372036854775801L, 9223372036854775801L);
      long long0 = range0.getBegin();
      assertEquals(9223372036854775801L, long0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0424758762113333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775801L), (-9223372036854775801L));
      long long0 = range0.getBegin();
      assertEquals((-9223372036854775801L), long0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9251973297727805
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(65546L, 4294967295L);
      List<Range> list0 = range0.split(65546L);
      range0.complementFrom(list0);
      Range.of(long0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 9223372036854775807L, 9223372036854775807L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2565L, (-9223372036854775792L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775792 would make range [2565 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1449L, (-2L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-9223372036854775808L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.788626037967039
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.315645409479025
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775801L), (-9223372036854775801L));
      Range range1 = Range.of(2565L, 2565L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775801 would make range [2565 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854771565L);
      range_Builder0.shift(9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4245 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.778225413018444
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(9223372036854771565L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2079L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 65557L, 65557L);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.755549790664179
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 0 .. 4242 ]/SB", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0578780038774442
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range1.intersection(range0);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.886165178199426
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-479L), (-479L));
      Range range1 = range0.intersection(range0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.9370665455009894
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(9223372036854775801L, 9223372036854775801L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9113283408927346
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.922718206608824
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of(9223372032559808513L, 9223372036854775806L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.824380540474895
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.parseRange("[ 6530 .. 6530 ]/0B", range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("78Pj9!c5DPX'R/-C", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 78Pj9!c5DPX'R/-C into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.755549790664179
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.ofLength(170L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 169 ]/0B", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of((-1L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("RB", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.5992343495214842
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(127L);
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(1643L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.010896723427115
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775801L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775801L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -15 would make range [9223372036854775801 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1966L), (-201L));
      range_Builder0.expandBegin((-1966L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-2615L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(257L, (-3057L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, (-479L), (-479L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.7477418055719953
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range0.equals((Object) null);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.8341258765552606
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.equals(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.737140718477016
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.2252381269986947
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372032559809004L);
      Range range2 = range0.intersection(range1);
      boolean boolean0 = range2.equals(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.7730363048778623
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 231L, 231L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.7598774510573802
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 231L, 231L);
      boolean boolean0 = range0.equals("(d+)s*..s*(d+)");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.6484383345463107
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.equals(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.649948793001987
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.976544516702745
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(9223372036854775801L, 9223372036854775801L);
      List<Range> list0 = range0.split(9223372036854775801L);
      boolean boolean0 = range0.equals(list0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.782394510033999
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(9223372036854775801L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.325659871653441
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854771565L);
      Range range1 = Range.of(9223372036854771565L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.8892632916692693
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.7086132984926965
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(2432L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2999L), 4294967295L);
      List<Range> list0 = range1.split(4294967295L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(2, list1.size());
      assertFalse(list1.equals((Object)list0));
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.7689014346007985
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(65556L);
      Long long0 = new Long(65556L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.9251973297727805
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(3051L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.939099261288858
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(3051L, 9223372036854775807L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.9251973297727805
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(369L, 4294967295L);
      Long long0 = new Long(369L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.062463874143123
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(1687L);
      Range range1 = Range.of(1687L, 2076L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.8114194983013414
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(855L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.9504258637418843
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(322L, 322L);
      boolean boolean0 = range0.equals("(d+)s*..s*(d+)");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.767923626502885
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775801L);
      boolean boolean0 = range0.equals("(d+)s*..s*(d+)");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.942734887715744
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 2147483647L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 30L, 4294967295L);
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.767923626502885
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.ofLength(4294967292L);
      Long long0 = new Long(4294967292L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.000599812106182
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(129L, 129L);
      Range range1 = Range.ofLength(129L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.830713403754631
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(255L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.5698242460774114
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.ofLength(3360L);
      List<Range> list0 = range0.split(84L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(40, list0.size());
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.9668267598925535
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.966826759892553
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.966943486189354
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.9504258637418843
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      boolean boolean0 = range0.equals("(d+)s*..s*(d+)");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.980917147018423
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-2639L), 2227L);
      Range range1 = Range.of((-2639L), (-2639L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.9296754791476376
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-1L), 1687L);
      Range range1 = Range.of((-850L), 1687L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.858006239667225
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of((-621L));
      Long long0 = new Long((-621L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.016167410457118
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.00630085929358
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-65535L), (-65535L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.902823587955807
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Long long0 = new Long((-2147483648L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.086715272448053
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775807L), (-9223372036854775807L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.0724579351310872
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775801L), (-9223372036854775801L));
      boolean boolean0 = range0.equals("(d+)s*..s*(d+)");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.03251891494976
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(9223372036854775801L, 9223372036854775801L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.9601319054320023
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967298L);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.114963717591474
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775801L));
      Range range1 = Range.of(2255L);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.9370665455009894
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(9223372036854775801L, 9223372036854775801L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.7823945100339995
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(65556L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.0778507209190007
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(9223372032559808513L, 9223372036854775806L);
      Range range1 = Range.ofLength(9223372036854775252L);
      boolean boolean0 = range1.startsBefore(range0);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.967867468534036
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1272L), 1009L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.0592794887184103
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(9223372036854775801L, 9223372036854775801L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.1846409024393827
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775801L), (-9223372036854775801L));
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.3612735624775527
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2147483647L);
      Range range1 = Range.of((-795L));
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.8647385121905677
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(257L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.3384424910849515
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775801L), (-9223372036854775801L));
      Range range1 = Range.of(2565L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.1672761895497206
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967292L, 4294967292L);
      Range range1 = Range.of(9223372032559808513L);
      range1.intersects(range0);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.886165178199426
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-24L), (-24L));
      boolean boolean0 = range0.intersects(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.778225413018444
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of(9223372032559808513L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.0708722659071896
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of(9223372036854775801L, 9223372036854775801L);
      Range range1 = Range.ofLength(9223372036854774121L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.2605019806815045
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-24L), 9223372036854771565L);
      Range range1 = Range.of(9223372036854771565L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-2666L));
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.768901434600799
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of(65563L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-4024L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-4024L), long0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.778225413018444
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-9223372036854775808L), long0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.8337387456310323
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(4294967319L, 9223365276576252487L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.0864593035344696
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775792L), (-9223372036854775792L));
      // Undeclared exception!
      try { 
        range0.split((-9223372036854775792L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.4182768724153405
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-24L), 9223372036854771565L);
      Range range1 = Range.of(9223372036854771565L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range0));
      assertTrue(list0.contains(range1));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.787876228087594
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.9390992612888582
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of(9223372032559808513L, 9223372036854775806L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.075893987517936
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(65557L, 9223372036854775807L);
      Range range1 = Range.of(65557L, 65557L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.6412045184144084
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of((-32768L), 1543L);
      List<Range> list0 = range0.split(1543L);
      List<Range> list1 = range0.complementFrom(list0);
      assertFalse(list0.contains(range0));
      assertTrue(list1.isEmpty());
      assertEquals(23, list0.size());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.1308596534603352
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-217L), (-2L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.0146300137242736
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.parseRange("[ 6522 .. 6522 ]/0B");
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.7886260379670387
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.ofLength(65546L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("\b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse \b into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.059489109242114
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(169L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1227L, 1227L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-2051L));
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1250L));
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.925202764171108
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.ofLength(4242L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(4242L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.751915969031122
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of((-128L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.1756315439861975
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of(65546L, 65546L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }
}
