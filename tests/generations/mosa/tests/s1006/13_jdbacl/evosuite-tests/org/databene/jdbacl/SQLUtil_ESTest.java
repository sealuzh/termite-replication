/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 00:58:00 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputText;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLUtil.removeComments("Internal error: class name or user defined (ype has not been dutermind yet.");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "inner";
      stringArray0[1] = "inner";
      stringArray0[2] = "q^/R(p=]\"";
      stringArray0[3] = "Internal error: class name or user defined (ype has not been dutermind yet.";
      stringArray0[4] = "Internal error: class name or user defined (ype has not been dutermind yet.";
      stringArray0[5] = "Internal error: class name or user defined (ype has not been dutermind yet.";
      stringArray0[6] = "Internal error: class name or user defined (ype has not been dutermind yet.";
      // Undeclared exception!
      try { 
        SQLUtil.join("inner", "Internal error: class name or user defined (ype has not been dutermind yet.", stringArray0, "inner", "Skipping HASH JOIN because optimizable is not materializable", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[12];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      boolean boolean0 = SQLUtil.isQuery("tJy@,,oPwpaI+N");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("tJy@,,oPwpaI+N", defaultDBTable0, 435, "caklja4");
      defaultDBColumn0.setNullable(false);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("tJy@,,oPwpaI+N CAKLJA4 NOT NULL", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBCatalog dBCatalog0 = new DBCatalog("");
      DBSchema dBSchema0 = new DBSchema("calja4", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("calja4", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(2554, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "|`:D3", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("*/", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      File file0 = MockFile.createTempFile("|`:D3", "left");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(dBTable0.getDoc());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLUtil.normalize("e*' <5DyKw;q9a[<", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "e * ' <5DyKw;q9a[<'";
      stringArray0[1] = "e*' <5DyKw;q9a[<";
      stringArray0[2] = null;
      stringArray0[4] = "e * ' <5DyKw;q9a[<'";
      stringArray0[5] = "e*' <5DyKw;q9a[<";
      stringArray0[6] = "gd`8d!rUpMb:?j#{aT\"";
      stringArray0[7] = "e*' <5DyKw;q9a[<";
      stringArray0[8] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("gd`8d!rUpMb:?j#{aT\"", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      RowOutputText rowOutputText0 = new RowOutputText("e * ' <5DyKw;q9a[<'", "AT))vI^H&G+?F?_=", "altesua", true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0);
      PrintWriter printWriter0 = mockPrintWriter0.append('s');
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("altesua", defaultDBTable0, 65, "drop indexinternal error: class name or user defined (ype has not been dutermind yet.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: drop indexinternal error: class name or user defined (ype has not been dutermind yet.
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      SQLUtil.isDML(" 3GA/*@");
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.598852876798625
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("JOHAB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("JOHAB", defaultDBTable0, (-3), "JOHAB");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBDataType dBDataType0 = DBDataType.getInstance((-1814933118), "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "executecalj4";
      stringArray0[3] = "7LqBG#fGE/";
      stringArray0[4] = "";
      stringArray0[5] = "";
      SQLUtil.join("executecalj4", "7LqBG#fGE/", stringArray0, "w`_Y\"c+", "", stringArray0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execcalj4");
      assertNull(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      SQLUtil.isQuery(" 3G4A/*@");
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("JOHAB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("JOHAB", defaultDBTable0, (-3), "JOHAB");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.push(defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("JOHAB, JOHAB", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("calj4");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "calj4";
      stringArray0[1] = "calj4";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "calj4", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("calj4", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, " NOT NULL", false, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \" NOT NULL\" ", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DBSchema dBSchema0 = new DBSchema("drp able'/#;je\"");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("l\"$.bU9|jW ", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SELECT * FROM ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"SELECT * FROM \" PRIMARY KEY (, , , , , , )", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = SQLUtil.normalize("+!PUQHIk--1i", false);
      assertEquals("+ ! PUQHIk -- 1i", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "drop tablealtes tableupdate");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      DBDataType dBDataType0 = DBDataType.getInstance((-179517145), "truncate");
      Integer integer0 = new Integer((-179517145));
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncate", defaultDBTable0, dBDataType0, integer1);
      defaultDBColumn0.setDefaultValue("org.antlr.runtime.tree.RewriteRuleSubtreeStream");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("truncate TRUNCATE(1) DEFAULT org.antlr.runtime.tree.RewriteRuleSubtreeStream NULL", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7063260587210523
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Column name ";
      stringArray0[1] = "Column name ";
      SQLUtil.leftJoin("cv)&]n", stringArray0, "Column name ", "cv)&]n", stringArray0);
      SQLUtil.join("Blob parameter buffer value out of range for type ", "exec", stringArray0, (String) null, "Column name ", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("getcat");
      Boolean boolean0 = Boolean.FALSE;
      SQLUtil.isQuery("getcat");
      Random.setNextRandom(2698);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "getcat";
      stringArray0[1] = "getcat";
      stringArray0[2] = "getcat";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("getcat", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      File file0 = MockFile.createTempFile("getcat", "CLOB");
      File file1 = FileUtil.canonicalFile(file0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertNull(dBForeignKeyConstraint0.getDoc());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("EEhmUIG.*{Q", compositeDBObject0);
      tableContainer0.getTable("EEhmUIG.*{Q");
      DBDataType dBDataType0 = DBDataType.getInstance(469, "- ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0, integer0, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("- (2,1)", stringBuilder0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SQLUtil.innerJoin("Q|c^p", stringArray0, "Q|c^p", "Q|c^p", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Q|c^p");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Q|c^p", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      SQLUtil.isDDL("f3.@ck9;,[seiaLMwCz");
      DBCatalog dBCatalog0 = new DBCatalog("=,x##+uU");
      dBCatalog0.getSchema("alter tabledelete");
      DefaultDBTable defaultDBTable3 = new DefaultDBTable("alter tabledelete", (DBSchema) null);
      List<DBColumn> list0 = defaultDBTable3.getColumns();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setBinaryStream(String, InputStream, lng)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessiondele0te");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("1=w", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("drop index4*;`&;zieyjk5");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.469025138554394
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("I$g)4mqrY_}V::;KM'");
      assertNull(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
      
      boolean boolean1 = SQLUtil.isDDL("");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.249227195390915
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLUtil.normalize("Jb/'", true);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("insert");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "Jb / ''";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesStructure("~-(M;");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "pI]^jZp", false, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("@h;$o><+u#", (DBTable) null, 97, "zh3+\"CV9YmA{i3fU@+5");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBColumn0.setSize(integer0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("ZH3+\"CV9YMA{I3FU@+5(2)", stringBuilder0.toString());
      
      boolean boolean0 = SQLUtil.isQuery("@h;$o><+u#");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5407108604577937
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("RELEASE TO SAVEPOINT", (DBTable) null, (-1109324356), "update");
      SQLUtil.mutatesDataOrStructure("RELEASE TO SAVEPOINT");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("UPDATE", stringBuilder0.toString());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", (DBTable) null, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("DATE", stringBuilder0.toString());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DBDataType dBDataType0 = DBDataType.getInstance((-1123), "Gq'Uuy+Y!zB#nc");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Gq'Uuy+Y!zB#nc", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("GQ'UUY+Y!ZB#NC(3,3)", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("execute.f%de?");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3419004922628597
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("calj/");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isQuery("select into");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("SELECT * FROM ");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("alteS Tableu1pdate");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "d|F^Ri:'n.FM3!Sm_[";
      stringArray0[1] = "";
      stringArray0[2] = "d|F^Ri:'n.FM3!Sm_[";
      stringArray0[3] = "";
      stringArray0[4] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "d|F^Ri:'n.FM3!Sm_[", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("fbO", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "Ek>=IZwoce", "Ek>=IZwoce");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Q|c.^p");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Q|c.^p", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , , , )", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("JOHAB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("JOHAB", defaultDBTable0, (-3), "JOHAB");
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("JOHAB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("JOHAB", defaultDBTable0, (-3), "JOHAB");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("JOHAB", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.trimToSize();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "I$g)4mqrY_}V::;KM'";
      stringArray0[2] = "I$g)4mqrY_}V::;KM'";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter tablenv3nm<^<k", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
      
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      boolean boolean0 = SQLUtil.isDML("I$g)4mqrY_}V::;KM'");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "hd]*}[6[am`]";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "hd]*}[6[am`]";
      stringArray0[1] = "hd]*}[6[am`]";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "hd]*}[6[am`]", false, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("hd]*}[6[am`]", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create unique indexupdate");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter table");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("truncatetruncatu");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Boolean boolean0 = new Boolean((String) null);
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("u-|9Opv;");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "u-|9Opv;";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("u-|9Opv;", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT u-|9Opv; FOREIGN KEY (u-|9Opv;) REFERENCES null(u-|9Opv;)", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Boolean boolean0 = new Boolean("alteS Tableu1pdate");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.add((Object) "alteS Tableu1pdate");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("JOAB", defaultDBTable0, 15, "JOAB");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "JOAB";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      MockFile mockFile0 = new MockFile(".tmp", "JOAB");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("JOAB");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("JOAB");
      FileSystemHandling.createFolder(evoSuiteFile0);
      mockPrintWriter0.format("alter indexalter matrilize viewinsert", (Object[]) dBColumnArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(JOAB)", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6603631172353484
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("New exception raised duringcleanup ");
      assertNull(boolean0);
      
      SQLUtil.parseColumnTypeAndSize("New exception raised duringcleanup ");
      String string0 = SQLUtil.substituteMarkers("65niy", "65niy", stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop indextruncatu");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop indextruncatu", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"drop indextruncatu\" UNIQUE ()", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[11];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "truncatu", false, stringArray0);
      dBUniqueConstraint0.toString();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncatu");
      assertNull(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "<");
      SQLUtil.addOptionalCondition("<", stringBuilder0);
      assertEquals("< or <", stringBuilder0.toString());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.leftJoin("42Y94", stringArray0, "org.apache.derby.impl.store.access.heap.HeapRowLocation", "EJ1dO~#>rGy", stringArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "left join org.apache.derby.impl.store.access.heap.HeapRowLocation as EJ1dO~#>rGy on 42Y94.null = EJ1dO~#>rGy.null and 42Y94.null = EJ1dO~#>rGy.null and 42Y94.null = EJ1dO~#>rGy.null";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("alteS Tableu1pdaje");
      tableContainer0.getTable("alteS Tableu1pdaje");
      DBDataType dBDataType0 = DBDataType.getInstance((-102), "alteS Tableu1pdaje");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alteS Tableu1pdaje", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("alteS Tableu1pdaje ALTES TABLEU1PDAJE(2) NULL", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("JOAB", defaultDBTable0, 11, "JOAB");
      MockFile mockFile0 = new MockFile(".tmp", "JOAB");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("JOAB");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String[] stringArray1 = new String[2];
      stringArray1[0] = "v?ox}zqv.V";
      stringArray1[1] = ")up!";
      // Undeclared exception!
      try { 
        SQLUtil.join("v?ox}zqv.V", "v?ox}zqv.V", stringArray0, "v?ox}zqv.V", ")up!", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "I$g)4mqrY_}V::;KM'";
      stringArray0[2] = "I$g)4mqrY_}V::;KM'";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter tablenv3nm<^<k", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT \"alter tablenv3nm<^<k\" ", stringBuilder0.toString());
      
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      boolean boolean0 = SQLUtil.isDML("I$g)4mqrY_}V::;KM'");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = SQLUtil.normalize("X0Y57.S", false);
      assertEquals("X0Y57.S", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncates7");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("table null");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("updatexspc':pycjm)q?f8");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.join((String) null, (String) null, stringArray0, "- 0", "- 0", stringArray0);
      assertEquals("- 0 as - 0 on ", string1);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BA");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("BA", false, defaultDBTable0, "BA");
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK BA", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.leftJoin("#bufferable=", stringArray0, ";Uw", "#bufferable=", stringArray0);
      SQLUtil.join(";Uw", ">0;*pAk\"l*wd$r-_", stringArray0, (String) null, "lw5:cU|%\"Y%", stringArray0);
      Character character0 = new Character('u');
      SQLUtil.renderValue(character0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String string1 = SQLUtil.removeComments("select PP.RDB$PROCEDURE_NAME as PROCEDURE_NAME, PP.RDB$PARAMETER_NAME as COLUMN_NAME, PP.RDB$PARAMETER_TYPE as COLUMN_TYPE, F.RDB$FIELD_TYPE as FIELD_TYPE, F.RDB$FIELD_SUB_TYPE as FIELD_SUB_TYPE, F.RDB$FIELD_PRECISION as FIELD_PRECISION, F.RDB$FIELD_SCALE as FIELD_SCALE, F.RDB$FIELD_LENGTH as FIELD_LENGTH, F.RDB$NULL_FLAG as NULL_FLAG, PP.RDB$DESCRIPTION as REMARKS from RDB$PROCEDURE_PARAMETERS PP, RDB$FIELDS F where ");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("m~0|aDt7)");
      Character character0 = Character.valueOf('L');
      String string0 = SQLUtil.substituteMarkers("m~0|aDt7)", "", character0);
      assertEquals("'L'm'L'~'L'0'L'|'L'a'L'D'L't'L''L'7'L')'L'", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alteriindexrebied", true, "alteriindexrebied", "E8umU%fr");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.6386541211153043
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[4] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBUniqueConstraint0.toString();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("u\"Z~}!fbe?");
      assertNull(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("mevR9m5QRo}", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.568155382556487
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("NTa");
      assertNull(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = SQLUtil.renderValue("table null");
      assertEquals("'table null'", string1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("caKlja4");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("caKlja4", false, defaultDBTable0, "caKlja4");
      StringBuilder stringBuilder0 = new StringBuilder("caKlja4");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append(false);
      stringBuilder2.append(false);
      assertEquals("caKlja4CONSTRAINT caKlja4 falsefalse", stringBuilder2.toString());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.565394837118028
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLUtil.isDDL("T~[\"ubr");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "T~[\"ubr";
      stringArray0[1] = "'M#7NYCrVzV&}JL";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "T~[\"ubr";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("T~[\"ubr", stringArray0, "deleteregexp_replace", "'M#7NYCrVzV&}JL", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = SQLUtil.normalize("~-(M;", true);
      assertEquals("~ - (M ;", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = SQLUtil.normalize("PK/6,vq", true);
      assertEquals("PK / 6, vq", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = SQLUtil.normalize("G\"ap]T LL>U", true);
      assertEquals("G \"ap]T LL>U\"", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.3238614379613667
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("unrecog");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder(534);
      StringBuilder stringBuilder1 = stringBuilder0.append(534);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("updatecalj/");
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("updatecalj/", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.4102453456579889
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null = null AND null = null AND null = null", (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "null = null AND null = null AND null = null", true, stringArray0);
      String string1 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("null = null AND null = null AND null = null.null = null AND null = null AND null = null", string1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = SQLUtil.normalize("0*jsj UW9C9Us8A", false);
      assertEquals("0 * jsj U  W9C9Us8A", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = SQLUtil.normalize("TD%)^4=epu~2BLMPE", false);
      assertEquals("TD %) ^ 4 = epu ~ 2BLMPE", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("~-(M;", stringBuilder0);
      assertEquals("~-(M;", stringBuilder0.toString());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-408904608), "altes ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("altes ", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("ALTES ", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("DATE DATE NULL", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.renderColumnListWithTableName("drp able'/#;je\"", stringArray0);
      assertEquals("drp able'/#;je\".null, drp able'/#;je\".null, drp able'/#;je\".null, drp able'/#;je\".null, drp able'/#;je\".null, drp able'/#;je\".null, drp able'/#;je\".null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drp able'/#;je\"");
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM drp able'/#;je\" WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string1);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("exec", false, "greaterOrEquals", "greaterOrEquals");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT exec CHECK greaterOrEquals", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop indexinternal error: class name or user defined (ype has not been dutermind yet.", true, "drop indexinternal error: class name or user defined (ype has not been dutermind yet.", "54004");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"drop indexinternal error: class name or user defined (ype has not been dutermind yet.\" ", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("reBied", true, "reBied", "reBied");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT reBied CHECK reBied", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("callupdatenv3nm<^<k");
      assertNull(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setbinNrystream(s)ring, ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"s\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("~-(M;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ~-(M;
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "J}a8M~<";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("J}a8M~<", stringArray0, "J}a8M~<", "J}a8M~<", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        SQLUtil.join("org.apache.derby.impl.sql.compile.InListOperatorNode", "drop mateialized vieealtes tableu1pdaje", (String[]) null, "drop mateialized vieealtes tableu1pdaje", "drop mateialized vieealtes tableu1pdaje", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.535837785854851
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("RELEASE TO0SkVEP.INw");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "RELEASE TO0SkVEP.INw";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "RELEASE TO0SkVEP.INw";
      String string0 = SQLUtil.leftJoin("org.hsqldb.TriggerDef$DefaultTrigger", stringArray0, "RELEASE TO0SkVEP.INw", "RELEASE TO0SkVEP.INw", stringArray1);
      assertEquals("left join RELEASE TO0SkVEP.INw as RELEASE TO0SkVEP.INw on org.hsqldb.TriggerDef$DefaultTrigger.RELEASE TO0SkVEP.INw = RELEASE TO0SkVEP.INw.RELEASE TO0SkVEP.INw", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("CALL SCOPE_IDENTITY()");
      SQLUtil.addRequiredCondition("CALL SCOPE_IDENTITY()", stringBuilder0);
      assertEquals("CALL SCOPE_IDENTITY() and CALL SCOPE_IDENTITY()", stringBuilder0.toString());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("I$g)4mqrY_}V::;KM'", stringBuilder0);
      assertEquals("I$g)4mqrY_}V::;KM'", stringBuilder0.toString());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("gt$E,._q({UxKoa(", "inner", "gt$E,._q({UxKoa(");
      assertEquals("gt$E,._q({UxKoa(", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("null = null AND null = null AND null = null", stringArray0);
      assertEquals("null = null AND null = null AND null = null.null, null = null AND null = null AND null = null.null, null = null AND null = null AND null = null.null", string1);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("reBied", true, "reBied", "reBied");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK reBied", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.6396316382218536
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("calj/");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "calj/", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT calj/ PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("3%u1");
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("callkmbegxpq9~n\"");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("alter sessionjb/'");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[11];
      String string0 = SQLUtil.innerJoin("4Q|Dnfa;M^LBL", stringArray0, "executeselect intoset from", "executeselect intoset from", stringArray0);
      assertEquals("executeselect intoset from as executeselect intoset from on 4Q|Dnfa;M^LBL.null = executeselect intoset from.null and 4Q|Dnfa;M^LBL.null = executeselect intoset from.null and 4Q|Dnfa;M^LBL.null = executeselect intoset from.null and 4Q|Dnfa;M^LBL.null = executeselect intoset from.null and 4Q|Dnfa;M^LBL.null = executeselect intoset from.null and 4Q|Dnfa;M^LBL.null = executeselect intoset from.null and 4Q|Dnfa;M^LBL.null = executeselect intoset from.null and 4Q|Dnfa;M^LBL.null = executeselect intoset from.null and 4Q|Dnfa;M^LBL.null = executeselect intoset from.null and 4Q|Dnfa;M^LBL.null = executeselect intoset from.null and 4Q|Dnfa;M^LBL.null = executeselect intoset from.null", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.4662665178647387
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("calj/");
      assertNull(boolean0);
      
      DBSchema dBSchema0 = new DBSchema("calj/");
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema calj/", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("drop mateialized vieealtes tableu1pdaje", "drop mateialized vieealtes tableu1pdaje", (String[]) null, "drop mateialized vieealtes tableu1pdaje", "drop mateialized vieealtes tableu1pdaje", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.innerJoin("*/", stringArray0, "*/", "materializeResultSetIfPossible", stringArray0);
      assertEquals("*/ as materializeResultSetIfPossible on */.null = materializeResultSetIfPossible.null and */.null = materializeResultSetIfPossible.null and */.null = materializeResultSetIfPossible.null and */.null = materializeResultSetIfPossible.null and */.null = materializeResultSetIfPossible.null and */.null = materializeResultSetIfPossible.null and */.null = materializeResultSetIfPossible.null and */.null = materializeResultSetIfPossible.null and */.null = materializeResultSetIfPossible.null", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin(")[oF", (String[]) null, ")[oF", "Ef\"U06v%eTlK", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("org.h2.command.dOl.DeallocateProcedure", (String[]) null, "org.h2.command.dOl.DeallocateProcedure", "org.h2.command.dOl.DeallocateProcedure", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("4mxGcVj@rTH!2X");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("KxN5x]z_q]");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select,");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "drop index";
      SQLUtil.substituteMarkers("drop index", "drop materialized viewkmbegxpq9~n\"", (Object) null);
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
