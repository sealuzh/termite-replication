/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 01:22:46 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7242986702781118
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("no", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6401934578801076
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      Float float0 = new Float((-1900.0935F));
      hashMap0.put((JSONObject) null, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 27, (-313));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(116);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(linkedList0, 12, 116);
      assertEquals("[]", string0);
      
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      String string1 = jSONObject0.toString();
      assertEquals("{}", string1);
      assertNotNull(string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3809682098476954
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("STqS57M2:e5&CL", 4840.4559);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      double double0 = jSONObject0.optDouble("STqS57M2:e5&CL");
      assertEquals(4840.4559, double0, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.837540682550338
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(": ", true);
      int int0 = jSONObject0.optInt(": ");
      assertEquals(0, int0);
      
      boolean boolean0 = jSONObject0.isNull(": ");
      long long0 = jSONObject0.optLong(": ");
      assertEquals(0L, long0);
      
      boolean boolean1 = jSONObject1.optBoolean(": ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.425691517589258
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      hashMap0.put((Double) null, jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("wr", (Map) hashMap0);
      jSONObject1.names();
      // Undeclared exception!
      try { 
        jSONObject1.toString(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("lo");
      assertEquals("", string0);
      
      String string1 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.695080522597768
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("Null key.", (Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("1", (Collection) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Null key.";
      stringArray0[1] = "1";
      stringArray0[2] = "1";
      stringArray0[4] = "Null key.";
      stringArray0[5] = "Null key.";
      stringArray0[6] = "Null key.";
      stringArray0[8] = "1";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      boolean boolean0 = jSONObject1.has("Null key.");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.820263394926851
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1.0);
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("&13", true);
      boolean boolean0 = jSONObject0.isNull("&13");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.put("qy^'SGGpP#z,Q", 1921L);
      long long0 = jSONObject2.optLong("qy^'SGGpP#z,Q");
      assertEquals(1921L, long0);
      
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.989164155585533
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("|q)|2d_--'MH|O", false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.remove((Object) null);
      JSONObject jSONObject1 = jSONObject0.put("|q)|2d_--'MH|O", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("|q)|2d_--'MH|O");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3395725819089677
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      hashMap0.put((Double) null, (JSONObject) null);
      JSONObject jSONObject1 = jSONObject0.put("gettoJSONObject", (Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject1.put("h_11|m{'.Q~", (Collection) linkedList0);
      Long.compare(0L, 0L);
      // Undeclared exception!
      try { 
        jSONObject0.toString(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3935343515788563
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 2547, 2547);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0877086517985965
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("9", 0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "<2&w3Uc&";
      stringArray0[1] = "~dT'/e)KC";
      stringArray0[2] = "<2&w3Uc&";
      stringArray0[3] = "<2&w3Uc&";
      stringArray0[4] = "<2&w3Uc&";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optJSONObject("qIsq6!:3(?dJ8");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("-##", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.accumulate("-##", hashMap0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.append("vk6_e_._jw:L<|2", object0);
      Object object1 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("vk6_e_._jw:L<|2", object1);
      JSONObject jSONObject2 = jSONObject1.append("vk6_e_._jw:L<|2", object1);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("L83{9sZN6cVuP_S", (Map) hashMap0);
      jSONObject1.getJSONObject("L83{9sZN6cVuP_S");
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4154978294893135
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "fo");
      String string0 = JSONObject.quote("fo");
      assertEquals("\"fo\"", string0);
      
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.7550603407837796
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getput", true);
      JSONObject jSONObject1 = new JSONObject((Object) "getput");
      assertEquals(3, jSONObject1.length());
      
      boolean boolean0 = jSONObject0.getBoolean("getput");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4180181438628057
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject.quote((String) null);
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      // Undeclared exception!
      jSONObject0.toString(4169);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("gettoJSONObject", (Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject1.put("gettoJSONObject", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('q');
      Writer writer0 = jSONObject0.write(stringWriter1);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1817319207582866
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONArray0);
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("9{^{#@xXmUl><S0|;b", "9{^{#@xXmUl><S0|;b");
      jSONObject0.opt("9{^{#@xXmUl><S0|;b");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.212919502355014
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (-180.09198));
      String string0 = JSONObject.quote("] is not a number.");
      assertEquals("\"] is not a number.\"", string0);
      
      jSONObject0.toJSONArray((JSONArray) null);
      long long0 = jSONObject1.getLong("wheel.json.JSONArray");
      assertEquals((-180L), long0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3224106955121093
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("tK1n", false);
      boolean boolean0 = jSONObject1.isNull("tK1n");
      boolean boolean1 = jSONObject0.getBoolean("tK1n");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1687413771293675
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject1 = jSONObject0.put(",\n", (Collection) linkedList0);
      jSONObject1.getJSONArray(",\n");
      try { 
        jSONObject1.getBoolean(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1837132182957943
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Float float0 = new Float((-2054.561));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      Float.sum(0.0F, 0.0F);
      Float.isFinite((-7878.03F));
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(8, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject.quote("");
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9549478780836425
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "L");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("L", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", false);
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 46, 852);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9517632546458663
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("Expected a ',' or ']'");
      assertEquals(Double.NaN, double0, 0.01);
      
      Double double1 = new Double((-1L));
      JSONObject jSONObject1 = jSONObject0.append("FcM=:", double1);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("FcM=:");
      assertNotNull(jSONArray0);
      assertNotEquals((double)double1, (double)double0, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("pa", (String) null);
      hashMap0.put((String) null, (String) null);
      JSONObject.valueToString(hashMap0);
      Boolean boolean0 = new Boolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.319904429847949
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toString();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONObject@0000000001", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.1593891134846523
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("~t_tr", "~t_tr");
      jSONObject1.remove("~t_tr");
      try { 
        jSONObject0.getBoolean("~t_tr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~t_tr\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("gettoJSONObject", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5635409861100267
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("&`O2oM}");
      assertEquals(0, int0);
      
      Boolean boolean0 = new Boolean("&`O2oM}");
      JSONObject jSONObject1 = jSONObject0.put("jO", 15L);
      int int1 = jSONObject1.getInt("jO");
      assertEquals(15, int1);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      StringWriter stringWriter0 = new StringWriter(16);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "&`O2oM}");
      stringWriter1.append('`');
      String[] stringArray1 = JSONObject.getNames((Object) "&`O2oM}");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.160755383162137
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      jSONObject0.put("getmin", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.getDouble("getmin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getmin\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6401036746862037
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2098.9468F));
      assertEquals("-2098.94677734375", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-2098.94677734375", 285.246062833);
      jSONObject0.toString();
      JSONObject.quote("taKaFIL}");
      jSONObject1.getDouble("-2098.94677734375");
      jSONObject1.optJSONArray("u|i;\"v<1A");
      String string1 = JSONObject.quote("isnotifyAll");
      assertEquals("\"isnotifyAll\"", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("@eIaFDC:/A<", stringArray0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      jSONObject0.accumulate("@eIaFDC:/A<", "@eIaFDC:/A<");
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append("@eIaFDC:/A<", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[@eIaFDC:/A<] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("vk6_e_._jw:L<|2", jSONObject0);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.append("vk6_e_._jw:L<|2", object0);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Byte byte0 = new Byte((byte)100);
      JSONObject.quote("taKaFIL}");
      String string0 = "{MU_[}k8+laz>KxhZ;/";
      JSONTokener jSONTokener0 = new JSONTokener("{MU_[}k8+laz>KxhZ;/");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {MU_[}k8+laz>KxhZ;/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "g;etput";
      JSONObject jSONObject1 = jSONObject0.put("g;etput", false);
      try { 
        jSONObject1.getInt("g;etput");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g;etput\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.9891373440826869
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject1 = new JSONObject((Object) "A=gBb");
      jSONObject0.length();
      Short short0 = new Short((short)25);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.038014596511072
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      Float float0 = new Float(2319.303F);
      JSONObject jSONObject1 = jSONObject0.putOpt("for", float0);
      jSONObject0.optDouble("for", (-1.0));
      try { 
        jSONObject1.getBoolean("p0p)`N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"p0p)`N\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble((String) null, (-203.0));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 65, 65);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("has", (-2097));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1983857508370273
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "\\t";
      JSONObject jSONObject0 = new JSONObject((Object) "\t");
      // Undeclared exception!
      jSONObject0.toString((-14), 2147483645);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.9649279290481876
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Wb");
      jSONObject0.put("Wb", 0L);
      jSONObject0.getString("Wb");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 225, 2847);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.3597473990481395
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("Expected a ',' or ']'", (Object) null);
      jSONObject0.optJSONObject("getreplaceAll");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("|RXvj~]v{+~/3qCu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |RXvj~]v{+~/3qCu
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer integer0 = new Integer(44);
      String[] stringArray0 = new String[2];
      stringArray0[1] = stringArray0[0];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String string0 = jSONObject0.optString("txlw!Y}W'mdB?", stringArray0[0]);
      assertNull(string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.5729899170928667
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("z$6)k;X?6", 0L);
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      jSONObject0.put("|foK_", (Map) hashMap0);
      int int0 = jSONObject0.getInt("z$6)k;X?6");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.918497806914765
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long long1 = new Long((-4956L));
      JSONObject jSONObject1 = jSONObject0.append("7SHj", long1);
      jSONObject1.getJSONArray("7SHj");
      jSONObject1.optLong("7SHj");
      JSONObject jSONObject2 = jSONObject0.put("ismax", (-2104.0));
      jSONObject2.getInt("ismax");
      JSONObject.getNames((Object) jSONObject2);
      jSONObject0.optString("7SHj");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      boolean boolean0 = jSONObject0.optBoolean("7SHj");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("p0p)`N", "p0p)`N");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      int int0 = jSONObject1.optInt("p0p)`N");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.62972293284473
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      jSONObject0.put(".", 3093.5505);
      int int0 = jSONObject0.optInt(".");
      assertEquals(3093, int0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("", object0);
      jSONObject1.optInt("");
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.3374677854994443
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject jSONObject1 = new JSONObject((Object) "");
      Double double0 = new Double(0L);
      JSONObject jSONObject2 = jSONObject1.append("nM9gb", double0);
      jSONObject2.getJSONArray("nM9gb");
      jSONObject2.put("] is not a JSONObject.", (double) 0L);
      JSONObject.quote("] is not a JSONObject.");
      jSONObject1.getDouble("] is not a JSONObject.");
      try { 
        jSONObject2.getJSONObject("000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"000\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.58641716671689
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONArray", "");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("wheel.json.JSONArray");
      JSONObject jSONObject2 = jSONObject0.put("wheel.json.JSONArray", 0.0);
      JSONObject.quote("wheel.json.JSONArray");
      jSONObject1.toJSONArray(jSONArray0);
      long long0 = jSONObject2.getLong("wheel.json.JSONArray");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5917629735996164
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "fo");
      jSONObject0.toString(17, 17);
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                  \"java.lang.String@0000000004\": [\n                                                   java.lang.Byte@0000000014,\n                                                   java.lang.Byte@0000000015\n                                  ],\n                                  \"java.lang.String@0000000011\": \"java.lang.Class@0000000012\",\n                                  \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n                 }");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{Z,Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {Z,Z
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(3033L);
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      JSONObject jSONObject0 = new JSONObject("{}");
      double double0 = jSONObject0.optDouble("{}");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.6083963944770798
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("9?kB1]@[B", 2061L);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", 0L);
      double double0 = jSONObject1.optDouble("] is not a JSONObject.");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.424943714670272
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = new Integer(44);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "txlw!Y}W'mdB?";
      stringArray0[1] = "txlw!Y}W'mdB?";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (Object) null);
      jSONObject1.put("txlw!Y}W'mdB?", true);
      jSONObject0.optString("txlw!Y}W'mdB?", "txlw!Y}W'mdB?");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.448437455613918
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      jSONObject1.isNull("");
      String string0 = jSONObject0.optString("");
      assertNotNull(string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 68, 68);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("gettoUpperCase", (-3436L));
      assertEquals((-3436L), long0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("I", (-1785.40423762));
      long long0 = jSONObject0.optLong("I", (-2138L));
      assertEquals((-1785L), long0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject.valueToString(hashMap0);
      Boolean boolean0 = new Boolean("{}");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("z", false);
      boolean boolean0 = new Boolean(false);
      try { 
        jSONObject1.getJSONObject("z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"z\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.7862943611198907
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      String string0 = JSONObject.valueToString(hashMap0, 27, (-313));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.8377001360170975
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("tK1n", false);
      jSONObject0.opt((String) null);
      try { 
        jSONObject0.getBoolean("vtpTH< \"`10L+8n9Lf>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vtpTH< \\\"`10L+8n9Lf>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = JSONObject.quote("->yi%qC{1k'QpY/MY@");
      assertEquals("\"->yi%qC{1k'QpY/MY@\"", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1071024035889305
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("to", jSONObject0);
      try { 
        jSONObject0.getBoolean("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.7550603407837796
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.putOpt("", "");
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.048844359649284
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7610914951129553
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.9758040107493536
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.242801636179605
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("_GGm", (-37.430542875));
      jSONObject1.toString();
      JSONObject.quote("taKaFIL}");
      double double0 = jSONObject1.getDouble("_GGm");
      assertEquals(2, jSONObject0.length());
      assertEquals((-37.430542875), double0, 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.5212022523213995
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("istoString", (Map) hashMap0);
      try { 
        jSONObject1.getLong("istoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoString\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.815673827222315
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("istoUpperCase", "");
      assertEquals("", string0);
      
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
      
      JSONObject jSONObject1 = new JSONObject();
      Long.compare((-3901L), 1814L);
      String string1 = jSONObject0.toString(48, 8);
      assertEquals("{}", string1);
      
      String string2 = JSONObject.quote("\r");
      assertEquals("\"\\r\"", string2);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("ishashCode", "ishashCode");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.5670029108725276
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-397.365123041));
      assertEquals("-397.365123041", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "-397.365123041");
      jSONObject0.toString((-2917));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.7557690270397415
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "izE:");
      try { 
        jSONObject0.append((String) null, "izE:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("KV*l'", 2069.425960843767);
      assertEquals(2069.425960843767, double0, 0.01);
      
      String string0 = JSONObject.quote("fo");
      assertEquals("\"fo\"", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = JSONObject.valueToString("9/b%", 57, 57);
      assertNotNull(string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.3839500556551427
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "@eIaFDC:/A<");
      jSONObject0.put("@eIaFDC:/A<", (Object) "@eIaFDC:/A<");
      jSONObject0.toString((-70125688), (-70125688));
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.452888727960641
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("toU", false);
      boolean boolean0 = jSONObject0.isNull("toU");
      Object object0 = jSONObject1.get("toU");
      assertTrue(object0.equals((Object)boolean0));
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("A JSONObject text must begin with '{'", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.2022413954579148
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(111, 111);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Double double0 = new Double((-2429));
      String string0 = JSONObject.valueToString(double0, (-2429), (-2429));
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.388908734898781
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString(97);
      jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.3991048133301536
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      jSONObject0.toString(92);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1907131165659273
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("", "");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("{m~(*V[CJ/Wz`6!", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Byte byte0 = new Byte((byte)100);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Float float0 = new Float((-1472.529F));
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("u*},,+K.v^pT.[-", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.9891373440826869
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Wb");
      try { 
        jSONObject0.getString("Wb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Wb\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("OGGm", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.643068250732437
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean(">HVB/DIQ", false);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("V)Mn8y;R%!^", true);
      assertTrue(boolean0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.opt("_GGm");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(10);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      JSONObject jSONObject1 = jSONObject0.put("hFT U>se92jC==/WL", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getgetJSONObject", 51);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = JSONObject.quote("Btk>`L /sBaI(");
      assertEquals("\"Btk>`L /sBaI(\"", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = JSONObject.quote("oYo\"Bti%jml &z");
      assertEquals("\"oYo\\\"Bti%jml &z\"", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.1807382878069084
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("[.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Double double0 = new Double((-31.64));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("CYA*ln8D*#K<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"CYA*ln8D*#K<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(1.0);
      String string0 = jSONObject0.optString("isparseLong", "txlw!Y}W'mdB?");
      assertEquals("txlw!Y}W'mdB?", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("smC?j6>!MS;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"smC?j6>!MS;\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.840827283190615
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "tK1n");
      String string0 = jSONObject0.optString("tK1n");
      assertEquals("", string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove(" ");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("zwuv]^f-zo,Fr(gn");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of zwuv]^f-zo,Fr(gn
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Bad value fromtoJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Bad value fromtoJSONString: 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("+kPaSPKKE}IOw'QWgv9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+kPaSPKKE}IOw'QWgv9\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("n6?tb'\"");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("] not found.", 3970);
      assertEquals(3970, int0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = JSONObject.valueToString("ispabreLog");
      assertNotNull(string0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("Wk_&kX2MEU2:j");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("]GM3 nJe$k]A/<2+)");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("mGd8+l5,cs0\"o<U\"%#");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("1>K2~Q1%'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1>K2~Q1%'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("JSONObject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONObject[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
