/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 06:05:54 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.778832887201099
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("=ofb", "=ofb");
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.put("=ofb", true);
      jSONObject0.getBoolean("=ofb");
      Float float0 = new Float(2110.3F);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "=ofb";
      stringArray0[1] = "=ofb";
      stringArray0[2] = "=ofb";
      JSONObject jSONObject2 = new JSONObject(float0, stringArray0);
      double double0 = jSONObject2.optDouble("=ofb");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9471865956069645
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.append("null", "null");
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.396749994850468
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.optDouble("%i[U!CM8Xmcbc");
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 10, 227);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9280277589799404
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      short short0 = (short)47;
      Short short1 = new Short((short)47);
      JSONObject jSONObject0 = new JSONObject(short1);
      Short short2 = new Short((short) (-1279));
      JSONObject jSONObject1 = jSONObject0.accumulate("isshortValue", short2);
      JSONObject.quote("isshortValue");
      jSONObject0.toString(476);
      jSONObject0.optBoolean("] is not a Boolean.");
      JSONObject jSONObject2 = jSONObject0.put("getvalueOf", 0L);
      jSONObject2.remove("\"isshortValue\"");
      jSONObject2.getDouble("getvalueOf");
      try { 
        jSONObject1.getDouble("getparseByte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getparseByte\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.633813831609746
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("i(^B6D:W", (-1L));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.optInt("i(^B6D:W");
      String string0 = jSONObject0.toString((-1), (-1));
      assertNotNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.964763373583426
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("W*WCTdHbE:NxCLI>r", jSONArray0);
      JSONArray jSONArray1 = jSONObject0.optJSONArray("W*WCTdHbE:NxCLI>r");
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.843052087301291
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Long, Byte> hashMap0 = new HashMap<Long, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "vd?Q^t%k~~xN~B@ye|";
      JSONObject jSONObject1 = new JSONObject();
      long long0 = 0L;
      Long long1 = new Long(0L);
      Byte byte0 = new Byte((byte)69);
      hashMap0.put(long1, byte0);
      Byte byte1 = new Byte((byte) (-101));
      hashMap0.put(long1, byte1);
      JSONObject jSONObject2 = jSONObject0.put("4{7cu0~[", (-1L));
      jSONObject0.getLong("4{7cu0~[");
      jSONObject2.toString(179);
      JSONObject.valueToString(jSONObject1);
      try { 
        jSONObject2.getBoolean("4{7cu0~[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4{7cu0~[\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.254572148344614
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isajccumulate", 99);
      JSONObject jSONObject1 = jSONObject0.put("~_Et]2pkd<U0f/&v@", (Object) "isajccumulate");
      String string0 = jSONObject1.toString(2337, 2337);
      // Undeclared exception!
      JSONObject.quote(string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.quote("(xyYyQT/'-0*+</AjUc");
      assertEquals("\"(xyYyQT/'-0*+<\\/AjUc\"", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.61297188217864
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.put((Integer) null, jSONObject0);
      jSONObject0.optBoolean("iscgumklante", false);
      jSONObject0.put("iscgumklante", 99);
      JSONObject jSONObject1 = jSONObject0.put("F]HMaz{x]?/", (Object) hashMap0);
      jSONObject1.put("iscgumklante", (-750.16277));
      // Undeclared exception!
      try { 
        jSONObject0.toString((-238), 99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3110528031649245
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("iscgumklante", false);
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.put("iscgumklante", 99);
      JSONObject jSONObject2 = jSONObject0.put("F]HMaz{x]?/", (Object) hashMap0);
      jSONObject2.put("iscgumklante", (-750.16277));
      jSONObject1.optJSONArray("isrotateRight");
      int int0 = jSONObject2.getInt("iscgumklante");
      assertEquals((-750), int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7250813917833234
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("iscgumklante", true);
      assertTrue(boolean0);
      
      jSONObject0.put("iscgumklante", 99);
      jSONObject0.put("iscgumklante", (-750.16277));
      jSONObject0.toString(99, 99);
      double double0 = jSONObject0.getDouble("iscgumklante");
      assertEquals((-750.16277), double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.354375174517569
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("getintern", "getintern");
      JSONObject jSONObject2 = jSONObject1.put("F^1hsWY;2LbBS/?`M`", false);
      // Undeclared exception!
      jSONObject2.toString(8192);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.330346654007667
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "getjoin";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("getjoin", object0);
      boolean boolean0 = jSONObject0.isNull("getjoin");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Double double0 = new Double(63.26);
      Double.max(63.26, 2745.167302568);
      hashMap0.put(double0, "3");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("cop", "cop");
      JSONArray jSONArray0 = jSONObject1.getJSONArray("cop");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.429656484875803
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isajccumulate", 99);
      JSONObject jSONObject1 = jSONObject0.put("~_Et]2pkd<U0f/&v@", (Object) "isajccumulate");
      String string0 = jSONObject1.toString(2337, 2337);
      // Undeclared exception!
      jSONObject0.getString(string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.284236195774473
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(Double.NaN);
      Double.isFinite(Double.NaN);
      jSONObject0.put("57$Sg%c&G/[3", 125);
      jSONObject0.optJSONArray("57$Sg%c&G/[3");
      jSONObject0.has("57$Sg%c&G/[3");
      try { 
        jSONObject0.putOpt("getcompare", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>(2142);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.append("KdZZ<<>d)K5w", jSONObject1);
      jSONObject2.accumulate("KdZZ<<>d)K5w", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray(" M</x@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" M<\\/x@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7732372441008097
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.accumulate("java.lang.Long@0000000003.", jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7822881003672664
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", 120);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString(jSONObject1, 120, 87);
      jSONObject1.optInt(" ;E");
      String string0 = jSONObject0.optString("u;x=>5s<K{LRZ", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0843755238125627
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("F]HM.az{x]?/", 3638);
      jSONObject1.optDouble("F]HM.az{x]?/");
      JSONObject.quote("F]HM.az{x]?/");
      JSONObject.doubleToString(3638);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject1.put("F]HM.az{x]?/", (Collection) linkedList0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7242986702781118
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("[ (c%g^v%", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0300388177574233
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate(" of ", " of ");
      try { 
        jSONObject0.getBoolean(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3046443781372403
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      jSONObject0.optString("", "");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1092378324020875
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("F]HM.az{x]?/", 3638);
      jSONObject0.getDouble("F]HM.az{x]?/");
      Float float0 = new Float((float) 3638);
      Float.max(3638, 773.5F);
      JSONObject jSONObject2 = jSONObject0.accumulate("getpush", jSONObject1);
      StringWriter stringWriter0 = new StringWriter(3638);
      Double double0 = new Double(Double.NaN);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "getpush";
      stringArray0[1] = "Expected a ',' or ']'";
      stringArray0[2] = "getpush";
      stringArray0[3] = "getpush";
      stringArray0[4] = "F]HM.az{x]?/";
      stringArray0[5] = "getpush";
      stringArray0[6] = "F]HM.az{x]?/";
      JSONObject jSONObject3 = new JSONObject(double0, stringArray0);
      jSONObject3.keys();
      jSONObject3.write(stringWriter0);
      // Undeclared exception!
      jSONObject2.write(stringWriter0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("u,0%[K", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(62);
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("7", "7");
      JSONObject.quote("7");
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6480950586435876
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-915.830093897));
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      try { 
        jSONObject0.toJSONArray(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0, 50, 682);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0]lWuSE=-_?1~+", 1L);
      jSONObject1.accumulate("0]lWuSE=-_?1~+", "0]lWuSE=-_?1~+");
      JSONObject jSONObject2 = jSONObject0.optJSONObject("isd_viHeUnsignAd");
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(" of ", (Object) " of ");
      boolean boolean0 = jSONObject0.isNull(" of ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9785764025462802
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.put(",Z+3$r?", 0.0);
      jSONObject0.getInt(",Z+3$r?");
      try { 
        jSONObject0.getJSONArray(",Z+3$r?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",Z+3$r?\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.3080561808079394
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "iscgumklante";
      jSONObject0.put("iscgumklante", 99);
      jSONObject0.put("F]HMaz{x]?/", (Object) hashMap0);
      jSONObject0.getInt("iscgumklante");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("iscgumklante");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of iscgumklante
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("~ )%V<$", 0.0);
      double double0 = jSONObject1.optDouble("~ )%V<$", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6201426768343454
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-6021));
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("{}", (double) (-6021));
      double double0 = jSONObject1.optDouble("{}");
      assertEquals((-6021.0), double0, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2294895067824276
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("F]HMaz{x]?/", 99);
      jSONObject0.put("F]HMaz{x]?/", (Object) hashMap0);
      String string0 = jSONObject0.toString((-244), 99);
      assertNotNull(string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5370296580363934
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", 12);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      
      int int0 = jSONObject1.optInt("wheel.json.JSONArray");
      assertEquals(12, int0);
      
      String string0 = JSONObject.doubleToString(12);
      assertEquals("12", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.999933914749152
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Short short0 = new Short((short)0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("NY", (Map) hashMap0);
      jSONObject0.optJSONArray("&;Py%Mf)6rKjt7^");
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject1.toString();
      JSONObject jSONObject2 = jSONObject1.put("tWmPKZLkwL/X[gS", (int) (short)0);
      JSONObject.quote("tWmPKZLkwL/X[gS");
      jSONObject2.toString((int) (short)0, 2128);
      jSONObject1.getJSONObject("NY");
      jSONObject0.optBoolean(",\n");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "{\"java.lang.String@0000000007\":wheel.json.JSONObject@0000000006,\"java.lang.String@0000000004\":\"java.lang.Class@0000000005\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}", 2128, (int) (short)0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("GHgyupc.iaR 2|85xf", 0L);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[20];
      JSONObject jSONObject0 = new JSONObject("Z", stringArray0);
      jSONObject0.put("Z", false);
      boolean boolean0 = jSONObject0.optBoolean("Z");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.243951948479806
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("[@#3Jl`^`Jh'PwI{OC", 0.0);
      long long0 = jSONObject0.getLong("[@#3Jl`^`Jh'PwI{OC");
      long long1 = jSONObject0.getLong("[@#3Jl`^`Jh'PwI{OC");
      assertTrue(long1 == long0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.124553491319881
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("F]HM.az{x]?/", 3638);
      String string0 = JSONObject.quote("F]HM.az{x]?/");
      assertEquals("\"F]HM.az{x]?/\"", string0);
      
      long long0 = jSONObject1.getLong("F]HM.az{x]?/");
      assertEquals(3638L, long0);
      
      Float.max(3638, 3638);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("s^TLY.[XH-9_SU9N", 1L);
      JSONObject.valueToString(jSONObject0);
      long long0 = jSONObject1.optLong("s^TLY.[XH-9_SU9N");
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.0126200936538066
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float.max(3638, 3638);
      String string0 = "xGw%~simD8@-!# Y";
      JSONObject jSONObject1 = jSONObject0.accumulate("xGw%~simD8@-!# Y", jSONObject0);
      try { 
        jSONObject1.getInt("xGw%~simD8@-!# Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"xGw%~simD8@-!# Y\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.112704644485289
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "xGw%~simD8@-!# Y";
      jSONObject0.accumulate("xGw%~simD8@-!# Y", jSONObject0);
      try { 
        jSONObject0.getBoolean("xGw%~simD8@-!# Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"xGw%~simD8@-!# Y\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.0983268013229894
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("fsGaH$%WKn#e,5", (Object) "getsplit");
      jSONObject1.optInt("fsGaH$%WKn#e,5");
      jSONObject1.optBoolean("fsGaH$%WKn#e,5");
      try { 
        jSONObject0.getJSONObject("fsGaH$%WKn#e,5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fsGaH$%WKn#e,5\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[20];
      JSONObject jSONObject0 = new JSONObject("q", stringArray0);
      jSONObject0.put("q", true);
      boolean boolean0 = jSONObject0.optBoolean("q");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.1531782505128936
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("F]HM.az{x]?/", 3638);
      double double0 = jSONObject0.getDouble("F]HM.az{x]?/");
      assertEquals(3638.0, double0, 0.01);
      
      Float float0 = new Float((float) 3638);
      String string0 = jSONObject0.optString("isquote");
      assertEquals("", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 99;
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.730244084415339
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = JSONObject.quote("+=/LQ1jEQl$E");
      assertEquals("\"+=/LQ1jEQl$E\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "+=/LQ1jEQl$E");
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.5398324517832704
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Object) "^d$");
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("?PSO=bhTS$t4EI=sJ~_", (Map) hashMap0);
      jSONObject1.toString();
      JSONObject.quote("wheel.json.JSONObject$Null");
      JSONObject.doubleToString(0.0);
      jSONObject1.optString("?PSO=bhTS$t4EI=sJ~_", "^d$");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.put("getgetOrDefault", object0);
      try { 
        jSONObject0.getLong("getgetOrDefault");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetOrDefault\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.putOpt("{}", "{}");
      try { 
        jSONObject1.getDouble("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("F]HM.az{x]?/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"F]HM.az{x]?/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.2683938859388075
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = JSONObject.quote("+=/LQ1jEQl$E");
      Float float0 = new Float(2466.3632819144);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("Expected a ':' after a key", true);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("{}", false);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.put("", false);
      try { 
        jSONObject0.append("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.append("7T+68LBbYyi__=9\n", "{}");
      JSONObject jSONObject2 = jSONObject1.append("7T+68LBbYyi__=9\n", jSONObject0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Q!P!e[zL)Yt6", (Map) null);
      jSONObject1.remove("Q!P!e[zL)Yt6");
      double double0 = jSONObject0.optDouble("Q!P!e[zL)Yt6", 262.1);
      assertEquals(262.1, double0, 0.01);
      
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = JSONObject.quote("/El$Yw");
      assertEquals("\"/El$Yw\"", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.3080561808079394
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Om7", "Om7");
      String string0 = jSONObject1.optString("Om7");
      assertNotNull(string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.182802395764733
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Y'", (Object) "Y'");
      Object object0 = jSONObject0.get("Y'");
      String string0 = jSONObject1.toString(1753, 1753);
      assertFalse(string0.equals((Object)object0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.4067791670214387
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.optInt((String) null, (int) (byte)0);
      int int0 = jSONObject0.optInt((String) null, (-1107));
      assertEquals((-1107), int0);
      
      Byte.compare((byte)0, (byte)0);
      double double0 = jSONObject0.optDouble("wheel.json.JSONObject$Null");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<JSONArray, Float> hashMap0 = new HashMap<JSONArray, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(linkedList0);
      jSONObject0.toString(595, 595);
      JSONObject jSONObject1 = jSONObject0.put("2469.9321601891415.", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("[@#3Jl`^`Jh'PwI{OC", 0.0);
      try { 
        jSONObject0.getJSONArray("[@#3Jl`^`Jh'PwI{OC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[@#3Jl`^`Jh'PwI{OC\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.048844359649284
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("3+=/LQ1j#l$KE");
      assertEquals("\"3+=/LQ1j#l$KE\"", string0);
      
      String string1 = jSONObject0.optString("\"3+=/LQ1j#l$KE\"", "\"3+=/LQ1j#l$KE\"");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject.valueToString(hashMap0, 99, 99);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{h<'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {h<'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.100665982609539
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((-2899));
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{~YB3|7z6}??hib");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of {~YB3|7z6}??hib
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{K=/N`^uh{YN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 3 of {K=/N`^uh{YN
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getparseShort", (Object) null);
      boolean boolean0 = jSONObject0.isNull("getparseShort");
      assertEquals(0, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.3791235169376774
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.put("DLe>_0,'QCk0a1Z", true);
      String string0 = jSONObject0.getString("DLe>_0,'QCk0a1Z");
      assertNotNull(string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("Null key.", (-27));
      assertEquals((-27), int0);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("7)UGr(U6m)Ot{", true);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("Expected a ',' or '}'", false);
      assertFalse(boolean0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble((String) null, (-346.4797604881841));
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.246304923773509
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.689067872995674
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(jSONObject0, 35, 73);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.340880720942687
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("e9[", 69);
      jSONObject1.put("T)rqBmn5Nvu", (Object) jSONObject0);
      // Undeclared exception!
      jSONObject1.toString(42, 69);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|ebk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |ebk
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1938090917981254
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.756037857890329
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a number.");
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", true);
      JSONObject.getNames((Object) jSONObject1);
      try { 
        jSONObject1.getJSONObject("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("81!sd6{{!/392=", (Object) "81!sd6{{!/392=");
      boolean boolean0 = jSONObject0.optBoolean("81!sd6{{!/392=");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.2066113677582964
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Double double0 = new Double((-2246.99039169526));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(67, 67);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 2, 92);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1071.61));
      assertEquals("-1071.61", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.put("{}", 4.6277);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0276242004980904
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = JSONObject.quote("&qSK");
      assertEquals("\"&qSK\"", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      jSONObject0.put("{}", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt("fbZ", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("{}", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.2713813345597567
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString((-870), (-870));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.4278545372819558
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Integer integer0 = new Integer((-1328));
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.toString((-1328));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("\t", 0.0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove((String) null);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1071.3012164046816));
      String string1 = JSONObject.valueToString("-1071.3012164046816");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("*Z$S}(lF@+D&X7jg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*Z$S}(lF@+D&X7jg\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.4052050311950772
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "jjj[A2y>L.1AL\"_c");
      jSONObject0.toString(12);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("getintern", "getintern");
      jSONObject0.names();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-244), (-244));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString((Object) null, 19, 19);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 70, 217);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.35225850633821
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = jSONObject0.toString();
      jSONObject0.opt("{\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      Integer integer0 = new Integer(13);
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("57$Sg%c&G/[3");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("wheel.json.JSONTokener");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.6083963944770798
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("92vwW@rlH", (-1669L));
      assertEquals((-1669L), long0);
      
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("wheel.json.JSONObject$1", 5053L);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      long long0 = jSONObject0.optLong("{}");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = JSONObject.quote("jjj[A2y>L.1AL\"_c");
      assertEquals("\"jjj[A2y>L.1AL\\\"_c\"", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.9549478780836425
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "+=/L6Q}BEQl0E");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("+=/L6Q}BEQl0E", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      try { 
        jSONObject0.getLong("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.48837209302325585
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.put((String) null, (-2008));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.7213192226263727
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("getcompare", 1175);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("7CVz%\"(#rE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7CVz%\\\"(#rE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = JSONObject.valueToString("va", 94, 94);
      assertNotNull(string0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Float float0 = new Float((-1.0));
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("su");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of su
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-1.0));
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("7CVz%\"(#rE", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("getlogicalOr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getlogicalOr
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
