/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 05:37:08 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbcx.JdbcDataSource;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("kUoZ02Q#{]ms", defaultDBTable0, (-1779), "");
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("kUoZ02Q#{]ms  NULL", string0);
      
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("j.>r~-tz)k\"EU/*");
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("updatecallsetpasswrdchars(new ciar[0]);");
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("updatecallsetpasswrdchars(new ciar[0]);", defaultDBTable0, dBDataType0, integer0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      StringBuilder stringBuilder1 = new StringBuilder("BLOB");
      SQLUtil.renderColumnTypeWithSize(dBColumnArray0[2], stringBuilder1);
      assertEquals("BLOBBLOB", stringBuilder1.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(16, "");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer1);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Li+h/Ny&%(H=Pj");
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\u0001\u013E", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("BLOB", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("H9@/L");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("H9@/L", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-214), "H9@/L");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("H9@/L", defaultDBTable0, dBDataType0, integer0, integer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("H9@/L");
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, (String) null, true, "H9@/L");
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("H9@/L NOT NULL", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBTable0.getReferrers();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("N", defaultDBTable0, (DBDataType) null, integer0, integer0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("N, N", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("anter tblecr", (DBTable) null, 841, "anter tblecr");
      defaultDBColumn0.setDefaultValue("1@^)H'4EMgq~yT\"xF");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("anter tblecr ANTER TBLECR DEFAULT 1@^)H'4EMgq~yT\"xF NULL", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
      
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("", compositeDBObject0);
      String string0 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(" DEFAULT ");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = " DEFAULT ";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string0 = SQLUtil.leftJoin("", stringArray0, "", "", stringArray0);
      assertEquals("left join  as  on . = . and . DEFAULT  = . DEFAULT  and . = . and . = .", string0);
      
      String string1 = SQLUtil.substituteMarkers("", "}", "");
      assertEquals("", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      VersionNumber.valueOf("r9v1");
      Integer integer0 = RawTransaction.COMMIT;
      Integer.getInteger("drop table}4zkz'u0b");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      StringBuilder stringBuilder1 = new StringBuilder("r9v1");
      stringBuilder1.append("r9v1");
      SQLUtil.addRequiredCondition("r9v1", stringBuilder1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLUtil.removeComments("/*");
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("aNter tablecreate 0teria!ized vi4kqnU", (DBTable) null, 4, "aNter tablecreate 0teria!ized vi4kqnU");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("aNter tablecreate 0teria!ized vi4kqnU", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      SQLUtil.typeAndName(defaultDBTable0);
      DBDataType dBDataType0 = DBDataType.getInstance((-720584205), "=G");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      Integer.getInteger("=G");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
      
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table ", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("_e/I=(ZCoGnbZYs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: _e/I=(ZCoGnbZYs
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("getTimestamp(String,Calendar)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("sePalswrdChars(new char[0]);");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"new char[0]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = SQLUtil.isProcedureCall("exec");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.9563959755529907
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.normalize("-- page data head: ", false);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("-- page data head :");
      assertNull(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      constraintDescriptorList0.add((Object) integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.717020786717215
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLUtil.mutatesStructure("a`ter dndexr6as!4*k");
      StringBuilder stringBuilder0 = new StringBuilder("v:Q8");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select into-- page data head:");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "v:Q8";
      stringArray0[1] = " WHERE ";
      stringArray0[2] = null;
      stringArray0[3] = "a`ter dndexr6as!4*k";
      stringArray0[4] = "v:Q8";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      Boolean boolean0 = Boolean.valueOf("a`ter dndexr6as!4*k");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6796796418062216
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("Underlying ResultSet is not updatable.");
      SQLUtil.mutatesDataOrStructure("Underlying ResultSet is not updatable.");
      StringBuilder stringBuilder0 = new StringBuilder("Underlying ResultSet is not updatable.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Underlying ResultSet is not updatable.");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Underlying ResultSet is not updatable.";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Underlying ResultSet is not updatable.", true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("H9@/L");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "H9@/L";
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec1);
      StringBuilder stringBuilder2 = stringBuilder1.append("H9@/L");
      StringBuilder stringBuilder3 = stringBuilder2.append(1546L);
      SQLUtil.addOptionalCondition("callsetpasswrdchars(new char[0]);", stringBuilder3);
      assertEquals("H9@/L1546 or callsetpasswrdchars(new char[0]);", stringBuilder3.toString());
      assertEquals("H9@/L1546 or callsetpasswrdchars(new char[0]);", stringBuilder0.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6424902367651484
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      SQLUtil.mutatesDataOrStructure(" CALL ");
      String[] stringArray0 = new String[7];
      stringArray0[0] = " CALL ";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = " CALL ";
      stringArray0[4] = null;
      stringArray0[5] = " CALL ";
      stringArray0[6] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      System.setCurrentTimeMillis(86400L);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4102453456579889
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("khY?iW,HWRER0,#w");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*cd?f[-Xe001no7", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "khY?iW,HWRER0,#w", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("42734", stringBuilder1);
      SQLUtil.addRequiredCondition("w- pa!t dat2a hed: ", stringBuilder2);
      assertEquals("42734 and w- pa!t dat2a hed: ", stringBuilder2.toString());
      assertEquals("42734 and w- pa!t dat2a hed: ", stringBuilder0.toString());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(3195, "anter tblecr");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("anter tblecr", (DBTable) null, dBDataType0, integer0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("ante");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("anteANTER TBLECR(2,2)", stringBuilder0.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.isQuery("select into");
      // Undeclared exception!
      try { 
        stringBuilder0.insert(2442, "truncate");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2442
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.199663191579221
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = SQLUtil.isQuery("SELECT * FROM ");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "underlying resultset is");
      DBSchema dBSchema0 = new DBSchema("<^M{g1V'Pq2ivq]%");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("underlying resultset is", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(87, "executesetpasswrdchars(new char[0]);");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getNotNullConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1736172088941816
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      SQLUtil.normalize("java.lang.Object@30a77201", false);
      Boolean boolean0 = new Boolean("java.lang.Object @ 30a77201");
      DBSchema dBSchema0 = new DBSchema("java.lang.Object @ 30a77201", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("java.lang.Object @ 30a77201", dBSchema0);
      dBSchema0.getTable("java.lang.Object@30a77201");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (-171437619), "java.lang.Object@30a77201");
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DBDataType dBDataType0 = DBDataType.getInstance((-214), "2,)*bi`g-j");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = new Integer((-214));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("KXSF;!gDplvwA", dBTable0, dBDataType0, integer1, integer2);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, dBTable0, dBDataType0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter2);
      defaultDBColumn0.getForeignKeyConstraint();
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, )", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5865773332321154
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter indexr6as!4*k");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("row", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      DBSchema dBSchema0 = new DBSchema("CONSTRAINT row FOREIGN KEY (, , , ) REFERENCES alter indexr6as!4*k(, , , )");
      SQLUtil.isProcedureCall("}4zKZ'U0B");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderValue(stringBuilder0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("row", stringBuilder0);
      StringBuilder stringBuilder2 = new StringBuilder();
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec1);
      assertEquals("rowCONSTRAINT row ", stringBuilder1.toString());
      assertEquals("rowCONSTRAINT row ", stringBuilder0.toString());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}4zKZ'U0B";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" */", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter indexr6as!4*k");
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, mockPrintWriter0);
      assertNull(dBForeignKeyConstraint0.getDoc());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3450363141108999
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.renderColumnListWithTableName("alter session", stringArray0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "alter session.null, alter session.null";
      stringArray1[2] = "alter session.null, alter session.null";
      stringArray1[3] = "alter session.null, alter session.null";
      stringArray1[4] = "alter session";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("alter session.null, alter session.null", stringArray1, "alter session.null, alter session.null", "re{ultst", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectunderlying resultset is not updatable.");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("rename");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rename";
      stringArray0[1] = "rename";
      stringArray0[2] = "rename";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("rename", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (rename, rename, rename) REFERENCES null(rename, rename, rename)", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("getTiestamp(String,Cilendar)", true, "constraint", "getTiestamp(String,Cilendar)");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "getTiestamp(String,Cilendar)");
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder3 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder2, nameSpec0);
      SQLUtil.addOptionalCondition("getTiestamp(String,Cilendar)", stringBuilder3);
      assertEquals(")radneliC,gnirtS(pmatseiTteg or getTiestamp(String,Cilendar)", stringBuilder3.toString());
      assertEquals(")radneliC,gnirtS(pmatseiTteg or getTiestamp(String,Cilendar)", stringBuilder0.toString());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.4662665178647387
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderValue(stringBuilder0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("updatecallsetpasswrdchars(new ciar[0]);");
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("updatecallsetpasswrdchars(new ciar[0]);", defaultDBTable0, dBDataType0, integer0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("BLOB", defaultDBTable0, (-2061584299), "resu");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select into");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(1697, "<");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("<", defaultDBTable0, dBDataType0, integer0, integer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.join("~kUP", "U|nITX", stringArray0, "~kUP", "I_kDU", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      
      Boolean.valueOf("catalog null");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("catalog null");
      assertNull(boolean0);
      
      Character character0 = new Character('i');
      String string1 = SQLUtil.renderValue(character0);
      assertEquals("'i'", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1986259967), "getTiestamp(String,Cilendar)");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("getTiestamp(String,Cilendar)", (DBSchema) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "getTiestamp(String,Cilendar)";
      stringArray0[2] = null;
      stringArray0[3] = "getTiestamp(String,Cilendar)";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("TABLE_DISTINCT", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("TABLE_DISTINCT", dBTable0, dBDataType0, integer0, integer1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("getTiestamp(String,Cilendar)");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(dBTable0.getDoc());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1620), "D5o{");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("D5o{", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("D5o{");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("D5o{D5O{(0)", stringBuilder0.toString());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("an7er ", (DBTable) null, 90048, "an7er ");
      defaultDBColumn0.toString();
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("an7er  AN7ER  NULL", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.5694325217646607
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("/ShESgx1*sS5&");
      String[] stringArray0 = new String[0];
      SQLUtil.join("/ShESgx1*sS5&", "YKK R&,|_@f,)@Vf#i/", stringArray0, "YKK R&,|_@f,)@Vf#i/", "/ShESgx1*sS5&", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("SELECT * FROM ", (String[]) null, "h", "h", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("org.h2.store.fs.FileSystemZip", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      VersionNumber.valueOf("r9v1");
      Integer integer0 = RawTransaction.COMMIT;
      Integer.getInteger("drop table}4zkz'u0b");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      StringBuilder stringBuilder1 = stringBuilder0.append((-1028L));
      stringBuilder1.append("r9v1");
      SQLUtil.addRequiredCondition("r9v1", stringBuilder1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLUtil.removeComments("/*");
      SQLUtil.isDDL("drop table}4zkz'u0b");
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = SQLUtil.normalize("Hp-F.(Fpj|~", false);
      assertEquals("Hp - F.(Fpj | ~", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.186786529786373
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLUtil.mutatesStructure("");
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("", false);
      StringBuilder stringBuilder0 = new StringBuilder(1865);
      VersionNumber versionNumber0 = VersionNumber.valueOf((String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("TABLETYPES", "}4zk", versionNumber0);
      SQLUtil.normalize("/*", false);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("TABLETYPES");
      assertNull(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = SQLUtil.normalize("getClob(int)", false);
      assertEquals("getClob (int)", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.669435108494575
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("|BH2DETG,a=;EFg*\"");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|BH2DETG,a=;EFg*\"");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|BH2DETG,a=;EFg*\"";
      stringArray0[1] = "|BH2DETG,a=;EFg*\"";
      stringArray0[2] = "|BH2DETG,a=;EFg*\"";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "|BH2DETG,a=;EFg*\"";
      Object object0 = new Object();
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("exec");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "selectdomain_name";
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = SQLUtil.normalize("drop tabley)i0eh+", true);
      assertEquals("drop tabley) i0eh +", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("execupdatecallsetpasswrdchars(new ciar[0]);");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("execupdatecallsetpasswrdchars(new ciar[0]);", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      boolean boolean0 = SQLUtil.isDML("op_execute2 ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CHECK ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("=xd");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("CHECK ");
      assertNull(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_S/o");
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = SQLUtil.isDML("insertw- pa!rqdat2a hed:");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create materialized view-- page data head:");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("?r(H#|v>eD99x", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}4zKZ'U0B";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("}4zKZ'U0B");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" */", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, defaultDBTable0, " WHERE ");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = SQLUtil.normalize("4M7Y[8opnhE/cB\";e", false);
      assertEquals("4M7Y [ 8opnhE / cB \";e\"", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tableselect * from", defaultDBTable0, 310, "alter tableselect * from");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter tableselect * from");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}4zKZ'U0B";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("}4zKZ'U0B");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint1, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = "0r";
      SQLUtil.mutatesStructure("0r");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "update22012", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT update22012 UNIQUE ()", string1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.parseColumnTypeAndSize("-- page data head: ");
      DBSchema dBSchema0 = new DBSchema("-- page data head: ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-- page data head: ", dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "xdHNW_i'a~+)";
      stringArray0[1] = "-- page data head: ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "-- page data head: ", false, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      assertEquals("-- page data head: .-- page data head: ", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("getTiestamp(String,Calendar)", true, "getTiestamp(String,Calendar)", "getTiestamp(String,Calendar)");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("getTiestamp(String,Calendar)", stringBuilder0);
      assertEquals("CONSTRAINT getTiestamp(String,Calendar)  and getTiestamp(String,Calendar)", stringBuilder0.toString());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("calsetpasswrdchars(new char[0]);", true, "calsetpasswrdchars(new char[0]);", "update");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"calsetpasswrdchars(new char[0]);\" ", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.533344419789668
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("setFetchDirection", true, "5akz8k", "PRESERVE");
      SQLUtil.constraintName(dBCheckConstraint0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "setFetchDirection";
      stringArray0[1] = "CONSTRAINT setFetchDirection ";
      stringArray0[2] = "CONSTRAINT setFetchDirection ";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "PRESERVE";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("5akz8k", stringArray0, "CONSTRAINT setFetchDirection ", "setFetchDirection", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, stringArray0, stringArray0[0], stringArray0[4], (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Felectund5rlying re{ultst is not 1pdPtable";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Felectund5rlying re{ultst is not 1pdPtable", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (Felectund5rlying re{ultst is not 1pdPtable)", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Vo(cXQas.GiQV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: Vo(cXQas.GiQV
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, (String) null, stringArray0, (String) null, "alter tableselect * from", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1513), "\u0001\u0114");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O+88l?2", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("O+88l?2 \u0001\u0114(1,1) NULL", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-3380), "Felectund5rlying re{ultMt is not pdPta7Ue");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Felectund5rlying re{ultMt is not pdPta7Ue", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("Felectund5rlying re{ultMt is not pdPta7Ue FELECTUND5RLYING RE{ULTMT IS NOT PDPTA7UE(0) NULL", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("selectunderlying resultset is not updatable.", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Boolean.valueOf("UR");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("H9@/L", false, "H9@/L", "UR");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT H9@/L ", stringBuilder0.toString());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = SQLUtil.normalize("uo1YV>.1y\"_bM\"'$%N", true);
      assertEquals("uo1YV >.1y \"_bM\" '$%N'", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("hsqls://", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.renderValue(dBCatalog0);
      assertNull(string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Felectund5rlying re{ultst is not 1pdPtable", (DBTable) null, 818, "Felectund5rlying re{ultst is not 1pdPtable");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("Felectund5rlying re{ultst is not 1pdPtable, Felectund5rlying re{ultst is not 1pdPtable", string0);
      
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("FELECTUND5RLYING RE{ULTST IS NOT 1PDPTABLE", string1);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("anter tblecr", (DBTable) null, 818, "anter tblecr");
      DBColumn[] dBColumnArray0 = new DBColumn[16];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.0557051606564785
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Illegal column type format: ");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Illegal column type format: ", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("not found: ", (String[]) null, "not found: ", "PRIMARY KEY ()", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.4001443355569787
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string0);
      
      String string1 = SQLUtil.join("", "null = null AND null = null", stringArray0, "null = null AND null = null", "null = null AND null = null", stringArray0);
      assertEquals("null = null AND null = null as null = null AND null = null on null = null AND null = null.null = null = null AND null = null.null and null = null AND null = null.null = null = null AND null = null.null", string1);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("index not dropped: ");
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("index not dropped: ", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",", (DBSchema) null);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "tUescFW`8D", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT tUescFW`8D PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("-- page data head: ", stringBuilder0);
      assertEquals("-- page data head: ", stringBuilder0.toString());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "VARCHAR_CASESENSITIVE";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE VARCHAR_CASESENSITIVE = 'VARCHAR_CASESENSITIVE'", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("selectund5rlying re{ultst is not updPtable");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selectund5rlying re{ultst is not updPtable");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.568155382556487
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("UPDATE INFORMATION_SCHEMA.LOBS SET TABLE = ? WHERE ID = ?");
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("UPDATE INFORMATION_SCHEMA.LOBS SET TABLE = ? WHERE ID = ?", (String[]) null, "UPDATE INFORMATION_SCHEMA.LOBS SET TABLE = ? WHERE ID = ?", "UPDATE INFORMATION_SCHEMA.LOBS SET TABLE = ? WHERE ID = ?", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = SQLUtil.normalize("|BH2DETG,a=;EFg*\"", true);
      assertEquals("| BH2DETG, a = ; EFg * \"\"", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.6830541792600018
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = SQLUtil.innerJoin("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, "XSDA1.S", "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create mate");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("create mate", false);
      assertEquals("create mate", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.1392921128169875
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLUtil.mutatesStructure("CHECK ");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "CHECK ", "CHECK ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = SQLUtil.renderValue("-- page data head: ");
      assertEquals("'-- page data head: '", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("calsetpasswrdchars(new char[0]);", "calsetpasswrdchars(new char[0]);", "calsetpasswrdchars(new char[0]);");
      assertEquals("'calsetpasswrdchars(new char[0]);'", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.join("I_kD", "I_kD", stringArray0, ">>:d@<muqPVcV", "I_kD", stringArray0);
      assertEquals("I_kD join >>:d@<muqPVcV as I_kD on I_kD.null = I_kD.null and I_kD.null = I_kD.null and I_kD.null = I_kD.null and I_kD.null = I_kD.null", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.join("alter materialized viewanter tablecreate m0teria!ized vie4kqjnu", stringArray0[2], stringArray0, "alter materialized viewanter tablecreate m0teria!ized vie4kqjnu", "9", stringArray0);
      assertEquals("alter materialized viewanter tablecreate m0teria!ized vie4kqjnu join alter materialized viewanter tablecreate m0teria!ized vie4kqjnu as 9 on null.null = 9.null and null.null = 9.null and null.null = 9.null and null.null = 9.null", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.42938410163885
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = SQLUtil.innerJoin("null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, "UaNK7@7H~P}", "UaNK7@7H~P}", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLUtil.isQuery("setPasswrdChars(new char[0]);");
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("setPasswrdChars(new char[0]);", (String[]) null, "_%GU", "WRITE", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.join("H9@/L", "H9@/L", stringArray0, "H9@/L", "H9@/L", stringArray0);
      assertEquals("H9@/L join H9@/L as H9@/L on H9@/L.null = H9@/L.null and H9@/L.null = H9@/L.null and H9@/L.null = H9@/L.null and H9@/L.null = H9@/L.null and H9@/L.null = H9@/L.null and H9@/L.null = H9@/L.null and H9@/L.null = H9@/L.null", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("H9@/L join H9@/L as H9@/L on H9@/L.null = H9@/L.null and H9@/L.null = H9@/L.null and H9@/L.null = H9@/L.null and H9@/L.null = H9@/L.null and H9@/L.null = H9@/L.null and H9@/L.null = H9@/L.null and H9@/L.null = H9@/L.null");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("getTiestamp(String,Cilendar)", "getTiestamp(String,Cilendar)", (String[]) null, "getTiestamp(String,Cilendar)", "getTiestamp(String,Cilendar)", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string0);
      
      String string1 = SQLUtil.leftJoin("null = null AND null = null", stringArray0, "null = null AND null = null", "sin5wm8NEN(", stringArray0);
      assertEquals("left join null = null AND null = null as sin5wm8NEN( on null = null AND null = null.null = sin5wm8NEN(.null and null = null AND null = null.null = sin5wm8NEN(.null", string1);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("underlying resultset is");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Yw", true, "&^4t;~#zn+~x9%^z3", "Yw");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT Yw CHECK Yw", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.7988457068767891
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("getTiestamp(String,Calendar)", true, "getTiestamp(String,Calendar)", "getTiestamp(String,Calendar)");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT getTiestamp(String,Calendar) ", string0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT getTiestamp(String,Calendar) CHECK getTiestamp(String,Calendar)", string1);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("$fj\u00069E");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("selectunderlying resultset is not updatable.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create unique indexexecutea`ter dndexr6as!4*k");
      assertTrue(boolean0);
  }
}
