/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 03:59:41 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4797366377849874
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.sum((-2846.504186862729), 494.018);
      Double.max(0.0, 128.2664530059843);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      Double.min(0.0, 128.2664530059843);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject.getNames(jSONObject0);
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.toString((-1577));
      JSONObject.valueToString(double0);
      jSONObject0.toString();
      jSONObject0.put("$YmM]ivoeCH", false);
      assertEquals(9, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.4020594198302878
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(3042.3454129359);
      JSONObject jSONObject1 = new JSONObject(float0);
      jSONObject1.putOpt("D*-qS.,77}[qDa", float0);
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("isput^ll", (Map) null);
      jSONObject2.toString((-653), (-2031));
      JSONArray jSONArray0 = jSONObject0.optJSONArray("4246[%4K-.^N=SJr3N");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4428352147175594
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, Float> hashMap0 = new HashMap<JSONArray, Float>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("/|GcH=D#[4v<]*e!VR", 79L);
      double double0 = jSONObject2.getDouble("/|GcH=D#[4v<]*e!VR");
      assertEquals(79.0, double0, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9906188255641685
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer integer0 = new Integer(960);
      JSONObject jSONObject0 = new JSONObject((Object) "A37iA*@/ry");
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.getBoolean("_gf H</i/Dpjo(qNe ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_gf H<\\/i/Dpjo(qNe \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2836504642484066
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Short short0 = new Short((short)60);
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.put("", (-3352));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "getequals";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      JSONObject jSONObject3 = jSONObject2.append("", (Object) null);
      JSONObject jSONObject4 = jSONObject2.accumulate("", jSONObject3);
      assertNotSame(jSONObject4, jSONObject0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1561389064361047
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("A JSONArray text must start with '['");
      JSONObject.quote("null");
      JSONObject jSONObject1 = jSONObject0.put("null", 0L);
      int int0 = jSONObject1.optInt("null", 1032);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.putOpt("] is not a JSONArray.", jSONObject0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("] is not a JSONArray.");
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("getgTput", "xnull");
      Object object0 = new Object();
      jSONObject1.putOpt("getgTput", object0);
      Boolean boolean0 = Boolean.valueOf(false);
      jSONObject1.put("getgTput", (Object) boolean0);
      jSONObject0.getBoolean("getgTput");
      jSONObject1.optJSONObject("xnull");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      int int0 = (-1591);
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[{5P6sL{M4y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of [{5P6sL{M4y
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("#v7(0]8_", true);
      String string0 = JSONObject.quote("U lf-%IfZ&H.RHnJb");
      assertEquals("\"U lf-%IfZ&H.RHnJb\"", string0);
      
      JSONArray jSONArray0 = jSONObject1.names();
      assertNotNull(jSONArray0);
      
      boolean boolean0 = jSONObject0.getBoolean("#v7(0]8_");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.put("IJ3#(@ke^ns!p@", (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2900951976233848
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      hashMap0.put((Float) null, jSONObject0);
      jSONObject0.put("v", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-1591));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1766453509367873
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(".", (Map) null);
      JSONObject jSONObject1 = jSONObject0.optJSONObject(".");
      assertNotNull(jSONObject1);
      
      String string0 = JSONObject.doubleToString(13);
      assertEquals("13", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3809682098476954
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\t", 0.0);
      jSONObject1.optDouble("\t");
      JSONObject jSONObject2 = jSONObject0.optJSONObject("-q00 U*");
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.163965772523554
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("getgTput", "xnull");
      jSONObject1.remove("getgTput");
      try { 
        jSONObject0.getBoolean("getgTput");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgTput\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.285586629721882
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(3);
      JSONObject jSONObject1 = jSONObject0.put("5SP%#%i$", 2258L);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.accumulate("5SP%#%i$", boolean0);
      StringWriter stringWriter0 = new StringWriter(128);
      Float float0 = new Float((double) 2258L);
      JSONObject jSONObject2 = jSONObject0.append("5SP%#%i$", float0);
      jSONObject0.write(stringWriter0);
      jSONObject0.optDouble("Wdg*vfGnN(", (-1717.2513823674));
      jSONObject1.optBoolean("v,u$^KE12dzQxN*kqNh");
      jSONObject1.optString("5SP%#%i$");
      Float float1 = new Float((double) 3);
      JSONObject jSONObject3 = jSONObject2.accumulate("A JSONArray text must start with '['", float1);
      assertSame(jSONObject2, jSONObject3);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.keys();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8859713005240417
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject1 = new JSONObject(double0);
      Byte.toUnsignedInt((byte)113);
      try { 
        JSONObject.valueToString(double0, 60, 60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0892437187356119
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
      
      String string0 = JSONObject.valueToString(linkedList0, 5642, 60);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2343545839532437
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-3079.11787469324));
      JSONObject jSONObject1 = jSONObject0.putOpt("5SP%#%i$", ",\n");
      jSONObject1.toString(22);
      int int0 = new Integer(22);
      try { 
        jSONObject1.getLong("5SP%#%i$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5SP%#%i$\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.27660795407654
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject1 = jSONObject0.put("\b", (Map) hashMap0);
      jSONObject1.optLong("\b");
      String string0 = null;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.783483554187069
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("getreplaceFirst", 0.0);
      jSONObject1.toString();
      jSONObject0.getLong("getreplaceFirst");
      jSONObject0.names();
      JSONObject.quote("G/d4OS");
      jSONObject0.isNull("G/d4OS");
      int int0 = jSONObject0.getInt("getreplaceFirst");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2564941753649252
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Map) null);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray0, jSONArray2);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7862471159089246
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("U l$-%IfZ&H#R'nnb", (Map) null);
      JSONObject jSONObject1 = jSONObject0.put("U l$-%IfZ&H#R'nnb", 46);
      double double0 = jSONObject1.optDouble("U l$-%IfZ&H#R'nnb");
      assertEquals(46.0, double0, 0.01);
      
      boolean boolean0 = jSONObject1.isNull("U l$-%IfZ&H#R'nnb");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.201684025007616
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", (-1802L));
      jSONObject1.optLong("false");
      try { 
        jSONObject1.getJSONObject("I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"I\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5880588147135972
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Fq3Ct&D>!ILF~", (int) (byte) (-126));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Fq3Ct&D>!ILF~";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertEquals(1, jSONObject2.length());
      
      int int0 = jSONObject2.getInt("Fq3Ct&D>!ILF~");
      assertEquals((-126), int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.2929322920032833
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("false");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("false", 116);
      jSONObject0.getInt("false");
      try { 
        jSONObject1.getLong("di");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"di\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.767447904928158
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("getreplaceFirst", (-416.591917));
      jSONObject0.toString();
      jSONObject1.getLong("getreplaceFirst");
      jSONObject1.names();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.732536923403914
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7052169817823724
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("getreplaceFiCst", 0.0);
      jSONObject1.toString();
      jSONObject0.getLong("getreplaceFiCst");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.578704358501096
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getwait", 4);
      jSONObject0.optLong("getwait");
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.964293467729211
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(8448, 8448);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{U_eR\"hzaI{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {U_eR\"hzaI{
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.2066113677582964
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("mi", (-3449));
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("GX~_$yyY%x", (Collection) linkedList0);
      JSONObject.getNames(object0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.getJSONArray("GX~_$yyY%x");
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(3614, 20);
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      jSONObject0.put(".", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate(".", hashMap0);
      JSONObject.quote("\r");
      JSONArray jSONArray0 = jSONObject1.getJSONArray(".");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.763999673431961
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.quote("G/d4OS");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("] is not a JSONObject.", "G/d4OS");
      hashMap0.put("G/d4OS", jSONArray0);
      // Undeclared exception!
      JSONObject.valueToString(hashMap0, 3280, 3280);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("0", (Map) hashMap0);
      Double double0 = new Double(0.0);
      try { 
        jSONObject1.append("0", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[0] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("is", "is");
      Object object0 = JSONObject.NULL;
      jSONObject1.append("is", object0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("5SP%#%i$", 2258L);
      Boolean.valueOf("5SP%#%i$");
      long long0 = jSONObject0.getLong("5SP%#%i$");
      assertEquals(2258L, long0);
      
      boolean boolean0 = jSONObject0.optBoolean("5SP%#%i$");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("V4\"L3:QEHaShe ", "V4\"L3:QEHaShe ");
      StringWriter stringWriter0 = new StringWriter(47);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9844935290697798
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("T*eW", jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.565083011200772
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("5SP%#%i$");
      Integer integer0 = new Integer((-12));
      JSONObject jSONObject1 = jSONObject0.accumulate("5SP%#%i$", integer0);
      jSONObject1.optInt(": ", (-12));
      jSONObject0.optInt("5SP%#%i$");
      jSONObject0.optDouble("iscompare", (-1.0));
      boolean boolean0 = jSONObject0.has("5SP%#%i$");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-2554L));
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Double double0 = new Double(2.210168516761504);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Double.isFinite(2.210168516761504);
      Integer integer0 = new Integer(169);
      hashMap0.put(integer0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("i", 0.0);
      try { 
        jSONObject0.getJSONArray("i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"i\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.00387418618795
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "A37+%*@/rD");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.20296116421579
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("5SP%#%i$");
      Integer integer0 = new Integer((-12));
      jSONObject0.accumulate("5SP%#%i$", integer0);
      jSONObject0.optString("5SP%#%i$", "]3gL");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "tg[s?Y)Z0BwP'aC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.5743378653255435
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("U l$-%IfZ&H#R'nnb", 46);
      jSONObject0.isNull("U l$-%IfZ&H#R'nnb");
      String string0 = jSONObject0.optString("U l$-%IfZ&H#R'nnb");
      assertNotNull(string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("X51Z:G$_wwu|<Mn-", false);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.3778722346154972
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 0.0);
      jSONObject0.getDouble("");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.0084168893752943
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 86);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = jSONObject1.optInt("");
      assertEquals(86, int0);
      
      boolean boolean0 = jSONObject1.isNull("A JSONObject text must end with '}'");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.4528887279606404
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", 70);
      double double0 = jSONObject1.optDouble("false", (double) 70);
      assertEquals(70.0, double0, 0.01);
      
      boolean boolean0 = jSONObject1.isNull("false");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.507949694759748
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("vrl", (-1.3460896569030982));
      jSONObject1.optDouble("vrl");
      String string0 = jSONObject0.getString("vrl");
      assertNotNull(string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0366739742537465
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject.quote("9qG=)7eOE (_sv-H");
      JSONObject.quote("5`'");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.has("{76m?lZ!C+");
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("issum", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.2801315622513108
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("5SP%#%i$");
      Integer integer0 = new Integer((-12));
      JSONObject jSONObject1 = jSONObject0.accumulate("5SP%#%i$", integer0);
      JSONObject.valueToString("tg[s?Y)Z0BwP'aC");
      Boolean boolean0 = new Boolean(false);
      jSONObject1.optInt("5SP%#%i$");
      double double0 = jSONObject1.optDouble("5SP%#%i$", 67.0);
      assertEquals(1, jSONObject0.length());
      assertEquals((-12.0), double0, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.191747162792561
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = jSONObject1.put("M:E~G^Ckd')_%", (-3451.6698064636967));
      jSONObject2.getDouble("M:E~G^Ckd')_%");
      int int0 = jSONObject2.optInt("M:E~G^Ckd')_%", (-1189));
      assertEquals(2, jSONObject1.length());
      assertEquals((-3451), int0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "getput";
      JSONObject jSONObject1 = jSONObject0.accumulate("getput", "getput");
      try { 
        jSONObject1.getInt("getput");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getput\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (Map) hashMap0);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("/nb#(of", (-1.0));
      assertEquals((-1.0), double0, 0.01);
      
      String string0 = JSONObject.quote(")!@)");
      assertEquals("\")!@)\"", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      jSONObject0.optString("", "");
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = JSONObject.doubleToString(384.938261);
      assertEquals("384.938261", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("[\"Lrd:o[vkc#(Yvsn$", 1.0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("%|'N53g1#E", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.754341153402116
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Byte byte0 = new Byte((byte) (-31));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.optBoolean("Ul=^/P", false);
      jSONObject0.optJSONObject("ybe\"a9");
      JSONObject jSONObject1 = jSONObject0.put("", (-837L));
      JSONObject jSONObject2 = jSONObject0.put("isparseLong", 67);
      jSONObject2.toString();
      Object object0 = new Object();
      Byte.toUnsignedInt((byte) (-31));
      JSONObject.getNames((Object) jSONObject1);
      JSONObject.quote("ybe\"a9");
      jSONObject1.opt("isparseLong");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("etvaNueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of etvaNueOf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      String string1 = JSONObject.valueToString(",\n");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("in", 0.0);
      assertEquals(1, jSONObject0.length());
      
      Object object0 = jSONObject0.get("in");
      assertEquals(0.0, object0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.1554459787148486
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      JSONObject.valueToString(jSONArray0, 60, 0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1031808349614796
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(jSONArray0, (-2624), (-2624));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.5862699681275525
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("@zxx7jJ;m", 2835L);
      jSONObject0.toString();
      Object object0 = new Object();
      Byte.toUnsignedInt((byte) (-16));
      JSONObject.getNames(object0);
      JSONObject.quote("] not found.");
      jSONObject0.opt((String) null);
      try { 
        jSONObject1.getString("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      Object object0 = jSONObject0.opt("R>!3TPP%gtC5");
      assertNull(object0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1887224017988833
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "A37iA*@/ry");
      jSONObject1.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000005\":[java.lang.Byte@0000000031,java.lang.Byte@0000000032,java.lang.Byte@0000000033,java.lang.Byte@0000000034,java.lang.Byte@0000000035,java.lang.Byte@0000000036,java.lang.Byte@0000000037,java.lang.Byte@0000000038,java.lang.Byte@0000000039,java.lang.Byte@0000000040],\"java.lang.String@0000000028\":\"java.lang.Class@0000000029\",\"java.lang.String@0000000003\":java.lang.Boolean@0000000004}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{2;SKgfvpA%e=oY0ow4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {2;SKgfvpA%e=oY0ow4
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.4760002410294883
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("getreplaceFirst", 0.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject1.put("sub", (Collection) linkedList0);
      jSONObject1.toString();
      Long long0 = new Long(1224L);
      JSONObject.getNames((Object) long0);
      jSONObject1.optJSONArray("sub");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.448442309591302
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("+zlS1y!93lTU]33\"9v", stringArray0);
      jSONObject0.append("+zlS1y!93lTU]33\"9v", "+zlS1y!93lTU]33\"9v");
      jSONObject0.optJSONArray("+zlS1y!93lTU]33\"9v");
      jSONObject0.names();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.2603967218250913
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      JSONObject jSONObject1 = jSONObject0.put("getcopyValueOf", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.112704644485289
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "(=;cg_?aj;p\"kS";
      JSONObject jSONObject1 = jSONObject0.accumulate("(=;cg_?aj;p\"kS", "(=;cg_?aj;p\"kS");
      try { 
        jSONObject1.getBoolean("(=;cg_?aj;p\"kS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(=;cg_?aj;p\\\"kS\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.9555141264033407
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isshortValue", 2);
      try { 
        jSONObject1.getBoolean("isshortValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isshortValue\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("is", 0.0);
      boolean boolean0 = jSONObject1.optBoolean("is");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("Fq5Ct&D>!ILF~", "Fq5Ct&D>!ILF~");
      try { 
        jSONObject0.getJSONObject("Fq5Ct&D>!ILF~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Fq5Ct&D>!ILF~\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-2242), 70);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("mLM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mLM\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("g1sYw.P'S&c4U{#0S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g1sYw.P'S&c4U{#0S\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("{9xzr1Afk:>M@g(~");
      assertFalse(boolean0);
      
      jSONObject0.optString("{9xzr1Afk:>M@g(~", "{9xzr1Afk:>M@g(~");
      boolean boolean1 = jSONObject0.has("QGU_aI");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.1833028724745853
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Map) hashMap0);
      JSONArray jSONArray2 = jSONArray0.put((Object) hashMap0);
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray2);
      jSONObject0.toString((-1573), (-1573));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.quote("G/d4OS");
      assertEquals("\"G/d4OS\"", string0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string1 = JSONObject.valueToString(hashMap0, 3280, 3280);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.3434735313846278
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optLong("~iF", 0L);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("java.lang.Float@0000000007.", 1921);
      assertEquals(1921, int0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.465075706201125
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("22");
      assertEquals("", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("getvalueOf", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 97, 1101);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 10, 10);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong(": ", (-1L));
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      assertEquals(0, hashMap0.size());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.313652565407433
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Double double0 = new Double(2.210168516761504);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString(8192);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.5174714039166524
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Byte byte0 = new Byte((byte)61);
      String string0 = JSONObject.valueToString(byte0, (byte)61, 102);
      assertNotNull(string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove(",\n");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.2142425283306333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "A37iA*/r");
      jSONObject0.toString(124, 124);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.80276727550424
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("Substring bounds error", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("E*|[rhj6VM@24m,CHiz", (int) (byte) (-126));
      assertEquals((-126), int0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("] is not a Boolean.");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/z\"[{;=#");
      assertEquals("\",:]}/z\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.quote("b3@dl,");
      assertNotNull(string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("wFfyNO9r&_rYl", 346L);
      assertEquals(346L, long0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "+zlS1y!93lTU]33\"9v";
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("+zlS1y!93lTU]33\"9v", stringArray0);
      try { 
        jSONObject0.append((String) null, "+zlS1y!93lTU]33\"9v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("AoSOHK2Lv/qU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"AoSOHK2Lv/qU\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.1983857508370273
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString(44, 58);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-2624), (-2624));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(110);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf((String) null);
      String string0 = JSONObject.valueToString(boolean0, (-2922), (-2922));
      assertNotNull(string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("X!!B=IZa/=");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of X!!B=IZa/=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Integer integer0 = new Integer(444);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Float float0 = new Float(384.938261);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Float float0 = new Float(5267.15F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.append("", "{}");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{2SKgfvpA?e=oY0ow4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 19 of {2SKgfvpA?e=oY0ow4
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("getvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getvalueOf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("gettoUpperCase", false);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt("gettoUnsignedInt", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = JSONObject.quote("G3/d4OS");
      assertEquals("\"G3/d4OS\"", string0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString();
      try { 
        jSONObject0.getJSONObject("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(">e$2^@~Brm");
      assertEquals(0L, long0);
  }
}
