/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 04:18:34 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.406704252856061
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(127L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 127 ]/RB", string0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 127L, 127L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854773823L);
      Range.of(range_CoordinateSystem0, 9223372036854773823L, 9223372036854773823L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Long long0 = new Long((-2147483648L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6761962217764883
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-280L), (-280L));
      Range range1 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -280 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.444519866915948
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.iterator();
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      String string0 = range1.toString();
      assertEquals("[ 32767 .. 32766 ]/0B", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.6803414156071077
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(0L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.parseRange("[ 1 .. 0 ]/RB", range_CoordinateSystem1);
      Range range1 = Range.parseRange("[ 1 .. 0 ]/RB", range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.parseRange("[ 1 .. 0 ]/RB", range_CoordinateSystem2);
      assertTrue(range2.isEmpty());
      
      range0.equals(range1);
      Range range3 = Range.of(0L, 0L);
      assertFalse(range3.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.parseRange("[ 1 .. 0 ]/RB", range_CoordinateSystem3);
      long long0 = range1.getBegin(range_CoordinateSystem2);
      assertSame(range1, range4);
      assertEquals(2L, long0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775795L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of((-1166L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range1 = Range.of((-1166L));
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.464906326726513
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of((-1166L));
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1337L), 2222L);
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-1166L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range1 = Range.of((-1074L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2028955619269524
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775795L));
      range0.iterator();
      Range range1 = Range.of((-9223372036854775795L), (-9223372036854775795L));
      boolean boolean0 = range0.equals(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.133562824120753
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      boolean boolean0 = range0.startsBefore(range0);
      Range range1 = Range.of(2147483647L, 2147483647L);
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(0L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      range0.spliterator();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1194L, 9223372034707290968L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774098L);
      range0.equals((Object) null);
      Spliterator<Long> spliterator0 = range0.spliterator();
      assertNotNull(spliterator0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4945828482666346
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774089L);
      range0.iterator();
      Range range1 = Range.of(9223372036854774089L, 9223372036854774089L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0619553454854898
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(0L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.parseRange("[ 1 .. 0 ]/RB", range_CoordinateSystem1);
      Range range2 = Range.parseRange("[ 1 .. 0 ]/RB", range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.parseRange("[ 1 .. 0 ]/RB", range_CoordinateSystem2);
      range2.equals(range3);
      assertTrue(range3.isEmpty());
      
      boolean boolean0 = range2.equals(range0);
      assertSame(range2, range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.681992762904054
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775773L));
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775681L, (-1740L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1740 would make range [9223372036854775681 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(1737L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-5025L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3887754800531034
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(1737L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1737L, 1737L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      boolean boolean1 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.6334021657199447
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 2147483646L, 9223372034707290968L);
      Range range1 = range_Builder1.build();
      String string0 = range1.toString();
      assertEquals("[ 2147483646 .. 9223372034707290968 ]/0B", string0);
      
      range0.isSubRangeOf(range0);
      Range range2 = Range.of(2147483647L, 2147483646L);
      long long0 = range2.getLength();
      assertEquals(0L, long0);
      
      Range range3 = Range.parseRange("[ 2147483646 .. 9223372034707290968 ]/0B");
      boolean boolean0 = range3.equals("[ 2147483646 .. 9223372034707290968 ]/0B");
      boolean boolean1 = range2.isSubRangeOf(range1);
      boolean boolean2 = range1.equals(range3);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = range0.isSubRangeOf(range1);
      assertSame(range1, range3);
      assertTrue(boolean3 == boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean3);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.683452471004506
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483646L, 9223372034707290968L);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(9223372034707290968L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1194L, 9223372034707292161L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2015566946087035
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.of((-128L));
      Range range0 = Range.of(4294967322L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775795L));
      Iterator<Long> iterator0 = range0.iterator();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(iterator0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4188857150147847
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6877906150720685
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -128 .. -127 ]/SB", string0);
      
      range0.equals(range0);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32768L, 32768L);
      Long long0 = new Long(1366L);
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Null Range used in range comparison operation.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Null Range used in range comparison operation.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32768L, 32768L);
      range0.toString();
      boolean boolean0 = range0.equals(range0);
      boolean boolean1 = range0.isSubRangeOf(range0);
      assertTrue(boolean1 == boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 32768 .. 32767 ]/0B", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.866944537924314
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(3745L, 3745L);
      Range range1 = Range.ofLength(3745L);
      Range range2 = range1.intersection(range0);
      boolean boolean0 = range2.isEmpty();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(range2, range0);
      
      Range.of((-32768L), (-32768L));
      Range range3 = Range.of((-205L), 3745L);
      //  // Unstable assertion: assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(9223372036854775806L, 9223372036854775806L);
      Range range1 = Range.of((-1L));
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2013835344355432
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 148L, 148L);
      Range.ofLength(255L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1358315231636453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 127L;
      Range range0 = Range.of(127L, 127L);
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.parseRange("[ 128 .. 128 ]/RB", range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.parseRange("[ 128 .. 128 ]/RB", range_CoordinateSystem1);
      range2.equals(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 128 .. 128 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 128 .. 128 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.3295637090197197
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(127L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 127 ]/RB", string0);
      
      Range range1 = Range.parseRange("[ 1 .. 127 ]/RB");
      Range.Builder range_Builder0 = new Range.Builder(9223372036854773823L);
      Range range2 = range_Builder0.build();
      assertFalse(range2.isEmpty());
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.692720072831715
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range range1 = Range.ofLength(3964L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.ofLength(3964L);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.4165030173214483
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(65600L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      List<Range> list0 = range0.split(1L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.21560182818744
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(127L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1194L, 9223372034707292161L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.111534645219026
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-1739L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.793952894863754
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1648L), (-1648L));
      range0.iterator();
      Range range1 = Range.of((-1648L));
      Range range2 = range1.intersection(range0);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
      
      range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.387304273233588
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.of(355L, 9223372036854775807L);
      range0.iterator();
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(1737L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.621823119658668
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(0L);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(0L, 0L);
      range1.getEnd();
      range0.getBegin(range_CoordinateSystem1);
      long long0 = (-9223372036854775307L);
      // Undeclared exception!
      try { 
        Range.of(0L, (-9223372036854775307L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.3442720621117403
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.ofLength(3745L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(1737L);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.3545344305579152
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-1L), (-1L));
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.636377503411093
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775795L), (-9223372036854775795L));
      range0.iterator();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-2538L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.977443963220837
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32768L, 32768L);
      range0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("[ 32768 .. 32767 ]/0B", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.633988074702473
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-2992L), 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(range1.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.0579071039404107
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-2298L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.of(327L, 9223372036854775807L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.0899845538290704
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 549L, 2147483646L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(9223372036854774098L, 9223372036854774098L);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.716835008541668
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.7887293112718643
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 127L, 127L);
      Range range0 = Range.of(127L, 127L);
      range0.toString(range_CoordinateSystem0);
      Range.parseRange("[ 128 .. 128 ]/RB");
      Range.of((-32768L), 127L);
      Range range1 = Range.of((-32768L), 2147483647L);
      range1.startsBefore(range0);
      Range range2 = Range.parseRange("[ 128 .. 128 ]/RB");
      range2.getEnd(range_CoordinateSystem0);
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("RB", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.435683138005416
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.of(65535L, 65535L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3545344305579152
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-1L), (-1L));
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(2147483644L);
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.554830868289439
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of(4294967295L, 4294967295L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.5879266980014983
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(3745L);
      Range.Builder range_Builder0 = new Range.Builder(3745L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1645L), 32767L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.424090791011022
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      Range range2 = range_Builder0.build();
      long long0 = range2.getLength();
      assertEquals(0L, long0);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.5639184439025415
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.1342954248533537
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      long long0 = range1.getLength();
      //  // Unstable assertion: assertEquals(0L, long0);
      
      Object object0 = new Object();
      range0.equals(object0);
      boolean boolean0 = range1.isSubRangeOf(range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.3844894049549885
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.of(983L, 2621L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 127L, 127L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.0581000423930447
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of((-624L));
      range1.equals((Object) null);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of((-1166L));
      range0.equals("");
      Long long0 = new Long((-1166L));
      assertEquals((-1166L), (long)long0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.5860519503614845
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(0L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.parseRange("[ 1 .. 0 ]/RB", range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = Range.parseRange("[ 1 .. 0 ]/RB");
      boolean boolean0 = range1.intersects(range2);
      assertFalse(boolean0);
      
      range1.equals((Object) null);
      assertSame(range1, range2);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.6323095025533534
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractBegin(2147483647L);
      Range range1 = range_Builder0.build();
      String string0 = range1.toString();
      assertEquals("[ 2147483647 .. 2147483646 ]/0B", string0);
      
      Range.Builder range_Builder1 = new Range.Builder();
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      Range.of((-1L), 2147483647L);
      long long0 = range1.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.7931447854050644
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      long long0 = range0.getLength();
      assertEquals(2147483649L, long0);
      
      Range range1 = Range.of(2147483649L, 2147483649L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.7714162024037803
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 127L, 127L);
      Range range0 = Range.of((-12L), (-12L));
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(127L);
      range0.intersection(range1);
      Range.of((-12L), 127L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem0, (-9223372036854774692L), 9223372036854769937L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.0561774276369764
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(1874L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.263012771400257
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.of((-119L), 9223372036854774803L);
      Range range0 = Range.of(158L, 158L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.4928935108115535
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.of((-2147483648L), (-2595L));
      // Undeclared exception!
      try { 
        Range.ofLength((-2595L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(1622L, 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.5774130903041472
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L);
      Range range2 = Range.of(2147483647L, 2147483647L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertSame(range1, range2);
      assertFalse(range1.isEmpty());
      
      range0.equals("");
      boolean boolean1 = range0.equals("");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.5207286313980743
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.iterator();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      Range range2 = range1.intersection(range0);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.344887200602243
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(2147483647L, 2147483647L);
      Range range1 = range_Builder0.build();
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-1545L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(1715L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.3891371899949303
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774098L);
      Range range1 = Range.of(9223372036854774098L, 9223372036854774098L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.6277804540930236
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774098L);
      range0.iterator();
      Range range1 = Range.of(1L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.20490554701416
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.3216950606081954
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(1737L);
      Range range1 = Range.of(9223372036854775076L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      Object object0 = new Object();
      boolean boolean1 = range0.intersects(range0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775802L), (-9223372036854775802L));
      // Undeclared exception!
      try { 
        range0.split((-9223372036854775802L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.4619851155928596
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range range1 = Range.of((-32768L));
      assertSame(range1, range0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.5986491363281288
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775802L), (-9223372036854775802L));
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.contains(range0));
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(4294967329L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.056474781190351
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(1759L, 1759L);
      boolean boolean0 = range0.isEmpty();
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      boolean boolean1 = range0.endsBefore(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.1356178217257975
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.067996766631831
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Long long0 = new Long((-2147483648L));
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.329213344056216
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(range_CoordinateSystem0, (-1L), 1169L);
      boolean boolean0 = range0.isSubRangeOf(range2);
      assertTrue(boolean0);
      assertFalse(range2.isEmpty());
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.0543110595891974
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372034707292161L, (-9223372036854774613L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854774613 would make range [9223372034707292161 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-1664L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1664 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.ofLength(1715L);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.3763612566307986
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(127L, 127L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(127L, long0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.976709928476526
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(1874L);
      range0.iterator();
      Range.Builder range_Builder0 = new Range.Builder(range0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      List<Range> list0 = range0.split(127L);
      assertTrue(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.1537662530066424
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.ofLength(2147483644L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-32788L), (-128L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.3884109735824395
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(1737L, 1737L);
      Range range1 = Range.of(1737L, 1737L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.605093712415642
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775802L), (-9223372036854775802L));
      long long0 = range0.getBegin();
      //  // Unstable assertion: assertEquals((-9223372036854775802L), long0);
      
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.0671461919602647
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774075L);
      Range range1 = Range.of(9223372036854774075L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 9223372036854774074 ]/0B", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.3279501861614795
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(3745L, 3745L);
      Range range1 = Range.ofLength(3745L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.05979471828628
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of(82L);
      String string0 = range1.toString();
      assertEquals("[ 82 .. 82 ]/0B", string0);
      
      Long.getLong("2o0&q.[ZZ|HU");
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(2147483647L);
      range0.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.6912004809506773
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.ofLength(3745L);
      Range range1 = Range.ofLength(3745L);
      boolean boolean0 = range0.endsBefore(range1);
      assertSame(range1, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.3294539455599756
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.of((-128L), (-128L));
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.137723996281925
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(9223372036854775133L, 9223372036854775133L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.1323906629485916
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.ofLength(2147483624L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(2147483624L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.3235437321314656
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of(255L, 255L);
      String string0 = range0.toString();
      assertEquals("[ 255 .. 255 ]/0B", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-128L), long0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.5873928183218178
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.ofLength(65600L);
      Range range1 = Range.of(65600L, 65600L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.contains(range0));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(127L, long0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.339030945056547
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(1737L, 1737L);
      long long0 = range0.getBegin();
      assertEquals(1737L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.7080587046217413
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.642514730605462
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(1874L);
      range0.iterator();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(1874L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.2922576152511906
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      boolean boolean1 = range0.startsBefore(range1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.2668415958029997
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of(3745L, 3745L);
      Range range1 = Range.ofLength(3745L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.5182739620854413
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.ofLength(65600L);
      range0.iterator();
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(4294967295L);
      Range range1 = range_Builder0.build();
      Range range2 = range1.asRange();
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.26315475997563
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      range0.iterator();
      Range range1 = range0.asRange();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.4415818363092976
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(2147483647L);
      range_Builder1.contractEnd((-2332L));
      Range range1 = range_Builder1.build();
      Range.ofLength(2147483647L);
      Range.Comparators.values();
      Range range2 = range1.intersection(range0);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.0561774276369764
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.ofLength(4294967322L);
      range0.iterator();
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(4294967322L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.0555153951973866
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(0L);
      boolean boolean0 = range0.equals(range_Builder1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-530L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Spliterator<Long> spliterator0 = range0.spliterator();
      assertNotNull(spliterator0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.3467933716752643
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774089L);
      range0.spliterator();
      Range range1 = Range.of(9223372036854774089L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.2023030746654286
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2098L, 2098L);
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.6884526475116584
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      boolean boolean0 = range0.equals(range0);
      boolean boolean1 = range0.isSubRangeOf(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.2026738570161886
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(0L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      range0.iterator();
      Range range1 = Range.parseRange("[ 1 .. 0 ]/RB", range_CoordinateSystem0);
      boolean boolean0 = range1.equals(range0);
      assertTrue(range1.isEmpty());
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.976709928476526
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372036854775807 .. -9223372036854775808 ]/SB", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.3549345906219408
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of(771L, 771L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(772L, long0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.6330311617419575
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.5892109515268125
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(127L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 127 ]/RB", string0);
      
      Range range1 = Range.parseRange("[ 1 .. 127 ]/RB");
      List<Range> list0 = range1.complement(range0);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1063L, 3526L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.353627401079457
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-1L), (-1L));
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.1539808973211514
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder0.build();
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.3457385231926966
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774098L);
      range0.iterator();
      Range range1 = Range.ofLength(9223372036854774098L);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of(1197L, 1197L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.parseRange(">JTgprD-DM6XT.eDaO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse >JTgprD-DM6XT.eDaO into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.147989363295334
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.getEnd();
      Range.Builder range_Builder0 = new Range.Builder();
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.7396036963691888
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      long long0 = range0.getEnd();
      //  // Unstable assertion: assertEquals((-1L), long0);
      
      range0.iterator();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(2, list0.size());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of((-2495L), (-2495L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-424L), 246L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range range0 = Range.of(1736L, 1736L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range range0 = Range.ofLength(3748L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, 913L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 657L, 657L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.util.Caches");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.util.Caches into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=3.3891188032707182
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range range0 = Range.ofLength(9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 166
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775808L), 2147483651L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
