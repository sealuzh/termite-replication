/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 03:41:45 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9795303057019797
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf(",@Q8B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.,@Q8B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.6204561407467573
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.of(9223372036854775798L);
      Range range0 = Range.of(2147483756L, 4294967327L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1234L, 4294967327L);
      range_Builder0.build();
      Object object0 = new Object();
      Range range1 = Range.of(2147483756L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1356559690710406
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(393L, 3280L);
      String string0 = range0.toString();
      assertEquals("[ 393 .. 3280 ]/0B", string0);
      
      Range range1 = Range.of(3280L, 3280L);
      Range range2 = Range.of(454L);
      boolean boolean0 = range2.equals(range1);
      assertFalse(range1.equals((Object)range2));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.6325356360474927
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.ofLength(9223372036854775798L);
      Range range0 = Range.of(2147483756L, 4294967327L);
      range0.iterator();
      Range.ofLength(2147483756L);
      Range range1 = Range.of(2147483756L);
      range1.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.524493449941116
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-476L), (-142L));
      Range range1 = Range.of((-1192L));
      range1.equals(range0);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.of((-142L), (-297L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 96L);
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.697007890416072
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      Object object0 = new Object();
      range0.isSubRangeOf(range0);
      range0.split(9223372036854773734L);
      range0.complement(range0);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.272575844603085
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 393L, 65556L);
      List<Range> list0 = range0.split(393L);
      // Undeclared exception!
      range0.complementFrom(list0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(4294967294L, 4294967294L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.589245886700449
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3532413229588194
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(190L, 9223372036854775807L);
      range0.equals(range1);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.795338716182451
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      Range range1 = Range.ofLength(0L);
      range0.equals(range1);
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1334393520871684
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(2147483781L, 2147483781L);
      List<Range> list0 = range0.split(2147483781L);
      assertTrue(list0.contains(range0));
      
      Range range1 = Range.of(2147483781L);
      range1.equals(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.6751966874908035
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Range range0 = Range.of(2147483790L, 4294967295L);
      range0.iterator();
      Range.ofLength(2147483790L);
      Range range1 = Range.of(4294967295L, 9223372036854775807L);
      range1.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036853793844L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5426924147927243
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775797L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775797L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -23 would make range [9223372036854775797 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.133310203178477
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.of(9223372036854775253L, 9223372036854775253L);
      Range range0 = Range.of(8057358645419L, 9223372036854775253L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-2147483648L));
      range0.iterator();
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.760655361089899
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.ofLength(2086L);
      Range range1 = Range.of(2147483781L, 2147483781L);
      range0.iterator();
      range1.intersects(range0);
      Range range2 = Range.ofLength(4294967289L);
      range1.endsBefore(range0);
      // Undeclared exception!
      range2.split(2086L);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0612997224250416
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-24L), (-24L));
      String string0 = range0.toString();
      assertEquals("[ -24 .. -24 ]/0B", string0);
      
      Range range1 = Range.of((-128L), (-128L));
      Range range2 = Range.of((-24L));
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(521L, 4294967294L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.684362327604882
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32790L, 32790L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 3269L, 32790L);
      range1.endsBefore(range0);
      Long long0 = new Long(9223372036854775807L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(3269L);
      range1.equals(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.parseRange("Vfi", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Vfi into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-4294937772L), (-18L));
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of((-4294937772L), (-4294937772L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=4.00026563615441
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(32767L, 4294967295L);
      range0.iterator();
      Range range1 = Range.ofLength(4294967295L);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.endsBefore(range1);
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 32767L);
      range0.complement(range2);
      range0.asRange();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9769701418514933
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32790L, 32790L);
      range0.endsBefore(range0);
      Long long0 = new Long(9223372036854775807L);
      range0.isSubRangeOf(range0);
      range0.equals(range_Builder0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.4929074147969286
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 715L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range2 = Range.ofLength(1050L);
      String string0 = range2.toString();
      assertEquals("[ 0 .. 1049 ]/0B", string0);
      
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range range3 = range_Builder1.build();
      assertTrue(range3.isEmpty());
      
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(715L, long0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.200767051101671
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(1L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.981761995699951
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(393L, 3280L);
      String string0 = range0.toString();
      assertEquals("[ 393 .. 3280 ]/0B", string0);
      
      Range range1 = Range.of(3280L, 3280L);
      Range range2 = Range.of(393L, 393L);
      boolean boolean0 = range1.startsBefore(range2);
      boolean boolean1 = range2.equals(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.1345528251107537
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.getEnd();
      Range range1 = Range.of((-32768L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(508L, 9223372036854772539L);
      Long.valueOf(1034L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(508L, 9223372036854772539L);
      Long.valueOf(1039L);
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.266970744711691
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32790L, 32790L);
      long long0 = range0.getEnd();
      assertEquals(32789L, long0);
      
      Range range1 = Range.of((-2201L));
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      
      Long long1 = Long.valueOf(3430L);
      boolean boolean1 = range0.equals(long1);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.973278742811257
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-476L), (-476L));
      range0.isEmpty();
      Object object0 = new Object();
      Long.getLong("Range coordinates %d, %d are not valid %s coordinates");
      range0.equals(range_CoordinateSystem0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-476L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.2698860195370782
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      long long0 = range0.getEnd();
      //  // Unstable assertion: assertEquals(9223372036854775807L, long0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.4419009081004504
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(199L, 9223372036854775807L);
      range0.equals(range1);
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range1));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of((-142L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.200803824290616
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-476L), (-476L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.4425663199904104
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(56738L);
      Range range1 = Range.of(56738L, 56738L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 56738 .. 56738 ]/0B", string0);
      
      long long0 = range1.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.7264419815096654
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.getEnd();
      Range range1 = Range.of((-32768L));
      Range range2 = Range.of(9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range2.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(690L, 4294967294L);
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.of(176L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Long long0 = new Long(176L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 176L, (long) long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.133310203178477
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      long long0 = range0.getEnd();
      assertEquals(9223372036854775806L, long0);
      
      Range range1 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
      
      List<Range> list0 = range1.split(2147483647L);
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(65552L, 65552L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-2147483648L));
      range0.iterator();
      Long long0 = Long.valueOf((-2147483648L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.6329816531150794
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 176L, 4801L);
      Range range0 = Range.of(1657L);
      Range range1 = Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 9223372036854775807L, 9223372036854775807L);
      Range range2 = Range.of(1657L);
      assertSame(range2, range0);
      
      range1.equals((Object) null);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.6330311617419575
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(2147483781L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 842L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.4919728750577503
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 176L, 176L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 176L, 176L);
      Range range2 = Range.of(255L);
      assertFalse(range2.isEmpty());
      
      range0.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range3 = range0.intersection(range1);
      assertSame(range1, range0);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.129966420524349
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range0 = Range.of((-1L));
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.390465080078167
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.of(2147483781L, 2147483781L);
      Range range0 = Range.ofLength(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(1L, 2147483781L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(255L);
      Long.getLong("Null Range used in range comparison operation.");
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.460825593621222
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 32767L;
      Range.of((-2954L), 32767L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854772540L, (-2954L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.2695212375772043
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range0 = range_Builder0.build();
      range0.spliterator();
      Range range1 = Range.of(1L, 1L);
      range_Builder0.build();
      Object object0 = new Object();
      Range range2 = Range.of(1L);
      boolean boolean0 = range0.equals(range2);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
      assertFalse(range0.isEmpty());
      assertFalse(range2.equals((Object)range0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(9223372036854775765L, 9223372036854775765L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of(9223372036854775765L, 9223372036854775765L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = range0.equals(consumer0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.7952322710829267
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 127L);
      range0.getEnd(range_CoordinateSystem0);
      List<Range> list0 = range0.split(127L);
      List<Range> list1 = range0.complementFrom(list0);
      assertFalse(list0.contains(range0));
      assertTrue(list1.isEmpty());
      
      Range range1 = Range.of(0L);
      List<Range> list2 = range0.complement(range1);
      assertEquals(2, list2.size());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.062579689215092
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 176L, 176L);
      Range range1 = Range.of(range_CoordinateSystem0, 176L, 4801L);
      boolean boolean0 = range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem1);
      assertEquals(177L, long0);
      
      Range range2 = range1.intersection(range1);
      long long1 = range2.getEnd();
      assertEquals(4801L, long1);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean1 = range1.equals(range0);
      assertTrue(boolean1 == boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = range1.getBegin(range_CoordinateSystem2);
      assertSame(range1, range2);
      assertEquals(176L, long2);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.ofLength(176L);
      Range range1 = Range.of(176L);
      range1.equals(range0);
      Long long0 = Long.getLong("org.jcvi.jillion.core.Range$CoordinateSystem");
      assertNull(long0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854775254L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.3456356264053553
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(176L, 176L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long0 = new Long(176L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, (long) long0);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.169178073539314
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(65535L);
      Object object0 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(900L, 4294967394L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.205030096100149
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of((-32776L));
      Range range1 = Range.ofLength(1628L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -32776 .. -32776 ]/0B", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.266186989809369
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.ofLength(8L);
      range0.iterator();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      long long0 = range0.getLength();
      assertEquals(8L, long0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.7184018912189094
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(0L, 4971L);
      List<Range> list0 = range0.split(1257L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(4, list0.size());
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854773307L, (-9223372036854775804L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775804 would make range [9223372036854773307 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775632L, (-2043L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2043 would make range [9223372036854775632 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.5612779614675993
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-476L), (-476L));
      boolean boolean0 = range0.isEmpty();
      //  // Unstable assertion: assertFalse(boolean0);
      
      Object object0 = new Object();
      Range range1 = Range.ofLength(2147483647L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.3003083871902303
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-82L), 424L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.201200886033717
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(65554L);
      Range range1 = range_Builder0.build();
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.5125919142310003
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(405L, 4294967370L);
      range0.endsBefore(range0);
      Range range1 = Range.of(4294967370L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.320509322121978
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.iterator();
      boolean boolean0 = range0.intersects(range0);
      assertFalse(boolean0);
      
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-359L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.ofLength(200L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.086870484872592
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-1852L), 4294967306L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775794L), (-9223372036854775794L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(4294967306L, 4294967306L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.ofLength(65502L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775253L);
      Range range1 = Range.of(9223372036854775416L);
      range0.equals(range1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      long long0 = range0.getEnd();
      assertEquals(9223372036854775806L, long0);
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.54145624532784
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-476L), (-112L));
      Range range1 = Range.of((-1192L));
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      assertNotSame(range1, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 176L, 176L);
      Object object0 = new Object();
      range0.equals(object0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.ofLength(4294967303L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(65563L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.435398545725592
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of((-5293L), 65502L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-5293L), long0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Range.of(199L, 9223372036854775807L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-476L), (-476L));
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.1547558621110463
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.ofLength(2098L);
      range0.getBegin();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("omg.jcvi.jillion.core.Range$CoordinateSystem", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse omg.jcvi.jillion.core.Range$CoordinateSystem into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.4418725148939258
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 176L, 176L);
      Range range1 = Range.ofLength(176L);
      range1.endsBefore(range0);
      range1.complement(range0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.63907054668115
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(176L, 176L);
      range0.startsBefore(range0);
      range0.startsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder(176L);
      range_Builder0.contractEnd(1L);
      Range range1 = range_Builder0.build();
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      
      String string0 = range0.toString();
      assertEquals("[ 176 .. 176 ]/0B", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1L), long0);
      
      Long.valueOf((-1L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-1L), (-1L));
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.2659220555731143
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(65554L);
      Range range1 = range_Builder0.build();
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.2161572481410414
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.ofLength(65535L);
      // Undeclared exception!
      try { 
        Range.parseRange("q|#8>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse q|#8> into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 393L, 65556L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of(690L, 690L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of((-362L), (-362L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.5327218468502695
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(393L, 3280L);
      String string0 = range0.toString();
      assertEquals("[ 393 .. 3280 ]/0B", string0);
      
      Range range1 = Range.of(3280L, 3280L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.parseRange("[ 393 .. 3280 ]/0B", range_CoordinateSystem0);
      Range range2 = Range.of(454L);
      boolean boolean0 = range2.equals("[ 393 .. 3280 ]/0B");
      boolean boolean1 = range2.equals(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.2684214914498164
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(65552L, 65552L);
      range0.getEnd();
      Object object0 = new Object();
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-355L));
      range0.spliterator();
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.480763242053446
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(65576L, 65576L);
      Range range1 = Range.of(65576L, 4294967295L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      Range range2 = Range.of(65576L, 65576L);
      Range range3 = range0.intersection(range0);
      assertNotSame(range3, range1);
      assertFalse(range3.isEmpty());
      assertSame(range3, range2);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.2055376382881398
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range0.equals(range1);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.5901283765758647
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775253L);
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      //  // Unstable assertion: assertEquals(1, list1.size());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.137744993657253
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(9223372036854775253L, 9223372036854775253L);
      List<Range> list0 = range0.split(9223372036854775253L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.contains(range0));
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.388188351782628
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of((-32784L));
      Range range1 = Range.of((-32784L));
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.682581250885736
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-476L), (-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = range0.getEnd();
      assertEquals((-128L), long0);
      
      Range range1 = Range.of((-128L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.5818234900327375
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 3174L);
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.5990876235018
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.ofLength(590L);
      range0.isSubRangeOf(range1);
      range0.iterator();
      Object object0 = new Object();
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.440014200405378
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of(32767L, 32767L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range1 = Range.of((-1296L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1837L), (-1837L));
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.304288972509543
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-476L), (-476L));
      Range range1 = Range.of((-1192L));
      boolean boolean0 = range1.startsBefore(range0);
      boolean boolean1 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      Range range1 = Range.of(0L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.1139696645160146
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of(827L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.8896985514868954
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1002L, 1002L);
      String string0 = range0.toString();
      assertEquals("[ 1001 .. 1001 ]/0B", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.3290811126512576
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1955L));
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range range1 = range_Builder0.build();
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.491915479660861
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.ofLength(747L);
      Range range1 = Range.of(75527L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = range0.asRange();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Zero Based", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 4034L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.304692976882615
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of(9223372036854775253L, 9223372036854775253L);
      range0.split(9223372036854775253L);
      // Undeclared exception!
      try { 
        range0.split(1L);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.06154799691732
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(1033L, 2903L);
      range0.split(1033L);
      Range range1 = range0.asRange();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 176L, 176L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(176L, long0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.7938131631694842
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-3200L));
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 3200 ]/RB", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(32767L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(65554L);
      range_Builder1.expandEnd((-1874L));
      Range.of(65554L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 3269L, 3268L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.1866848071632385
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.getBegin();
      Object object0 = new Object();
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.056474781190351
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of((-359L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder();
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.976432073516815
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-32792L), (-32792L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-32791L), long0);
      
      long long1 = range0.getLength();
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of(176L, 176L);
      Long long0 = new Long(176L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.2021678481610336
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(1446L);
      Range.of(1446L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder();
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.0808360831049293
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of(4294967269L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.3770742691085167
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of(176L, 176L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(176L, long0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of((-476L), (-476L));
      range0.getEnd();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.268181935945823
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 0 .. 0 ]/0B", string0);
      
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      // Undeclared exception!
      try { 
        range0.split((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of(2579L);
      List<Range> list0 = range0.split(2579L);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.0923850344529913
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of(23L);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(23L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.8942981504962124
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of(176L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range range2 = range1.intersection(range0);
      assertSame(range2, range0);
      assertSame(range1, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.1320150760941314
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(65554L);
      Range range0 = Range.of(65554L);
      Range range1 = range_Builder1.build();
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
      //  // Unstable assertion: assertNotSame(range1, range0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.562268141324046
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Object object1 = new Object();
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.979856144737496
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(65554L);
      Range range1 = range0.intersection(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-32767L), long0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.1890760075458306
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -32767 .. -32767 ]/RB", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range_Builder0.expandEnd(9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.1819585820332397
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.expandBegin(5273L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1L), long0);
      
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.138598148428904
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 655L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(655L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.6870204957035666
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of((-332L));
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.060601531374581
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2377L, 2377L);
      range0.toString();
      Range.parseRange("[ 2376 .. 2376 ]/0B");
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2372L, (-1699L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.of(117L, 117L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.4768264726270033
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(65554L);
      range_Builder0.expandBegin(65554L);
      Range range0 = Range.of(65554L);
      Range range1 = range_Builder1.build();
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.540585429849406
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range0 = Range.of((-32768L));
      assertFalse(range0.isEmpty());
      
      Range.of(9223372036854775807L, 9223372036854775807L);
      range_Builder0.contractBegin(9223372036854775807L);
      range_Builder0.shift(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854774458L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.1162692393511016
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.8922772952702807
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of(1L);
      boolean boolean0 = range1.isEmpty();
      assertSame(range1, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.328162839005711
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range range0 = Range.of(32793L, 32793L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range1 = Range.of(32793L);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range range0 = Range.of((-359L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=3.4419999547761964
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range range0 = Range.of(128L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=3.0901672022308966
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("0B", string0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 843L, 843L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Range range0 = Range.of((-205L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 170
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-476L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 171
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 172
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Range range0 = Range.of((-328L), (-328L));
      assertFalse(range0.isEmpty());
  }
}
