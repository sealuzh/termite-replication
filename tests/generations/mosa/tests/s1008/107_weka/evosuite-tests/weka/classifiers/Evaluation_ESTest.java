/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 03:59:08 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomForest;
import weka.clusterers.EM;
import weka.clusterers.HierarchicalClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.Version;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.balltrees.BallNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9873728519693974
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.toMatrixString();
      evaluation0.m_NumClasses = (-2);
      double double0 = evaluation0.m_Unclassified;
      // Undeclared exception!
      try { 
        evaluation0.weightedPrecision();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.914944167775574
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      double double0 = evaluation0.numTrueNegatives(0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      assertEquals("\nSynopsis for weka.classifiers.bayes.NaiveBayesMultinomial:\n\nClass for building and using a multinomial Naive Bayes classifier. For more information see,\n\nAndrew Mccallum, Kamal Nigam: A Comparison of Event Models for Naive Bayes Text Classification. In: AAAI-98 Workshop on 'Learning for Text Categorization', 1998.\n\nThe core equation for this classifier:\n\nP[Ci|D] = (P[D|Ci] x P[Ci]) / P[D] (Bayes rule)\n\nwhere Ci is class i and D is a document.", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.772969799011699
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex((-2));
      evaluation0.areaUnderROC((-1));
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.setNumericPriorsFromBuffer();
      try { 
        evaluation0.setPriors(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1100843864598464
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.relativeAbsoluteError();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 288.0918;
      doubleArray0[4] = 288.0918;
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 0, 2.942109870755531);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelation("@data");
      MockRandom mockRandom0 = new MockRandom();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-10.0);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (-129.448);
      doubleArray0[5] = (double) (-1);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4945054945054945
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate("Can't open file ");
      instances1.getRevision();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.errorRate();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7263242926359355
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.meanPriorAbsoluteError();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.m_NumClasses = (-1500);
      evaluation1.toSummaryString();
      double double0 = evaluation1.m_SumPriorEntropy;
      MockRandom mockRandom0 = new MockRandom();
      evaluation1.equals(evaluation0);
      Evaluation.makeOptionString(additiveRegression0, true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2439.46645751539, doubleArray0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, binarySparseInstance0, 2439.46645751539);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0778197834423267
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LogitBoost logitBoost0 = new LogitBoost();
      AbstractClassifier.runClassifier(logitBoost0, testInstances0.DEFAULT_WORDS);
      logitBoost0.setClassifier((Classifier) null);
      // Undeclared exception!
      try { 
        Evaluation.makeOptionString(logitBoost0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.SingleClassifierEnhancer", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.071522124044181
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate("Can't open file ");
      instances1.getRevision();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.setPriors(instances0);
      evaluation0.SFEntropyGain();
      // Undeclared exception!
      try { 
        evaluation0.weightedFMeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.794375227518644
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate("Can't open file ");
      instances1.getRevision();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.setPriors(instances0);
      // Undeclared exception!
      try { 
        evaluation0.confusionMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1302352612619053
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation.handleCostOption("", (-1));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.trueNegativeRate((-1));
      evaluation0.toCumulativeMarginDistributionString();
      double double0 = evaluation0.m_SumSqrPredicted;
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation.makeOptionString(logitBoost0, true);
      evaluation0.makeDistribution(0.0);
      evaluation0.toMatrixString("setNumExecutionSlots");
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2228732065664887
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Ft\"Le5w|qj");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getCapabilities();
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getOptions();
      evaluation0.confusionMatrix();
      double double0 = evaluation0.precision(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.m_TotalCoverage;
      double double2 = evaluation0.weightedAreaUnderROC();
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4035549742056825
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances1.generate(",uq5L/zw4Mz8'&O}f1");
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.meanPriorAbsoluteError();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Evaluation evaluation1 = new Evaluation(instances0);
      Utils.SMALL = (double) (-1);
      evaluation0.toSummaryString(true);
      evaluation0.KBRelativeInformation();
      double double0 = evaluation1.m_SumPriorEntropy;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5975170300947936
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.meanPriorAbsoluteError();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Evaluation evaluation1 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      Attribute attribute0 = new Attribute("setEpsilon", vector0, 9);
      instances0.setClass(attribute0);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1263100866621598
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("Can't open file ");
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderPRC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.919280707172661
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.meanPriorAbsoluteError();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Evaluation evaluation1 = new Evaluation(instances0);
      assertTrue(evaluation1.equals((Object)evaluation0));
      
      evaluation1.m_Incorrect = 4.9E-324;
      evaluation0.toSummaryString(true);
      double double0 = evaluation1.m_SumPriorEntropy;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = evaluation1.equals(evaluation0);
      assertFalse(evaluation1.equals((Object)evaluation0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8>T!LMRinBg8");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      
      evaluation0.numInstances();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7207141944592172
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      double double1 = evaluation1.m_SumPriorEntropy;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = evaluation1.equals(evaluation0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelation("@data");
      MockRandom mockRandom0 = new MockRandom();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.setPriors(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelation("@data");
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.334644784999521
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Random.setNextRandom((-301));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCapabilities();
      Capabilities capabilities0 = new Capabilities(costSensitiveClassifier0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.falseNegativeRate(0);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.priorEntropy();
      assertEquals(1.0, double3, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0978583933028268
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8`T!LMRinBp8");
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.m_SumPriorAbsErr = (-2188.277435071978);
      evaluation0.meanPriorAbsoluteError();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5806650118303964
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.weightedTruePositiveRate();
      assertEquals(double3, double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1851405121742604
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8`T!LMRWnBp8");
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      Utils.log2 = (double) (-1);
      evaluation0.m_SumSqrErr = (double) (-1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4172.370833130404);
      doubleArray0[1] = (-1.0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0, intArray0, 2628);
      instances0.add((Instance) sparseInstance0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.numTrueNegatives((-1));
      assertEquals(0.0, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.priorEntropy();
      assertEquals((-0.6890092384766586), double2, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.380841627083473
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8`T!LMRWnBp8");
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumSqrErr = (double) (-1);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.numTrueNegatives((-1));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.addNumericTrainClass(0.0, (-1));
      double double1 = evaluation0.numFalsePositives(6702);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.errorRate();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5340880081128856
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedHashSet<BinarySparseInstance> linkedHashSet0 = new LinkedHashSet<BinarySparseInstance>();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-2669));
      assertEquals(0.0, double0, 0.01);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "National Physical Laboratory");
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.numFalsePositives((-2669));
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 25, (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1756260027254717
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3639.27988205143;
      doubleArray0[1] = 206.8;
      doubleArray0[2] = 3639.27988205143;
      doubleArray0[3] = 3.4;
      doubleArray0[4] = 206.8;
      evaluation0.m_TrainClassVals = doubleArray0;
      evaluation0.falseNegativeRate(2390);
      double double0 = evaluation0.m_Unclassified;
      evaluation0.falsePositiveRate((-1322));
      // Undeclared exception!
      try { 
        evaluation0.addNumericTrainClass((-512.02), (-1322));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double2 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.1348273170997563
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8`T!LMRinBp8");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      REPTree rEPTree0 = new REPTree();
      instances0.indexOf(rEPTree0);
      evaluation0.falsePositiveRate((-2));
      evaluation0.confusionMatrix();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) rEPTree0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8`T!LMRinBp8");
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Version.REVISION = (-2);
      evaluation0.m_SumErr = 4.0;
      evaluation1.weightedAreaUnderROC();
      evaluation0.trueNegativeRate((-1));
      evaluation1.toMatrixString("8`T!LMRinBp8");
      evaluation1.areaUnderPRC((-2));
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      
      evaluation1.m_NoPriors = true;
      double double0 = evaluation1.KBMeanInformation();
      double double1 = evaluation1.priorEntropy();
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      CostMatrix costMatrix0 = new CostMatrix(0);
      CostMatrix costMatrix1 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix1);
      String string0 = evaluation0.toClassDetailsString((String) null);
      assertEquals("null\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.setPriors(instances0);
      evaluation0.errorRate();
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient(2147483645);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.avgCost();
      try { 
        Evaluation.handleCostOption("-s <random number seed>\n", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.542886676346678
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-1));
      double double0 = evaluation0.m_MinTarget;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluationForSingleInstance((double[]) null, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2241687780217045
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.toMatrixString();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(928);
      double[] doubleArray0 = evaluation0.getClassPriors();
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.719350198726066
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.toCumulativeMarginDistributionString();
      double[] doubleArray0 = new double[0];
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.664265342250585
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MockRandom mockRandom0 = new MockRandom(3051L);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_TotalCoverage = 10.0;
      evaluation1.coverageOfTestCasesByPredictedRegions();
      evaluation1.weightedAreaUnderROC();
      assertEquals(Double.POSITIVE_INFINITY, evaluation1.coverageOfTestCasesByPredictedRegions(), 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation evaluation3 = new Evaluation(instances1);
      evaluation2.weightedAreaUnderROC();
      evaluation3.trueNegativeRate(498);
      evaluation0.toMatrixString("   * @return        the revision\n");
      Evaluation evaluation4 = new Evaluation(instances0);
      evaluation4.areaUnderPRC(2);
      evaluation4.KBMeanInformation();
      double double0 = evaluation3.priorEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MockRandom mockRandom0 = new MockRandom();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      additiveRegression0.setShrinkage(1799.5190910627323);
      String[] stringArray0 = new String[1];
      try { 
        Evaluation.evaluateModel((Classifier) additiveRegression0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3208119525559794
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "   * @param i the training data\n");
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorEntropy = (-1072.0298642);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedAreaUnderPRC();
      evaluation0.SFPriorEntropy();
      try { 
        evaluation1.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.4486869174985209
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 206.8;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances((String) null, arrayList0, 1556);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.040402761177371
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Random.setNextRandom((-301));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCapabilities();
      Capabilities capabilities0 = new Capabilities(costSensitiveClassifier0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      costSensitiveClassifier0.getCapabilities();
      evaluation0.numFalseNegatives(1);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Evaluation evaluation2 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation2.fMeasure(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(378);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation1.getClassPriors();
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      testInstances0.getWords();
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3150.15676, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8564909139241832
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      MockRandom mockRandom0 = new MockRandom();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation");
      evaluation0.numFalseNegatives((-1));
      try { 
        evaluation0.crossValidateModel(" ", instances0, (-1), testInstances0.DEFAULT_WORDS, (java.util.Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called:  
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2758526341007075
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      testInstances0.setNoClass(true);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation2.m_MinTarget;
      evaluation2.SFPriorEntropy();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      try { 
        evaluation0.updatePriors(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelation("@data");
      MockRandom mockRandom0 = new MockRandom();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_MinTarget;
      evaluation0.SFPriorEntropy();
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = (-301);
      Random.setNextRandom((-301));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCapabilities();
      Capabilities capabilities0 = new Capabilities(costSensitiveClassifier0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-301));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelation("@data");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2.0));
      // Undeclared exception!
      try { 
        evaluation0.precision((-1770));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1770
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.359069096714393
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumSqrErr = (double) (-1);
      evaluation0.unweightedMacroFmeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.updateNumericScores((double[]) null, (double[]) null, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.0046537677840317
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.toSummaryString(true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(12);
      try { 
        evaluation0.updateStatsForPredictor((-1), binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Evaluation.makeOptionString((Classifier) null, true);
      testInstances0.setWordSeparators("Copy with class value set to first value: ");
      Instances instances0 = testInstances0.generate("Wm'#YJ/R{CD{");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.367074063211145
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ComplexityStatisticsAvailable = true;
      double double0 = evaluation0.SFMeanEntropyGain();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedPrecision();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8>T!LMRinBg8");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Correct;
      LogitBoost logitBoost0 = new LogitBoost();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-725));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -725
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7316728013692297
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation2.updateMargins((double[]) null, 0, (-5612.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.053931714863806
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString(".bsi");
      assertEquals(".bsi\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      MockFile mockFile0 = new MockFile(".bsi\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", ".bsi");
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(".bsi\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n");
      Evaluation evaluation1 = new Evaluation(instances1);
      assertEquals(Double.NaN, evaluation1.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation1.weightedFMeasure(), 0.01);
      assertEquals(Double.NaN, evaluation1.weightedTruePositiveRate(), 0.01);
      
      evaluation0.numTrueNegatives((-2));
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.meanPriorAbsoluteError();
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.5043438866577072
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      RandomForest randomForest0 = new RandomForest();
      Evaluation.makeOptionString(randomForest0, true);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation1.getClassPriors();
      evaluation0.toMatrixString();
      evaluation1.numFalseNegatives(19);
      DenseInstance denseInstance0 = new DenseInstance(2492);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      IBk iBk0 = new IBk();
      iBk0.getRevision();
      double double0 = evaluation0.m_SumSqrClass;
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation0.trueNegativeRate(2);
      String string0 = evaluation1.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double3 = evaluation1.SFMeanSchemeEntropy();
      assertNotEquals(double3, double2, 0.01);
      
      MockRandom mockRandom1 = new MockRandom();
      evaluation1.equals(converterUtils_DataSource0);
      double[] doubleArray0 = evaluation1.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.710027779724208
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation.main((String[]) null);
      double double0 = evaluation0.m_SumClass;
      double double1 = evaluation0.unclassified();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.9504296971134647
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCapabilities();
      Capabilities capabilities0 = new Capabilities(costSensitiveClassifier0);
      Vote vote0 = new Vote();
      SelectedTag selectedTag0 = vote0.getCombinationRule();
      costSensitiveClassifier0.setCostMatrixSource(selectedTag0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.truePositiveRate(1);
      assertEquals(0.0, double0, 0.01);
      
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      double double0 = evaluation0.numTrueNegatives((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.4010408819955167
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8`T!LMRinBp8");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      REPTree rEPTree0 = new REPTree();
      instances0.indexOf(rEPTree0);
      evaluation0.falsePositiveRate((-2));
      evaluation0.confusionMatrix();
      double double0 = evaluation0.m_SumSqrClass;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = Double.NaN;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.549521821245012
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = Evaluation.makeOptionString(jRip0, true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(string0, arrayList0, 142);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.3287124793744667
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setMultiInstance(false);
      Instances instances0 = testInstances0.generate("8>T!LMRinBg8");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-1));
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedRecall();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.9354046201849306
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.rootMeanPriorSquaredError();
      LinearRegression linearRegression0 = new LinearRegression();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.equals((Object) null);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      assertEquals("Preserve order of instances.", simpleKMeans0.preserveInstancesOrderTipText());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCapabilities();
      Capabilities capabilities0 = new Capabilities(costSensitiveClassifier0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.setPriors(instances0);
      evaluation0.falsePositiveRate(1);
      MockRandom mockRandom0 = new MockRandom();
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      String string0 = Evaluation.makeOptionString(cVParameterSelection0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.0050028733399348
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "M3*";
      stringArray0[1] = "-+A=Pv*";
      stringArray0[2] = "M3*";
      stringArray0[3] = "K&B Relative Info Score            ";
      textDirectoryLoader0.setOptions(stringArray0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("");
      instances1.toSummaryString();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.toSummaryString();
      evaluation0.relativeAbsoluteError();
      evaluation0.toCumulativeMarginDistributionString();
      SGDText sGDText0 = new SGDText();
      Evaluation.makeOptionString(sGDText0, true);
      sGDText0.setUseWordFrequencies(false);
      evaluation0.numTruePositives(1);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.recall(0);
      evaluation0.rootMeanPriorSquaredError();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      evaluation0.KBMeanInformation();
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.rootRelativeSquaredError();
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.sizeOfPredictedRegions();
      double double2 = evaluation0.errorRate();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.relativeAbsoluteError();
      evaluation0.confusionMatrix();
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.correct();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      int[] intArray0 = new int[2];
      intArray0[0] = 673;
      intArray0[1] = 118;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2163.38, intArray0, 7);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BallNode ballNode0 = new BallNode(118, 673, 673, binarySparseInstance1, (-1075));
      Instance instance0 = BallNode.calcPivot(ballNode0, ballNode0, instances0);
      instances0.add(instance0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      CostMatrix costMatrix1 = new CostMatrix(0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.falseNegativeRate(2390);
      evaluation0.recall(2390);
      evaluation0.numFalseNegatives(2390);
      evaluation0.pctCorrect();
      evaluation0.weightedAreaUnderPRC();
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "|<[s5z");
      assertNotNull(string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 186.658944;
      doubleArray0[1] = 186.658944;
      SparseInstance sparseInstance0 = new SparseInstance(186.658944, doubleArray0);
      EM eM0 = new EM();
      Capabilities capabilities0 = new Capabilities(eM0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("i*#H@B?");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) null, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomial0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) naiveBayesMultinomial0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.2302958071897643
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8`T!LMRinBp8");
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.meanPriorAbsoluteError();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      evaluation0.rootRelativeSquaredError();
      evaluation0.setPriors(instances0);
      double double1 = evaluation0.pctIncorrect();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.falseNegativeRate(481);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toMatrixString("@relation");
      assertEquals("@relation\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8`T!LMRinBp8");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(206.8, 1457.2);
      evaluation0.falseNegativeRate((-2));
      double double0 = evaluation0.m_Unclassified;
      evaluation0.addNumericTrainClass(0.0, 0.0);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1837132182957943
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("Can't open file ");
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-not-nominal-tts");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01);
      
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.setPriors(instances0);
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      evaluation0.SFSchemeEntropy();
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'L';
      doubleArray0[1] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(483, doubleArray0);
      instances0.add((Instance) denseInstance0);
      evaluation0.falseNegativeRate(483);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.falsePositiveRate((-1303));
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      evaluation0.useNoPriors();
      evaluation0.addNumericTrainClass(2390, (-748.1517930226));
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double[] doubleArray1 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3.0), doubleArray1);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumSqrErr = (double) (-1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-748.1517930226), doubleArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) adaBoostM1_0, (Instance) binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      Vote vote0 = new Vote();
      DenseInstance denseInstance0 = new DenseInstance(1799);
      try { 
        evaluation0.evaluateModelOnce((Classifier) vote0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.6031192709911521
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-not-nominal-atts");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      double double1 = evaluation1.SFMeanSchemeEntropy();
      double double2 = evaluation1.weightedFalseNegativeRate();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MockRandom mockRandom0 = new MockRandom();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 982.0;
      DenseInstance denseInstance0 = new DenseInstance(0, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, sparseInstance1, (-1075));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[1];
      double double0 = evaluation0.pctUnclassified();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-not-nominal-atts");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) inputMappedClassifier0, (Instance) binarySparseInstance0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@data");
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Object[] objectArray0 = new Object[0];
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.precision(2062);
      NaiveBayesMultinomial naiveBayesMultinomial1 = new NaiveBayesMultinomial();
      evaluation0.setNumericPriorsFromBuffer();
      double[] doubleArray0 = new double[0];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.8564909139241834
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8`T!LMRinBp8");
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      // Undeclared exception!
      try { 
        evaluation0.recall((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.540759090570096
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8`T!LMRinBp8");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.weightedAreaUnderPRC();
      double double2 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.KBInformation();
      assertEquals(0.0, double3, 0.01);
      
      evaluation0.numTruePositives((-1));
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.setNumericPriorsFromBuffer();
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      CostMatrix costMatrix0 = new CostMatrix(0);
      MockRandom mockRandom1 = new MockRandom();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[7];
      intArray0[0] = 3539;
      intArray0[1] = 3539;
      intArray0[2] = 3539;
      intArray0[3] = 3539;
      intArray0[4] = (-57);
      intArray0[5] = 0;
      intArray0[6] = 3539;
      SparseInstance sparseInstance0 = new SparseInstance((-2478.8012194709618), doubleArray0, intArray0, 3539);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 0;
      CostMatrix costMatrix0 = new CostMatrix(0);
      IBk iBk0 = new IBk(0);
      JRip jRip0 = new JRip();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.883501065030505
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      String string0 = evaluation0.toClassDetailsString((String) null);
      assertEquals("null\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.setPriors(instances0);
      evaluation0.confusionMatrix();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.setDiscardPredictions(false);
      evaluation0.getRevision();
      evaluation0.toMatrixString();
      assertFalse(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tFull name of the OptionHandler analysed.\n\teg: weka.classifiers.rules.ZeroR\n\t(default weka.classifiers.rules.ZeroR)");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.falsePositiveRate(1835);
      evaluation0.addNumericTrainClass((-2), (-1));
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      CostMatrix costMatrix0 = new CostMatrix(0);
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = 'f';
      String string0 = evaluation0.num2ShortID(0, charArray0, 0);
      assertEquals("", string0);
      
      double double0 = evaluation0.numTruePositives(48);
      String string1 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string1);
      
      double double1 = evaluation0.m_SumPriorEntropy;
      double double2 = evaluation0.falsePositiveRate(48);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = 'S';
      charArray0[2] = 't';
      charArray0[3] = '6';
      charArray0[4] = 'f';
      String string0 = evaluation0.num2ShortID(819, charArray0, 483);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              LLStf", string0);
      
      evaluation0.numTruePositives(378);
      String string1 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string1);
      
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.kappa();
      assertEquals(1.0, double1, 0.01);
      
      evaluation0.areaUnderPRC((-1751));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate((-1));
      assertEquals(0.0, double0, 0.01);
      
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      double double1 = evaluation0.m_Incorrect;
      double double2 = evaluation0.m_MaxTarget;
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'E';
      charArray0[2] = '%';
      charArray0[3] = 'i';
      charArray0[4] = '/';
      String string0 = evaluation0.num2ShortID(13, charArray0, 13);
      assertEquals("           Ei", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      AbstractClassifier.makeCopy(naiveBayesMultinomial0);
      Evaluation.makeOptionString(naiveBayesMultinomial0, true);
      double double0 = evaluation0.numTruePositives((-3385));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.recall((-3385));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
      
      evaluation0.getHeader();
      assertEquals(1.0, evaluation0.kappa(), 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.7394518068218354
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8`T!LMRinZp8");
      JRip jRip0 = new JRip();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-221));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.weightedAreaUnderROC();
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      evaluation0.getHeader();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      double double0 = evaluation0.SFMeanEntropyGain();
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(378);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.542886676346678
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient(131);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-not-nominal-atts");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTrueNegatives(19);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteWithMissingClass();
      char[] charArray0 = new char[5];
      charArray0[0] = 'E';
      charArray0[1] = 'f';
      charArray0[2] = 'y';
      charArray0[3] = '=';
      charArray0[4] = '1';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1), charArray0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString(".bsi");
      File file0 = textDirectoryLoader0.getDirectory();
      MockFile mockFile0 = new MockFile(file0, "R");
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.setNumericPriorsFromBuffer();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.addNumericTrainClass(2551.402, 2858.0);
      assertEquals(0.0, evaluation0.incorrect(), 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      evaluation0.updateMargins(doubleArray0, 0, (-2));
      evaluation0.unweightedMacroFmeasure();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.522657234927873
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8`T!LMRinBp8");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.KBInformation();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-3507.643136771572));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3507
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8>T!LMRinBg8");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) (-2), (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.171218111933964
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Evaluation.handleCostOption("", 483);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.SFMeanEntropyGain();
      String string0 = evaluation0.toSummaryString("@relation", true);
      assertEquals("@relation\nTotal Number of Instances                0     \n", string0);
      
      double double1 = evaluation0.pctUnclassified();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.2388060551041957
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.setDiscardPredictions(false);
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      
      String string1 = evaluation0.toSummaryString(".bsi", false);
      assertEquals(".bsi\nTotal Number of Instances                0     \n", string1);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrClass;
      double double1 = evaluation0.weightedPrecision();
      double double2 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.areaUnderROC(8);
      double double3 = evaluation0.totalCost();
      assertEquals(0.0, double3, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LinkedHashSet<BinarySparseInstance> linkedHashSet0 = new LinkedHashSet<BinarySparseInstance>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(34);
      linkedHashSet0.add(binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      instances0.addAll((Collection<? extends Instance>) linkedHashSet0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTrueNegatives((-1));
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double1, 0.01);
      
      double double2 = evaluation0.KBInformation();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.130603021496386
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.weightedTrueNegativeRate();
      double double0 = evaluation0.m_SumSchemeEntropy;
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      try { 
        evaluation0.evaluateModel((Classifier) null, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      String string0 = Evaluation.makeOptionString(logitBoost0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.178235655793613
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ArrayDeque<HierarchicalClusterer> arrayDeque0 = new ArrayDeque<HierarchicalClusterer>();
      instances0.retainAll(arrayDeque0);
      MockRandom mockRandom0 = new MockRandom();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = (-2158);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.SFPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2158), (char[]) null, (-2158));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString(".bsi");
      File file0 = textDirectoryLoader0.getDirectory();
      MockFile mockFile0 = new MockFile(file0, "R");
      int int0 = 471;
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(471, (char[]) null, 483);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.setDiscardPredictions(true);
      evaluation0.areaUnderROC((-620));
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      CostMatrix costMatrix0 = new CostMatrix(0);
      CostMatrix costMatrix1 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix1);
      evaluation0.toSummaryString("@relation", true);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[0];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0);
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      
      evaluation0.rootMeanPriorSquaredError();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) naiveBayesMultinomial0, instances0, objectArray0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 'O';
      int[] intArray0 = new int[3];
      intArray0[1] = (int) 'O';
      intArray0[2] = 3539;
      SparseInstance sparseInstance0 = new SparseInstance(79.0, doubleArray0, intArray0, 3539);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation.handleCostOption("", (-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-2));
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.weightedFalseNegativeRate();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation1.evaluateModelOnce(0.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      evaluation0.weightedFalseNegativeRate();
      try { 
        evaluation0.updateStatsForPredictor((-4813.7), (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.falsePositiveRate((-2));
      evaluation0.addNumericTrainClass(1337.357, 1337.357);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision((-3176));
      evaluation0.meanPriorAbsoluteError();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      assertEquals("If set to true, classifier may output additional info to the console.", additiveRegression0.debugTipText());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.areaUnderPRC((-1));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.239548465139677
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.listOptions();
      evaluation0.areaUnderROC(371);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.truePositiveRate(371);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      NaiveBayesMultinomial naiveBayesMultinomial1 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation0.truePositiveRate(0);
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.m_TotalSizeOfRegions = Double.NaN;
      LinearRegression linearRegression0 = new LinearRegression();
      evaluation0.equals(instances0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      assertEquals("set maximum number of iterations", simpleKMeans0.maxIterationsTipText());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      evaluation0.rootRelativeSquaredError();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("FX}64'?g");
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.numTruePositives(480);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities0 = costSensitiveClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate(1);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Evaluation.main(stringArray0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      try { 
        Evaluation.evaluateModel((Classifier) additiveRegression0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.AdditiveRegression:
         // 
         // -S
         // \tSpecify shrinkage rate. (default = 1.0, ie. no shrinkage)
         // 
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.trees.DecisionStump:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      String string0 = Evaluation.getGlobalInfo(naiveBayesMultinomialText0);
      assertEquals("\nSynopsis for weka.classifiers.bayes.NaiveBayesMultinomialText:\n\nMultinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8`T!LMRinBp8");
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, (-5652), (java.util.Random) null, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomial0, instances0, 98, (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, 1);
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, "   * Classifies the given instance.\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.relativeAbsoluteError();
      JRip jRip0 = new JRip();
      try { 
        evaluation0.evaluateModel((Classifier) jRip0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      try { 
        Evaluation.evaluateModel(" ", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name  .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.9813638569595113
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.unweightedMicroFmeasure();
      evaluation0.rootRelativeSquaredError();
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.159934571278811
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8>T!LMRinBg8");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-1));
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      AbstractClassifier.runClassifier(votedPerceptron0, testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.numTruePositives((-2));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = Evaluation.makeOptionString(jRip0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.fMeasure(458);
      double double1 = evaluation0.SFMeanEntropyGain();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.1726153923937757
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.setNumericPriorsFromBuffer();
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      String string1 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string1);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      String string0 = Evaluation.getGlobalInfo(naiveBayesMultinomialText0);
      assertEquals("\nSynopsis for weka.classifiers.bayes.NaiveBayesMultinomialText:\n\nMultinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("-not-nominal-atts");
      try { 
        Evaluation.handleCostOption(".bsi", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.clear();
      evaluation0.kappa();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 39, (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, (-2), (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "X3V/z^PS>3 eJk!5D");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }
}
