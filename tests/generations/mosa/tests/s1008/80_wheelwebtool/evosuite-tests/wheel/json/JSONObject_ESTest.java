/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 04:49:56 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7916699582654827
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("fo", (-1L));
      jSONObject1.put("spl", (double) (-1L));
      jSONObject1.toString(63, 63);
      jSONObject1.optDouble("{\n                                                                                                                              \"java.lang.String@0000000002\": java.lang.Long@0000000003,\n                                                                                                                              \"java.lang.String@0000000004\": java.lang.Double@0000000005\n                                                               }");
      int int0 = jSONObject1.optInt("fo");
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.575482321769108
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("RN!bK%TxNL>", 1232.0);
      String string0 = jSONObject0.toString(55);
      Integer integer0 = new Integer((-2856));
      Integer integer1 = new Integer((-2962));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer1, integer0);
      double double0 = jSONObject0.getDouble("RN!bK%TxNL>");
      assertEquals(1232.0, double0, 0.01);
      
      String string1 = jSONObject0.toString((-2962));
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.439243482388646
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(Double.NaN);
      hashMap0.put("getpush", double0);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject1 = jSONObject0.put("a~}Ct.)G uJOWNxDC@", (Map) hashMap0);
      jSONObject1.optLong("a~}Ct.)G uJOWNxDC@");
      jSONObject1.optDouble((String) null);
      Short short0 = new Short((short)128);
      Short.compare((short)128, (short)770);
      JSONObject.numberToString(short0);
      Double double1 = new Double(0.0);
      Double.min(0.0, (-642));
      hashMap0.put("null", double1);
      Integer integer0 = new Integer(44);
      Integer.toUnsignedLong((-2356));
      JSONObject.valueToString(integer0);
      JSONObject jSONObject2 = jSONObject0.append("] is not a Boolean.", jSONObject1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "java.lang.Integer@0000000011");
      jSONObject0.put("] is not a Boolean.", (Collection) linkedList0);
      try { 
        jSONObject2.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      try { 
        jSONObject0.getBoolean("^mCFS</n.3=P'E*hI)T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^mCFS<\\/n.3=P'E*hI)T\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3719198209004677
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, (-657), (-657));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.383899656720168
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(1L);
      JSONObject.getNames((Object) long0);
      JSONObject jSONObject1 = jSONObject0.put("isshortValue", 1796.57);
      jSONObject1.optInt("isshortValue");
      String string0 = JSONObject.valueToString("isshortValue", 1796, 1796);
      assertNotNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.2772569862978458
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject.quote("");
      JSONTokener jSONTokener0 = new JSONTokener("{ltp{|O ?ZI%3Laz,");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {ltp{|O ?ZI%3Laz,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[{JqU72\"FW=/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of [{JqU72\"FW=/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.accumulate("lon", boolean0);
      boolean boolean1 = jSONObject1.getBoolean("lon");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9695408032588313
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      Short short0 = new Short((short)12);
      hashMap0.put((Object) null, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = JSONObject.NULL;
      Short short1 = new Short((short)2229);
      hashMap0.put(object0, short1);
      jSONObject0.optBoolean("get");
      JSONObject jSONObject1 = jSONObject0.put("getgetString", (Collection) linkedList0);
      linkedList0.addLast("DBxx5<6P?aRmV-I");
      String string0 = "xf)p+TV?Ar0";
      jSONObject1.optLong("xf)p+TV?Ar0");
      jSONObject1.names();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      jSONObject0.accumulate("getgetString", jSONObject2);
      // Undeclared exception!
      try { 
        jSONObject1.toString(62);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.450046484891506
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("ZUI,6,'vO-", true);
      assertTrue(boolean0);
      
      jSONObject0.put("getmin", (-2805.89103));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      long long0 = jSONObject0.getLong("getmin");
      assertEquals((-2805L), long0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2523914481603313
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(4107, true);
      String string0 = jSONArray0.toString();
      jSONArray0.optBoolean(4107);
      JSONObject jSONObject0 = new JSONObject(jSONArray1);
      // Undeclared exception!
      jSONObject0.getJSONArray(string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5880588147135972
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "_;MK";
      stringArray0[1] = "_;MK";
      JSONObject jSONObject0 = new JSONObject("_;MK", stringArray0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.removeFirstOccurrence("_;MK");
      JSONObject jSONObject1 = jSONObject0.put("_;MK", (Collection) linkedList0);
      jSONObject0.isNull("_;MK");
      JSONObject jSONObject2 = jSONObject1.append("Expected a ':' after a key", "_;MK");
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1165141682948128
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("H<K=N5jAlfAj:Z`nh", object0);
      try { 
        jSONObject0.getBoolean("H<K=N5jAlfAj:Z`nh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"H<K=N5jAlfAj:Z`nh\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.249176614394288
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      jSONObject0.keys();
      jSONObject0.length();
      jSONObject0.length();
      Double double0 = Double.valueOf(0.0);
      Double.min(0, 0);
      jSONObject0.append("getsubList", double0);
      jSONObject0.optJSONArray("getsubList");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)0);
      linkedList0.addFirst(byte0);
      jSONObject0.put("o-AHT@Q98Td0F", (Collection) linkedList0);
      String string0 = "$a#Jap9\\89*YFu3";
      try { 
        jSONObject0.get("$a#Jap989*YFu3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$a#Jap989*YFu3\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = jSONObject0.accumulate("su", boolean0);
      boolean boolean1 = jSONObject1.getBoolean("su");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3851473943697874
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(35);
      linkedList0.add(integer0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 1457, 1457);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2993111747168937
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("'LnUK<", "'LnUK<");
      jSONObject0.toString(10, 10);
      boolean boolean0 = jSONObject1.has("'LnUK<");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      Integer integer0 = new Integer(1813);
      Integer.getInteger("i4P");
      hashMap0.put((JSONArray) null, integer0);
      JSONObject.valueToString(hashMap0);
      JSONObject.getNames((Object) null);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.append("R5[w", jSONArray0);
      JSONObject jSONObject2 = jSONObject0.append("R5[w", (Object) null);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", (Map) hashMap0);
      try { 
        jSONObject0.append("Unterminated string", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Unterminated string] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONObject0.has("isdescendingIterator");
      try { 
        jSONObject0.getInt("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote(",\n");
      jSONObject0.optLong("\",\n\"");
      jSONObject0.putOpt("^nI_rR0nJOaCGs@~", ",\n");
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("] is not a JSONObject.", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "{e:-dJA@bfG?T]";
      JSONTokener jSONTokener0 = new JSONTokener("{e:-dJA@bfG?T]");
      jSONTokener0.toString();
      jSONTokener0.syntaxError("isreplaceAll");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 15 of {e:-dJA@bfG?T]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.2514646960719626
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-2973));
      jSONObject0.optInt("i", (int) (short) (-2973));
      Double double0 = new Double((short) (-2973));
      Double double1 = new Double((-2973));
      JSONObject jSONObject1 = jSONObject0.put("i", (Object) double1);
      jSONObject1.getDouble("i");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      try { 
        jSONObject0.append((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9522423480486542
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Ja}shKM2ul0|>-~}(7K");
      JSONObject jSONObject1 = jSONObject0.put("Ja}shKM2ul0|>-~}(7K", (Object) "Ja}shKM2ul0|>-~}(7K");
      try { 
        jSONObject1.getDouble("Ja}shKM2ul0|>-~}(7K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ja}shKM2ul0|>-~}(7K\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.598262882658326
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)39);
      Short.toUnsignedLong((short)2409);
      jSONObject0.optInt("[", (int) (short)2409);
      Double double0 = new Double((short)2409);
      JSONObject jSONObject1 = jSONObject0.put("i", (Object) "i");
      JSONObject jSONObject2 = jSONObject0.accumulate("[", jSONObject1);
      JSONObject.testValidity((Object) null);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject2.write(stringWriter0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9297061990576545
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONArray0);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("ism~fn", jSONObject0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("ism~fn");
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(355.815013162285);
      hashMap0.put(jSONArray0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.json.JSONArray cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.257081954562556
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("t@<y8", "t@<y8");
      jSONObject1.get("t@<y8");
      String string0 = jSONObject0.toString(16, 16);
      String string1 = JSONObject.quote("{\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"}");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9844935290697798
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1031808349614796
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(linkedList0, (-981), (-981));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(hashMap0, 27, 54);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1298025637315807
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-519), (-519));
      jSONObject0.optInt("e", (-1551));
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.accumulate("948.95.", "948.95.");
      jSONObject1.toString();
      jSONObject1.optLong("948.95.", (-285L));
      jSONObject0.opt("948.95.");
      jSONObject1.optBoolean("{}");
      JSONObject.getNames((Object) jSONObject1);
      JSONObject jSONObject2 = jSONObject1.put("getcopyValueOf", 210);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject3 = jSONObject2.putOpt("getvalueOf", jSONArray0);
      assertSame(jSONObject1, jSONObject3);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.510434379848759
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.append("/x-PD3c*N#jo", (Object) null);
      jSONObject0.toString(547, (-67));
      jSONObject1.getJSONArray("/x-PD3c*N#jo");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6001861788197624
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wU}|,|Hv", (-1L));
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      long long0 = jSONObject1.optLong("wU}|,|Hv");
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.9549478780836425
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("-", (Collection) linkedList0);
      Boolean boolean0 = new Boolean("-");
      JSONArray jSONArray0 = jSONObject2.optJSONArray("-");
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject3 = new JSONObject(jSONObject2);
      assertEquals(1, jSONObject3.length());
      
      Object object0 = JSONObject.NULL;
      String[] stringArray1 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.2343545839532437
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject0.put(",:]}/\"[{;=#", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      String string0 = jSONObject0.toString((-1368));
      assertNotNull(string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.0126200936538066
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "ln";
      JSONObject jSONObject1 = jSONObject0.accumulate("ln", "ln");
      try { 
        jSONObject1.getInt("ln");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ln\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.0126200936538066
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "ismin";
      JSONObject jSONObject1 = jSONObject0.accumulate("ismin", "ismin");
      try { 
        jSONObject1.getLong("ismin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ismin\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8833703845117034
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Ja}shKM2ul0|>-~}(7K");
      JSONObject.valueToString(jSONObject0, (-630), (-630));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000048,\njava.lang.Byte@0000000049,\njava.lang.Byte@0000000050,\njava.lang.Byte@0000000051,\njava.lang.Byte@0000000052,\njava.lang.Byte@0000000053,\njava.lang.Byte@0000000054,\njava.lang.Byte@0000000055,\njava.lang.Byte@0000000056,\njava.lang.Byte@0000000057,\njava.lang.Byte@0000000058,\njava.lang.Byte@0000000059,\njava.lang.Byte@0000000060,\njava.lang.Byte@0000000061,\njava.lang.Byte@0000000062,\njava.lang.Byte@0000000063,\njava.lang.Byte@0000000064,\njava.lang.Byte@0000000065,\njava.lang.Byte@0000000066\n],\n\"java.lang.String@0000000045\": \"java.lang.Class@0000000046\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{_M~^mO`d.k;B3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 12 of {_M~^mO`d.k;B3
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-573), (-573));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.4146223840114844
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject.quote("Ja}shKM2ul0|>-~}(7K");
      JSONObject jSONObject0 = new JSONObject((Object) "Ja}shKM2ul0|>-~}(7K");
      JSONObject.valueToString("Ja}shKM2ul0|>-~}(7K");
      jSONObject0.optJSONObject("\"Ja}shKM2ul0|>-~}(7K\"");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject(object0);
      jSONObject0.optBoolean("Ja}shKM2ul0|>-~}(7K");
      jSONObject1.optString("getoptJSONArray", (String) null);
      JSONObject jSONObject2 = new JSONObject();
      Long long0 = new Long((-3792));
      JSONTokener jSONTokener0 = new JSONTokener("0.00");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("HD0CM_2V%v", (Object) null);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.943722113060048
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("-", (Collection) linkedList0);
      jSONObject2.optBoolean("-");
      JSONObject jSONObject3 = jSONObject1.put("-", 0);
      jSONObject3.optDouble("-", (double) 0);
      StringWriter stringWriter0 = new StringWriter(3039);
      stringWriter0.close();
      linkedList0.add(jSONObject3);
      JSONObject jSONObject4 = new JSONObject(jSONObject1);
      stringWriter0.append((CharSequence) "-");
      jSONObject2.optDouble("-");
      jSONObject3.getInt("-");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      jSONObject3.write(stringWriter1);
      try { 
        jSONObject2.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-1229.24));
      JSONObject jSONObject1 = jSONObject0.accumulate("lD\"+W@QCw55i9|u`r%V", float0);
      int int0 = jSONObject1.getInt("lD\"+W@QCw55i9|u`r%V");
      assertEquals((-1229), int0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9873982136479044
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "zi/:}>VSTP");
      boolean boolean0 = jSONObject0.isNull("zi/:}>VSTP");
      assertTrue(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.688946123179314
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Ja}shKM2ul0|>-~}77K");
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1443.202));
      assertEquals("-1443.202", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.031590929526806
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("-", (Collection) linkedList0);
      jSONObject2.optBoolean("-");
      JSONObject jSONObject3 = jSONObject1.put("-", 0);
      jSONObject3.optDouble("-", (double) 0);
      StringWriter stringWriter0 = new StringWriter(3039);
      stringWriter0.close();
      JSONObject jSONObject4 = new JSONObject(jSONObject1);
      stringWriter0.append((CharSequence) "-");
      jSONObject2.optDouble("-");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      jSONObject3.write(stringWriter1);
      try { 
        jSONObject2.getJSONArray("w ~ZheejN:{E`E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"w ~ZheejN:{E`E\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.543357781909078
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject.getNames((Object) "getc6omDare");
      JSONObject jSONObject0 = new JSONObject((Object) "getc6omDare");
      // Undeclared exception!
      jSONObject0.toString(3806);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      jSONObject0.putOpt("", float0);
      long long0 = jSONObject0.getLong("");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.290172167640753
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)2409);
      Short.compare((short)2409, (short)39);
      jSONObject0.append("[", short0);
      Short.toUnsignedLong((short)2409);
      jSONObject0.optInt("[", (int) (short)2409);
      Double double0 = new Double((short)2409);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      JSONObject jSONObject2 = jSONObject0.accumulate("[", jSONObject1);
      jSONObject1.optBoolean("");
      // Undeclared exception!
      jSONObject2.toString((int) (short)39);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("ismin", "ismin");
      jSONObject1.accumulate("ismin", jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.7375411520914277
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)2409);
      JSONObject jSONObject1 = jSONObject0.append("[", short0);
      jSONObject1.getString("[");
      jSONObject1.remove("d*'|5icfRTKa|\"}L,");
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.quote("wheel.json.JSONArray@0000000002");
      jSONObject0.optString("istoString", "getmerge");
      jSONObject1.optLong((String) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = " u1^%v*J1/1h20xoS";
      stringArray0[1] = "istoString";
      stringArray0[2] = "istoString";
      stringArray0[4] = "getmerge";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.opt((String) null);
      JSONObject jSONObject3 = jSONObject1.put("getputIfAbsent", (int) (short)2409);
      JSONObject jSONObject4 = new JSONObject(jSONObject3, stringArray0);
      assertFalse(jSONObject4.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("ik#^G/TSTZl,Kx");
      Float float0 = new Float(603.66259951);
      JSONObject jSONObject1 = jSONObject0.putOpt("ik#^G/TSTZl,Kx", float0);
      jSONObject1.optString("ik#^G/TSTZl,Kx", "JB3Ph*/(}&7g\u0000S&");
      try { 
        jSONObject0.getString("1p}U<)7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1p}U<)7\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.3791235169376774
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.put("\r", true);
      String string0 = jSONObject0.optString("\r");
      assertNotNull(string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = JSONObject.quote("/zT5uAC`o;");
      assertEquals("\"/zT5uAC`o;\"", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(":y(RMj'f`Q@$a", ":y(RMj'f`Q@$a");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("isspliterator", "isspliterator");
      jSONObject0.optJSONObject("isspliterator");
      long long0 = jSONObject0.optLong("isspliterator");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isput", 3353L);
      long long0 = jSONObject1.getLong("isput");
      assertEquals(3353L, long0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 54, (-614));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, 118, 118);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of []
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.420502896615888
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-1083035832), (-1083035832));
      JSONObject jSONObject1 = jSONObject0.accumulate("nq4 <i' ", object0);
      jSONObject1.remove("nq4 <i' ");
      try { 
        jSONObject0.getBoolean("nq4 <i' ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nq4 <i' \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("BwN{XLfKk*dlbF-$7d", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("gettoString", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "OE";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject1.put("OE", (Collection) linkedList0);
      Boolean boolean0 = new Boolean("OE");
      JSONArray jSONArray0 = jSONObject1.getJSONArray("OE");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("*=y>m+7", "*=y>m+7");
      try { 
        jSONObject0.getJSONArray("*=y>m+7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*=y>m+7\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g{RP}Xq2i{N.bl!BUxd", 1179L);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("|[.?tM8!PP5Fg'H@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |[.?tM8!PP5Fg'H@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.2943974934684848
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)2399);
      JSONObject jSONObject1 = jSONObject0.append("[", short0);
      jSONObject0.optInt("[", (int) (short)2399);
      Short.toUnsignedInt((short)2313);
      jSONObject0.optString("-q6AW]MZ[/+kQ/Sl.g", "");
      Float float0 = new Float((double) (short)2313);
      jSONObject1.putOpt("'B?8ke", "[");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.39779762378767
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Ja}shKM2ul0|>-~}(7K");
      JSONArray jSONArray0 = jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt("Ja}shKM2ul0|>-~}(7K", jSONArray0);
      int int0 = jSONObject1.optInt("Ja}shKM2ul0|>-~}(7K");
      assertEquals(4, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.9974995112475309
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("", 1.0);
      String[] stringArray0 = new String[6];
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.7988457068767891
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Short short0 = new Short((short)2292);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optBoolean("z*#q_U.\"?v0", false);
      jSONObject0.optLong("z*#q_U.\"?v0");
      jSONObject0.opt("z*#q_U.\"?v0");
      JSONObject jSONObject1 = jSONObject0.put("null", (int) (short)2292);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.437465328065844
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("spl", "spl");
      Double double0 = new Double(0.0);
      jSONObject1.putOpt("spl", double0);
      jSONObject1.optDouble("spl", 1579.0679318600971);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.609572406455021
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", 629.0);
      double double0 = jSONObject1.optDouble("] is not a number.");
      assertEquals(629.0, double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(64, 64);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-968), (-968));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("fo", 0.0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Ja}shKM2ul0|>-~}(7K");
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.7213192226263727
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("F~[I5FZGzg%(SS", (-1L));
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.4298775730165807
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("yE>K[Q^yw@bM", 2202);
      try { 
        jSONObject0.getJSONObject("[jJqU72\"VW=/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[jJqU72\\\"VW=/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("rW+FXjK");
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0057816393847003
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Ja}shKM2ul0|>-~}(7K");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.5801229155620669
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Double double0 = new Double((-654.896637092));
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "{}");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.1904885611243943
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString(123, (-968));
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.2708645068777
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      jSONObject0.toString((-968), 8192);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = JSONObject.quote("H{iEn@Fp%NINjX{n|");
      assertEquals("\"H{iEn@Fp%NINjX{n|\"", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.271990924723642
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.valueToString(jSONObject0, 1618, 1618);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 27, 36);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("OTkZ83r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"OTkZ83r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.112704644485289
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("nq4 <i' ", jSONObject0);
      try { 
        jSONObject0.getBoolean("nq4 <i' ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nq4 <i' \"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 345, 345);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("'LnUK<", "'LnUK<");
      try { 
        jSONObject0.getBoolean("'LnUK<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'LnUK<\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("3pb;#U*e7^JN&N");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 3pb;#U*e7^JN&N
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("N\n/W*hE<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"N\\n/W*hE<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Float float0 = new Float((-3010.267F));
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1769.0266327);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("<l-X0Ki5VoUWaGM", (-3220.35786));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("4 @CsR|*", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("C=!zb+p9&Yb$E& p-", true);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\u";
      JSONObject jSONObject1 = jSONObject0.put(string0, false);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("(''-He4 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(''-He4 \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.7213192226263727
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("isaddLast", (-1699));
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.643068250732437
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("J/", 0L);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", float0);
      jSONObject1.optInt("", 32);
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = JSONObject.quote("6Qx{&B/@r=fgJr\"<w");
      assertEquals("\"6Qx{&B/@r=fgJr\\\"<w\"", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("istoUpperCase");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{8EObw", (Object) "{8EObw");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.01733667702759
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("J,jO,4gB86H", "J,jO,4gB86H");
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getString("J,jO,4gB86H");
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("S0U(]Y_?");
      jSONObject0.optString("\"S0U(]Y_?\"", "n=6tk;Ql'Q");
      Double double0 = new Double((-1.0));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\"S0U(]Y_?\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"S0U(]Y_?\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Double double0 = new Double((-3010.267F));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = JSONObject.quote("4Gmr");
      assertEquals("\"4Gmr\"", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("\b");
      assertEquals("", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("] is not a Boolean.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("", "");
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("[jJqU72\"VW=/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[jJqU72\\\"VW=/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      boolean boolean0 = jSONObject0.has("JSONArray initial value should be a string or collection or array.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String string0 = JSONObject.valueToString(byte0, (byte)0, (byte)0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
