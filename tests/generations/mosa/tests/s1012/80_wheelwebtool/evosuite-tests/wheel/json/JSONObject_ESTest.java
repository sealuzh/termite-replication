/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 10:09:14 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.533050249608278
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.putOpt((String) null, "ql*");
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject3 = jSONObject2.put("Substring bounds error", (Map) hashMap0);
      Float float0 = new Float((-2533.2F));
      Double double0 = new Double((-2533.2F));
      hashMap0.put(float0, double0);
      jSONObject0.toString(4, 4);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject3.put("Substring bounds error", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject3.optJSONArray("Substring bounds error");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4250744883941215
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("DPa", "DPa");
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Double double0 = new Double(Double.NaN);
      hashMap0.put(jSONObject1, double0);
      jSONObject1.put("DPa", (Map) hashMap0);
      try { 
        jSONObject1.toString((-48733664), (-2392));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5848382027973327
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.put("0", (Object) "0");
      JSONObject.getNames((Object) null);
      double double0 = jSONObject0.optDouble("0");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.138091713658086
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("is", object0);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject2 = jSONObject0.put("", (Map) hashMap0);
      jSONObject2.putOpt("is", jSONObject1);
      StringWriter stringWriter0 = new StringWriter(1384);
      // Undeclared exception!
      jSONObject2.write(stringWriter0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("YlQc2f?T34u3$#anY#", (Collection) linkedList0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.963826488286453
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(13);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("[]", 38);
      jSONObject0.optInt("[]");
      JSONObject jSONObject1 = jSONObject0.put("[]", false);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = JSONObject.quote("Ju>\"Qc</5Hw6]7V7Q X");
      assertEquals("\"Ju>\\\"Qc<\\/5Hw6]7V7Q X\"", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.022754786544185
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, false);
      jSONObject0.put("istoString", (-936.3192256481495));
      JSONArray jSONArray1 = jSONArray0.put(29, (double) 29);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      try { 
        jSONObject0.toJSONArray(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9720759938590025
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("\b", "\b");
      try { 
        jSONObject0.getBoolean("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.734645942071286
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("\b", "\b");
      jSONObject0.put("Expected a ':' after a key", (-1L));
      JSONObject jSONObject2 = jSONObject1.putOpt("{8Gp", jSONObject0);
      jSONObject0.optBoolean("\b", true);
      // Undeclared exception!
      jSONObject2.toString(58);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6680336709356518
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(linkedList0, 3823, (-3015));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.810795917431007
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", 1287L);
      String[] stringArray0 = JSONObject.getNames((Object) "wheel.json.JSONObject@0000000001");
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = new Boolean(true);
      boolean boolean1 = jSONObject0.isNull("wheel.json.JSONObject@0000000001");
      assertFalse(boolean1);
      
      jSONObject1.getInt("wheel.json.JSONObject@0000000001");
      jSONObject1.getLong("wheel.json.JSONObject@0000000001");
      double double0 = jSONObject0.getDouble("wheel.json.JSONObject@0000000001");
      assertEquals(1287.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.append("java.lang.Long@00000000060", "java.lang.Long@00000000060");
      jSONObject1.append("java.lang.Long@00000000060", jSONObject0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      String string0 = "{p'QuF:dQEg0]";
      JSONTokener jSONTokener0 = new JSONTokener("{p'QuF:dQEg0]");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 13 of {p'QuF:dQEg0]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8764904395512632
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.append("isappend", object0);
      JSONObject jSONObject1 = jSONObject0.put(": ", (Object) ": ");
      jSONObject0.toString();
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000004\":\"java.lang.String@0000000004\",\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}");
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4715093613566137
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wheel~son.JSON%xception";
      jSONObject0.accumulate("wheel~son.JSON%xception", jSONObject0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("wheel~son.JSON%xception");
      try { 
        jSONObject1.append("wheel~son.JSON%xception", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[wheel~son.JSON%xception] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.46769983754709
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("is", object0);
      jSONObject0.put("0.0", 2665L);
      boolean boolean0 = jSONObject1.isNull("is");
      assertEquals(2, jSONObject1.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.2060298199669144
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1098, false);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.accumulate("false", jSONArray1);
      jSONObject0.length();
      Long long0 = new Long(2);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray1, 2, 1098);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "{T!3$*qgQxGjz&";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{T!3$*qgQxGjz&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 14 of {T!3$*qgQxGjz&
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("");
      assertNotSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6347831533733688
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Double double0 = new Double(175.814564878617);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Double@0000000001";
      stringArray0[1] = "java.lang.Double@0000000001";
      stringArray0[2] = "java.lang.Double@0000000001";
      stringArray0[3] = "java.lang.Double@0000000001";
      JSONObject jSONObject0 = new JSONObject("java.lang.Double@0000000001", stringArray0);
      jSONObject0.put("java.lang.Double@0000000001", (-1378L));
      int int0 = jSONObject0.optInt("java.lang.Double@0000000001");
      assertEquals((-1378), int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4329067362478525
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1909.8196557191336));
      Float float0 = new Float(1490.79329622);
      Float.sum((-3551.7F), 0.0F);
      JSONObject.numberToString(float0);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000002", 10);
      long long0 = jSONObject1.optLong("java.lang.Float@0000000002");
      assertEquals(10L, long0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wheel~son.JSON%xception";
      JSONObject jSONObject1 = jSONObject0.append("wheel~son.JSON%xception", "wheel~son.JSON%xception");
      jSONObject1.accumulate("wheel~son.JSON%xception", jSONObject0);
      try { 
        jSONObject1.getJSONObject("wheel~son.JSON%xception");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel~son.JSON%xception\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "A JSONArray text must start with '['");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("A JSONArray text must start with '['", stringArray0);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("p:%OS+I<");
      try { 
        jSONObject0.put((String) null, (-5212));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1445934548935424
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Object object0 = new Object();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      int int0 = jSONObject0.optInt("{}", 0);
      assertEquals(0, int0);
      
      String string1 = jSONObject0.toString((-108916131), 0);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = new Boolean("{}");
      String string2 = JSONObject.doubleToString((-108916131));
      assertEquals("-1.08916131E8", string2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.4999138335216076
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("] not found.", 0.0);
      jSONObject1.names();
      int int0 = jSONObject1.getInt("] not found.");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.524393187923209
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject.quote("wheel.json.JSONTokener");
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONObject jSONObject1 = jSONObject0.putOpt("Ur8Mi{", "wheel.json.JSONTokener");
      jSONObject1.optBoolean("Ur8Mi{", true);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      double double0 = new Double(0.0);
      jSONObject1.optString("Ur8Mi{", "\"wheel.json.JSONTokener\"");
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.777881086074754
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Double double0 = Double.valueOf((-1.0));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "false";
      stringArray0[1] = "getformat";
      stringArray0[2] = "gettoString";
      stringArray0[3] = "@d;";
      Double.sum(1.0, 0.0);
      Double.min((-1453.0), 1008.719);
      stringArray0[4] = ",\n";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.put("tri", 1008.719);
      JSONObject jSONObject1 = jSONObject0.put("false", 0L);
      jSONObject1.toString(54);
      jSONObject0.optDouble("tri");
      try { 
        jSONObject0.get("re");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"re\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gethashCode", (-1443));
      double double0 = jSONObject0.optDouble("gethashCode", 0.0);
      assertEquals((-1443.0), double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5555002233721045
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject.getNames((Object) ">zEV3j:YcdY`Nfj");
      String string0 = "{XY[15vjDt\"XXN=m";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{XY[15vjDt\"XXN=m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {XY[15vjDt\"XXN=m
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      long long0 = jSONObject0.optLong("aVT?}Lv`", (-2717L));
      assertEquals((-2717L), long0);
      
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
      
      double double0 = jSONObject0.optDouble("[]", (double) (-2717L));
      assertEquals(2, jSONObject0.length());
      assertEquals((-2717.0), double0, 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6830462864787377
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(":IE2#!3<}o,", (-12469270));
      jSONObject0.optLong(":IE2#!3<}o,");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3284824100475263
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("is", jSONObject1);
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(88, (double) 88);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.optJSONObject("is");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      hashMap0.put((JSONObject) null, (JSONObject) null);
      JSONObject.valueToString(hashMap0);
      hashMap0.put((JSONObject) null, (JSONObject) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gethashCode", (-37L));
      long long0 = jSONObject0.getLong("gethashCode");
      assertEquals((-37L), long0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.7539479937314992
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Null key.");
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.putOpt("Null key.", boolean0);
      try { 
        jSONObject1.append("Null key.", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Null key.] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("T>fw&=o!ywTIjatu;_", 2025.96534707);
      Object object0 = jSONObject0.opt("T>fw&=o!ywTIjatu;_");
      assertEquals(2025.96534707, object0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9186921450736087
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(438L);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      hashMap0.getOrDefault(jSONObject0, long0);
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject(object0);
      jSONObject1.toString();
      jSONObject1.optInt("yz] AlHkmj.Jd7", 0);
      Long long1 = new Long(438L);
      hashMap0.put((Integer) null, long1);
      Float float0 = new Float((double) 438L);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.put("yz] AlHkmj.Jd7", (Object) hashMap0);
      jSONObject2.putOpt("nC@Im{vxFCAfRLzA", long0);
      Object object2 = new Object();
      Short short0 = new Short((short) (-764));
      JSONObject.getNames((Object) short0);
      // Undeclared exception!
      try { 
        jSONObject2.toString((-1703), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0126200936538066
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("9Iiej~%MFE$", jSONArray0);
      try { 
        jSONObject1.getLong("9Iiej~%MFE$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9Iiej~%MFE$\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1780670554070274
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Long long0 = new Long(350L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("\b", false);
      jSONObject1.isNull("\b");
      jSONObject0.optJSONArray("va");
      jSONObject0.optBoolean((String) null);
      jSONObject0.optString((String) null, (String) null);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gethashCode", (-37L));
      boolean boolean0 = new Boolean("gethashCode");
      JSONObject jSONObject1 = jSONObject0.accumulate("gethashCode", "gethashCode");
      jSONObject1.getJSONArray("gethashCode");
      Iterator iterator0 = jSONObject1.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, "\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.7494502426070615
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "");
      Float float0 = new Float((-1.2130676976564225));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("isN", (-1.0));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("] is not a Boolean.", "] is not a Boolean.");
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a Boolean.", object0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      Object object0 = jSONObject0.opt("getintValue");
      assertNull(object0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      double double0 = jSONObject0.optDouble("wheel.json.JSONTokener", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.353363451324745
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("LVvJbe91d@V3U5'", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.2659752559494484
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("ql2", hashMap0);
      HashMap<JSONObject, Double> hashMap2 = new HashMap<JSONObject, Double>();
      jSONObject1.toString((-2392), (-1605));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 10, 69);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      String string1 = JSONObject.valueToString(hashMap0, 0, 0);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.2708645068777
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.clear();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      jSONObject0.toString(2636, 2636);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(16, (double) 16);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(17, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~3a7=+51O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~3a7=+51O
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.accumulate("Cu?\"", jSONObject0);
      try { 
        jSONObject2.getJSONArray("Cu?\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Cu?\\\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.9853278202731631
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";H\"?k");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Dyf%<o`5Ua+", "Dyf%<o`5Ua+");
      jSONObject1.put("Dyf%<o`5Ua+", (-1L));
      Float float0 = new Float((double) (-1L));
      String string0 = jSONObject0.optString("Dyf%<o`5Ua+");
      assertNotNull(string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.9549838665621304
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\b", true);
      JSONObject jSONObject2 = jSONObject1.put("\b", true);
      jSONObject2.put("MT6f,3|3Ffx$8Y(;", 0.0);
      double double0 = jSONObject0.getDouble("MT6f,3|3Ffx$8Y(;");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.960841804955975
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isremove", (-306));
      double double0 = jSONObject0.getDouble("isremove");
      assertEquals((-306.0), double0, 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.4999138335216076
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("w9'U-:T#@-q", 3601.306839);
      jSONObject0.names();
      String string0 = jSONObject1.getString("w9'U-:T#@-q");
      assertNotNull(string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.putOpt("is", jSONObject1);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject2.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.2448999724663743
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("VLCH_", true);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Object object0 = jSONObject0.get("VLCH_");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.6447011798877047
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.9891373440826869
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject.doubleToString((-10.77123095888037));
      JSONObject jSONObject0 = new JSONObject((Object) "-10.77123095888037");
      jSONObject0.put("-10.77123095888037", (-10.77123095888037));
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.243385473982151
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-29L));
      hashMap0.getOrDefault((Object) null, long0);
      Integer integer0 = new Integer((-1889));
      Long long1 = new Long(1607L);
      Long.max((-1889), 1607L);
      hashMap0.put(integer0, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      double double0 = 0.0;
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.put(">)uo=)LH", (Object) float0);
      jSONObject1.putOpt(">)uo=)LH", float0);
      Object object0 = JSONObject.NULL;
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      try { 
        jSONObject1.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble(" at character ", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = jSONObject1.toString();
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000003\":\"java.lang.Class@0000000004\"}");
      String string1 = JSONObject.quote("{\"java.lang.String@0000000003\":\"java.lang.Class@0000000004\"}");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "{rB;";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{rB;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {rB;
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getoptJSONArray", true);
      boolean boolean0 = jSONObject0.getBoolean("getoptJSONArray");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.275544458504218
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-2354), 55);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 887, 32);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.3350026060706126
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("W,6\u0003~E~3At{<fT", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 0, 0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.2841657234944717
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "{}";
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      try { 
        jSONObject1.getInt("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", false);
      boolean boolean0 = jSONObject0.getBoolean("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("3", 0L);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "wheel.~son.JSON%xception";
      JSONObject jSONObject1 = jSONObject0.append("wheel.~son.JSON%xception", "wheel.~son.JSON%xception");
      try { 
        jSONObject1.getJSONObject("wheel.~son.JSON%xception");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.~son.JSON%xception\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-1298), 1257);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\b", false);
      boolean boolean0 = jSONObject1.isNull("\b");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.7242986702781118
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("getformat", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.3350026060706126
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("\b", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.1983857508370273
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "EJN2G/,+j3Q<WIU(W");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject.testValidity("istoString");
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A JSONObject text must begin with '{'", (Object) null);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.948720592834763
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\r", (-28L));
      Object object0 = jSONObject1.remove("\r");
      assertEquals((-28L), object0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("gVj ONcs2", 320.05102);
      assertEquals(320.05102, double0, 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("WH<kW.Y{~Mduf_Bjn");
      assertNull(object0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("toJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.5729899170928663
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("D", 0L);
      jSONObject1.optInt("D", (-1));
      boolean boolean0 = jSONObject0.isNull("D");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.3916673555884362
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "EJN2G/,+j3Q<WIU(W");
      boolean boolean0 = jSONObject0.optBoolean("EJN2G/,+j3Q<WIU(W");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.7526708545233256
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.append("", "");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gethashCode", (-366));
      assertEquals(1, jSONObject0.length());
      
      int int0 = jSONObject0.getInt("gethashCode");
      assertEquals((-366), int0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Float float0 = new Float((-1402.8F));
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("wheel.~son.JSON%xception", "wheel.~son.JSON%xception");
      int int0 = jSONObject0.optInt("wheel.~son.JSON%xception");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      try { 
        jSONObject0.getInt("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.quote("i0Q\"5)yvPI");
      assertEquals("\"i0Q\\\"5)yvPI\"", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.027242060013438
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt(">", 93);
      assertEquals(93, int0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.5371163891011075
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject(object0);
      double double0 = jSONObject1.optDouble("QxNO#8n#JK 2c[jRubJ", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      jSONObject1.toString();
      int int0 = jSONObject1.optInt("nC@Im{vxFCAfRLzA", 0);
      assertEquals(0, int0);
      
      Object object1 = JSONObject.NULL;
      Object object2 = new Object();
      jSONObject1.has("{\"java.lang.String@0000000003\":\"java.lang.Class@0000000004\"}");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("] is not a JSONArray.", (-2605));
      assertEquals((-2605), int0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.2752115366399062
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString();
      Object object1 = JSONObject.NULL;
      jSONObject0.put("yz] AlHkmj.Jd7", (Object) hashMap0);
      Object object2 = new Object();
      Short short0 = new Short((short) (-764));
      JSONObject.getNames((Object) short0);
      jSONObject0.has("yz] AlHkmj.Jd7");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("I");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Object object0 = new Object();
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (double) 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.1904885611243943
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString((-36872586), 33);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.6100777751436999
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.048844359649284
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.2150743762213048
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = JSONObject.quote("VSgHYZ,J,'");
      assertEquals("\"VSgHYZ,J,'\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "VSgHYZ,J,'");
      jSONObject0.toString(8, 8);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.2001248812718097
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.valueToString(jSONObject1, (-70125688), 4);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.27760102290036
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.toString(1201, 1201);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(".", true);
      try { 
        jSONObject0.getLong(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = JSONObject.valueToString("isreplaceFirst");
      assertNotNull(string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(")XDShi./");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of )XDShi./
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("wQ^zK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wQ^zK
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.8624789868050988
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Null key.");
      try { 
        jSONObject0.get("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = JSONObject.doubleToString(450.53119835);
      assertEquals("450.53119835", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("/A?*m[`m7,", (-8L));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("A JSONArray text must start with '['", 1L);
      assertEquals(1L, long0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = JSONObject.quote("/#+p1h+F");
      assertEquals("\"/#+p1h+F\"", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      long long0 = jSONObject0.optLong("S$Cob&P");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("8_D>suxp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8_D>suxp\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt("3?EKc_emZ>@", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = JSONObject.quote("\b");
      assertEquals("\"\\b\"", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = JSONObject.quote("EJN2G/,+j3Q<WIU(W");
      assertEquals("\"EJN2G/,+j3Q<WIU(W\"", string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Short short0 = new Short((short) (-548));
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Byte byte0 = new Byte((byte)123);
      String string0 = JSONObject.valueToString(byte0, (byte)123, (byte)123);
      assertNotNull(string0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = JSONObject.quote("Unclosed comment");
      assertEquals("\"Unclosed comment\"", string0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gethashCode", (-37L));
      try { 
        jSONObject1.getBoolean("gethashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gethashCode\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("EJN2G/,+j3Q<WIU(W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"EJN2G/,+j3Q<WIU(W\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("k0{2,:];2", "k0{2,:];2");
      try { 
        jSONObject1.getDouble("k0{2,:];2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"k0{2,:];2\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "sN2zDG[rg");
      try { 
        jSONObject0.getJSONArray("sN2zDG[rg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sN2zDG[rg\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.680421054462574
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("getaccumulate", "gettoJSONArray");
      assertEquals("gettoJSONArray", string0);
      
      boolean boolean0 = jSONObject0.optBoolean("Unterminated string");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=1.5301062555592586
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject.getNames((Object) null);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      jSONObject0.keys();
      jSONObject0.optString("", "");
      String string0 = JSONObject.quote("wheel.json.JSONArray");
      assertEquals("\"wheel.json.JSONArray\"", string0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-2348), (-2348));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("isrotateRight");
      assertEquals("", string0);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("SEXK3_cJW!):tDC#");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 170
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("getsubList");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 171
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 172
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }
}
