/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 06:12:33 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3671455175374345
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "{/";
          JSONObject jSONObject0 = null;
          try {
            jSONObject0 = new JSONObject("{/");
            fail("Expecting exception: StackOverflowError");
          
          } catch(StackOverflowError e) {
             //
             // no message in exception (getMessage() returned null)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1295861569909276
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("ke", (-1090L));
      jSONObject0.toString(8192);
      JSONObject jSONObject1 = jSONObject0.putOpt("quo", (Object) null);
      JSONObject jSONObject2 = jSONObject1.put("ke", (long) 8192);
      jSONObject1.optLong("quo");
      jSONObject1.optInt("ke");
      JSONObject.getNames((Object) "{\"java.lang.String@0000000002\": java.lang.Long@0000000003}");
      JSONObject.valueToString("quo");
      Integer.compare(34, 89);
      Integer.max(106, (-2690));
      Integer.toUnsignedString(89);
      jSONObject0.putOpt("quo", "{\"java.lang.String@0000000002\": java.lang.Long@0000000003}");
      jSONObject2.put("\"java.lang.String@0000000006\"", (Collection) null);
      Iterator iterator0 = jSONObject2.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2084184190550267
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "getformat";
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      hashMap0.put((Float) null, (Float) null);
      jSONObject0.put("getformat", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(2, 106);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.718521771518364
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float(1.0F);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      Double.isFinite(1.0F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("Z p7esMmuL", (Collection) linkedList0);
      String string0 = jSONObject0.toString(1654, 3270);
      jSONObject1.optJSONArray((String) null);
      JSONObject jSONObject2 = jSONObject1.put("null", (Object) null);
      // Undeclared exception!
      jSONObject2.getString(string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("O^RT", false);
      boolean boolean0 = jSONObject0.getBoolean("O^RT");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.269342386849719
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 3077, 3077);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0717618458621265
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) " O$'$h<,");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("}KWx}[G[8;R", object0);
      boolean boolean0 = jSONObject1.isNull("}KWx}[G[8;R");
      assertEquals(4, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("{'Bd)lIU</RXS#9");
      assertEquals("\"{'Bd)lIU<\\/RXS#9\"", string0);
      
      double double0 = jSONObject0.optDouble("{'Bd)lIU</RXS#9");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3838452788651034
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("]<G'");
      Double.isFinite(1127.20333);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(Double.NaN);
      linkedList0.add(double0);
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.String@0000000002\"", (Collection) linkedList0);
      try { 
        jSONObject1.toString(128, (-1222));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.756037857890329
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "vMV'rTL)DO");
      jSONObject1.putOpt("vMV'rTL)DO", jSONObject0);
      jSONObject1.getJSONObject("vMV'rTL)DO");
      assertEquals(4, jSONObject1.length());
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.087698781999318
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", (Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject1.putOpt("Unterminated string", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9429406655693093
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(0);
      jSONObject0.put("&SrBrb%-?X$|?}_iCV", (Object) integer0);
      jSONObject0.getDouble("&SrBrb%-?X$|?}_iCV");
      jSONObject0.names();
      try { 
        jSONObject0.getJSONObject("A JSONObject text must end with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONObject text must end with '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("is", (Collection) null);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("JSON does not allow non-finite numbers.", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.append("JSON does not allow non-finite numbers.", linkedList0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      int int0 = jSONObject0.optInt("gettoString", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8518731332834875
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "istoLowerCase";
      JSONObject jSONObject0 = new JSONObject((Object) "istoLowerCase");
      // Undeclared exception!
      jSONObject0.toString(2929);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2732409507095364
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optDouble("~S#%Wi-qzi*i0:,");
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(" O$'$h<,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of  O$'$h<,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8825396854885377
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(65, (Object) null);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[65] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.698164295726462
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[5];
      stringArray0[1] = "gettoLowerCase";
      stringArray0[2] = ".YeJ";
      stringArray0[3] = "V";
      stringArray0[4] = "gettoLowerCase";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("V", 904.9731631);
      jSONObject0.accumulate("gettoLowerCase", stringArray0[0]);
      jSONObject0.names();
      jSONObject0.optString("bg<Rmo[E", (String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5913659118565153
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = 2757.1123238216246;
      Double double1 = new Double(2757.1123238216246);
      Double.isFinite((-458.31328455));
      Double.min(2401.937477945, (-4827.51));
      String[] stringArray0 = JSONObject.getNames((Object) double1);
      JSONObject jSONObject0 = new JSONObject(double1, stringArray0);
      String string0 = "wheel.json.JSONArray";
      jSONObject0.optInt("wheel.json.JSONArray");
      String string1 = "k!$!\\[Vkso4z !e,~";
      String string2 = "@3y\"?S4hqJOb66";
      try { 
        jSONObject0.get("@3y\"?S4hqJOb66");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@3y\\\"?S4hqJOb66\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3342298951481277
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.182382169512275
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject2 = jSONObject1.accumulate("BMV)rT~KDO", boolean0);
      String string0 = JSONObject.quote("getoptString");
      assertEquals("\"getoptString\"", string0);
      
      boolean boolean1 = jSONObject2.optBoolean("BMV)rT~KDO");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.accumulate("lNE>", boolean0);
      boolean boolean1 = jSONObject1.getBoolean("lNE>");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((Object) null, jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("islength");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of islength
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6855983590263937
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getdecode", (-333L));
      jSONObject1.optLong("getdecode");
      try { 
        jSONObject1.append("getdecode", "getdecode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[getdecode] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6379940485425775
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      HashMap hashMap1 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject.getNames((Object) "}*:QYMcC");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{r{|%)[i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {r{|%)[i
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7862943611198907
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.pollFirst();
      linkedList0.add((Byte) null);
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[null]", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.108335652604384
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.accumulate("java.lang.Float@0000000002.", "java.lang.Float@0000000002.");
      try { 
        jSONObject0.getDouble("java.lang.Float@0000000002.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@0000000002.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6439304584881023
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(1119);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4100004751111084
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(3524L);
      JSONObject jSONObject1 = jSONObject0.accumulate("\f", long0);
      jSONObject1.getDouble("\f");
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8937277100473913
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (-3305.291993545051));
      double double0 = jSONObject1.getDouble("] is not a JSONObject.");
      assertEquals((-3305.291993545051), double0, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5646828511367463
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("for", 0L);
      jSONObject0.getLong("for");
      JSONObject jSONObject1 = jSONObject0.accumulate("YY[PihZv=T", "YY[PihZv=T");
      boolean boolean0 = jSONObject0.isNull("YY[PihZv=T");
      assertFalse(boolean0);
      
      int int0 = jSONObject1.optInt("YY[PihZv=T");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.489503311537643
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "null";
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      jSONObject0.names();
      jSONObject0.put("null", 0L);
      jSONObject0.optDouble("null");
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.doubleToString((-155.4819498519735));
      int int0 = (-612);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "-155.4819498519735", 2379, (-612));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7455832943344118
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "le";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      int int0 = jSONObject0.optInt("Bad value from toJSONString: ", 84);
      assertEquals(84, int0);
      
      String string0 = jSONObject0.optString(",:]}/\"[{;=#", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\u";
      jSONObject0.optDouble(string0, (-2299.00798));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.7494502426070615
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      JSONObject jSONObject1 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(7);
      Float float0 = new Float((float) 7);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 8192, 8192);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      String string0 = JSONObject.valueToString((Object) null, 2147483645, 2147483645);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0443466085248463
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      Long long0 = new Long(0L);
      Object object0 = new Object();
      JSONObject jSONObject2 = new JSONObject(object0);
      int int0 = jSONObject1.getInt("");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", 161L);
      jSONObject0.optDouble("wheel.json.JSONObject", 0.0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject0, stringArray0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2277546949588793
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.putOpt("WA^utahNMh+-\"", jSONObject0);
      jSONObject1.put("getvalueOf", (Collection) linkedList0);
      JSONObject.doubleToString((-1264));
      jSONObject2.optJSONObject("WA^utahNMh+-\"");
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.0957074289137867
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("WA^utahNMh+-\"", jSONObject0);
      JSONObject.doubleToString((-1264));
      jSONObject1.optJSONObject("WA^utahNMh+-\"");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("getnames", 332.0);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.9109045159114575
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-949));
      Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Float float0 = new Float(0.0F);
      JSONObject.numberToString(integer0);
      Double.isFinite((-391.292441142));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("U3[:#OsdFRF^", (Collection) linkedList2);
      jSONObject1.toString();
      jSONObject1.optDouble("U3[:#OsdFRF^");
      JSONObject jSONObject2 = new JSONObject(integer0);
      jSONObject2.toString(128, 128);
      jSONObject0.put("{\"java.lang.String@0000000011\": \"java.lang.Class@0000000012\"}", (long) 128);
      jSONObject1.optJSONArray("U3[:#OsdFRF^");
      try { 
        jSONObject0.getString("java.lang.Long@0000000008.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@0000000008.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.282325506963904
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1521L);
      JSONObject jSONObject2 = jSONObject1.append("=e", "=e");
      jSONObject0.optLong("");
      jSONObject0.accumulate("] is not a Boolean.", "");
      jSONObject2.optJSONArray("=e");
      jSONObject1.getString("");
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(3, jSONArray0.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.put((String) null, 2481);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1222), (-1222));
      JSONObject jSONObject1 = new JSONObject("{}");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.8751832500087795
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      jSONObject1.toString((-1222), (-1222));
      assertEquals(2, jSONObject1.length());
      
      JSONObject jSONObject2 = new JSONObject("{\n\"java.lang.String@0000000005\": \"java.lang.Class@0000000006\",\n\"java.lang.String@0000000003\": java.lang.Boolean@0000000004\n}");
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.9587684328137056
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("BMV)rTuKDO", (Object) null);
      assertEquals(0, jSONObject1.length());
      
      JSONObject jSONObject2 = new JSONObject((Object) "BMV)rTuKDO");
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.7906679823987566
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("=e", "=e");
      jSONObject0.accumulate("] is not a Boolean.", "");
      jSONObject0.isNull("ues");
      jSONObject0.has((String) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optString("=e", "");
      JSONObject jSONObject2 = jSONObject1.optJSONObject("ues");
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      int int0 = jSONObject0.optInt("gettoString", 13);
      assertEquals(13, int0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1071024035889305
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(linkedList0, 1831, 1831);
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6807621569506828
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      JSONObject.valueToString(jSONObject1);
      JSONObject jSONObject2 = jSONObject0.put("", (Map) hashMap0);
      jSONObject1.optString(">:ujO,C0_Ovjs_");
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.optString("getlongValue");
      jSONObject2.opt((String) null);
      jSONObject3.names();
      JSONObject jSONObject4 = jSONObject1.put("com", true);
      jSONObject1.keys();
      jSONObject4.optLong("Y\"NsFqS");
      JSONObject jSONObject5 = jSONObject1.put("islongValue", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject5);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("C;*Hv[/v6o9", (Object) "C;*Hv[/v6o9");
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject1.append("C;*Hv[/v6o9", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[C;*Hv[/v6o9] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.7562083065323075
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("isoptString", 18.74484934);
      jSONObject1.getInt("isoptString");
      JSONArray jSONArray0 = jSONObject0.names();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject1.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("2G:", (-1.0));
      int int0 = jSONObject0.getInt("2G:");
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.247347318198131
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("isset", "isset");
      jSONObject0.isNull("isset");
      try { 
        jSONObject0.getInt("isset");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isset\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a number.", true);
      Object object0 = jSONObject0.get("] is not a number.");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-3670L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.7988457068767891
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble(",\n");
      try { 
        jSONObject0.put(",\n", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.094592927355563
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer integer0 = new Integer(2126);
      Integer.min(2126, (-3256));
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      jSONObject1.optBoolean("null", false);
      Float float1 = new Float((float) (-3256));
      JSONObject.numberToString(float1);
      Double.isFinite(4730.448507104866);
      Float.isFinite((-3256));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList0);
      jSONObject0.toString();
      jSONObject0.optDouble("jXosTV7MwF");
      String string0 = jSONObject2.toString((-1211), 128);
      jSONObject2.put("getfloatToRawIntBits", (long) 128);
      jSONObject2.optJSONArray("{\"java.lang.String@0000000008\":wheel.json.JSONArray@0000000012,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      jSONObject1.opt("getfloatToRawIntBits");
      String string1 = JSONObject.doubleToString(Double.NaN);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.toArray();
      JSONObject jSONObject1 = jSONObject0.put("Z`OyA", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("Z`OyA");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("JSONArray initial value should be a string or collection or array.", "JSONArray initial value should be a string or collection or array.");
      jSONObject1.getJSONArray("JSONArray initial value should be a string or collection or array.");
      String[] stringArray0 = new String[8];
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject0, stringArray0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.894674138136133
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "BMV)rT~K\\DO";
      JSONObject jSONObject1 = jSONObject0.accumulate("BMV)rT~KDO", "BMV)rT~KDO");
      try { 
        jSONObject1.getJSONArray("BMV)rT~KDO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"BMV)rT~KDO\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.136551126696654
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("toS", "toS");
      jSONObject1.accumulate("toS", jSONObject0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("des", jSONArray0);
      jSONObject1.accumulate("des", jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONObject jSONObject2 = jSONObject0.accumulate("des", "des");
      boolean boolean0 = jSONObject2.isNull("des");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("YY[PihZv=T", "YY[PihZv=T");
      jSONObject0.accumulate("YY[PihZv=T", "YY[PihZv=T");
      boolean boolean0 = jSONObject0.isNull("YY[PihZv=T");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("toU", true);
      assertTrue(boolean0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = JSONObject.quote("clW`!;/R]{VM");
      assertEquals("\"clW`!;/R]{VM\"", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("i<*bX>p", false);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.586577333232116
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("toS", "toS");
      jSONObject1.isNull("toS");
      String string0 = jSONObject1.getString("toS");
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1867915479384763
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.0300388177574233
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("isset", "isset");
      try { 
        jSONObject0.getBoolean("isset");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isset\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("?", (Map) null);
      try { 
        jSONObject0.getBoolean("?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("to", "to");
      boolean boolean0 = jSONObject1.optBoolean("to");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Object object0 = hashMap0.clone();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(">:ujO,C0_Ovjs_", (Map) hashMap0);
      JSONObject.valueToString(object0);
      jSONObject0.optString(">:ujO,C0_Ovjs_");
      Object object1 = jSONObject0.opt("gettrom");
      assertNull(object1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.4428352147175594
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      jSONObject0.put("><ujO,C0_Ovjs_", (Map) hashMap0);
      String string0 = jSONObject0.optString("><ujO,C0_Ovjs_");
      assertNotNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 8, (-1222));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.33141971105748
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float float0 = new Float(457.14722F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString((-3508));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.007252797778643
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = JSONObject.quote(">:jO,C0_Ovjs_");
      assertEquals("\">:jO,C0_Ovjs_\"", string0);
      
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = JSONObject.valueToString(hashMap0, 1891, (-1454));
      assertEquals("{}", string1);
      
      String string2 = jSONObject0.toString(1650, (-2732));
      assertEquals("{}", string2);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("isset", "isset");
      try { 
        jSONObject1.getJSONObject("isset");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isset\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.524999402259769
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)0);
      JSONObject.getNames((Object) byte0);
      JSONObject jSONObject1 = jSONObject0.accumulate("d/es", "d/es");
      assertEquals(1, jSONObject1.length());
      
      jSONObject1.remove("d/es");
      boolean boolean0 = jSONObject0.isNull("d/es");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.9706758056211484
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.names();
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = jSONObject0.optString("(VS,E#'3Nv=R&+F]L`", "getsplit");
      assertEquals("getsplit", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.9948516297969727
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.2409715006087145
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(3, jSONArray1.length());
      
      jSONObject0.toString(9, 9);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      jSONObject0.put("Null key.", (Object) null);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("@a:p<(\"m<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@a:p<(\\\"m<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.380765195764333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.names();
      // Undeclared exception!
      jSONObject0.toString(3454, 3454);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.8170275250586072
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject.getNames((Object) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.valueToString(jSONObject0, 324, 324);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("wheel.json.JSONObject$Null", 1L);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 37, (-3613));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.2245362503568016
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("O/T", "O/T");
      jSONObject1.toString((-1222), (-1222));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.4726145613275863
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Short short0 = new Short((short)2);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.toString((int) (short)2);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(44);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null, (-1834L));
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("getputOpt", 0L);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt("Ug", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("48?;wS?TYtWhe3o)(ZU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"48?;wS?TYtWhe3o)(ZU\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.7846193848206715
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("n{6hNjqv:u~", 87);
      jSONObject1.optLong("n{6hNjqv:u~");
      jSONObject1.optDouble("n{6hNjqv:u~");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      assertFalse(stringWriter1.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.5262072573264045
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer integer0 = new Integer(61);
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("gethashCode", (Object) integer0);
      jSONObject1.getLong("gethashCode");
      assertEquals(6, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("6c0}3`yPtxk", "6c0}3`yPtxk");
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.getLong("6c0}3`yPtxk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6c0}3`yPtxk\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("] is not a JSONArray.", "] is not a JSONArray.");
      int int0 = jSONObject0.optInt("] is not a JSONArray.");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.619418366446825
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("Fu;M<8D'}U-ks", (-1362));
      assertEquals((-1362), int0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Double double0 = new Double((-1.0));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = JSONObject.quote("l#-6Wi#y|dU/$1.Ft_6");
      assertEquals("\"l#-6Wi#y|dU/$1.Ft_6\"", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Float float0 = new Float((-627.0F));
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.quote("zo\"J");
      assertEquals("\"zo\\\"J\"", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.885488118580586
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(3077);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Integer integer0 = new Integer(52);
      String string0 = JSONObject.valueToString(integer0, 52, 52);
      assertNotNull(string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("hDH(=gC0Y>#^1j6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"hDH(=gC0Y>#^1j6\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("m");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of m
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("lTSH+tJ p1R=OE,S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of lTSH+tJ p1R=OE,S
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("I$;Hw|6L(TZMQ");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = JSONObject.quote("BMV)rT~KDO");
      assertEquals("\"BMV)rT~KDO\"", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("}}Ff");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("true", 0.0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONArray0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("H*ZhE0!k*KP;6qE#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"H*ZhE0!k*KP;6qE#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("P)Goy9");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.59994360066745
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      try { 
        jSONObject0.getLong("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.9873982136479044
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "nhxag:_FqX9h&c");
      String string0 = jSONObject0.optString("nhxag:_FqX9h&c");
      assertEquals("", string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("Expected a ',' or ']'");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
