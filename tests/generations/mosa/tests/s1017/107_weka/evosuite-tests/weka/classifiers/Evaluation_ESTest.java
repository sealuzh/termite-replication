/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 17:05:36 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Properties;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CorrelationAttributeEval;
import weka.attributeSelection.OneRAttributeEval;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.evaluation.output.prediction.CSV;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.M5P;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.FarthestFirst;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.Loader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8548808044918041
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (-1296.9);
      doubleArray0[4] = (-1296.9);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (-1296.9);
      DenseInstance denseInstance0 = new DenseInstance((-1296.9), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      denseInstance0.toString();
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("ia:[|SfxU[xC653");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      capabilities0.disableAllAttributeDependencies();
      evaluation0.numInstances();
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.142131440768584
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = 4.9E-324;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = (double) (-2);
      doubleArray0[8] = (double) (-1);
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, 1.0E-75);
      double double0 = evaluation0.m_SumAbsErr;
      evaluation1.meanPriorAbsoluteError();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      try { 
        Evaluation.evaluateModel((Classifier) additiveRegression0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.AdditiveRegression:
         // 
         // -S
         // \tSpecify shrinkage rate. (default = 1.0, ie. no shrinkage)
         // 
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.trees.DecisionStump:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-10.0);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) (-2);
      doubleArray1[4] = (-1869.661528382388);
      doubleArray1[5] = (double) (-1);
      doubleArray1[6] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-1869.661528382388);
      doubleArray2[1] = (-10.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-10.0);
      doubleArray3[1] = 579.189120153576;
      doubleArray3[2] = (-10.0);
      doubleArray0[2] = doubleArray3;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      SMOreg sMOreg0 = new SMOreg();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.trueNegativeRate(2608);
      double double0 = evaluation0.m_MaxTarget;
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2653188729187956
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FarthestFirst farthestFirst0 = new FarthestFirst();
      Capabilities capabilities0 = farthestFirst0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("  [# kernels]");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      capabilities0.disableAllAttributeDependencies();
      evaluation0.relativeAbsoluteError();
      MockRandom mockRandom0 = new MockRandom(0);
      RandomTree randomTree0 = new RandomTree();
      try { 
        evaluation0.crossValidateModel((Classifier) randomTree0, instances1, 0, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0373415712095384
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.truePositiveRate(0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-2);
      evaluation1.KBMeanInformation();
      doubleArray0[6] = (-4482.66004347694);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) (-1);
      evaluation0.updateStatsForClassifier(doubleArray0, instance0);
      evaluation0.weightedMatthewsCorrelation();
      Double double0 = new Double(0.0);
      evaluation0.updatePriors(instance0);
      evaluation1.numTrueNegatives((-2));
      double double1 = evaluation0.errorRate();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation.getGlobalInfo(logitBoost0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("\nSynopsis for weka.classifiers.meta.LogitBoost:\n\nClass for performing additive logistic regression. \nThis class performs classification using a regression scheme as the base learner, and can handle multi-class problems.  For more information, see\n\nJ. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.\n\nCan do efficient internal cross-validation to determine appropriate number of iterations.");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\nSynopsis for weka.classifiers.meta.LogitBoost:\n\nClass for performing additive logistic regression. \nThis class performs classification using a regression scheme as the base learner, and can handle multi-class problems.  For more information, see\n\nJ. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.\n\nCan do efficient internal cross-validation to determine appropriate number of iterations.");
      try { 
        Evaluation.handleCostOption("\nSynopsis for weka.classifiers.meta.LogitBoost:\n\nClass for performing additive logistic regression. \nThis class performs classification using a regression scheme as the base learner, and can handle multi-class problems.  For more information, see\n\nJ. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.\n\nCan do efficient internal cross-validation to determine appropriate number of iterations.", (-7));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Synopsis\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1840562714690361
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      capabilities0.disableAllAttributeDependencies();
      evaluation0.relativeAbsoluteError();
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.639027734796485
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.truePositiveRate(0);
      double double1 = evaluation1.m_MinTarget;
      MockRandom mockRandom0 = new MockRandom(0L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.sizeOfPredictedRegions();
      double double2 = evaluation0.falsePositiveRate(0);
      assertEquals(double2, double0, 0.01);
      
      evaluation0.numInstances();
      double double3 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.areaUnderROC(3);
      assertNotEquals(double4, double3, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6761536709435028
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 0;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.truePositiveRate(0);
      double double0 = evaluation1.m_MinTarget;
      MockRandom mockRandom0 = new MockRandom(0L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation1.sizeOfPredictedRegions();
      evaluation1.falsePositiveRate((-2));
      evaluation1.numInstances();
      evaluation0.KBRelativeInformation();
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4972677595628415
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      capabilities0.disableAllAttributeDependencies();
      double double1 = Evaluation.MIN_SF_PROB;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_Unclassified = 183.040154144866;
      evaluation1.correlationCoefficient();
      assertEquals(-0.0, evaluation1.SFMeanEntropyGain(), 0.01);
      
      instances0.stream();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.setPriors(instances0);
      assertEquals(0.0, evaluation2.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.142131440768584
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1650.71246931));
      double double0 = evaluation0.m_SumAbsErr;
      evaluation0.meanPriorAbsoluteError();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      try { 
        Evaluation.evaluateModel((Classifier) additiveRegression0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.AdditiveRegression:
         // 
         // -S
         // \tSpecify shrinkage rate. (default = 1.0, ie. no shrinkage)
         // 
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.trees.DecisionStump:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1777486156207164
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(3012);
      // Undeclared exception!
      try { 
        evaluation0.unweightedMicroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5898403588435481
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (-1296.9);
      doubleArray0[4] = (-1296.9);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (-1296.9);
      DenseInstance denseInstance0 = new DenseInstance((-1296.9), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce((-43.0), (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      double double1 = evaluation0.m_MinTarget;
      double double2 = evaluation0.m_MaxTarget;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -500
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      String[] stringArray0 = new String[0];
      testInstances0.setOptions(stringArray0);
      LWL lWL0 = new LWL();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      Double double1 = new Double(1);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation0.updatePriors(instance0);
      double double2 = evaluation1.numTrueNegatives(0);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance((-1), (double[]) null);
      M5P m5P0 = new M5P();
      try { 
        evaluation0.updatePriors(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3815747489354218
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      capabilities0.disableAllAttributeDependencies();
      evaluation0.relativeAbsoluteError();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFMeanEntropyGain();
      // Undeclared exception!
      try { 
        evaluation0.weightedTruePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3460294140418307
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("ia:[|SfxU[xC653");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.correlationCoefficient();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      // Undeclared exception!
      try { 
        evaluation0.matthewsCorrelationCoefficient((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.numFalsePositives((-537));
      try { 
        evaluation0.toClassDetailsString("#&:jd+Y5w_el");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.468423205018815
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      capabilities0.disableAllAttributeDependencies();
      evaluation0.relativeAbsoluteError();
      evaluation0.correlationCoefficient();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(119);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3773419594692244
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      testInstances1.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      capabilities0.disableAllAttributeDependencies();
      evaluation0.relativeAbsoluteError();
      evaluation0.correlationCoefficient();
      // Undeclared exception!
      try { 
        evaluation0.trueNegativeRate((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.071743828954945
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      capabilities0.disableAllAttributeDependencies();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      textDirectoryLoader0.setRetrieval(2237);
      textDirectoryLoader0.listOptions();
      boolean boolean0 = evaluation0.equals(textDirectoryLoader0);
      boolean boolean1 = evaluation0.getDiscardPredictions();
      assertTrue(boolean1 == boolean0);
      
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) votedPerceptron0, instances0, objectArray0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8783578531833827
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      Instances instances1 = testInstances0.generate();
      double double0 = evaluation0.m_SumAbsErr;
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances1);
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = Double.NaN;
      evaluation0.updateStatsForClassifier(doubleArray0, instance0);
      evaluation0.weightedMatthewsCorrelation();
      Double double1 = new Double(Double.NaN);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      LWL lWL0 = new LWL();
      try { 
        evaluation0.evaluateModelOnce((Classifier) lWL0, instance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.lazy.LWL", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation0.updateStatsForClassifier(doubleArray0, instance0);
      evaluation0.weightedMatthewsCorrelation();
      Double double0 = new Double((-2));
      int[] intArray0 = new int[3];
      intArray0[0] = 211;
      intArray0[1] = 4;
      intArray0[2] = (-1);
      BallNode.calcCentroidPivot(1776, 211, intArray0, instances0);
      try { 
        evaluation0.updateStatsForPredictor(74.3788, instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 74
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4909090909090909
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      evaluation0.updateStatsForClassifier(doubleArray0, instance0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      Double double1 = new Double(223.137);
      evaluation0.confusionMatrix();
      evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(cVParameterSelection0);
      evaluation1.equals(additiveRegression0);
      assertTrue(evaluation1.equals((Object)evaluation2));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.233369035454252
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      evaluation0.setPriors(instances0);
      evaluation0.weightedRecall();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      intArray0[3] = (-1);
      intArray0[4] = (-2);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0, intArray0, (-2));
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      String string0 = Evaluation.makeOptionString(votedPerceptron0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5198609958034552
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      capabilities0.disableAllAttributeDependencies();
      testInstances1.setRelation("toSource");
      evaluation0.relativeAbsoluteError();
      evaluation0.numFalseNegatives((-1));
      evaluation0.correlationCoefficient();
      evaluation0.setPriors(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8942254499643238
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation0.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DenseInstance denseInstance0 = new DenseInstance(2149);
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, denseInstance0, (-140.1514699));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5235917385818534
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.toString();
      evaluation0.weightedRecall();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.SFPriorEntropy();
      evaluation0.SFSchemeEntropy();
      evaluation0.weightedAreaUnderROC();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = 0.0;
      evaluation0.makeDistribution(0.3);
      SparseInstance sparseInstance0 = new SparseInstance(1687);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1263100866621598
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      capabilities0.disableAllAttributeDependencies();
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(1687);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      testInstances1.clone();
      evaluation0.m_SumKBInfo = 1.050000000745058;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.710027779724208
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(1687);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1687;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1846726042887588
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.getStructure();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.numFalseNegatives((-1));
      evaluation0.addNumericTrainClass(0.0, (-1));
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CostMatrix costMatrix0 = new CostMatrix(0);
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "\"&qO.$0");
      assertNotNull(string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.595722115257705
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.toClassDetailsString("@relation");
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.2703860444355417
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.m_SumPriorEntropy = 4.0;
      evaluation0.falsePositiveRate((-595));
      evaluation0.SFPriorEntropy();
      evaluation0.SFSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-1794.82986122));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1794
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.0874784496791707
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = testInstances0.generate("@data");
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalString((-2));
      testInstances0.assign(testInstances1);
      Evaluation evaluation1 = new Evaluation(instances1);
      LWL lWL0 = new LWL();
      evaluation0.precision(0);
      // Undeclared exception!
      try { 
        evaluation1.recall(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5901377123969231
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      capabilities0.disableAllAttributeDependencies();
      evaluation0.relativeAbsoluteError();
      evaluation0.correlationCoefficient();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(16);
      double double2 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("-5E7v4(%}X]X");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedFMeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double[] doubleArray0 = new double[8];
      doubleArray0[6] = (-677.8571394);
      doubleArray0[1] = (-3859.478625);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-3859.478625);
      doubleArray0[6] = (-677.8571394);
      doubleArray0[7] = (-3859.478625);
      evaluation0.updateMargins(doubleArray0, 0, 1.0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.913737189449991
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumErr;
      testInstances0.getOptions();
      // Undeclared exception!
      try { 
        evaluation0.falsePositiveRate((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5898403588435481
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.getStructure();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("i[|SfxU[xC653");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.relativeAbsoluteError();
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("setOptions");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderPRC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.7946065751184126
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      J48 j48_0 = new J48();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.kappa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4947368421052632
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("setOptions");
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      double double1 = evaluation0.m_SumPriorEntropy;
      OneR oneR0 = new OneR();
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = testInstances0.generate(".bsi");
      Evaluation evaluation1 = new Evaluation(instances1);
      try { 
        evaluation1.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.181960885786255
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.relativeAbsoluteError();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalseNegatives(1);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.getStructure();
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.relativeAbsoluteError();
      double double1 = evaluation0.numFalseNegatives((-1));
      LWL lWL0 = new LWL();
      double double2 = evaluation0.falseNegativeRate(5);
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.KBMeanInformation();
      assertNotEquals(double3, double2, 0.01);
      
      evaluation0.getClassPriors();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1840562714690361
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("i[|SfxU[xC653");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.errorRate();
      evaluation0.numFalseNegatives(9);
      evaluation0.addNumericTrainClass(0.0, 1383.118397656);
      // Undeclared exception!
      try { 
        evaluation0.confusionMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      testInstances0.setClassIndex((-3368));
      String[] stringArray0 = new String[0];
      testInstances0.setOptions(stringArray0);
      LWL lWL0 = new LWL();
      double double0 = evaluation1.falseNegativeRate(0);
      assertEquals(0.0, double0, 0.01);
      
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      String string0 = evaluation1.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("ia:[|SfxU[xC653");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.558645146455096
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation1.kappa();
      assertEquals(1.0, double1, 0.01);
      
      double double2 = evaluation0.weightedFalsePositiveRate();
      double double3 = evaluation1.weightedPrecision();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.097242790482881
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.truePositiveRate(0);
      evaluation0.toClassDetailsString("@data");
      evaluation0.setDiscardPredictions(false);
      evaluation0.relativeAbsoluteError();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ZeroR zeroR0 = new ZeroR();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) textDirectoryLoader0;
      objectArray0[1] = (Object) evaluation0;
      try { 
        evaluation0.evaluateModel((Classifier) zeroR0, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.converters.TextDirectoryLoader cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.4656601061190835
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      Capabilities capabilities0 = multiClassClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Instances instances2 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances2, (CostMatrix) null);
      evaluation1.areaUnderROC(2793);
      double double1 = evaluation0.numTruePositives(0);
      assertEquals(0.0, double1, 0.01);
      
      evaluation1.SFMeanPriorEntropy();
      assertEquals(Double.NaN, evaluation1.sizeOfPredictedRegions(), 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.sizeOfPredictedRegions();
      assertEquals(0.0, evaluation2.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      M5P m5P0 = new M5P();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      evaluation0.useNoPriors();
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedRecall();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel(".arff", instances0, 1060150154, testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .arff
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("setOptions");
      testInstances0.setNumRelationalString((-1));
      testInstances0.assign(testInstances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.5073381669387587
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MinTarget;
      testInstances0.generate();
      double double1 = evaluation0.m_SumAbsErr;
      String string0 = evaluation0.toClassDetailsString("@relation");
      assertEquals("@relation\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double2 = evaluation0.m_SumErr;
      double double3 = evaluation0.numInstances();
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.numTruePositives((-473));
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.getStructure();
      Instances instances0 = testInstances0.generate("G6");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      int[] intArray0 = new int[0];
      Instance instance0 = BallNode.calcCentroidPivot(intArray0, instances0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5901377123969231
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.getStructure();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("i[|SfxU[xC653");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.relativeAbsoluteError();
      evaluation0.numFalseNegatives(9);
      LWL lWL0 = new LWL();
      evaluation0.falseNegativeRate(4);
      // Undeclared exception!
      try { 
        evaluation0.numTrueNegatives((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5901377123969231
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      Instances instances1 = testInstances0.generate();
      double double0 = evaluation0.m_SumAbsErr;
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      evaluation0.updateStatsForClassifier(doubleArray0, instance0);
      evaluation0.weightedMatthewsCorrelation();
      Double double1 = new Double(Double.NaN);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(0, testInstances0.getNumString());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.708833534818804
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRevision();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Correct;
      evaluation0.rootRelativeSquaredError();
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.setPriors(instances0);
      String string0 = Evaluation.getGlobalInfo(classifier0);
      assertEquals("\nSynopsis for weka.classifiers.trees.DecisionStump:\n\nClass for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", string0);
      
      double double2 = evaluation0.numTrueNegatives(1);
      assertEquals(0.0, double2, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      M5P m5P0 = new M5P();
      MockRandom mockRandom0 = new MockRandom();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) m5P0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Correct;
      evaluation0.rootRelativeSquaredError();
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      assertEquals(Double.NaN, evaluation1.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation1.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalDate(9);
      double double0 = evaluation0.totalCost();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.2280673485460896
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      String[] stringArray0 = new String[0];
      testInstances0.setOptions(stringArray0);
      evaluation0.SFEntropyGain();
      evaluation0.errorRate();
      BayesNet bayesNet0 = new BayesNet();
      try { 
        evaluation0.evaluateModel((Classifier) bayesNet0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ZeroR zeroR0 = new ZeroR();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) zeroR0, instances0, objectArray0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMOreg sMOreg0 = new SMOreg();
      evaluation0.useNoPriors();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.setPriors(instances0);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-197112209));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.271989277029009
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation1.kappa();
      evaluation1.weightedFMeasure();
      String string0 = evaluation1.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalsePositives((-1));
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation2.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7057014379090862
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.truePositiveRate(0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_MinTarget;
      MockRandom mockRandom0 = new MockRandom((-1L));
      evaluation0.setPriors(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.682846483812294
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.m_Unclassified;
      evaluation1.relativeAbsoluteError();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.numFalseNegatives(10);
      Evaluation evaluation3 = new Evaluation(instances0);
      assertEquals(0.0, evaluation3.SFPriorEntropy(), 0.01);
      
      evaluation3.useNoPriors();
      evaluation3.toSummaryString("\tSet the attribute selection method to use. 1 = None, 2 = Greedy.\n\t(default 0 = M5' method)", true);
      assertEquals(0.0, evaluation3.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.3927695453306876
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.numInstances();
      evaluation0.confusionMatrix();
      evaluation0.weightedAreaUnderROC();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.SFMeanEntropyGain();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, (-2), (-3859.478625));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("q;`+69");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-3859.478625);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-2), (-677.8571394));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMOreg sMOreg0 = new SMOreg();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.falseNegativeRate(0);
      evaluation0.setPriors(instances0);
      assertEquals("Testdata", instances0.relationName());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setDebug(false);
      M5P m5P0 = new M5P();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Unclassified = 6293.550233029115;
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.relativeAbsoluteError();
      evaluation0.numFalseNegatives((-2065));
      evaluation0.toSummaryString(".arff", false);
      assertEquals(-0.0, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      ZeroR zeroR0 = new ZeroR();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.meanPriorAbsoluteError();
      double double2 = evaluation0.pctUnclassified();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedTruePositiveRate();
      M5P m5P0 = new M5P();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.useNoPriors();
      ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      evaluation0.setDiscardPredictions(true);
      evaluation0.relativeAbsoluteError();
      assertTrue(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.878675371892228
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.unclassified();
      evaluation0.numInstances();
      char[] charArray0 = new char[17];
      int int0 = 381;
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-317), charArray0, 381);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -11
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.9753765189753083
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      textDirectoryLoader0.listOptions();
      double double1 = evaluation0.unclassified();
      assertEquals(0.0, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation1.KBInformation();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.1815192735832012
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.m_SumAbsErr;
      evaluation0.confusionMatrix();
      double double2 = evaluation0.weightedAreaUnderROC();
      assertEquals(double2, double0, 0.01);
      
      double double3 = Evaluation.MIN_SF_PROB;
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.916824181746561
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      int[] intArray0 = new int[0];
      BallNode.calcCentroidPivot(3093, (-3946), intArray0, instances0);
      evaluation0.matthewsCorrelationCoefficient((-2));
      evaluation0.weightedTrueNegativeRate();
      // Undeclared exception!
      try { 
        evaluation0.recall((-3946));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3946
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.2337816342603753
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      OneRAttributeEval oneRAttributeEval0 = new OneRAttributeEval();
      Capabilities capabilities0 = oneRAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("@relation");
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.weightedTrueNegativeRate();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.SFMeanPriorEntropy();
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.878119976013433
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNumeric((-3));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      
      double double1 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.8725336946728466
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(1208);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1208
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.1395446868916514
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanEntropyGain();
      double double1 = evaluation2.weightedTruePositiveRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.4227264447094825
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.falsePositiveRate(0);
      Float float0 = new Float(Double.NaN);
      evaluation0.errorRate();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(0, charArray0, 3621);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.weightedTruePositiveRate();
      M5P m5P0 = new M5P();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.useNoPriors();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.80276727550424
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OneRAttributeEval oneRAttributeEval0 = new OneRAttributeEval();
      Capabilities capabilities0 = oneRAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) 0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.truePositiveRate(0);
      testInstances0.setOptions((String[]) null);
      evaluation0.KBInformation();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      evaluation0.falseNegativeRate(2283);
      instances0.enumerateAttributes();
      try { 
        evaluation0.updateStatsForClassifier((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ZeroR zeroR0 = new ZeroR();
      try { 
        evaluation0.updateStatsForPredictor(2717.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.relativeAbsoluteError();
      evaluation0.numFalseNegatives((-1));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(725);
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      try { 
        evaluation0.evaluateModelOnce(classifier0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(106);
      try { 
        evaluation0.updateStatsForPredictor(41.6204929071, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.m_SumAbsErr;
      Evaluation evaluation1 = new Evaluation(instances0);
      SMOreg sMOreg0 = new SMOreg();
      String string0 = Evaluation.getGlobalInfo(sMOreg0);
      assertEquals("\nSynopsis for weka.classifiers.functions.SMOreg:\n\nSMOreg implements the support vector machine for regression. The parameters can be learned using various algorithms. The algorithm is selected by setting the RegOptimizer. The most popular algorithm (RegSMOImproved) is due to Shevade, Keerthi et al and this is the default RegOptimizer.\n\nFor more information see:\n\nS.K. Shevade, S.S. Keerthi, C. Bhattacharyya, K.R.K. Murthy: Improvements to the SMO Algorithm for SVM Regression. In: IEEE Transactions on Neural Networks, 1999.\n\nA.J. Smola, B. Schoelkopf (1998). A tutorial on support vector regression.", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.624663340815808
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient(7);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.596048186104007
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedRecall();
      String string0 = evaluation0.toClassDetailsString(" ");
      assertEquals(" \n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.unweightedMacroFmeasure();
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      String string1 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string1);
      
      double double1 = new Integer(14);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setDiscardPredictions(false);
      assertFalse(evaluation1.getDiscardPredictions());
      
      double double2 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.148093147777029
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.addNumericTrainClass((-1), 3855.69642001);
      double double0 = evaluation1.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      evaluation0.numInstances();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      evaluation0.toSummaryString(true);
      double double0 = evaluation0.numFalseNegatives(1109);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate(0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      textDirectoryLoader0.listOptions();
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.truePositiveRate(0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toClassDetailsString("@data");
      assertEquals("@data\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.setDiscardPredictions(true);
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("q;`+69");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      M5P m5P0 = new M5P();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.useNoPriors();
      J48 j48_0 = new J48();
      evaluation0.SFMeanEntropyGain();
      evaluation0.kappa();
      evaluation0.getHeader();
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedTrueNegativeRate();
      J48 j48_0 = new J48();
      double double1 = evaluation1.SFMeanEntropyGain();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
      
      evaluation0.getHeader();
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("q;`+69");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFPriorEntropy();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      M5P m5P0 = new M5P();
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) m5P0, instances1, 2, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      String string0 = Evaluation.makeOptionString(votedPerceptron0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      evaluation0.useNoPriors();
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = '\"';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      evaluation0.num2ShortID((-1717986918), charArray0, 0);
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.correct();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.1886211160727207
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ConfLevel;
      assertEquals(0.95, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString("Initialize cluster centers using the probabilistic  farthest first method of the k-means++ algorithm", true);
      assertEquals("Initialize cluster centers using the probabilistic  farthest first method of the k-means++ algorithm\nTotal Number of Instances                0     \n", string0);
      
      testInstances0.generate();
      evaluation0.areaUnderROC((-1));
      double double1 = evaluation0.KBInformation();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ZeroR zeroR0 = new ZeroR();
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.precision(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toSummaryString(".arff", false);
      assertEquals(".arff\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.precision(91);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      double double0 = evaluation0.m_MinTarget;
      double double1 = evaluation0.recall(0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.8538232703291446
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation.makeOptionString((Classifier) null, false);
      try { 
        Evaluation.evaluateModel((Classifier) null, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      M5P m5P0 = new M5P();
      MockRandom mockRandom0 = new MockRandom();
      SparseInstance sparseInstance0 = new SparseInstance(38);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) m5P0, (Instance) sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.622827904722017
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.correct();
      evaluation0.numInstances();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.toClassDetailsString("@relation");
      double[] doubleArray0 = new double[3];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-0.32595282233959944));
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "@data");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getRevision();
      SMOreg sMOreg0 = new SMOreg();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedAreaUnderROC();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      assertEquals("The base classifier to be used.", inputMappedClassifier0.classifierTipText());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      CSV cSV0 = new CSV();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.avgCost();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, (Instance) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.4411796301423256
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.relativeAbsoluteError();
      MockRandom mockRandom0 = new MockRandom((-1));
      try { 
        evaluation0.crossValidateModel((Classifier) simpleLinearRegression0, instances0, (-2), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      M5P m5P0 = new M5P();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[7];
      try { 
        evaluation0.crossValidateModel((Classifier) m5P0, instances0, 2, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[1];
      double double0 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      int[] intArray0 = new int[7];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 1354);
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.5151853275135037
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.toMatrixString("@data");
      evaluation0.unweightedMacroFmeasure();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "@data");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-102261121));
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.correct();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedRecall();
      MockRandom mockRandom0 = new MockRandom();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      try { 
        evaluation0.crossValidateModel((Classifier) cVParameterSelection0, instances0, (-2), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.4719337817947937
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      evaluation0.SFEntropyGain();
      evaluation0.relativeAbsoluteError();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      REPTree rEPTree0 = new REPTree();
      String string1 = Evaluation.makeOptionString(rEPTree0, false);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation.getGlobalInfo(logitBoost0);
      Evaluation.makeOptionString(logitBoost0, true);
      try { 
        Evaluation.evaluateModel((Classifier) logitBoost0, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.LogitBoost:
         // 
         // -Q
         // \tUse resampling instead of reweighting for boosting.
         // -P <percent>
         // \tPercentage of weight mass to base training on.
         // \t(default 100, reduce to around 90 speed up)
         // -F <num>
         // \tNumber of folds for internal cross-validation.
         // \t(default 0 -- no cross-validation)
         // -R <num>
         // \tNumber of runs for internal cross-validation.
         // \t(default 1)
         // -L <num>
         // \tThreshold on the improvement of the likelihood.
         // \t(default -Double.MAX_VALUE)
         // -H <num>
         // \tShrinkage parameter.
         // \t(default 1)
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.trees.DecisionStump:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClass;
      evaluation0.weightedTruePositiveRate();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(2291, charArray0, (-1666));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(double1, double0, 0.01);
      
      M5P m5P0 = new M5P();
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      evaluation0.num2ShortID(90, charArray0, 1692);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance((-1), (double[]) null);
      try { 
        evaluation0.evaluateModelOnce((double) (-1), (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      ZeroR zeroR0 = new ZeroR();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.440769675320202
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.fMeasure(1231);
      double double1 = evaluation0.numFalseNegatives(1231);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.510981826152809
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LWL lWL0 = new LWL();
      DecisionStump decisionStump0 = new DecisionStump();
      String string0 = Evaluation.getGlobalInfo(decisionStump0);
      assertEquals("\nSynopsis for weka.classifiers.trees.DecisionStump:\n\nClass for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", string0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedRecall();
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("q;`+69");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.numTrueNegatives((-1));
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      XML xML0 = new XML();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("predicted_value", arrayList0, 1);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(6);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      DecisionStump decisionStump0 = new DecisionStump();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".xml";
      try { 
        Evaluation.evaluateModel((Classifier) decisionStump0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, ",AfhJqYnQ{X'V,&/7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.incorrect();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      Evaluation evaluation1 = new Evaluation(instances0);
      SMOreg sMOreg0 = new SMOreg();
      double double1 = evaluation1.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, 1509);
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      try { 
        Evaluation.evaluateModel((Classifier) votedPerceptron0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.VotedPerceptron:
         // 
         // -I <int>
         // \tThe number of iterations to be performed.
         // \t(default 1)
         // -E <double>
         // \tThe exponent for the polynomial kernel.
         // \t(default 1)
         // -S <int>
         // \tThe seed for the random number generation.
         // \t(default 1)
         // -M <int>
         // \tThe maximum number of alterations allowed.
         // \t(default 10000)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      try { 
        Evaluation.evaluateModel((Classifier) votedPerceptron0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.VotedPerceptron:
         // 
         // -I <int>
         // \tThe number of iterations to be performed.
         // \t(default 1)
         // -E <double>
         // \tThe exponent for the polynomial kernel.
         // \t(default 1)
         // -S <int>
         // \tThe seed for the random number generation.
         // \t(default 1)
         // -M <int>
         // \tThe maximum number of alterations allowed.
         // \t(default 10000)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      try { 
        Evaluation.handleCostOption("?01~bTonWPcdq*j)", 1675);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CostMatrix costMatrix0 = Evaluation.handleCostOption("", 5);
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      J48 j48_0 = new J48();
      CostMatrix costMatrix0 = new CostMatrix(2);
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.evaluateModel(".cost", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name .cost.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 171
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
