/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 17:18:54 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.UserType;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, 1628, "");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      boolean boolean0 = false;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "", (-1300), (-293));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9824925247071847
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "^0Fs*X,";
      stringArray0[1] = "\"2.jM";
      stringArray0[2] = "call$t\"on";
      stringArray0[3] = "Uk";
      String string0 = "3!*/lmg?zQcl";
      stringArray0[4] = "3!*/lmg?zQcl";
      stringArray0[5] = ", ";
      SQLUtil.renderColumnNames(stringArray0);
      String string1 = "DATABASE";
      SQLUtil.mutatesDataOrStructure("DATABASE");
      boolean boolean0 = false;
      SQLUtil.normalize("(^0Fs*X,, \"2.jM, call$t\"on, Uk, 3!*/lmg?zQcl, , )", false);
      SQLUtil.leftJoin((String) null, stringArray0, "3!*/lmg?zQcl", "(^ 0Fs * X,, \"2.jM, call$t\" on, Uk,  3 ! */ lmg ? zQcl,,)", stringArray0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("q2br}?J (<R`1;?<e", (String) null, (VersionNumber) null);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("^0Fs*X,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '^0Fs*X,'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema(".O*plv0K", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ykb4en", dBSchema0);
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null, integer0);
      UserType userType0 = new UserType();
      String string0 = SQLUtil.substituteMarkers("", "ykb4en", userType0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      Random.setNextRandom(600);
      SQLUtil.innerJoin(stringArray0[0], stringArray0, stringArray0[1], stringArray0[1], stringArray0);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[7] = "'*RYpabt_26<L;9nEsn";
      StringReader stringReader0 = new StringReader("'*RYpabt_26<L;9nEsn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'S';
      charArray0[1] = 'l';
      charArray0[2] = 'Q';
      charArray0[4] = '6';
      charArray0[5] = 'U';
      charArray0[6] = '*';
      charArray0[7] = 'v';
      charArray0[8] = '0';
      stringReader0.read(charArray0);
      stringReader0.skip(0L);
      streamTokenizer0.nval = (double) (-4);
      SQLUtil.renderNumber(streamTokenizer0);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\u0001\u0127", defaultDBTable0, 0, "\u0001\u0127");
      arrayList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      // Undeclared exception!
      try { 
        SQLUtil.join("Lh5a8$s|Bj0'v", " UTG=tIR5!_A", (String[]) null, " UTG=tIR5!_A", "\u0001\u0127", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.35722836275403
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9456645463488127
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[15];
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      String string0 = SQLUtil.leftJoin("null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", stringArray0, (String) null, "null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", stringArray0);
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure(string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9198576840028094
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLUtil.removeComments("");
      boolean boolean0 = SQLUtil.isProcedureCall("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "'*RYpabt_26<L;9nEsn";
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals("., ., ., ., ., ., ., .'*RYpabt_26<L;9nEsn", string0);
      
      StringReader stringReader0 = new StringReader("'*RYpabt_26<L;9nEsn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      boolean boolean1 = SQLUtil.isQuery("select into");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[7] = "'*RYpabt_26<L;9nEsn";
      StringReader stringReader0 = new StringReader("'*RYpabt_26<L;9nEsn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip(0L);
      streamTokenizer0.nval = 816.898412541;
      SQLUtil.renderNumber(streamTokenizer0);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("n}w\"mmig9(p");
      DBDataType dBDataType0 = DBDataType.getInstance((-249), "RJX8k=9O8Q+1NGM2*;");
      Integer integer0 = new Integer((-628));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".B%EuP-}.T", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("RJX8K=9O8Q+1NGM2*;(-628)", stringBuilder0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.937566794583933
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.normalize("H*:<<F7Xh;wSI\"j/", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("H * : < < F7Xh ; wSI \"j/\"");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("H * : < < F7Xh ; wSI \"j/\"", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      File file0 = MockFile.createTempFile("H * : < < F7Xh ; wSI \"j/\"", (String) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals(105L, file0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("N}g\"mMIg9(P2(.O8");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      System.setCurrentTimeMillis(2127L);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("]nMl.", stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec0);
      SQLUtil.isDML("]nMl.");
      System.setCurrentTimeMillis(2127L);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("i}@\"mZI69(P2..Oc");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("i}@\"mZI69(P2..Oc");
      DBDataType.getInstance(50004, "i}@\"mZI69(P2..Oc");
      Integer integer0 = RawTransaction.ABORT;
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("'4@jh;1!0Fooa^K");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "i}@\"mZI69(P2..Oc";
      stringArray0[1] = "'4@jh;1!0Fooa^K";
      stringArray0[2] = "MIN ";
      stringArray0[3] = "'4@jh;1!0Fooa^K";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6537557468058677
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[10];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = SQLUtil.leftJoin("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0);
      String string1 = SQLUtil.join("inner", "e8ot1UxH%.`6O", stringArray0, "inner", "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "i@\"mZI69(P2..Oc";
      DBSchema dBSchema0 = new DBSchema("i@\"mZI69(P2..Oc");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("i@\"mZI69(P2..Oc", dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "i@\"mZI69(P2..Oc";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("i@\"mZI69(P2..Oc", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.266778223937368
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-3), "6Gh@s_");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("6Gh@s_", defaultDBTable0, dBDataType0, integer1, integer2);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6GH@S_(2,3)";
      Integer.compareUnsigned((-3), (-3));
      stringArray0[1] = "u!.rLR*?f`(3!,EF7*";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isDML("6GH@S_(2,3)");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "6GH@S_(2,3) = '6GH@S_(2,3)' AND u!.rLR*?f`(3!,EF7* = 'u!.rLR*?f`(3!,EF7*'", false, stringArray0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, (-2633), "6GH@S_(2,3)");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0978100054573563
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.isDML("SELECT * FROM ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Exception in rollback");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Exception in rollback";
      stringArray0[1] = "renamenull =";
      stringArray0[7] = "SELECT * FROM ";
      stringArray0[3] = "Exception in rollback";
      stringArray0[4] = "renamenull =";
      stringArray0[5] = "Exception in rollback";
      stringArray0[6] = "SELECT * FROM ";
      stringArray0[7] = "Exception in rollback";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Exception in rollback", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("*cZk$?zx", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "Exception in rollback", false, stringArray0);
      DataStore dataStore0 = new DataStore("5{'E}};[_z)kLI}");
      VirtualFile virtualFile0 = new VirtualFile(" get pos: ", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      Object object0 = new Object();
      Object object1 = new Object();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "SELECT * FROM ", true, stringArray0);
      String string0 = SQLUtil.renderValue(" get pos: ");
      assertEquals("' get pos: '", string0);
      
      boolean boolean0 = SQLUtil.isDML("i}@\"mzi69(p");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter indexrenamecreate materialized view - [ k");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("snapshot");
      SQLUtil.isQuery("snapshot");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "VrQajG,wMX";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      System.setCurrentTimeMillis((-2597L));
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      assertEquals("0.0", stringBuilder0.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4359838465843624
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("setSavepoint()");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) "setSavepoint()");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3261029578469845
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer(")");
      SQLUtil.removeComments(")");
      DBSchema dBSchema0 = new DBSchema(")");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("5yA}p.ST", dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ")";
      stringArray0[1] = ")";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "9Q{9*oR8[w*5z", true, stringArray0);
      SQLUtil.mutatesStructure("");
      SQLUtil.mutatesStructure(" recordLength: ");
      Object object0 = new Object();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(")", defaultDBTable0, (DBDataType) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.565394837118028
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getSequences(true);
      tableContainer0.setName("");
      tableContainer0.equals("");
      SQLUtil.ownerDotComponent(tableContainer0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      tableContainer0.setOwner(compositeDBObject0);
      stringArray0[1] = "";
      tableContainer0.setDoc("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = SQLUtil.innerJoin("", stringArray0, "HEAD", "lSLzlL}0,nQbDh0#", stringArray0);
      String string1 = SQLUtil.normalize("", false);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("3");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("3");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("3", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3");
      PrintWriter printWriter0 = mockPrintWriter0.printf("3", (Object[]) stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[19];
      String[] stringArray1 = new String[1];
      stringArray1[0] = "8+6=l_:?u=E&)";
      // Undeclared exception!
      try { 
        SQLUtil.join("8+6=l_:?u=E&)", "org.apache.derby.impl.sql.compile.IndexToBaseRowNode", stringArray0, "insertiue<pzah~y]v.iue<pzah~y]v, iue<pzah~y]v.iue<pzah~y]v", "8+6=l_:?u=E&)", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("N}g\"mMIg9(P2/(.O8");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "QHCm ", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("i}@\"mZI69(32.Oc");
      DBDataType dBDataType0 = DBDataType.getInstance(50004, "i}@\"mZI69(32.Oc");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("i}@\"mZI69(32.Oc", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      DataStore dataStore0 = new DataStore("Error convertng to date.");
      VirtualFile virtualFile0 = new VirtualFile("I}@\"MZI69(32.OC(1,1)", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter1);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.109606290373814
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("d);");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "+<_O=uPa->nfJCx2", true, (String[]) null);
      dBUniqueConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Vf|L");
      System.setCurrentTimeMillis(1L);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("d);", stringBuilder0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec1);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("OwYs-(e8PT@6)E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"e8PT@6\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setBinaryStream(int, InputStream, long)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderColumnListWithTableName("callbi[2k$80gp&2hqqx/", stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("zsn I]NI=", (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("66?2@DT\"e_qyp$T6!G<");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("66?2@DT\"e_qyp$T6!G<", defaultDBTable0, 1093, "66?2@DT\"e_qyp$T6!G<");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("66?2@DT\"E_QYP$T6!G<", stringBuilder0.toString());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      Character character0 = Character.valueOf('o');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'o'", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Character character0 = Character.valueOf('k');
      String string0 = SQLUtil.substituteMarkers("k^;.%jn|)'Q-bJB2SJ!", "k^;.%jn|)'Q-bJB2SJ!", character0);
      assertEquals("'k'", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("//*mLful#x;&&>");
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLUtil.removeComments("create unique index");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "create unique index");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique index", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CREATE UNIQUE INDEX(0)", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join((String) null, "select into4\"k9ux,8,", stringArray0, "select into4\"k9ux,8,", "select into4\"k9ux,8,", stringArray0);
      assertEquals("select into4\"k9ux,8, as select into4\"k9ux,8, on select into4\"k9ux,8,.null = select into4\"k9ux,8,.null and select into4\"k9ux,8,.null = select into4\"k9ux,8,.null", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("$Dy2B`}r~", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("#wTQBZ[");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "#wTQBZ[";
      stringArray0[1] = "#wTQBZ[";
      stringArray0[2] = "#wTQBZ[";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("y!njwC'-", (DBTable) null, (-1894530029), "y!njwC'-");
      defaultDBColumn0.setDefaultValue("y!njwC'-");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("y!njwC'- Y!NJWC'- DEFAULT y!njwC'- NULL", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "QHCm ", false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder("Mh1B!-D(Ew6:w");
      SQLUtil.addOptionalCondition("N}g\"mMIg9(P2(.O8", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      DataStore dataStore0 = new DataStore("QHCm ");
      VirtualFile virtualFile0 = new VirtualFile("QHCm ", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter1);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("N}g\"mMIg9(P2(.O8");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "QHCm ", false, (String[]) null);
      SQLUtil.constraintName(dBUniqueConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder("Mh1B!-D(Ew6:w");
      StringBuilder stringBuilder1 = stringBuilder0.append(5073.0);
      stringBuilder1.append((-1.0F));
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec0);
      assertEquals("Mh1B!-D(Ew6:w5073.0-1.0", stringBuilder1.toString());
      assertEquals("Mh1B!-D(Ew6:w5073.0-1.0", stringBuilder0.toString());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "B2c&~M8McMl-u.BJK";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("B2c&~M8McMl-u.BJK", true, "h_LJBS'v/S{A'!h.(U9", "callinto");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "h_LJBS'v/S{A'!h.(U9");
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("h_LJBS'v/S{A'!h.(U9");
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) jMXPrincipal0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder2.replace((-2854), 341, "B2c&~M8McMl-u.BJK");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2854
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLUtil.isQuery("dele");
      SQLUtil.isQuery("dele");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("elktl * ro");
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("elktl * ro");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      defaultDBTable0.setDoc("8,.=wGZNe7TaI3 ~K");
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("table null");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DBDataType dBDataType0 = DBDataType.getInstance(1300, "8");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("8", (DBTable) null, dBDataType0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("8, 8", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = SQLUtil.normalize("create unique indexcreate materialized view - [ k", false);
      assertEquals("create unique indexcreate materialized view - [ k", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = SQLUtil.normalize("alC,\"QG7sd<i'", true);
      assertEquals("alC, \"QG7sd<i'\"", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "ALIASINFO", "into");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("delete");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("update@$b");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "";
      String string1 = "ykb4en";
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema(".O*plv0K", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ykb4en", dBSchema0);
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null, integer0);
      defaultDBColumn0.getNotNullConstraint();
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("h_LJBS'v/S{A'!h.(U9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: h_LJBS'v/S{A'!h.(U9
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(mR'd*Lt%s#7f1G~+\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (mR'd*Lt%s#7f1G~+\"
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("mE>%jw0Xbq/)f_{WM|b");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("1N", dBSchema0);
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "1N";
      stringArray0[1] = "1N";
      stringArray0[2] = "i}@\"mZI69(P2..Oc";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("1N = '1N' AND 1N = '1N' AND i}@\"mZI69(P2..Oc = 'i}@\"mZI69(P2..Oc'", string0);
      
      boolean boolean0 = SQLUtil.isDML("6QfyU<Nr0~a4V>~5q");
      boolean boolean1 = SQLUtil.isQuery("W9;*4Fc2!");
      assertFalse(boolean1);
      
      String string1 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string1);
      
      Boolean boolean2 = SQLUtil.mutatesStructure("exec");
      assertTrue(boolean2.equals((Object)boolean0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "snapshot", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("snapshot", stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec0);
      assertEquals("snapshot", stringBuilder0.toString());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("yj M&");
      SQLUtil.addOptionalCondition("yj M&", stringBuilder0);
      assertEquals("yj M& or yj M&", stringBuilder0.toString());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("alter index");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("crfate materialized view");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "crfate materialized view";
      stringArray0[1] = "crfate materialized view";
      stringArray0[2] = "crfate materialized view";
      stringArray0[3] = "crfate materialized view";
      stringArray0[4] = "crfate materialized view";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("crfate materialized view", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (crfate materialized view, crfate materialized view, crfate materialized view, crfate materialized view, crfate materialized view) REFERENCES crfate materialized view(crfate materialized view, crfate materialized view, crfate materialized view, crfate materialized view, crfate materialized view)", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("t#!,Ro3qmoSYX1#Lx");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("t#!,Ro3qmoSYX1#Lx", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT t#!,Ro3qmoSYX1#Lx FOREIGN KEY (, , , , ) REFERENCES t#!,Ro3qmoSYX1#Lx(, , , , )", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Boolean boolean0 = SQLUtil.mutatesStructure("execuemism");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("callbi[2$80gp&2hqqx/");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("executev{");
      assertNull(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.6270866719173012
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("s/nLbQ>#u(J94+:(~");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("s/nLbQ>#u(J94+:(~", false);
      assertEquals("s / nLbQ > # u (J94 + : (~", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("insert");
      DBPackage dBPackage0 = new DBPackage("insert", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(dBPackage0);
      assertEquals("insert.insert", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessioni}@\"mzi69(p2..oc");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLUtil.isQuery("SELxCT * FHO4 ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = SQLUtil.normalize("INSERT INTO INFORMATION_SCHEMA.LOBS(ID, BYTE_COUNT, TABLE) SELECT ?, BYE_COUNT, ? FROM INFORMATION_SCHEMA.LOBS WHERE ID = ?", true);
      assertEquals("INSERT INTO INFORMATION_SCHEMA.LOBS (ID, BYTE_COUNT, TABLE) SELECT ?, BYE_COUNT, ? FROM INFORMATION_SCHEMA.LOBS WHERE ID = ?", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.7842068034002125
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" AFTER ", false, " AFTER ", " AFTER ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" AFTER \" CHECK  AFTER ", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.873029116491111
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[11];
      String string0 = SQLUtil.renderColumnListWithTableName("y!nj'-", stringArray0);
      assertEquals("y!nj'-.null, y!nj'-.null, y!nj'-.null, y!nj'-.null, y!nj'-.null, y!nj'-.null, y!nj'-.null, y!nj'-.null, y!nj'-.null, y!nj'-.null, y!nj'-.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "y!nj'-.null, y!nj'-.null, y!nj'-.null, y!nj'-.null, y!nj'-.null, y!nj'-.null, y!nj'-.null, y!nj'-.null, y!nj'-.null, y!nj'-.null, y!nj'-.null", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , , , , , , , )", string1);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "h_LJBS'v/S{A'!h.(U9");
      SQLUtil.addRequiredCondition("h_LJBS'v/S{A'!h.(U9", stringBuilder0);
      assertEquals("h_LJBS'v/S{A'!h.(U9 and h_LJBS'v/S{A'!h.(U9", stringBuilder0.toString());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("nqExI?uU{)j/");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "u!.rLR*?f`(3E,EF7*", true, (String[]) null);
      String string0 = SQLUtil.renderValue(dBUniqueConstraint0);
      assertEquals("CONSTRAINT u!.rLR*?f`(3E,EF7* UNIQUE ()", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("kW");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("kW", false, defaultDBTable0, "kW");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK kW", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = SQLUtil.normalize("u!.rLR*?f`(3!,EF7*", true);
      assertEquals("u !.rLR * ? f ` (3 !, EF7 *", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer(")");
      SQLUtil.removeComments(")");
      DBSchema dBSchema0 = new DBSchema(")");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(")", dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ")";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ")", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      System.setCurrentTimeMillis(8455716872L);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT ) ", stringBuilder0.toString());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("executeafter", false, "executeafter", "executeafter");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT executeafter ", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "altertxbde$cAw&en";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("6rp589p-VL}${:oVnV", stringArray0, "6rp589p-VL}${:oVnV", "6rp589p-VL}${:oVnV", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.3125019625949976
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("cannot update the result");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isDDL("rename");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[11];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Y", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT Y PRIMARY KEY (, , , , , , , , , , )", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "xH";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "xH", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT xH PRIMARY KEY (xH)", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" AFTER ", false, " AFTER ", " AFTER ");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \" AFTER \" ", string0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FROM ", true, "SELECT * FROM ", "SELECT * FROM ");
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"SELECT * FROM \" CHECK SELECT * FROM ", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.3276973533252894
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[19];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      SQLUtil.normalize("null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", false);
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("selecttruncate$9;7}yi3wd", stringArray0, "null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", "6u':0(~]Sdg;dK]PUE-", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.join("ELECT * FROM ", "ELECT * FROM ", stringArray0, "ELECT * FROM ", "ELECT * FROM ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.535837785854851
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "h_LJBS'/S6A!h.U9";
      SQLUtil.mutatesDataOrStructure("h_LJBS'/S6A!h.U9");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "h_LJBS'/S6A!h.U9";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("h_LJBS'/S6A!h.U9", stringArray0, "h_LJBS'/S6A!h.U9", "h_LJBS'/S6A!h.U9", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("SELECT * FROM ");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-3038), "NEVER");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NEVER", (DBTable) null, dBDataType0, integer0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("NEVER(0,0)", stringBuilder0.toString());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("y!nj'-", (DBTable) null, (-1894530029), "y!nj'-");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("y!nj'- Y!NJ'- NULL", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update");
      DBDataType dBDataType0 = DBDataType.getInstance((-632), "\n\nRemembering join order as best: ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\n\nRemembering join order as best: ", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("\n\nREMEMBERING JOIN ORDER AS BEST: ", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[20];
      SQLUtil.join("y!nj'-", "y!nj'-", stringArray0, "y!nj'-", "y!nj'-", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("8JFOpx");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("SELECT * FROM ", "SELECT * FROM ", (String[]) null, "BLOB", "SELECT * FROM ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("H*:<<F7Xh;wSI\"j/", stringBuilder0);
      assertEquals("H*:<<F7Xh;wSI\"j/", stringBuilder0.toString());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("b\"");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM b\" WHERE ", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("SEECRT * FROM ", (String[]) null, "1sNa[e", "SEECRT * FROM ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.6851287363978402
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
      
      String string1 = SQLUtil.innerJoin("null = null", stringArray0, " NOT", " NOT", stringArray0);
      assertEquals(" NOT as  NOT on null = null.null =  NOT.null", string1);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = SQLUtil.normalize("'L(i#q", false);
      assertEquals("'L(i#q'", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("delete", ".^PT7^p]+XQ", ".^PT7^p]+XQ");
      assertEquals("delete", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("].`~");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer(")");
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container )", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.4450615932401938
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[20];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = SQLUtil.innerJoin("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("]", ",", stringArray0, ",", "]", stringArray0);
      assertEquals("] join , as ] on ,.null = ].null", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.6875519303844395
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[11];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = SQLUtil.leftJoin("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", "43X67.U", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("u!.rLR*?f`(3E,EF7*", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("*cZk$?zx", stringArray0);
      assertEquals("", string0);
  }
}
