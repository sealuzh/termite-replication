/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 13 23:28:27 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.4833670207712006
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 2147483655L, 9223372036854775807L);
      range_Builder1.shift((-511L));
      range_Builder1.shift(9223372032559808470L);
      range_Builder1.contractEnd(1L);
      range_Builder1.copy();
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4294967851 would make range [9223372034707291614 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0633819593424154
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775786L), (-9223372036854775786L));
      Range range1 = Range.of((-9223372036854775786L), (-9223372036854775786L));
      range0.complement(range1);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5589949586514957
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775786L), (-9223372036854775786L));
      Range range1 = Range.of((-9223372036854775786L), (-9223372036854775786L));
      List<Range> list0 = range0.complement(range1);
      range1.complement(range0);
      boolean boolean0 = range0.equals(list0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertSame(range1, range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.203776696828706
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 35241L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
      
      Range range2 = Range.of(range_CoordinateSystem0, 35241L, 9223372036854775807L);
      boolean boolean0 = range2.equals(range0);
      assertFalse(range2.equals((Object)range1));
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.4419009081004504
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        range1.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.6337398299642376
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      
      Object object0 = new Object();
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.parseRange("C5,4;I", range_CoordinateSystem0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774622L);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774622L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774622L);
      Range range1 = Range.ofLength(9223372036854774622L);
      range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.854201187150188
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854774142L);
      Range range1 = Range.ofLength(9223372036854774142L);
      range0.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      long long0 = 4294967295L;
      // Undeclared exception!
      range1.split(long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.45641500807274
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L), (-2L));
      Range range2 = Range.of((-128L));
      boolean boolean0 = range2.equals(range1);
      assertSame(range2, range0);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.536734242933289
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 932L, 932L);
      Range range1 = Range.of(range_CoordinateSystem0, 2545L, 2545L);
      range1.equals(range0);
      Range range2 = Range.of(65535L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.450985614781185
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(4294967114L, 4294967114L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967114L, 4294967114L);
      Range range2 = Range.ofLength(4294967295L);
      assertFalse(range2.isEmpty());
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1342029606832194
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(4294967114L, 4294967114L);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(4294967125L);
      range1.equals(range0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-9223372036854775808L), long0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2545L, 2545L);
      range0.equals((Object) null);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.891228606131704
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 927L, 927L);
      Range range1 = Range.of(range_CoordinateSystem0, 927L, 927L);
      range0.equals(range1);
      assertTrue(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.4131656925981932
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 195579L;
      Range range0 = Range.of(195579L, 4294967295L);
      // Undeclared exception!
      range0.split(2616L);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.568415464712095
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(211L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 211L, 2147483660L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 211L, 30142L);
      range0.equals(range2);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem2);
      assertEquals(210L, long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.061189958965297
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(940L, 940L);
      Range range1 = Range.of(range_CoordinateSystem0, 940L, 940L);
      Range range2 = Range.of(940L, 940L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertSame(range0, range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0626452099961
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775786L), (-9223372036854775786L));
      Range range1 = Range.of((-9223372036854775786L), (-9223372036854775786L));
      range0.complement(range1);
      Range.Comparators.values();
      range1.isSubRangeOf(range0);
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.6539054934195416
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 932L, 932L);
      Range range1 = Range.of(932L);
      range0.complement(range1);
      range0.complement(range1);
      Range range2 = Range.of(range_CoordinateSystem0, 932L, 2139L);
      boolean boolean0 = range1.equals(range2);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1347095035283017
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.build();
      Range range0 = range_Builder1.build();
      Object object0 = new Object();
      Range range1 = Range.of(1413L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.6343287147636487
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(537L, 65623L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 537L, 537L);
      range1.equals(range0);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.isEmpty());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.386923482034096
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-32768L), 2057L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(255L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1L), 255L);
      boolean boolean1 = range0.equals(range2);
      assertFalse(range2.isEmpty());
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(940L, 940L);
      Range range1 = Range.of(range_CoordinateSystem0, 940L, 940L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.458433506269885
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of((-2616L), 32767L);
      range0.iterator();
      Object object0 = new Object();
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(2147483661L, 2147483661L);
      Range range1 = Range.of(2147483661L);
      boolean boolean0 = range0.equals(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.4818330289252035
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-52L), 127L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(536L, 4294967307L);
      range0.equals((Object) null);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.4919728750577503
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2474L), 32767L);
      Range range1 = Range.of(32767L);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.ofLength(4167L);
      range0.iterator();
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(9223372036854774622L);
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(521L, 65570L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.ofLength(1768L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.of(2147483662L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 35241L, 9223372036854775806L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), 35241L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.327595366528126
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.ofLength(9223372036854775807L);
      Range range0 = Range.of(2147483647L, 9223372036854775807L);
      range0.getLength();
      Object object1 = new Object();
      range0.equals(object1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 35241L, 35241L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.97613471996344
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(9L);
      List<Range> list0 = range0.split(255L);
      assertTrue(list0.contains(range0));
      
      range0.iterator();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.2013835344355432
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Range range1 = Range.ofLength(4294967324L);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 927L, 927L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.707624731182213
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854774142L);
      Range range1 = Range.ofLength(9223372036854774142L);
      range0.complement(range1);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(4294967339L, 4294967339L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.4437732002050554
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854774142L);
      Range range1 = Range.ofLength(9223372036854774142L);
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      range0.equals(list0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertTrue(list0.equals((Object)list1));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6912004809506773
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-32768L));
      range1.equals(range0);
      range0.equals(range1);
      range0.equals((Object) null);
      assertSame(range0, range1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967114L, (-9223372034707290490L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372034707290491 would make range [4294967113 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.387341454865862
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = 65535L;
      Range.of(65535L, 2147483643L);
      Range.of(2147483643L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(2147486122L);
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 2147483643L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.891228606131704
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 927L, 927L);
      Range range1 = Range.of(range_CoordinateSystem0, 2545L, 2545L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.of(940L, 940L);
      Range range0 = Range.of(2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(195579L, 195579L);
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.716412770681006
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.ofLength(2147483662L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(1L);
      range1.iterator();
      boolean boolean0 = range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2147483662L, 9223372036854775806L);
      range0.startsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-2147483648L), 127L);
      assertFalse(range3.isEmpty());
      
      Object object0 = new Object();
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.133680985529237
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.ofLength(9L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9L, 9L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 35241L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(488L, 4294967339L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.2027870432074734
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(9L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9L, 9L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.7696246805938958
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of((-32768L), 2057L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(255L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      Range.ofLength(2057L);
      boolean boolean1 = range1.equals(range_Builder0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.2338964389284612
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 932L, 932L);
      Range range1 = Range.of(range_CoordinateSystem0, 1426L, 1426L);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
      
      Range range2 = Range.of(range_CoordinateSystem0, 2545L, 2545L);
      boolean boolean1 = range0.equals(range2);
      assertTrue(range2.isEmpty());
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3280587048809585
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Range range1 = Range.ofLength(4294967324L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      long long0 = range0.getBegin();
      assertEquals((-128L), long0);
      
      Object object0 = new Object();
      range0.equals((Object) null);
      range1.complement(range0);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.265546468718654
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(255L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(255L);
      Range range0 = range_Builder1.build();
      Range range1 = Range.ofLength(0L);
      Object object0 = new Object();
      range0.intersects(range1);
      assertTrue(range0.isEmpty());
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.2144092223436713
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      Range range1 = range0.asRange();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.9165949507784608
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range range0 = Range.ofLength(9223372036854774142L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 1 .. 9223372036854774142 ]/RB", string0);
      
      Range range1 = Range.of(range_CoordinateSystem0, (-1514L), (-1L));
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list1.size());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.2021678481610336
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1L), 2147483661L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of((-32763L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.490577634378733
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(127L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(127L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range range1 = Range.of((-1626L), 127L);
      range1.intersection(range0);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.5324675794758953
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 932L, 932L);
      Range range1 = Range.ofLength(932L);
      range0.startsBefore(range1);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-64L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.20243222357412
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.ofLength(0L);
      assertTrue(range1.isEmpty());
      
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      assertFalse(range0.isEmpty());
      assertTrue(list1.contains(range0));
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.6550341992164235
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      Object object1 = new Object();
      range1.equals(object1);
      Range.CoordinateSystem.values();
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.675711290918458
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(211L);
      Range range1 = Range.of((-2954L));
      range0.intersection(range1);
      Range.of(211L);
      // Undeclared exception!
      try { 
        range1.split((-2954L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.5072502934862038
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1074L, 1074L);
      boolean boolean0 = range0.endsBefore(range0);
      Range range1 = Range.ofLength(1074L);
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.4632498360454647
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of((-1L));
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(65535L);
      range1.equals((Object) null);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.ofLength(4294967114L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.4673668715138737
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.9720861369674885
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 35241L, 35241L);
      boolean boolean0 = range0.isEmpty();
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-1597L));
      Range range1 = range0.asRange();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854774793L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.3763292857269653
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-116L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(537L, 65683L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.314486533857473
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 932L, 932L);
      Range range1 = Range.of(range_CoordinateSystem0, 2545L, 2545L);
      boolean boolean0 = range1.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      range0.intersection(range1);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2545L, 35241L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      range0.equals("cubEc4]VV");
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of((-1L));
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.323934824062405
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(65623L, 65623L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(65623L, long0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.223791213971382
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-152L), (-152L));
      Range range1 = Range.of(range_CoordinateSystem0, 2545L, 2545L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.350919837063593
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.ofLength(4294967114L);
      Range range1 = Range.of(4294967114L, 4294967114L);
      range0.intersects(range1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.parseRange("UTF-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse UTF-8 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.1235127001156893
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      range0.complement(range1);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertSame(range0, range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.385517388964126
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2474L), 2147483647L);
      String string0 = range0.toString();
      assertEquals("[ -2474 .. 2147483646 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.expandEnd(2147418109L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem1.toString();
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.ofLength(4294967103L);
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.9934072141844146
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals("[ 0 .. 0 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 0 .. 0 ]/0B", range_CoordinateSystem0);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(0L);
      List<Range> list0 = range3.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, (-1L), 1L);
      range2.getEnd(range_CoordinateSystem1);
      Range range4 = Range.of(range_CoordinateSystem2, (-2147483648L), 0L);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.8896985514868954
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(2364L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.parseRange("76aND%7d3I4-05V", range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.5428042246650024
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.ofLength(41089L);
      range0.iterator();
      range0.isSubRangeOf(range0);
      Range range1 = Range.ofLength(29L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 41088 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1030L, 3104L);
      boolean boolean0 = range1.intersects(range2);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.parseRange("[ 0 .. 41088 ]/0B");
      Range range4 = range0.intersection(range3);
      assertSame(range4, range3);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.385502730695818
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of((-1855L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.of(9223372036854775807L, 9223372036854775807L);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.473593439794455
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of((-1764L), 2147483661L);
      Range range1 = Range.ofLength(2147483661L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1764 .. 2147483661 ]/0B", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.7938131631694842
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of(255L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(65535L, 4294967291L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.131594643048094
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(4582L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-964L));
      range_Builder0.expandEnd(4582L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.0605245787004756
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(940L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range_Builder0.build();
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.139347425455402
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Object object0 = new Object();
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 0 .. 4294967089 ]/0B", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.3577183787624234
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1208L), (-128L));
      long long0 = range0.getLength();
      assertEquals(1080L, long0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.979024296846825
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      boolean boolean0 = range1.startsBefore(range0);
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-1L));
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.1398345496569178
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      long long0 = range0.getBegin();
      assertEquals(9223372036854775807L, long0);
      
      boolean boolean0 = range0.equals("~`");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2364L, 2364L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.7236416195802615
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(537L, 65683L);
      Range range1 = Range.of(1L, 537L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(2, list0.size());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.387669055193462
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of(1175L);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.3880461765008163
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-9223372034707290490L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372034707290490 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775376L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.491915479660861
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(712L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 712L, 712L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of(255L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.996027170432092
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      Range range1 = Range.parseRange("[ 0 .. 0 ]/0B", range_CoordinateSystem0);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(0L);
      range3.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem2, (-1L), 1L);
      range0.getEnd();
      range2.getEnd(range_CoordinateSystem1);
      Range range5 = Range.of(range_CoordinateSystem2, (-2147483648L), 0L);
      assertFalse(range5.equals((Object)range4));
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.180624539878941
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(545L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(545L, long0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.387669055193462
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(2062L, 65521L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(2062L);
      assertNotSame(range1, range0);
      
      Range range2 = Range.of((-2147483648L));
      List<Range> list0 = range2.split(1L);
      assertTrue(list0.contains(range2));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.ofLength(3281L);
      boolean boolean0 = range0.equals("::acY(?`");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-9223372036854775808L), long0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.7232618769232326
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.of((-1L));
      Range range0 = Range.of((-1L), 2147483661L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.184655782005421
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-128L));
      long long0 = range0.getBegin();
      assertEquals((-128L), long0);
      
      long long1 = range0.getLength();
      assertEquals(1L, long1);
      
      Range range1 = Range.of((-128L));
      assertSame(range1, range0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.152991288216747
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(4294967295L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("LY=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.LY=
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.409204523500221
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of(1198L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-128L), 65623L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.123888286970149
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.of((-1L));
      Range.of((-1L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-1069L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.2081819478882947
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854774622L, 9223372036854774622L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.056474781190351
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2063L, 2063L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.build();
      // Undeclared exception!
      try { 
        Range.of(2040L, 1975L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.198616238838059
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of(65552L, 65552L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(65552L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(127L);
      range_Builder1.contractBegin((-1575L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 127L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.2444386795530678
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.ofLength(2077L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.0480737768114725
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-2147483631L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -2147483630 .. -2147483630 ]/RB", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of((-99L), (-99L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.0561774276369764
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of(537L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.9769701418514933
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of(874L, 874L);
      String string0 = range0.toString();
      assertEquals("[ 874 .. 874 ]/0B", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of((-2501L), (-2501L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1325L, 1325L);
      range_Builder0.shift(1325L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1325L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of(473L, 473L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4424L, 1003L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(195579L, 191L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.145998322976767
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.397886937780504
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      long long0 = range0.getEnd();
      assertEquals(9223372036854775806L, long0);
      
      Range range1 = Range.of((-39L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of((-229L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.4093607979180987
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      range0.getEnd();
      Range.of(2062L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.5890344212298
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(4294966791L, 4294966791L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(0, list0.size());
      
      long long0 = range1.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of(35241L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.4443696406558315
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.ofLength(41121L);
      range0.iterator();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      List<Range> list0 = range0.split(255L);
      assertFalse(list0.contains(range0));
      assertEquals(162, list0.size());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.060276460265276
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of(521L);
      List<Range> list0 = range0.split(521L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-128L));
      // Undeclared exception!
      try { 
        range0.split((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.130285399790697
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.of(65623L, 65623L);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range range0 = Range.of(41089L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2941L), (-2941L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=3.2659220555731143
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(4625L, 4625L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 162
  /*Coverage entropy=3.2659220555731143
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(127L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(127L);
      range_Builder1.build();
      Range range0 = Range.of(1L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range range0 = Range.of(229L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range range0 = Range.of(35241L, 35241L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=2.8888043637074614
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967090L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(4294967089L, long0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(65521L);
      assertFalse(range0.isEmpty());
  }
}
