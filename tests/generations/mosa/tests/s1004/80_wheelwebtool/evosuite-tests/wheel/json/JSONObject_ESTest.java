/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 13 22:53:27 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3955700605235135
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((Object) null, (Object) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("qlLX42x?]]_\"@", hashMap0);
      jSONObject1.keys();
      jSONObject0.optString("\"\"", "\"\"");
      // Undeclared exception!
      try { 
        jSONObject0.toString(3414);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(7);
      Boolean boolean0 = Boolean.valueOf("`!VB~tf}@!>a%pHD$");
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("{g-=Q4N<U=i18K<8LCZ");
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 10 of {g-=Q4N<U=i18K<8LCZ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "{(";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {(
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0516309349741753
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      hashMap0.put((Double) null, (Double) null);
      HashMap<Double, Object> hashMap1 = new HashMap<Double, Object>(hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("H_q,}+Y/'f3'z;x]-7", (Map) hashMap1);
      JSONObject.quote("H_q,}+Y/'f3'z;x]-7");
      Float float0 = new Float(0.0);
      jSONObject1.length();
      jSONObject0.optJSONObject("H_q,}+Y/'f3'z;x]-7");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1846726042887588
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Double double0 = new Double((-512.0504542697));
      Double double1 = new Double((-512.0504542697));
      Double.max((-512.0504542697), (-512.0504542697));
      String[] stringArray0 = JSONObject.getNames((Object) double1);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double1, stringArray0);
      jSONObject0.put("{ytabxKiKba%8;W", 2715);
      assertEquals(9, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5709195237181257
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("3g\"g4gCrXg}G$", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("3g\"g4gCrXg}G$", 0L);
      jSONObject1.getInt("3g\"g4gCrXg}G$");
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1833853993269363
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("V}hO", "V}hO");
      JSONObject jSONObject1 = new JSONObject((Object) "HvD");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.708098876326541
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 47, 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7242986702781118
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("V}hO", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.474847480429177
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("Hrd@jg\"Y@T1 s", jSONArray0);
      jSONObject1.toString((-3968), (-3968));
      JSONObject.testValidity("{\n\"java.lang.String@0000000005\": [],\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}");
      jSONObject1.keys();
      jSONObject1.optJSONArray("Hrd@jg\"Y@T1 s");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7881502068860127
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("issubList", (-650));
      jSONObject1.optInt("issubList");
      String[] stringArray0 = new String[1];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.584838202797333
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-2432), 53);
      assertEquals("{}", string0);
      
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("Qk5[y-fi?", object0);
      boolean boolean0 = jSONObject1.isNull("Qk5[y-fi?");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8734738482993778
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("&4Wg|v%:w:a4<I_[N L", (Map) hashMap0);
      jSONObject2.getJSONObject("&4Wg|v%:w:a4<I_[N L");
      JSONObject.getNames(jSONObject2);
      Boolean boolean0 = new Boolean("V}O");
      JSONObject jSONObject3 = jSONObject0.putOpt("V}O", hashMap0);
      try { 
        jSONObject3.getBoolean("V}O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"V}O\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.append("vI", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4035826023297506
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.names();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("3", (Collection) linkedList0);
      jSONObject1.optString("3");
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.51076957816208
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Double double0 = new Double(3008.931261988298);
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("qlL4ax??]_\"@", hashMap0);
      JSONObject.quote("qlL4ax??]_\"@");
      String string0 = JSONObject.quote("qlL4ax??]_\"@");
      assertEquals("\"qlL4ax??]_\\\"@\"", string0);
      
      jSONObject1.put("qlL4ax??]_\"@", 0L);
      Float float0 = new Float((-1.0));
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      jSONObject1.getDouble("qlL4ax??]_\"@");
      jSONObject1.names();
      jSONObject2.toString();
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.399861965151394
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      Long long0 = new Long(1L);
      JSONObject jSONObject1 = jSONObject0.putOpt(": ", long0);
      jSONObject1.toString(1367, 1367);
      double double0 = jSONObject1.getDouble(": ");
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Float float0 = new Float(114.0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) float0);
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("cop", true);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONObject1.optBoolean("cop");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8816171508386506
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Boolean boolean0 = new Boolean("Hrd@jg\"Y@T1 s");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("Hrd@jg\"Y@T1 s", boolean0);
      jSONObject0.length();
      jSONObject0.optJSONArray("Hrd@jg\"Y@T1 s");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("Hrd@jg\"Y@T1 s"));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1694267446959503
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("false", jSONArray0);
      boolean boolean0 = jSONObject1.isNull("false");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0516309349741753
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Double, Object> hashMap1 = new HashMap<Double, Object>(hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("H_q,}+Y/'f3'z;x]-7", (Map) hashMap1);
      JSONObject.quote("H_q,}+Y/'f3'z;x]-7");
      Float float0 = new Float(0.0);
      jSONObject1.length();
      jSONObject0.optJSONObject("H_q,}+Y/'f3'z;x]-7");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.2826189440473135
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject1 = jSONObject0.put("'", false);
      JSONObject jSONObject2 = jSONObject0.accumulate("'", object0);
      jSONObject2.getJSONArray("'");
      jSONObject0.optString("qlLX42x?]]_\"@", "'");
      jSONObject2.keys();
      Boolean boolean0 = Boolean.valueOf(false);
      jSONObject1.putOpt("Z~|x$", boolean0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.571505033743328
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      int int0 = jSONObject0.optInt("{", 15);
      assertEquals(15, int0);
      
      Float float0 = new Float((-1.0));
      linkedList0.add(float0);
      jSONObject0.optInt("{");
      jSONObject0.optLong("fmp3&9j!is%6g", (long) 0);
      String string0 = jSONObject0.toString(2017, (-208));
      assertEquals("{}", string0);
      
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.append("{", jSONArray0);
      Float float1 = new Float((double) 15);
      linkedList0.offer(float1);
      Float.max(19.935953F, 15);
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      
      JSONObject.valueToString(jSONObject1);
      JSONObject.numberToString(float1);
      JSONArray jSONArray2 = jSONObject1.names();
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      String string0 = JSONObject.valueToString(hashMap0, 69, (-2747));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("!u", "!u");
      jSONObject0.isNull("!u");
      try { 
        jSONObject1.getDouble("!u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!u\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.109091891672855
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("w/");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("w/", jSONArray0);
      Byte byte0 = new Byte((byte) (-29));
      Byte.compare((byte)61, (byte)97);
      JSONObject jSONObject2 = jSONObject1.accumulate(",", jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      long long0 = new Integer((byte)61);
      Long long1 = new Long(0L);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.optInt("equ");
      Writer writer0 = jSONArray0.write(stringWriter0);
      // Undeclared exception!
      jSONObject2.write(writer0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.153060487470944
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      jSONObject0.put("JUIF?", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(11);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      jSONObject0.write(stringWriter1);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.2700999245402291
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("w/");
      Boolean.valueOf("getgetLong");
      String string0 = null;
      jSONObject0.opt((String) null);
      JSONObject.valueToString(jSONObject0);
      JSONTokener jSONTokener0 = null;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3085781000463086
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("i$NSwJ6/*HAG", 0);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.62990116462638
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("Hrd@g\"Y@T1s", jSONArray0);
      jSONObject1.toString((-3993), (-3993));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      jSONObject1.put("af|", (Collection) linkedList1);
      Double double0 = new Double(3468.2481);
      jSONObject1.accumulate("Hrd@g\"Y@T1s", double0);
      jSONObject1.optJSONObject("{\n\"java.lang.String@0000000005\": [],\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}");
      assertEquals(1, jSONArray0.length());
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3590924404157176
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = (-3968);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("Hrd@jg\"Y@T1 s", jSONArray0);
      jSONObject1.accumulate("Hrd@jg\"Y@T1 s", jSONArray0);
      JSONObject.quote("Hrd@jg\"Y@T1 s");
      // Undeclared exception!
      try { 
        jSONObject0.toString(int0, int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.3847257578340364
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("isbooleanValue", "isbooleanValue");
      JSONObject.getNames((Object) jSONObject0);
      String string0 = jSONObject0.getString("isbooleanValue");
      assertNotNull(string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONObject jSONObject1 = jSONObject0.put("k7\"IvbY$AZ", 0.0);
      try { 
        jSONObject1.getDouble("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("getcompareTo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of getcompareTo
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.182036069448834
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = JSONObject.doubleToString((-2228.50391));
      assertEquals("-2228.50391", string0);
      
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
      
      String[] stringArray0 = JSONObject.getNames((Object) "-2228.50391");
      assertNotNull(stringArray0);
      
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      JSONArray jSONArray0 = jSONObject3.names();
      assertEquals(1, stringArray0.length);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{^l|rD:Ij&r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 11 of {^l|rD:Ij&r
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{jJm-c1%=Kexc8{'5+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 15 of {jJm-c1%=Kexc8{'5+
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.568413258053965
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      jSONObject0.put("}(", 1167L);
      long long0 = jSONObject0.getLong("}(");
      assertEquals(1167L, long0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.4230294753958614
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      Long long0 = new Long((-2994L));
      JSONObject.valueToString(long0, 44, 44);
      jSONObject0.put("java.lang.Long@0000000002", (-1));
      long long1 = jSONObject0.getLong("java.lang.Long@0000000002");
      assertEquals((-1L), long1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.364100121883139
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("Hrd@jg\"Y@T1 s", jSONArray0);
      // Undeclared exception!
      jSONObject0.toString(3551, 3551);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate(":CZ/<#Tw|a'i`0<", (Object) null);
      boolean boolean0 = jSONObject0.isNull(":CZ/<#Tw|a'i`0<");
      assertTrue(boolean0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.469770230921831
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("!", "!");
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.get("!");
      boolean boolean0 = jSONObject0.isNull("!");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.putOpt("' ].onj48w", boolean1);
      jSONObject1.getBoolean("' ].onj48w");
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean("V}O");
      JSONObject jSONObject1 = jSONObject0.putOpt("V}O", "V}O");
      hashMap0.clone();
      jSONObject1.put("V}O", false);
      jSONObject1.getBoolean("V}O");
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("h[BgoZm=sh}`", false);
      boolean boolean0 = jSONObject1.optBoolean("h[BgoZm=sh}`");
      assertFalse(boolean0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, (-147L));
      assertEquals((-147L), long0);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("getwait");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getwait\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      int int0 = jSONObject0.optInt("\r");
      assertEquals(0, int0);
      
      String string1 = jSONObject0.toString(125);
      assertTrue(string1.equals((Object)string0));
      
      JSONObject jSONObject1 = jSONObject0.put("0", (double) 125);
      double double0 = jSONObject1.optDouble("0", (-2002.2861));
      assertEquals(125.0, double0, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8697843594404246
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[]", 564.139364736441);
      jSONObject1.optDouble("[]");
      StringWriter stringWriter0 = new StringWriter();
      String string0 = JSONObject.valueToString(stringWriter0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[12];
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1326L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.482665828576004
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 70, 2);
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      Long long0 = new Long(70);
      JSONObject jSONObject2 = jSONObject0.put("{}", (Object) long0);
      jSONObject2.optInt("{}");
      try { 
        jSONObject1.getJSONObject("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.112704644485289
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      Object object0 = new Object();
      jSONObject0.accumulate("XZOfSto", object0);
      try { 
        jSONObject0.getBoolean("XZOfSto");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"XZOfSto\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("] is not a JSONObject.", "] is not a JSONObject.");
      try { 
        jSONObject0.getBoolean("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.3365424484435127
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = "n";
      JSONObject jSONObject1 = jSONObject0.put("n", 2046);
      JSONObject jSONObject2 = jSONObject1.put("isdoubleToString", (Object) jSONObject0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      String string1 = ",";
      String string2 = "|Bs>3Z|k3h";
      Float float0 = new Float((float) 2046);
      int int0 = 46;
      // Undeclared exception!
      JSONObject.valueToString(jSONObject2, 46, 2046);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.2103209597031823
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt(": ", float0);
      jSONObject1.toString((-734), 88);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "3g\"g4gCXg}G$");
      JSONObject jSONObject0 = new JSONObject("3g\"g4gCXg}G$", stringArray0);
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.getInt("3g\"g4gCXg}G$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3g\\\"g4gCXg}G$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.177456155877438
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(45, 45);
      jSONObject0.put("SQ'2(2_D}G\\9DgIfZ", (-1));
      JSONObject.quote("SQ'2(2_D}G\\9DgIfZ");
      jSONObject0.has("SQ'2(2_D}G\\9DgIfZ");
      String string0 = "";
      Object object0 = new Object();
      String string1 = "kB{Aqul@0$:";
      jSONObject0.put("kB{Aqul@0$:", 0L);
      try { 
        jSONObject0.getJSONArray("kB{Aqul@0$:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"kB{Aqul@0$:\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.7668359830561607
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Boolean boolean0 = new Boolean("Hrd@jg\"Y@T1 s");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("Hrd@jg\"Y@T1 s", jSONArray0);
      jSONObject0.append("Hrd@jg\"Y@T1 s", boolean0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("!u", "!u");
      try { 
        jSONObject1.append("!u", "!u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[!u] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.6526187399036565
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Hrd@jg\"Y@T1 s");
      jSONObject0.names();
      jSONObject0.toString(80);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.4215002304496975
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Hrd@jgo\"Y@T1 s");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("'4b[yZ", 1L);
      assertEquals(1L, long0);
      
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.670792086347495
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, 204, (-513));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("!aPx=O/~C`_m\"@qAp&", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Double double0 = Double.valueOf(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("Missing value", 0L);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}e\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }e
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.33141971105748
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Double double0 = new Double((-2273.019412313015));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((-1189));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = JSONObject.quote("CDq1VbX)/n");
      assertEquals("\"CDq1VbX)/n\"", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = JSONObject.quote("-V,W</OIUH`2|l");
      assertEquals("\"-V,W<\\/OIUH`2|l\"", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.8229691200188713
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject.quote("Hrd@jg\"Y@T1 s");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "\"Hrd@jg\"Y@T1 s\"");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("{}", 1431);
      JSONObject jSONObject2 = jSONObject0.accumulate("{}", jSONObject1);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.5768141734243108
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "gFu\\bF\"A`sJIpOv3W";
      JSONObject jSONObject0 = new JSONObject((Object) "gFu\bF\"A`sJIpOv3W");
      jSONObject0.toString(42);
      jSONObject0.optString("3u[YLM[T 8L|HjN/Qv");
      // Undeclared exception!
      jSONObject0.toString(515);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.7545526900669153
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
      
      jSONObject0.toString(674, 2);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-2165), 1361);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble((String) null, 337.630006426);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("", true);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("JSONArray[", (Map) hashMap0);
      try { 
        jSONObject1.getJSONArray("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray[\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Boolean.valueOf("getgetLong");
      jSONObject0.opt("getgetLong");
      boolean boolean0 = jSONObject0.optBoolean("getgetLong", false);
      assertFalse(boolean0);
      
      jSONObject0.optJSONArray("getgetLong");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.2292408298387976
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optBoolean("Substring bounds error", false);
      String string0 = "Bad value from toJSONString: ";
      jSONObject0.optLong("Bad value from toJSONString: ");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("Bad value from toJSONString: ", jSONArray0);
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte) (-52));
      JSONObject jSONObject2 = jSONObject0.accumulate("] is not a JSONArray.", byte0);
      StringWriter stringWriter0 = new StringWriter();
      Byte.toUnsignedLong((byte)59);
      jSONArray0.toJSONObject((JSONArray) null);
      Long long0 = new Long(0L);
      JSONObject jSONObject3 = jSONObject2.append("j^1_nIc|!UkhXN<-", long0);
      jSONObject1.put("Substring bounds error", false);
      Long.max(0L, 185L);
      JSONObject.valueToString((Object) null, 0, (byte)0);
      Writer writer0 = jSONArray0.write(stringWriter0);
      jSONObject2.write(writer0);
      jSONObject0.toString(0);
      String string1 = "SR3{%\\p rg8It-4Ip";
      jSONObject3.opt("Bad value from toJSONString: ");
      try { 
        jSONObject0.get("SR3{%p rg8It-4Ip");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"SR3{%p rg8It-4Ip\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("F");
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "8\\u~K7#P>k4";
      JSONObject jSONObject1 = jSONObject0.putOpt(string0, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("iskeys", true);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.has("R aM9sR=XM");
      Object object0 = new Object();
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.2022413954579148
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Byte byte0 = new Byte((byte)5);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toString((int) (byte)5, (int) (byte)5);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("*;z.rgy_S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*;z.rgy_S\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.3306690175356604
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("");
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      JSONObject.getNames(jSONObject0);
      jSONObject1.optString("", "wai");
      try { 
        jSONObject0.getJSONObject("ZwJiZ/]W*;jh<@yZi=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ZwJiZ/]W*;jh<@yZi=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.979779180358441
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("!u", jSONArray0);
      jSONObject1.remove("!u");
      jSONObject1.isNull("!u");
      try { 
        jSONObject0.getLong("\"?Y/$U6:F\"OavfRSn=Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"?Y/$U6:F\\\"OavfRSn=Y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.319904429847949
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate(".q3X1W9]I-g@}LstO", ".q3X1W9]I-g@}LstO");
      jSONObject0.optString(".q3X1W9]I-g@}LstO");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.166330769463752
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("qlLX42x?]]_\"@", hashMap0);
      jSONObject0.optString("\"\"", "{}");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.214734015212756
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, (-2081));
      assertEquals((-2081), int0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("] is not a number.", 97);
      assertEquals(97, int0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.2483298646280048
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("pxc]~vA!'[nE+X", (Collection) linkedList0);
      jSONObject0.put("min", (-4270.209));
      int int0 = jSONObject0.getInt("min");
      assertEquals((-4270), int0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.874099239168671
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(2241);
      jSONObject0.put("", (Object) integer0);
      jSONObject0.put("", (-1.0));
      jSONObject0.optLong("");
      jSONObject0.getInt("");
      jSONObject0.optJSONObject("&<Ywh;<6)?z Vp|");
      try { 
        jSONObject0.getInt("&<Ywh;<6)?z Vp|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&<Ywh;<6)?z Vp|\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("vS,qn|W]kP(.4-;", (double) 70);
      assertEquals(1, jSONObject0.length());
      
      int int0 = jSONObject0.getInt("vS,qn|W]kP(.4-;");
      assertEquals(70, int0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("true", 293.705689);
      jSONObject1.optLong("true");
      jSONObject1.optJSONArray("[");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("!", "!");
      try { 
        jSONObject0.getLong("!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) "\"\"");
      try { 
        jSONObject1.getInt("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt(";)LWI~G/hZeqa_1J/*", ";)LWI~G/hZeqa_1J/*");
      try { 
        jSONObject0.getJSONObject(";)LWI~G/hZeqa_1J/*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";)LWI~G/hZeqa_1J/*\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("getgetL9qg", false);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("getgetL9qg");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "\\u";
      String string1 = JSONObject.quote(string0);
      assertEquals("\"\\\\u\"", string1);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("0e;oQXQKG9Lg[5", "0e;oQXQKG9Lg[5");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.9906188255641685
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.valueToString("getgetJSONArray");
      assertNotNull(string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Long long0 = new Long((-3968));
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("qlLX42x?]]_\"@", hashMap0);
      jSONObject0.optString("\"\"", (String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("] is not a JSONArray.", (-671.2177534));
      assertEquals((-671.2177534), double0, 0.01);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.8292330802920644
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.addAll((Collection<? extends String>) linkedList1);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      Boolean boolean0 = new Boolean("");
      linkedList0.stream();
      jSONObject0.optString("", "");
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = JSONObject.valueToString("pu", 4584, 4584);
      assertNotNull(string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.4278545372819558
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString(2);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.3960882220782682
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Double double0 = new Double(70);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(70);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString(",QxGTb@");
      assertEquals("", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("getoptJSONObject");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("P94!!?");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      try { 
        jSONObject0.getBoolean("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString((Object) null, 70, 70);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 59, 59);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = JSONObject.quote("&,;Krm3]O02^mC");
      assertEquals("\"&,;Krm3]O02^mC\"", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("<Z{:PFD");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("-:oVkHV'X7Q");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      try { 
        jSONObject0.getInt("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(boolean0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("wa");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wa
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("getparseByte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getparseByte
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
