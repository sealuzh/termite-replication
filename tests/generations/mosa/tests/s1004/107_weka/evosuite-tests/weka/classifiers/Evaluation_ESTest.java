/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 13 23:09:09 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.pmml.consumer.NeuralNetwork;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.clusterers.EM;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Evaluation.handleCostOption("", (-1));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_MissingClass = (double) (-2);
      evaluation0.errorRate();
      double double0 = evaluation0.m_Correct;
      evaluation0.SFEntropyGain();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      double[] doubleArray1 = evaluation0.m_MarginCounts;
      evaluation0.m_NumClasses = (-2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DecisionStump decisionStump0 = new DecisionStump();
      Utils.SMALL = (double) (-1);
      evaluation0.falsePositiveRate(0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      classificationViaRegression0.getTechnicalInformation();
      instances0.remove((Object) classificationViaRegression0);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.178235655793613
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumSchemeEntropy = 2472.40872432393;
      LWL lWL0 = new LWL();
      DecisionStump decisionStump0 = new DecisionStump();
      Random.setNextRandom(1);
      double double0 = new Integer(2);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      evaluation0.equals(".arff");
      evaluation0.getDiscardPredictions();
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.067094546561575
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation.handleCostOption("", (-2024));
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedTruePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1099578127327736
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation.handleCostOption("", (-2024));
      Instances instances0 = testInstances0.generate();
      instances0.deleteAttributeType(407);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.relativeAbsoluteError();
      evaluation0.setPriors(instances0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.361168844420639
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Evaluation.handleCostOption("", (-1));
      Instances instances0 = testInstances0.generate();
      SGDText sGDText0 = new SGDText();
      LinearRegression linearRegression0 = new LinearRegression();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.unweightedMicroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      LinearRegression linearRegression0 = new LinearRegression();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.75447011601621
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-2));
      evaluation0.numFalsePositives((-1));
      evaluation0.kappa();
      evaluation0.KBRelativeInformation();
      SGDText sGDText0 = new SGDText();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.KBInformation();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.1000000014901161;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 5824.1821211782;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) sGDText0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3919078022510014
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.getWords();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numInstances();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.rootRelativeSquaredError();
      Evaluation evaluation2 = new Evaluation(instances0);
      Random.setNextRandom(7);
      SparseInstance sparseInstance0 = new SparseInstance(1830);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      try { 
        evaluation2.evaluateModelOnce((double[]) null, (Instance) sparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3460294140418307
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.enableAllAttributes();
      Evaluation.handleCostOption("", (-2024));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toSummaryString(true);
      // Undeclared exception!
      try { 
        evaluation0.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3842514175056033
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation.handleCostOption("", (-1728974146));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toSummaryString((String) null, true);
      Random.setNextRandom((-1));
      // Undeclared exception!
      try { 
        evaluation0.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4946236559139785
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Evaluation.handleCostOption("", (-1));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9480722763279843
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.enableAllAttributes();
      Evaluation.handleCostOption("", (-2024));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderPRC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.411731021156513
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".arff");
      evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      Evaluation.getGlobalInfo(sGDText0);
      Utils.log2 = (double) (-2);
      evaluation0.priorEntropy();
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.067094546561575
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation.handleCostOption("", (-2024));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Random.setNextRandom((-2024));
      // Undeclared exception!
      try { 
        evaluation0.precision(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3776571880428996
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation.handleCostOption("", (-2024));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.relativeAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation0.weightedRecall();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9530132000659004
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Evaluation.handleCostOption("", (-1));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_MissingClass = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation1.crossValidateModel((Classifier) gaussianProcesses0, instances0, (-1), (java.util.Random) mockRandom0, (Object[]) gaussianProcesses0.TAGS_FILTER);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "j";
      stringArray0[1] = "setFilterType";
      stringArray0[2] = "C";
      stringArray0[3] = "Bin Means";
      stringArray0[4] = "!;(#0J%yoMj";
      stringArray0[5] = "";
      try { 
        Evaluation.evaluateModel((Classifier) naiveBayesMultinomialUpdateable0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getCapabilities();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("weka/core/Capabilities.props", arrayList0, 2);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_MinTarget = (-3877.49026490661);
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation evaluation3 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation2.crossValidateModel((Classifier) decisionStump0, instances0, 3, (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation.handleCostOption("", (-2024));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1357302930377724
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.setPriors(instances0);
      evaluation0.areaUnderPRC(109);
      evaluation0.falseNegativeRate(1);
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 1;
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'F';
      charArray0[4] = '[';
      charArray0[5] = '<';
      charArray0[6] = ':';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2444), charArray0, 1007);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9753388679829054
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Evaluation.handleCostOption("", (-1));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_MissingClass = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation1.numTrueNegatives(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1318087244103214
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LinearRegression linearRegression0 = new LinearRegression();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.areaUnderPRC(0);
      evaluation0.falseNegativeRate(1);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) linearRegression0, instances0, 0, (java.util.Random) mockRandom0, (Object[]) linearRegression0.TAGS_SELECTION);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5006362672431495
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      double double0 = evaluation0.m_SumClass;
      evaluation0.sizeOfPredictedRegions();
      evaluation0.unweightedMacroFmeasure();
      double double1 = evaluation0.m_SumPriorSqrErr;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1173.432424362442);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 2967;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      evaluation0.updateMargins(doubleArray0, 6, 6);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      DenseInstance denseInstance0 = new DenseInstance(Double.NaN, doubleArray0);
      try { 
        evaluation0.updateStatsForPredictor(Double.NaN, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.9480722763279843
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation.handleCostOption("", (-2024));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4946236559139785
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Evaluation.handleCostOption("", (-1));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.correlationCoefficient();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation.handleCostOption("", (-2024));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2626996209612513
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      double[] doubleArray0 = new double[0];
      testInstances0.setNumRelationalString((-569));
      DenseInstance denseInstance0 = new DenseInstance(0, doubleArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.numFalsePositives(1);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNoClass(true);
      LinearRegression linearRegression0 = new LinearRegression();
      Random.setNextRandom(14);
      Random.setNextRandom((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      double double1 = evaluation0.m_SumAbsErr;
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation.getGlobalInfo(linearRegression0);
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = 'i';
      charArray0[2] = '$';
      evaluation0.num2ShortID(14, charArray0, 100);
      double double2 = evaluation0.weightedMatthewsCorrelation();
      assertNotEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      String[] stringArray0 = new String[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      textDirectoryLoader0.setOptions(stringArray0);
      Classifier classifier0 = AbstractClassifier.makeCopy(randomSubSpace0);
      try { 
        evaluation0.evaluateModelOnce(classifier0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.256957456335566
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumKBInfo = (-2008.0);
      evaluation0.trueNegativeRate((-2));
      evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      evaluation1.numTrueNegatives(912);
      SGD sGD0 = new SGD();
      MockRandom mockRandom0 = new MockRandom((-1));
      try { 
        evaluation1.crossValidateModel((Classifier) sGD0, instances0, (-2597), (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.94843118075652
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      EM eM0 = new EM();
      Capabilities capabilities0 = eM0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      capabilities0.enableAllAttributes();
      DecisionStump decisionStump0 = new DecisionStump();
      LogitBoost logitBoost0 = new LogitBoost();
      String string0 = Evaluation.getGlobalInfo(logitBoost0);
      assertEquals("\nSynopsis for weka.classifiers.meta.LogitBoost:\n\nClass for performing additive logistic regression. \nThis class performs classification using a regression scheme as the base learner, and can handle multi-class problems.  For more information, see\n\nJ. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.\n\nCan do efficient internal cross-validation to determine appropriate number of iterations.", string0);
      
      LinearRegression linearRegression0 = new LinearRegression();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTruePositives(0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      assertTrue(evaluation0.getDiscardPredictions());
      
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.incorrect();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1243624618577965
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = evaluation0.m_MarginCounts;
      DecisionStump decisionStump0 = new DecisionStump();
      Utils.SMALL = (double) (-1);
      double double0 = evaluation0.falsePositiveRate(0);
      assertEquals(0.0, double0, 0.01);
      
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      instances0.remove((Object) classificationViaRegression0);
      evaluation0.SFSchemeEntropy();
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.141592653589793;
      DenseInstance denseInstance0 = new DenseInstance(211.1076350897806, doubleArray0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, denseInstance0, 2373.40295);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(0, doubleArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, denseInstance0, 1542.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.247206844974067
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toMatrixString("@data");
      double double1 = Evaluation.MIN_SF_PROB;
      evaluation1.areaUnderPRC((-2392));
      double[] doubleArray0 = evaluation1.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      evaluation0.numInstances();
      evaluation0.numInstances();
      evaluation0.pctIncorrect();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toCumulativeMarginDistributionString();
      Random.setNextRandom(85);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.precision(1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance(311);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      MultiScheme multiScheme0 = new MultiScheme();
      try { 
        evaluation2.evaluateModelOnceAndRecordPrediction((Classifier) multiScheme0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.177733591374392
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      Evaluation evaluation2 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 286.2502882137575;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(286.2502882137575, doubleArray0);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction((Classifier) classificationViaRegression0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6897815452679903
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_WithClass = (double) (-2);
      testInstances0.setNoClass(false);
      double double0 = evaluation0.m_SumPredicted;
      evaluation0.trueNegativeRate((-2));
      evaluation0.numInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Random.setNextRandom(13);
      Random.setNextRandom((-2329));
      evaluation0.rootMeanSquaredError();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.getHeader();
      evaluation0.areaUnderPRC(1246);
      evaluation0.makeDistribution(1.0);
      double double1 = evaluation0.KBMeanInformation();
      assertEquals((-2.0), evaluation0.numInstances(), 0.01);
      assertEquals(-0.0, double1, 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5800012212975365
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      double[] doubleArray0 = evaluation0.m_MarginCounts;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      Evaluation evaluation2 = new Evaluation(instances0);
      double[] doubleArray1 = evaluation0.m_ClassPriors;
      evaluation2.m_SumAbsErr = 1.7976931348623157E308;
      evaluation1.updateNumericScores(doubleArray0, doubleArray1, 2586.011436797523);
      // Undeclared exception!
      try { 
        evaluation2.fMeasure((-1789));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1789
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      Object[] objectArray0 = new Object[7];
      MockRandom mockRandom0 = new MockRandom();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("turnChecksOff", arrayList0, 1006);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.7330765550663454
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      String string0 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance((-4316.64026412887), doubleArray0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_Incorrect;
      evaluation0.toSummaryString();
      evaluation0.num2ShortID(99, (char[]) null, 0);
      String string1 = evaluation0.getRevision();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals("9101", string1);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      assertTrue(evaluation0.getDiscardPredictions());
      
      DecisionStump decisionStump0 = new DecisionStump();
      Object[] objectArray0 = new Object[7];
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.evaluateModel((Classifier) decisionStump0, instances0, objectArray0);
      assertEquals(0.0, evaluation1.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.372352861629787
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate((-2506));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.KBMeanInformation();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      SMO sMO0 = new SMO();
      double double2 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double2, 0.01);
      
      evaluation0.numTrueNegatives(912);
      evaluation0.weightedTruePositiveRate();
      Random.setNextRandom(5859);
      double double3 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double3, double1, 0.01);
      
      evaluation0.getHeader();
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.1443511266235658
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-2));
      evaluation0.numInstances();
      evaluation0.m_Incorrect = (-1312.113141207027);
      evaluation0.pctIncorrect();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.makeDistribution((-1449.242986555468));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1449
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-2));
      evaluation0.numInstances();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation1.makeDistribution(0.0);
      double double0 = evaluation1.m_TotalCoverage;
      evaluation1.SFEntropyGain();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, binarySparseInstance0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SMO sMO0 = new SMO();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.4890027922505893
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(0, doubleArray0);
      DecisionStump decisionStump0 = new DecisionStump();
      instances0.remove((Object) denseInstance0);
      SGDText sGDText0 = new SGDText();
      LinearRegression linearRegression0 = new LinearRegression();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.unweightedMicroFmeasure();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numInstances();
      evaluation0.pctIncorrect();
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.weightedTrueNegativeRate();
      DecisionStump decisionStump0 = new DecisionStump();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 700.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation3 = new Evaluation(instances0);
      double double1 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("zc}$");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "u^&");
      SMO sMO0 = new SMO();
      try { 
        Evaluation.handleCostOption("zc}$", 88);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"u^&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.1808698380099525
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_WithClass = (double) (-2);
      testInstances0.setNoClass(false);
      evaluation0.KBMeanInformation();
      evaluation0.trueNegativeRate((-2));
      evaluation0.numInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      ListOptions listOptions0 = new ListOptions();
      boolean boolean0 = evaluation0.equals(listOptions0);
      assertEquals(-0.0, evaluation0.SFMeanEntropyGain(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.m_MarginCounts;
      evaluation0.falsePositiveRate((-1));
      SGDText sGDText0 = new SGDText();
      evaluation0.updateMargins(doubleArray0, 1, (-1504.52612018));
      try { 
        CostMatrix.parseMatlab(" ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.m_ClassPriors;
      evaluation0.falsePositiveRate((-1));
      SGDText sGDText0 = new SGDText();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1, (-1504.52612018));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      DecisionStump decisionStump0 = new DecisionStump();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(2160.85587, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.6989759210113973
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      testInstances0.setNumString(63);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 63;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 63;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 63;
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = (double) 63;
      doubleArray0[8] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 3353.0915);
      evaluation0.numInstances();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.confusionMatrix();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.correct();
      try { 
        AbstractClassifier.forName(".arff", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .arff
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8564909139241832
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      double[] doubleArray1 = evaluation0.m_MarginCounts;
      DecisionStump decisionStump0 = new DecisionStump();
      DenseInstance denseInstance0 = new DenseInstance((-1), (double[]) null);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray1, denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.0033891361038862
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      double[] doubleArray0 = evaluation0.getClassPriors();
      LWL lWL0 = new LWL();
      DecisionStump decisionStump0 = new DecisionStump();
      DenseInstance denseInstance0 = new DenseInstance(684.78176239, (double[]) null);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      LWL lWL0 = new LWL();
      DecisionStump decisionStump0 = new DecisionStump();
      DenseInstance denseInstance0 = new DenseInstance(2, (double[]) null);
      try { 
        evaluation0.evaluationForSingleInstance((double[]) null, denseInstance0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.3256787446058436
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation.handleCostOption("", 0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString((String) null, true);
      assertEquals("null\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.1346568241817123
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Instances instances1 = new Instances(instances0);
      evaluation0.toSummaryString("@data", false);
      try { 
        Evaluation.handleCostOption("@data", 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      DenseInstance denseInstance0 = new DenseInstance(2);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) inputMappedClassifier0, (Instance) denseInstance0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numInstances();
      double double0 = evaluation0.pctIncorrect();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.areaUnderROC((-2));
      double double1 = evaluation1.SFMeanEntropyGain();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation1.SFSchemeEntropy();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.m_Incorrect;
      evaluation0.getDiscardPredictions();
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.6594083205511834
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      evaluation0.getClassPriors();
      evaluation0.sizeOfPredictedRegions();
      double double0 = evaluation0.unweightedMacroFmeasure();
      evaluation0.m_TotalCost = (double) (-1);
      double double1 = evaluation0.m_SumPriorSqrErr;
      String string0 = evaluation0.toClassDetailsString("@data");
      assertEquals("@data\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.falsePositiveRate(416);
      ArffLoader arffLoader0 = new ArffLoader();
      ArffLoader arffLoader1 = new ArffLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-2));
      evaluation0.totalCost();
      double double2 = evaluation1.SFMeanSchemeEntropy();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      MockRandom mockRandom0 = new MockRandom((-1842177144));
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, (-1842177144), (java.util.Random) mockRandom0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_SumSchemeEntropy;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      try { 
        evaluation1.updatePriors(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.009653988412479
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.156958459902444
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numInstances();
      evaluation0.pctIncorrect();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-19.0);
      DenseInstance denseInstance0 = new DenseInstance((-19.0), doubleArray0);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Random.setNextRandom((-2));
      SGDText sGDText0 = new SGDText();
      evaluation0.rootRelativeSquaredError();
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.3140250061679084
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LinearRegression linearRegression0 = new LinearRegression();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.setPriors(instances0);
      evaluation0.areaUnderPRC(109);
      LinearRegression linearRegression1 = new LinearRegression();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 109;
      DenseInstance denseInstance0 = new DenseInstance(2);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.1574652011679243
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.m_MarginCounts;
      evaluation0.sizeOfPredictedRegions();
      evaluation0.falsePositiveRate((-1));
      SGDText sGDText0 = new SGDText();
      LinearRegression linearRegression0 = new LinearRegression();
      evaluation0.SFMeanPriorEntropy();
      try { 
        evaluation0.evaluateModelOnce((double) 0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      testInstances0.toString();
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 2967, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1843752507353837
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.enableAllAttributes();
      Evaluation.handleCostOption("", (-2024));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(481);
      try { 
        evaluation0.evaluateModelOnce((double) (-2024), (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.8982019010054025
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toMatrixString(".bsi");
      assertEquals(".bsi\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.areaUnderPRC((-1));
      evaluation0.setPriors(instances0);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.9806110431079107
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.enumerateAttributes();
      Evaluation evaluation0 = new Evaluation(instances0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      double double0 = evaluation0.trueNegativeRate((byte)0);
      assertEquals(0.0, double0, 0.01);
      
      instances0.toString();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.SFMeanEntropyGain();
      assertEquals(Double.NaN, double1, 0.01);
      
      Random.setNextRandom((byte)0);
      double double2 = evaluation0.areaUnderROC((byte)0);
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.8466435205545344
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, " ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_Correct;
      double double2 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.3706633242846626
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate((-2));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.KBMeanInformation();
      SMO sMO0 = new SMO();
      double double2 = evaluation0.numTrueNegatives((-2));
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.truePositiveRate(0);
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      double double4 = evaluation0.incorrect();
      assertEquals(double4, double3, 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.enumerateAttributes();
      Evaluation evaluation0 = new Evaluation(instances0);
      Version.VERSION = "@relation";
      SGDText sGDText0 = new SGDText();
      evaluation0.numTrueNegatives(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(136.66245, doubleArray0);
      evaluation0.updateMargins(doubleArray0, 1, 1.0);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-2));
      double double0 = evaluation0.numInstances();
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      Evaluation.k_MarginResolution = 1;
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.relativeAbsoluteError();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toMatrixString(" ");
      assertEquals(" \n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double0 = evaluation0.pctIncorrect();
      evaluation0.meanPriorAbsoluteError();
      Random.setNextRandom((-1));
      evaluation0.getHeader();
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.8837817983058203
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.toClassDetailsString();
      double double0 = evaluation0.m_Correct;
      evaluation0.areaUnderPRC((-1));
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumClassPredicted = (-1.0);
      double double0 = evaluation0.numInstances();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(306);
      try { 
        evaluation0.evaluateModelOnce((-703.0), (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -703
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setWordSeparators(".arff");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Random.setNextRandom((-2));
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(1553);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) filteredClassifier0, (Instance) sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.areaUnderROC((-1));
      evaluation0.SFMeanEntropyGain();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) inputMappedClassifier0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      testInstances0.setNumString((-1796));
      evaluation0.meanPriorAbsoluteError();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate((-2));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.numInstances();
      double double1 = evaluation0.pctIncorrect();
      evaluation0.meanPriorAbsoluteError();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation1.SFMeanEntropyGain();
      assertEquals(double2, double1, 0.01);
      
      Random.setNextRandom(74);
      evaluation0.equals((Object) null);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation evaluation1 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[7];
      Evaluation evaluation2 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation2.crossValidateModel((Classifier) decisionStump0, instances0, 1006, (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      evaluation0.useNoPriors();
      testInstances0.setNumString((-1796));
      evaluation0.trueNegativeRate((-1));
      HashSet<NeuralNetwork> hashSet0 = new HashSet<NeuralNetwork>();
      instances0.removeAll(hashSet0);
      testInstances0.setClassIndex(7);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.933171331038418
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.numTrueNegatives((-2));
      evaluation0.numTruePositives((-1));
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Random.setNextRandom(1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.788281823064325
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.weightedMatthewsCorrelation();
      evaluation1.pctIncorrect();
      evaluation0.meanPriorAbsoluteError();
      Evaluation evaluation3 = new Evaluation(instances0);
      Random.setNextRandom(928);
      // Undeclared exception!
      try { 
        evaluation0.recall(15000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15000
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.9475750055804681
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      Evaluation evaluation3 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = evaluation2.m_ClassPriors;
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      double[][] doubleArray1 = evaluation3.confusionMatrix();
      assertEquals(0, doubleArray1.length);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation.handleCostOption("", (-2024));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation.handleCostOption("", 1);
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.numInstances(), 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNoClass(true);
      LinearRegression linearRegression0 = new LinearRegression();
      Random.setNextRandom(34);
      Random.setNextRandom(1);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance(504.0, doubleArray0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation0.m_Unclassified;
      double double2 = evaluation0.pctCorrect();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.5891783264039585
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      Evaluation.k_MarginResolution = 1;
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      boolean boolean0 = instances0.remove((Object) evaluation0);
      assertFalse(boolean0);
      
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.7552951290313565
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation1.evaluateModel((Classifier) decisionStump0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      assertTrue(evaluation0.getDiscardPredictions());
      
      DecisionStump decisionStump0 = new DecisionStump();
      String string0 = Evaluation.getGlobalInfo(decisionStump0);
      assertEquals("\nSynopsis for weka.classifiers.trees.DecisionStump:\n\nClass for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.7316728013692297
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.m_SumSchemeEntropy = 399.4944025265558;
      try { 
        evaluation0.evaluateModel((Classifier) inputMappedClassifier0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctIncorrect();
      SGDText sGDText0 = new SGDText();
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.9873728519693974
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".bsi");
      evaluation0.pctIncorrect();
      evaluation0.areaUnderPRC((-1));
      try { 
        Evaluation.evaluateModel(".bsi\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name .bsi
         //  a b   <-- classified as
         //  0 0 | a = class1
         //  0 0 | b = class2
         // .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.918815296819859
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.5212022523213995
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      Evaluation evaluation2 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.m_ClassPriors;
      evaluation2.updateNumericScores(doubleArray0, doubleArray0, 12.0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, (int[]) null, (-1728217072));
      try { 
        evaluation2.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      double double1 = evaluation0.numFalseNegatives(1);
      double double2 = evaluation0.totalCost();
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      MockRandom mockRandom0 = new MockRandom(4508L);
      try { 
        evaluation0.crossValidateModel((Classifier) cVParameterSelection0, (Instances) null, (-2680), (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      double[] doubleArray1 = evaluation0.m_MarginCounts;
      evaluation0.sizeOfPredictedRegions();
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        Evaluation.evaluateModel("@relation", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name @relation.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      testInstances0.setNumString((-1796));
      double double0 = evaluation0.trueNegativeRate((-1));
      assertEquals(0.0, double0, 0.01);
      
      HashSet<NeuralNetwork> hashSet0 = new HashSet<NeuralNetwork>();
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      LWL lWL0 = new LWL();
      String string0 = Evaluation.getGlobalInfo(lWL0);
      assertEquals("\nSynopsis for weka.classifiers.lazy.LWL:\n\nLocally weighted learning. Uses an instance-based algorithm to assign instance weights which are then used by a specified WeightedInstancesHandler.\nCan do classification (e.g. using naive Bayes) or regression (e.g. using linear regression).\n\nFor more info, see\n\nEibe Frank, Mark Hall, Bernhard Pfahringer: Locally Weighted Naive Bayes. In: 19th Conference in Uncertainty in Artificial Intelligence, 249-256, 2003.\n\nC. Atkeson, A. Moore, S. Schaal (1996). Locally weighted learning. AI Review..", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.4343958365366474
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".bsi");
      evaluation0.weightedRecall();
      evaluation0.weightedAreaUnderPRC();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-31));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.260151162831581
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      SGDText sGDText0 = new SGDText();
      evaluation0.numTrueNegatives((-1));
      evaluation0.weightedTruePositiveRate();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      DecisionStump decisionStump0 = new DecisionStump();
      evaluation0.falsePositiveRate((-2));
      SGDText sGDText0 = new SGDText();
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.9824884367461533
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LinearRegression linearRegression0 = new LinearRegression();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.numTrueNegatives((-1));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.5656147518790906
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString(".arff");
      assertEquals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedPrecision();
      evaluation0.weightedAreaUnderPRC();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.SFEntropyGain();
      Random.setNextRandom((-1112551771));
      evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.8778313984005202
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Locale.getISOCountries();
      Vote vote0 = new Vote();
      Capabilities capabilities0 = vote0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      DenseInstance denseInstance0 = new DenseInstance(14);
      instances0.add((Instance) denseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate(248);
      evaluation0.numInstances();
      evaluation0.pctIncorrect();
      evaluation0.meanPriorAbsoluteError();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision(14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed((-2));
      evaluation0.areaUnderROC((-2));
      double double1 = evaluation0.kappa();
      assertEquals(1.0, double1, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed((-2));
      try { 
        evaluation0.crossValidateModel(" ", instances0, (-2), testInstances0.DEFAULT_WORDS, (java.util.Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called:  
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctIncorrect();
      evaluation0.areaUnderPRC((-1));
      double double1 = evaluation0.KBMeanInformation();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.priorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation1.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.451920750018101
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      LWL lWL0 = new LWL();
      DecisionStump decisionStump0 = new DecisionStump();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation.getGlobalInfo(serializedClassifier0);
      evaluation0.SFEntropyGain();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3135.56141975, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.5103090061340354
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      LWL lWL0 = new LWL();
      DecisionStump decisionStump0 = new DecisionStump();
      evaluation0.SFEntropyGain();
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      PipedReader pipedReader0 = new PipedReader();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.areaUnderROC((-2));
      double double1 = evaluation0.m_SumKBInfo;
      double double2 = evaluation0.m_SumErr;
      double double3 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.042901725385895
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_WithClass = (double) (-2);
      testInstances0.setNoClass(false);
      evaluation0.trueNegativeRate((-2));
      evaluation0.numInstances();
      assertEquals((-2.0), evaluation0.numInstances(), 0.01);
      
      LinearRegression linearRegression0 = new LinearRegression();
      String string0 = Evaluation.getGlobalInfo(linearRegression0);
      assertEquals("\nSynopsis for weka.classifiers.functions.LinearRegression:\n\nClass for using linear regression for prediction. Uses the Akaike criterion for model selection, and is able to deal with weighted instances.", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-2));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("\tSets training file.\n", arrayList0, 105);
      instances0.containsAll(instances1);
      evaluation0.rootMeanSquaredError();
      evaluation0.SFMeanEntropyGain();
      Vote vote0 = new Vote();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) vote0, instances1, 105, (java.util.Random) mockRandom0, (Object[]) vote0.TAGS_RULES);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.6663317712332457
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Evaluation.handleCostOption("", (-1));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LinearRegression linearRegression0 = new LinearRegression();
      Evaluation evaluation0 = new Evaluation(instances0);
      linearRegression0.turnChecksOn();
      double double0 = evaluation0.m_SumSqrErr;
      double double1 = evaluation0.m_WithClass;
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) linearRegression0, instances0, 494, (java.util.Random) mockRandom0, (Object[]) linearRegression0.TAGS_SELECTION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".bsi");
      evaluation0.weightedPrecision();
      evaluation0.weightedAreaUnderPRC();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.8581127731396472
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      try { 
        Evaluation.evaluateModel((Classifier) null, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LinearRegression linearRegression0 = new LinearRegression();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.setPriors(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) linearRegression0, instances0, 1, (java.util.Random) mockRandom0, (Object[]) linearRegression0.TAGS_SELECTION);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.9225092092602771
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.m_MarginCounts;
      evaluation0.sizeOfPredictedRegions();
      SGDText sGDText0 = new SGDText();
      evaluation0.updateMargins(doubleArray0, 1, (-1504.52612018));
      MatlabLoader matlabLoader0 = new MatlabLoader();
      DenseInstance denseInstance0 = new DenseInstance(Double.NaN, doubleArray0);
      try { 
        evaluation0.updateStatsForPredictor(466.4491871452, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate((-2));
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      Evaluation.getGlobalInfo(linearRegression0);
      double double1 = evaluation0.matthewsCorrelationCoefficient((-2));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      instances0.sort((Comparator<? super Instance>) null);
      LWL lWL0 = new LWL();
      evaluation0.correct();
      try { 
        evaluation0.updateStatsForPredictor(5, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_ClassPriorsSum;
      assertEquals(22.0, double1, 0.01);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double1, 0.01);
      
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate((-2));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.numInstances();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.pctIncorrect();
      double double3 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double3, double2, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.makeDistribution(0.0);
      assertEquals(Double.NaN, evaluation1.pctIncorrect(), 0.01);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".bsi");
      evaluation0.pctIncorrect();
      evaluation0.areaUnderPRC((-1));
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate((-2));
      double double1 = evaluation0.numInstances();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.pctIncorrect();
      double double3 = evaluation0.meanPriorAbsoluteError();
      double double4 = evaluation0.rootMeanSquaredError();
      assertEquals(double4, double2, 0.01);
      
      double double5 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double5, double3, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numInstances();
      double double0 = evaluation0.pctIncorrect();
      evaluation0.addNumericTrainClass((-1), (-1));
      double double1 = evaluation0.unweightedMacroFmeasure();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.correct();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate((-2));
      double double1 = evaluation0.numInstances();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.meanPriorAbsoluteError();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation1.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double2, 0.01);
      
      evaluation0.confusionMatrix();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.getRevision();
      double[] doubleArray0 = evaluation2.getClassPriors();
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, evaluation2.SFPriorEntropy(), 0.01);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.1878840226652085
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      Evaluation evaluation1 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation1.pctIncorrect(), 0.01);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation evaluation1 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[7];
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.evaluateModel((Classifier) decisionStump0, instances0, objectArray0);
      double[] doubleArray0 = evaluation2.getClassPriors();
      assertNotNull(doubleArray0);
      
      evaluation2.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation2.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation2.rootMeanSquaredError(), 0.01);
      assertEquals(0.0, evaluation2.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falseNegativeRate((-1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.595722115257705
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString(".arff");
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision((-196));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -196
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      DecisionStump decisionStump0 = new DecisionStump();
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.confusionMatrix();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.meanPriorAbsoluteError();
      double double1 = evaluation0.meanPriorAbsoluteError();
      double double2 = evaluation0.rootMeanSquaredError();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      LWL lWL0 = new LWL();
      DecisionStump decisionStump0 = new DecisionStump();
      String string0 = evaluation1.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate((-179));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.numInstances();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.pctIncorrect();
      double double2 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.avgCost();
      assertNotEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.029298784285118
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".bsi");
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1), charArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".bsi");
      evaluation0.weightedPrecision();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(0, testInstances0.getNumRelationalString());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      zeroR0.getOptions();
      zeroR0.getOptions();
      Evaluation.wekaStaticWrapper(zeroR0, ">Uh!TX");
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      DecisionStump.main(testInstances0.DEFAULT_WORDS);
      LWL lWL0 = new LWL();
      DecisionStump decisionStump0 = new DecisionStump();
      String string0 = Evaluation.getGlobalInfo(decisionStump0);
      assertEquals("\nSynopsis for weka.classifiers.trees.DecisionStump:\n\nClass for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", string0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.setSeed(0L);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String string0 = Evaluation.makeOptionString(costSensitiveClassifier0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Evaluation.getGlobalInfo(multilayerPerceptron0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation.makeOptionString(multilayerPerceptron0, false);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      assertEquals(".libsvm", libSVMLoader0.getFileExtension());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.3368883075390159
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      int[] intArray0 = new int[4];
      intArray0[0] = 33;
      intArray0[1] = (-1114383320);
      intArray0[2] = 122;
      intArray0[3] = 11;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.975, intArray0, (-1114383320));
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Evaluation.getGlobalInfo(multilayerPerceptron0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation.makeOptionString(multilayerPerceptron0, true);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      assertEquals("http://", libSVMLoader0.retrieveURL());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation.handleCostOption((String) null, Integer.MIN_VALUE);
      testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation1.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, "a*Srlk2H<Ub");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }
}
