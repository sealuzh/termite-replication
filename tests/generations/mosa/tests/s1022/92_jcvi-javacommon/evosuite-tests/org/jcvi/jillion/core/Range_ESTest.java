/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 22:13:24 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0617646440857413
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of((-2147483632L));
      Range range1 = Range.of((-2147483632L));
      Range range2 = Range.of((-2147483632L), 255L);
      range2.equals("=ZiUC0z_\"Nj9xF!mYE");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range2.getBegin(range_CoordinateSystem0);
      assertEquals((-2147483632L), long0);
      
      boolean boolean0 = range2.equals(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      String string0 = range0.toString();
      assertEquals("[ -2147483632 .. -2147483632 ]/0B", string0);
      assertFalse(range0.equals((Object)range2));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4031195230966382
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(834L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 450L, 4294967295L);
      range1.split(4294967295L);
      Long long0 = new Long(1L);
      range1.equals(range0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6332317724902357
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775792L, 9223372036854775792L);
      Range range0 = Range.ofLength(9223372036854775792L);
      range0.spliterator();
      Range range1 = Range.of(4294967307L, 9223372036854775792L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(list0.isEmpty());
      
      boolean boolean1 = range0.intersects(range1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(boolean1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.058620243537487
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775773L));
      Range range1 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      range0.equals((Object) null);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range1));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.6079823918731346
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = 9223372036854775799L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775799L, 9223372036854775799L);
      Range range1 = Range.of((-1484L));
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1484 would make range [9223372036854775798 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.587545949861811
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(834L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-9L), (-9L));
      range1.spliterator();
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3274662176194347
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(294L, 9223372036854774455L);
      boolean boolean0 = range0.equals(range0);
      Range range1 = Range.of(9223372036854774455L);
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1 == boolean0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4437642153337817
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854770724L);
      Range range1 = Range.of(9223372036854770724L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4396770744045355
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of((-54L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.equals(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 1L);
      range1.iterator();
      range0.intersects(range1);
      assertTrue(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem2);
      assertEquals("[ -54 .. -54 ]/0B", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      List<Range> list0 = range0.split(255L);
      assertTrue(list0.contains(range0));
      
      range0.equals(range0);
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3860982536226607
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775799L, 9223372036854775799L);
      Range range0 = Range.ofLength(9223372036854775799L);
      range0.spliterator();
      Range range1 = Range.of(4294967295L, 9223372036854775799L);
      Object object0 = new Object();
      range1.equals(object0);
      range1.iterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      List<Range> list0 = range0.split(255L);
      assertTrue(list0.contains(range0));
      
      range0.equals(range0);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.8585631240303773
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.clone();
      Range range1 = Range.ofLength(1844L);
      range1.complementFrom(linkedList0);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.7558340945825694
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.of((-38L), 1353L);
      Range range0 = Range.ofLength(1353L);
      Range.Builder range_Builder0 = new Range.Builder(1353L);
      range_Builder0.shift(1353L);
      Range range1 = range_Builder0.build();
      range1.iterator();
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(1353L);
      range1.equals(range3);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range2));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.32914830340581
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of((-145L));
      Range range1 = Range.of((-145L), (-87L));
      range0.getEnd();
      Range.ofLength(432L);
      range0.equals(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1447957899669947
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-87L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-87L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      Range range1 = null;
      range0.getBegin();
      range0.getEnd();
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1339026904400007
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.ofLength(65556L);
      Range range1 = Range.of(65556L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(65557L, long0);
      
      boolean boolean0 = range1.endsBefore(range0);
      Object object0 = new Object();
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.133033233229716
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.ofLength(255L);
      Range range0 = Range.of(1404890L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-1526L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=4.074932767246314
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of((-201L), 65535L);
      Object object0 = new Object();
      range0.isEmpty();
      Range.of((-201L), 122L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 768L, 9223372036854775792L);
      List<Range> list0 = range0.split(122L);
      // Undeclared exception!
      range1.complementFrom(list0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.8153832185397496
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372036854775609L, 9223372036854775609L);
      range_Builder0.expandBegin(9223372036854775609L);
      range0.equals(range_Builder0);
      Range range1 = Range.of((-2147483648L));
      // Undeclared exception!
      try { 
        range1.complement(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483648 would make range [9223372036854775609 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-201L), 65535L);
      Object object0 = new Object();
      range0.equals(range0);
      Range range1 = Range.of((-201L), 108L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.143652409619771
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854743041L, 9223372036854743041L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 9223372036854743041L, (-2147483648L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483649 would make range [9223372036854743040 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of((-1140L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range1 = Range.of((-1086L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.588839810186508
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-37L), 1353L);
      Range.Builder range_Builder0 = new Range.Builder(1353L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 1581L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(1353L);
      range0.equals(range2);
      Range range4 = Range.of(range_CoordinateSystem0, (-37L), (-37L));
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.441371494503864
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.ofLength(268L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-637L));
      Range range2 = Range.of((-180L));
      List<Range> list0 = range2.complement(range1);
      assertTrue(list0.contains(range2));
      
      range2.equals(range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.756695977797394
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(834L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(1350L);
      Range range1 = Range.of(range_CoordinateSystem0, 435L, 1350L);
      range0.getBegin();
      range1.iterator();
      range1.complement(range0);
      Long long0 = new Long(435L);
      Long long1 = new Long(1350L);
      range0.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.getLength();
      Range range2 = Range.of(834L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.151798682372979
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = 9223372036854770760L;
      Range range0 = Range.ofLength(9223372036854770760L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775799L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(45L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = 2711L;
      Range range0 = Range.ofLength(2549L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775793L, 9223372036854775793L);
      Range range0 = range_Builder0.build();
      Range.of(271L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.6335179313441692
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(2705L);
      range0.split(2705L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2705L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      range1.equals((Object) null);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.183233888070458
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(1811L);
      Range range1 = Range.of(1L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of(255L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.5891267445460535
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(834L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 435L, 4294967295L);
      range1.complement(range0);
      Long long0 = new Long(1L);
      range1.equals(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.of(834L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 450L, 4294967295L);
      range0.split(4294967295L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1404886L, (-9223372036854775808L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.2476823291061607
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 32767L, 32767L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of(1190L, 9223372036854774455L);
      Range range1 = Range.ofLength(1190L);
      range0.equals(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775773L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(1404887L);
      range0.equals("value can not be <0");
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 255L;
      Object object0 = new Object();
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.6662455206837965
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.ofLength(255L);
      Range range0 = Range.of((-572L), (-572L));
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.631557208055134
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      range0.intersects(range0);
      Range.ofLength(255L);
      range0.split(255L);
      range0.isEmpty();
      range0.asRange();
      Range range1 = Range.of(9223372036854774488L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.79438837168257
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774455L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      boolean boolean1 = range0.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775799L);
      Range range1 = Range.ofLength(9223372036854775799L);
      range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.384753780368075
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.ofLength(9223372036854770724L);
      Range.of(9223372036854770724L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854770724L, (-2147483648L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483648 would make range [9223372036854770724 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(1404887L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(2147483647L);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.7176163790243697
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(32767L);
      Range range1 = Range.of(range_CoordinateSystem0, (-16L), 32767L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(2, list0.size());
      
      Range.Builder range_Builder2 = new Range.Builder();
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.6762487761963216
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(32767L, 32767L);
      Range range1 = Range.of(range_CoordinateSystem0, (-16L), 32767L);
      range1.complement(range0);
      Range.Builder range_Builder1 = new Range.Builder();
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.1296233673511074
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.6803252993631537
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.ofLength(3899L);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -32767 .. -32767 ]/RB", string0);
      
      boolean boolean0 = range2.intersects(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.4404389791664403
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.of(0L, 0L);
      Object object0 = new Object();
      Range range0 = Range.ofLength(0L);
      range0.equals((Object) null);
      Range.of((-867L), (-867L));
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.3278369999701947
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      Range.ofLength(398L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.387266167834053
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(1205L, 1205L);
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.ofLength(2147483647L);
      Object object1 = new Object();
      boolean boolean0 = range1.equals(object1);
      assertFalse(boolean0);
      
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertSame(range0, range2);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.202026104716668
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of((-87L), (-1L));
      range0.getEnd();
      Range.ofLength(278L);
      range0.equals((Object) null);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(601L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(268L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.2512510774549948
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=4.033467305966391
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(0L, 1353L);
      Range range1 = Range.ofLength(1353L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 1784L);
      range_Builder0.shift(1353L);
      Range range2 = range_Builder0.build();
      range2.iterator();
      Range range3 = range2.intersection(range1);
      Range range4 = Range.of(1353L);
      boolean boolean0 = range3.equals(range4);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
      
      range1.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range5 = Range.parseRange("[ 0 .. 1352 ]/0B", range_CoordinateSystem1);
      Range.of(range_CoordinateSystem1, 804L, 804L);
      List<Range> list0 = range4.complement(range5);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.541840373565085
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of((-128L));
      Range range2 = range0.intersection(range1);
      range2.iterator();
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.738756561167253
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.ofLength(4294967295L);
      Range.of((-1771L));
      Range range0 = Range.of((-541L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.397634139207376
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.ofLength(3667L);
      range0.startsBefore(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(1574L, 1574L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.491195180553445
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854770760L);
      Range range1 = Range.of(9223372036854770760L);
      Range range2 = Range.of(9223372036854770760L);
      List<Range> list0 = range2.complement(range0);
      assertTrue(list0.contains(range1));
      
      boolean boolean0 = range0.isSubRangeOf(range2);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.393695034535834
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals((-32767L), long0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(1583L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=4.095138700608477
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range range1 = Range.of(127L);
      Range range2 = Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range3 = Range.of((-5224L));
      range3.endsBefore(range2);
      Range.of((-128L), 127L);
      Range range4 = Range.of((-1427L));
      List<Range> list0 = range0.complement(range4);
      List<Range> list1 = range2.complementFrom(list0);
      range3.complementFrom(list1);
      range2.getEnd();
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.4781437537585034
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of((-201L), 65535L);
      Object object0 = new Object();
      range0.isEmpty();
      Range.of((-201L), 115L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775041L, (-2147483648L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483649 would make range [9223372036854775040 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.1163608648986068
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -127 .. -127 ]/RB", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.2018510619417797
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.682445456287903
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(9223372036854771909L, 9223372036854771909L);
      Range range1 = Range.of(2186L, 2186L);
      range1.iterator();
      range1.intersection(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.3420151404474416
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775799L);
      Range range1 = Range.of(9223372036854775799L);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertTrue(range2.equals((Object)range0));
      //  // Unstable assertion: assertNotSame(range2, range0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.5873928183218178
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(3466L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.059067004520361
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-32768L), (-32768L));
      range0.equals(range1);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.2450110626720554
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775799L);
      Range range1 = Range.of(9223372036854775799L);
      long long0 = range1.getBegin();
      assertEquals(9223372036854775799L, long0);
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1345L, 9223372036854773952L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.2664158827336083
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(262L, 4294967295L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.528317234277491
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      String string0 = range0.toString();
      assertEquals("[ 1 .. 1 ]/0B", string0);
      
      List<Range> list0 = range0.split(1L);
      assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.1356178217257975
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(100L, 100L);
      range_Builder1.expandBegin((-128L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.180683087165041
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.ofLength(635L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.97613471996344
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.of((-22L), 1353L);
      Long long0 = new Long((-22L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1354L, 1353L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.9331948114582054
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range range1 = range0.asRange();
      Range range2 = Range.of(127L, 127L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem.values();
      Range range3 = Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      Range range4 = Range.of(1L, 127L);
      range4.endsBefore(range2);
      range3.complement(range4);
      List<Range> list0 = range3.split(127L);
      List<Range> list1 = range1.complementFrom(list0);
      range4.complementFrom(list1);
      range0.getEnd();
      range4.startsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range.Builder range_Builder1 = new Range.Builder(128L, 127L);
      range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem2.toString();
      Range.of(1L);
      Range.Builder range_Builder2 = range_Builder1.expandEnd((-1L));
      assertSame(range_Builder2, range_Builder1);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.133680985529237
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(3667L, 3667L);
      range0.endsBefore(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(3667L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.3937330047575163
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-38L), (-38L));
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.startsBefore(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.133680985529237
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range.of(1404887L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.631776610014255
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(9223372036854771909L);
      Range range1 = Range.of(9223372036854771909L, 9223372036854771909L);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      boolean boolean0 = range1.equals("$Dn K\")Wbe");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.145776642580429
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(255L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.2032882963403053
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(3667L, 3667L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(3667L);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.2009388382289825
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3975L), (-3975L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-201L), (-201L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-1723L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1723L), long0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(635L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(635L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.ofLength(2163L);
      Range range1 = Range.of(2163L);
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.1296233673511074
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      range0.asRange();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      range0.isEmpty();
      range0.getBegin();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854773397L);
      long long0 = range0.getEnd();
      assertEquals(9223372036854773396L, long0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.4936746603852664
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range range1 = Range.of(127L);
      assertFalse(range1.isEmpty());
      
      String string0 = range0.toString();
      assertEquals("[ 127 .. 127 ]/0B", string0);
      
      Range range2 = Range.ofLength(127L);
      boolean boolean0 = range2.isSubRangeOf(range0);
      assertFalse(boolean0);
      
      List<Range> list0 = range2.complement(range0);
      assertTrue(list0.contains(range2));
      
      Range range3 = Range.of(127L, 255L);
      assertNotSame(range3, range1);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.7575606323408834
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.ofLength(3667L);
      List<Range> list0 = range0.split(3667L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(1, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list0.contains(range0));
      
      List<Range> list2 = range0.split(255L);
      assertFalse(list2.contains(range0));
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.357284162522736
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.3274662176194347
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      range0.intersection(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.2671143019073328
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.1832066595439428
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range1.startsBefore(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.937955597967292
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 1 ]/SB", string0);
      
      Range range1 = Range.parseRange("[ 0 .. 1 ]/SB", range_CoordinateSystem0);
      Range range2 = Range.of(32767L);
      List<Range> list0 = range2.split(32767L);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.2692330175417945
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.ofLength(3667L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 3666 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 0 .. 3666 ]/0B");
      boolean boolean0 = range0.equals(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
      
      Range range2 = Range.of(0L, 0L);
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.30273127777412
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.of((-32768L));
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.242482006766971
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals("[ 0 .. 0 ]/RB", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.1588962336225297
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
      
      Range range1 = Range.of(1L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.450442076783798
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.of(2049L, 2049L);
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.1890760075458306
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-1765L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1765 .. -1765 ]/0B", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(670L);
      Range range0 = Range.ofLength(65535L);
      // Undeclared exception!
      try { 
        range0.split((-3667L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.2032882963403053
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.ofLength(2705L);
      List<Range> list0 = range0.split(2705L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.060276460265276
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854770796L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854770796L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -10025 would make range [9223372036854770796 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.9792886722599112
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-32768L));
      range_Builder0.expandEnd(0L);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.9797520106127435
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.112227645912027
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      long long0 = range0.getLength();
      assertEquals(255L, long0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.409219584492206
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.202758091420238
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of(237L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(238L, long0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of((-54L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-53L), long0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.130582753344072
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of((-201L), (-201L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-427L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-427L), long0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of((-437L), (-437L));
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-2147483648L));
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of((-1916L));
      // Undeclared exception!
      try { 
        range0.split((-1916L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of(3669L, 3669L);
      List<Range> list0 = range0.split(3669L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of((-32782L), (-32782L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(294L, 294L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.25600773466969
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.of((-54L), (-54L));
      Range range1 = Range.of((-54L), 4294967295L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.675638371410748
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(670L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.4407893441299437
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of(255L, 255L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.458433506269885
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.1357893557590493
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775754L));
      range0.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.4406221852733103
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      List<Range> list0 = range0.complement(range0);
      assertFalse(list0.isEmpty());
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.203776696828706
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of((-1301L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-3433L));
      Range range2 = range_Builder0.build();
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of((-1765L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.2668415958029997
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of(1021L, 1021L);
      Range range1 = Range.ofLength(1021L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(653L, 2295L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.20232387518055
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = range0.getBegin();
      range0.spliterator();
      long long1 = range0.getLength();
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.3881072417139984
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775779L), (-9223372036854775779L));
      range0.getBegin();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.20490554701416
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of(9223372036854775799L);
      range0.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.0567526361500623
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = Range.of(range_CoordinateSystem0, (-16L), (-16L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.130582753344072
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372036854775611L, 9223372036854775611L);
      range_Builder0.expandBegin(9223372036854775611L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.198959292011301
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-128L));
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(65535L, 1352L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-3367L));
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=3.353627401079457
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range.of((-37L), (-37L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-37L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=3.1139696645160146
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1353L);
      Range range0 = Range.of(1353L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range range0 = Range.of((-1630L));
      assertFalse(range0.isEmpty());
  }
}
