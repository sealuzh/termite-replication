/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 22:32:39 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{l@fnCYp56Qa 2.|Fn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 18 of {l@fnCYp56Qa 2.|Fn
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.227124975202604
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.doubleToString(3642.50702732);
      assertEquals("3642.50702732", string0);
      
      jSONObject0.put("3642.50702732", 11L);
      double double0 = jSONObject0.optDouble("3642.50702732");
      assertEquals(11.0, double0, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.463333031443588
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("p!KIle{$>*&lM:`6bu", 0.0);
      JSONObject jSONObject2 = jSONObject0.accumulate("p!KIle{$>*&lM:`6bu", jSONObject1);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject2, 776, 4379);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.523562087390813
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "000");
      jSONObject0.put("000", (long) 3333);
      // Undeclared exception!
      jSONObject0.toString(3333);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1729158177624384
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("has", (-955.4578883636656));
      jSONObject1.optLong("has");
      try { 
        jSONObject0.getJSONArray("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"has\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6768496679102336
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject.doubleToString((-0.61497F));
      Float float0 = new Float(Double.NaN);
      Float.max((-0.61497F), (-0.61497F));
      try { 
        JSONObject.valueToString(float0, 13, 257);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1826653947517176
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Float float0 = new Float((-401.1475F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("getputOpt", 1L);
      int int0 = jSONObject1.optInt("getputOpt");
      assertEquals(4, jSONObject0.length());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.68178883521687
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = JSONObject.getNames((Object) stringWriter0);
      assertNull(stringArray0);
      
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("num", (-1233L));
      int int0 = jSONObject0.optInt("num");
      assertEquals((-1233), int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9053504746293783
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9906188255641685
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = jSONObject0.put("v80-`Uql&2<maDW~s", (Object) jSONObject1);
      jSONObject2.getString("v80-`Uql&2<maDW~s");
      JSONObject jSONObject3 = jSONObject2.getJSONObject("v80-`Uql&2<maDW~s");
      assertEquals(1, jSONObject3.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6125847779104228
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject.doubleToString(1706.314295996675);
      JSONObject jSONObject0 = new JSONObject((Object) "1706.314295996675");
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      hashMap0.keySet();
      hashMap0.put((Integer) null, jSONObject0);
      jSONObject0.put("1706.314295996675", (Map) hashMap0);
      JSONObject.valueToString("1706.314295996675", 12, 12);
      // Undeclared exception!
      try { 
        jSONObject0.toString(12, 157);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.244200206149339
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "orkj)27=Yn'_';5vQp";
      stringArray0[1] = "!Z)Y_n\b>";
      jSONObject0.append("|#0q#O$4OW)+", "!Z)Y_n\b>");
      stringArray0[2] = "ap)0t:v>eTpHDZ8?";
      stringArray0[3] = ",";
      stringArray0[4] = "issubstring";
      stringArray0[5] = "int";
      stringArray0[5] = ";k(y=_TbHuK PE.(";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject1.putOpt(",", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.755394427053944
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "false";
      jSONObject0.remove("false");
      JSONObject jSONObject1 = jSONObject0.put("false", (-2063));
      Long long0 = new Long(0L);
      jSONObject1.putOpt("false", long0);
      JSONObject jSONObject2 = jSONObject1.put("wheel.json.JSONTokener", (-2063));
      jSONObject0.toString(47, 47);
      jSONObject2.getLong("wheel.json.JSONTokener");
      JSONObject.doubleToString(0.0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.058909994634681
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("7>.h,O", 0L);
      jSONObject1.optDouble("7>.h,O");
      try { 
        jSONObject1.getJSONObject("7>.h,O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7>.h,O\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4918032786885246
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      Float float0 = new Float(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.accumulate("$,eD", hashMap0);
      assertEquals(9, jSONObject0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("%C=</l7gHvH[^|U");
      String string0 = JSONObject.quote("%C=</l7gHvH[^|U");
      assertEquals("\"%C=<\\/l7gHvH[^|U\"", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{&mtCda&4");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of {&mtCda&4
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8764904395512632
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("has", (-955.4578883636656));
      JSONObject jSONObject2 = jSONObject1.accumulate("has", "has");
      jSONObject2.optLong("has");
      jSONObject0.getJSONArray("has");
      try { 
        jSONObject1.getDouble("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"has\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.636588739002229
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Float.min((-3946.23F), (-3946.23F));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", 0.0);
      jSONObject0.toString((-1114));
      jSONObject0.optString("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}", "{}");
      jSONObject1.opt("a2H;Fk;R703/.");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-1114));
      JSONObject.getNames((Object) null);
      boolean boolean0 = jSONObject1.has("{}");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.644621824788183
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", 0.0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Double double0 = new Double((-2041.11237320865));
      linkedList0.removeFirstOccurrence(double0);
      jSONObject1.put("en", (Collection) linkedList0);
      Byte byte0 = new Byte((byte)125);
      Byte byte1 = new Byte((byte)125);
      String string0 = JSONObject.quote("{}");
      assertEquals("\"{}\"", string0);
      
      jSONObject1.toString((int) byte1, (-62164681));
      JSONObject.getNames(jSONObject0);
      String string1 = JSONObject.doubleToString((-62164681));
      assertEquals("-6.2164681E7", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.674201377691954
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("[]", (Collection) linkedList0);
      JSONObject.valueToString(linkedList0);
      Long long0 = Long.valueOf(1L);
      jSONObject0.append("[]", long0);
      jSONObject1.putOpt("isoptJSONArray", linkedList0);
      jSONObject1.toString((-838), 26);
      Boolean boolean0 = Boolean.valueOf(true);
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9948516297969727
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONArray1.length());
      
      Double double0 = new Double((-1.0));
      jSONObject0.putOpt("V$?Xw", double0);
      jSONObject0.getInt("V$?Xw");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.434799037944202
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Expected '", true);
      jSONObject0.optString("Expected '");
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("java.lang.Boolean@0000000003", long0);
      Double double0 = new Double(0L);
      boolean boolean0 = jSONObject1.optBoolean("Expected '");
      hashMap0.put(long1, double0);
      Long long2 = new Long(0L);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = jSONObject0.optBoolean("java.lang.Boolean@0000000003", true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.put("'U+hra3Pg/_(X0h", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("'U+hra3Pg/_(X0h");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6382055982885966
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = ":LE_nyZXW97Gx>{Ukx";
      JSONObject jSONObject0 = new JSONObject(":LE_nyZXW97Gx>{Ukx", stringArray0);
      jSONObject0.opt("rxJ[z");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put(":LE_nyZXW97Gx>{Ukx", (Collection) linkedList0);
      boolean boolean0 = jSONObject1.isNull(":LE_nyZXW97Gx>{Ukx");
      assertFalse(boolean0);
      
      Long long0 = new Long(2145L);
      JSONObject.numberToString(long0);
      JSONObject.quote("rxJ[z");
      String string0 = JSONObject.doubleToString((byte) (-119));
      assertEquals("-119", string0);
      
      String string1 = JSONObject.quote("AUq");
      assertEquals("\"AUq\"", string1);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject1);
      assertEquals(1, stringArray1.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.318305686891819
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("su", (Object) null);
      JSONObject jSONObject2 = jSONObject1.accumulate("su", jSONArray0);
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0667455689939205
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", 0.0);
      Object object0 = jSONObject1.opt("{}");
      assertEquals(0.0, object0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "{}");
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      String string0 = JSONObject.valueToString((Object) null, 1796, 1796);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      String string0 = JSONObject.valueToString(hashMap0, (-712), (-2359));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5610752965144479
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      linkedList0.add(boolean0);
      jSONObject0.opt((String) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8313144981815577
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "3\n";
      JSONObject jSONObject1 = jSONObject0.put("3\n", (Object) "3\n");
      jSONObject1.get("3\n");
      try { 
        jSONObject1.getBoolean("3\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3\\n\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.put("", object0);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.1422366498954215
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getgetClass");
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("true", (Object) "true");
      boolean boolean0 = jSONObject1.getBoolean("true");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("int");
      JSONObject jSONObject1 = jSONObject0.put("int", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("int");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("false", (Object) "false");
      boolean boolean0 = jSONObject0.getBoolean("false");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isrw", (Object) "isrw");
      try { 
        jSONObject1.getJSONArray("isrw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isrw\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0495068408188257
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      Byte byte0 = new Byte((byte)90);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.put("{}", 0.0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject1.keys();
      jSONObject1.optString("{}", "{}");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.9044428936886397
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getparseFloat", 234);
      JSONObject.valueToString(jSONObject0, (-6), (-6));
      long long0 = jSONObject1.getLong("getparseFloat");
      assertEquals(234L, long0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.243951948479806
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", 0.0);
      jSONObject1.getLong("{}");
      JSONObject jSONObject2 = jSONObject1.put("{}", 0.0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject.doubleToString((-0.61497F));
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.4173022513947697
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(")Gexm5iYh", 1.0);
      jSONObject1.remove(")Gexm5iYh");
      jSONObject0.toString(260, 12);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0407104090414063
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("istri", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.putOpt("istri", linkedList0);
      String string0 = jSONObject2.toString((-181), (-181));
      assertNotNull(string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      Short short0 = new Short((short)10);
      hashMap0.put(integer0, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.1565887273426063
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Byte byte0 = new Byte((byte)90);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.put("E=", 0.0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject1.keys();
      double double0 = jSONObject1.getDouble("E=");
      assertEquals(2, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.517601920100665
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("D-2K%hlHCQ/n+/w@");
      Double double0 = new Double(3748.6);
      jSONObject0.put("D-2K%hlHCQ/n+/w@", (Object) double0);
      JSONObject jSONObject1 = jSONObject0.put("\"D-2K%hlHCQ/n+/w@\"", (Map) null);
      jSONObject1.getInt("D-2K%hlHCQ/n+/w@");
      String string1 = jSONObject1.toString(44, 93);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1884);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3916673555884362
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Unclosed comment");
      JSONObject.quote("");
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) null, "Unclosed comment");
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.toString();
      try { 
        jSONObject0.put((String) null, (-657));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(13);
      Double.sum(1550.478, 1550.478);
      jSONObject0.put("isputAll", (long) 13);
      double double1 = jSONObject0.getDouble("isputAll");
      assertEquals(13.0, double1, 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("6/fq", (Object) "6/fq");
      jSONObject1.names();
      try { 
        jSONObject0.append("6/fq", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[6/fq] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 34, 56);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("has", 163L);
      try { 
        jSONObject0.getJSONObject("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"has\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("", stringWriter0);
      jSONObject1.getString("");
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("has", (-955.4578883636656));
      jSONObject1.getDouble("has");
      jSONObject1.optJSONArray("has");
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.7274382107801138
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[";
      jSONObject0.optInt("}-");
      Integer integer0 = new Integer(48);
      Float float0 = new Float(1662.996872607137);
      JSONObject.valueToString(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      JSONObject jSONObject1 = jSONObject0.put("to", (Map) hashMap0);
      jSONObject1.keys();
      jSONObject0.toString();
      Byte.compare((byte)10, (byte)10);
      Boolean boolean0 = new Boolean("[");
      JSONObject.numberToString(float0);
      try { 
        jSONObject0.getLong("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.9956238305691735
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Unclosed comment");
      jSONObject0.put("Expected a ':' after a key", (Collection) null);
      Float float0 = new Float(1.0F);
      Short short0 = new Short((short)58);
      JSONObject jSONObject1 = new JSONObject(short0);
      String string0 = JSONObject.valueToString(float0, (-38758282), (short)58);
      assertNotNull(string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt("7%-?9");
      JSONObject jSONObject1 = jSONObject0.accumulate("LW]A", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.7529183119946543
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("6/fq", (Object) "6/fq");
      try { 
        jSONObject0.getInt("6/fq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6/fq\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.154399776001322
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("%X", true);
      try { 
        jSONObject1.getLong("%X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%X\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString(1031);
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.8829831028417447
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Unclosed comment");
      jSONObject0.toString((-550));
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000042,\njava.lang.Byte@0000000043,\njava.lang.Byte@0000000044,\njava.lang.Byte@0000000045,\njava.lang.Byte@0000000046,\njava.lang.Byte@0000000047,\njava.lang.Byte@0000000048,\njava.lang.Byte@0000000049,\njava.lang.Byte@0000000050,\njava.lang.Byte@0000000051,\njava.lang.Byte@0000000052,\njava.lang.Byte@0000000053,\njava.lang.Byte@0000000054,\njava.lang.Byte@0000000055,\njava.lang.Byte@0000000056,\njava.lang.Byte@0000000057\n],\n\"java.lang.String@0000000039\": \"java.lang.Class@0000000040\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{?u$: DfoA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 10 of {?u$: DfoA
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONTokener jSONTokener0 = new JSONTokener("{}UAt5+BW<");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", 0.0);
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getInt("{}");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("wheel.json.JSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1576770355110229
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("IUX`L/4o%,;LHY;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"IUX`L/4o%,;LHY;\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.8113308577108624
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject.doubleToString((-0.61497F));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("-0.6149700284004211", (double) (-0.61497F));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.3043905873508845
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(120, 120);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("}", 11.444493257145258);
      double double0 = jSONObject1.optDouble("}", 0.0);
      assertEquals(1, jSONObject0.length());
      assertEquals(11.444493257145258, double0, 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.227124975202604
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(3642.50702732);
      jSONObject0.put("3642.50702732", (-1L));
      double double0 = jSONObject0.optDouble("3642.50702732");
      assertEquals(1, jSONObject0.length());
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONArray initial value should be a string or collection or array.", 274L);
      JSONObject.getNames((Object) jSONObject0);
      long long0 = jSONObject1.optLong("JSONArray initial value should be a string or collection or array.");
      assertEquals(1, jSONObject0.length());
      assertEquals(274L, long0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.6365005633907455
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.put(".S?cV", false);
      long long0 = jSONObject0.optLong(".S?cV");
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.837279754561873
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) "E'~U!1|:W|$75Tjq_9");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst(hashMap0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optInt("E'~U!1|:W|$75Tjq_9");
      String string0 = jSONObject0.toString((-58), 172);
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      jSONObject1.optInt("E'~U!1|:W|$75Tjq_9", 0);
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      jSONObject1.optString("istoUpperCase");
      try { 
        jSONObject0.getLong("P0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"P0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("JSONArray initial value should be a string or collection or array.", 0.0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("QzL&3t>G;N?%L<", (-1L));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      String string0 = JSONObject.valueToString(jSONArray0, 7, 120);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.putOpt("", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.9405670621953819
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("|", true);
      assertTrue(boolean0);
      
      String string0 = JSONObject.valueToString(jSONObject0, (-220), (-220));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("Q`O>2Rx(p", false);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.6829273201267343
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>(13);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      Float float0 = new Float(3525.726934349);
      Float float1 = new Float(0.0);
      Float.isFinite(13);
      Double double0 = new Double(Double.NaN);
      hashMap0.put(double0, double0);
      jSONObject0.optDouble("");
      jSONObject0.optString("", "");
      try { 
        jSONObject0.getLong("'?;IprpgyT%I^3.cq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'?;IprpgyT%I^3.cq\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-6), 53);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      String string0 = JSONObject.valueToString(boolean0, 75, 75);
      assertNotNull(string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("isreplaceAll", 1610.0038436936834);
      assertEquals(1610.0038436936834, double0, 0.01);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("Rm2VTDD{8M0@+", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.619418366446825
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("null", "null");
      jSONObject0.optJSONArray("null");
      int int0 = jSONObject0.optInt("null");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.7569036587561297
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "O`P jgWZ\u0006`+2");
      Object object0 = new Object();
      jSONObject0.accumulate("O`P jgWZ\u0006`+2", object0);
      try { 
        jSONObject0.getDouble("O`P jgWZ\u0006`+2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"O`P jgWZ\\u0006`+2\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("m1HHA~=p<Gdg`=,+&4S", (-2921));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = JSONObject.quote("\"\"");
      assertEquals("\"\\\"\\\"\"", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.2821021481816806
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      jSONObject0.put("=.~CXTRU({E", (Map) hashMap0);
      jSONObject0.write(stringWriter0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("Missing value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Missing value
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"x\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.4940355237092673
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optDouble("Expected '");
      jSONObject0.remove("Expected '");
      jSONObject0.optString("-k];)x,BTA/$<=H%9V", (String) null);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.1849504592484699
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Double double0 = new Double((-1197.0));
      Double.isFinite(0.0);
      Double.sum(0.0, 0.0);
      Double.isFinite((-2514.460436234822));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.put("_+4P7wI", (-2514.460436234822));
      String string0 = "";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.005154853485851
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("nV)@5!~=pu", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "[qXk@x#~l'hzJ");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("[qXk@x#~l'hzJ", stringArray0);
      jSONObject0.keys();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.6523761377507835
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject1 = jSONObject0.put("YRAAtKLz4G0k|{zG/k", (Collection) linkedList0);
      JSONObject.getNames(jSONObject0);
      jSONObject1.optString("YRAAtKLz4G0k|{zG/k");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.1907131165659273
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.1990036230241423
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "A JSONObject text must end with '}'");
      int int0 = jSONObject0.optInt("A JSONObject text must end with '}'", 2590);
      assertEquals(3, jSONObject0.length());
      assertEquals(2590, int0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "A JSONObject text must end with '}'");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.put("/!,+", true);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("null", 1992L);
      String[] stringArray0 = new String[9];
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("getputAll", 0L);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Long long0 = new Long(40);
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.9969422221314674
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      jSONObject0.put("A3u]SI", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("getcompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getcompare\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Float float0 = new Float((float) 13);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("", (Collection) linkedList0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) stringArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("-Sad^v+ut-4X)m@98", "-Sad^v+ut-4X)m@98");
      assertNotNull(string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(5259);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      String string1 = jSONObject0.optString("wheel.json.JSONObject@0000000001");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("p}ylIKTqYr$:%4");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject1.isNull("{");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[]");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of []
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject.testValidity("{{q-u(");
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("val");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"val\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = JSONObject.quote("@ (/zf:/");
      assertEquals("\"@ (/zf:/\"", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.4257841439072145
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      boolean boolean1 = jSONObject0.optBoolean("null");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("0e;-D?Q=cxI:]");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.1031808349614796
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("'U+hta3Pg/_(X0h", (Object) jSONObject0);
      try { 
        jSONObject1.getBoolean("'U+hta3Pg/_(X0h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'U+hta3Pg/_(X0h\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Double double0 = new Double((-0.61497F));
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("U(c$.vL1K<aa", (Object) "U(c$.vL1K<aa");
      try { 
        jSONObject1.getBoolean("U(c$.vL1K<aa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"U(c$.vL1K<aa\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}qJ-B^whHnw#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }qJ-B^whHnw#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(";@Fgz+r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ;@Fgz+r
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.252090183495044
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Float float0 = new Float((-401.1475F));
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(1982, 1982);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(120, 120);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.885488118580586
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(2502);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("QR4Y`zX4Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"QR4Y`zX4Q\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.4957137234555764
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "A JSONObject text must end with '}'");
      jSONObject0.toString((-54582745), (-54582745));
      JSONObject jSONObject1 = new JSONObject((Object) "A JSONObject text must end with '}'");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = JSONObject.valueToString("Expected '", 3914, 3914);
      assertNotNull(string0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.202883501961465
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString((-1), (-1));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Integer integer0 = new Integer((-26713449));
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<JSONObject, Long> hashMap0 = new HashMap<JSONObject, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.accumulate((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-2744L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("Expected a ',' or '}'", "Expected a ',' or '}'");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove((String) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("gKxq-5@m!+nDx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gKxq-5@m!+nDx\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
