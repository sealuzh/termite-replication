/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 07 14:17:31 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8883748344162048
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-537.36621");
      jSONObject0.toString((-649), (-649));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("}gE");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }gE
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1006789212792607
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("\f", "\f");
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject2 = new JSONObject("\f", stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer integer0 = new Integer((-821));
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      hashMap0.put((Byte) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Kw\"69/%Cz^/", true);
      Object object0 = jSONObject1.remove("Kw\"69/%Cz^/");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("i>", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("rev", 1143L);
      assertEquals(1143L, long0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{`XA<>x14hl+GJr", (-2508));
      long long0 = jSONObject0.optLong("{`XA<>x14hl+GJr");
      assertEquals((-2508L), long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Short, JSONObject> hashMap0 = new HashMap<Short, JSONObject>();
      Short short0 = new Short((short) (-327));
      hashMap0.put(short0, (JSONObject) null);
      JSONObject jSONObject1 = jSONObject0.put("true", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("true");
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("false", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("false");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("XwPd", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("wheel.json.JSONObject", 160);
      assertEquals(160, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.098147389135067
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((short)92);
      JSONObject jSONObject1 = jSONObject0.accumulate("{9A@", long0);
      int int0 = jSONObject1.optInt("{9A@");
      assertEquals(92, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2047854169135204
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("uplw2K<?9?k-L3b$gd", (-5694));
      int int0 = jSONObject0.optInt("uplw2K<?9?k-L3b$gd");
      assertEquals((-5694), int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      double double0 = jSONObject0.optDouble(",\n", 0.0);
      assertEquals(3, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("S4KXu}3} #w", (-54.32));
      assertEquals((-54.32), double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("{}", 12.0880399562392);
      double double0 = jSONObject0.optDouble("{}");
      assertEquals(12.0880399562392, double0, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("{}", (-50462705));
      double double0 = jSONObject0.optDouble("{}");
      assertEquals((-5.0462705E7), double0, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4016171508386506
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Integer integer0 = new Integer((-821));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("\f", (Map) null);
      jSONObject1.opt("\f");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("\f", "\f");
      boolean boolean0 = jSONObject1.has("\f");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject1 = jSONObject0.put("~NgN86d#$oK#", (Map) hashMap0);
      String string0 = jSONObject1.getString("~NgN86d#$oK#");
      assertNotNull(string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3996281119286729
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("'", (Object) float0);
      jSONObject1.getLong("'");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.591095563595939
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Integer integer0 = new Integer((-796));
      JSONObject jSONObject0 = new JSONObject(integer0);
      Double double0 = new Double(1222.8759);
      JSONObject jSONObject1 = jSONObject0.accumulate("\f", double0);
      jSONObject1.getLong("\f");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.991509361356614
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a Boolean.", "] is not a Boolean.");
      JSONObject jSONObject2 = jSONObject0.accumulate("] is not a Boolean.", jSONObject1);
      JSONArray jSONArray0 = jSONObject2.getJSONArray("] is not a Boolean.");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5733163646283495
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("1U&<'*l[VYe6", 0.0);
      jSONObject1.getInt("1U&<'*l[VYe6");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("wn-d?", 0.0);
      double double0 = jSONObject0.getDouble("wn-d?");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("wn-d?", 0.29394723726719224);
      double double0 = jSONObject0.getDouble("wn-d?");
      assertEquals(0.29394723726719224, double0, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-821), (-821));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9160121438508002
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("Zi2{?5Im-``L", (Map) hashMap0);
      // Undeclared exception!
      jSONObject1.toString((-1), 8192);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7269369375735455
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      hashMap0.put((Double) null, hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("-0.13617113535251393", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(62, 1238);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.068458263948675
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("*^Xlv</~pZ;(t&+K}%", 98);
      jSONObject1.accumulate("/,Qpg/D99x}^J&Hc1i", jSONObject0);
      // Undeclared exception!
      jSONObject0.toString(98);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      Object object0 = new Object();
      hashMap0.put((Double) null, object0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(51);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5157858798972355
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = JSONObject.doubleToString(173.681);
      JSONObject jSONObject0 = new JSONObject((Object) string0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("bQI{y-PFRLkY", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      try { 
        jSONObject0.put(string0, (long) (-821));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      Float float0 = new Float(0.0);
      Double double0 = new Double((-705.1703033514777));
      hashMap0.put(float0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 1619, 1619);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-3665), (-3665));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7870020467612302
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Double double0 = new Double((-283.4334));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((-2733), 2908);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = JSONObject.quote("Kw\"69/%Cq^_");
      assertEquals("\"Kw\\\"69/%Cq^_\"", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("~", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" VK$a%", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("-1053.441", "Substring bounds error");
      assertEquals("Substring bounds error", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5228146795137603
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = new Integer((-821));
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.put("\f", (Map) null);
      jSONObject0.optString("\f", "\f");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.6094379124341
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("lon", 1107.7080265213);
      double double0 = jSONObject1.optDouble("lon", 0.0);
      assertEquals(1107.7080265213, double0, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.opt("gettoString");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = new Integer((-821));
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.opt((String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.9031200754162498
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      jSONObject0.put("\f", (Map) hashMap0);
      jSONObject1.optLong("],,OO", (-25L));
      Float float0 = new Float((double) (-25L));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Double double0 = new Double((-283.4334));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5088198909642434
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or ']'", (-880.4136115803));
      long long0 = jSONObject1.getLong("Expected a ',' or ']'");
      assertEquals(3, jSONObject0.length());
      assertEquals((-880L), long0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5353632953768164
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Substring bounds error", jSONArray0);
      try { 
        jSONObject1.getBoolean("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Substring bounds error\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(",\n");
      JSONObject jSONObject1 = jSONObject0.put(",\n", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean(",\n");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("\f", "\f");
      Object object0 = jSONObject1.get("\f");
      assertEquals("\f", object0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("p;v%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"p;v%\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{9A@");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {9A@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("is");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of is
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("opt", (-1598));
      assertEquals((-1598), int0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "7/1YA");
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("Kw\"69/%Cz^/");
      assertNull(object0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.3986496111888456
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("gethashCode", (Collection) linkedList0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.4849258911092231
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      jSONObject0.put("Zd9.Lo:jg<", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0, 15, 7);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      String string0 = JSONObject.valueToString(hashMap0, 48, (-2698));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6817617681885326
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONObject.valueToString(jSONArray0, (-26713449), 1060);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 48, 48);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.8228804629889481
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.9516408464894441
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.toString(2706);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.7047129451128324
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.7234814019295517
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = JSONObject.quote("awCK_T)7@Z<</g*!");
      assertEquals("\"awCK_T)7@Z<<\\/g*!\"", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.8717814824679821
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("false", false);
      String string0 = jSONObject0.optString("false");
      assertNotNull(string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject(" VK$a%");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("-1160.765606398948.");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("{}", 0.0);
      double double0 = jSONObject0.optDouble("{}");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.9135152934164343
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Float float0 = new Float((-327.5252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optBoolean("{}", false);
      JSONObject jSONObject1 = new JSONObject();
      String string0 = JSONObject.valueToString(float0, 51, 0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = JSONObject.getNames((Object) stringWriter0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("toU", 1199.0);
      long long0 = jSONObject0.optLong("toU");
      assertEquals(1199L, long0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", false);
      try { 
        jSONObject1.getLong("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("ck@g(Y%N4T", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("ck@g(Y%N4T");
      assertNotSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("kYE<w:.&2m", "kYE<w:.&2m");
      try { 
        jSONObject0.getJSONObject("kYE<w:.&2m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"kYE<w:.&2m\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("-UU$'or&e", (Collection) null);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("-UU$'or&e");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("q6- bW`r!REcA{", 43);
      int int0 = jSONObject0.getInt("q6- bW`r!REcA{");
      assertEquals(43, int0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.4335753918268728
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("l/qDzW", object0);
      try { 
        jSONObject1.getInt("l/qDzW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"l/qDzW\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("false", (-1.0));
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject0.getDouble("false");
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.3718061232922234
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("false", false);
      try { 
        jSONObject0.getDouble("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.9512595041439564
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("[", true);
      boolean boolean0 = jSONObject0.optBoolean("[", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.6730604874709436
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("Expected a ',' or '}'", "Expected a ',' or '}'");
      boolean boolean0 = jSONObject0.optBoolean("Expected a ',' or '}'");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.4763959755529905
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("_If/ y[02>jk+@6^", "_If/ y[02>jk+@6^");
      try { 
        jSONObject0.getBoolean("_If/ y[02>jk+@6^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_If/ y[02>jk+@6^\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = JSONObject.doubleToString(43);
      assertEquals("43", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("][w!)02\"N>az", (Collection) linkedList0);
      Short short0 = new Short((short)128);
      jSONObject1.append("][w!)02\"N>az", short0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("M`$FeE", false);
      try { 
        jSONObject1.append("M`$FeE", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[M`$FeE] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.append("getgetNames", stringWriter0);
      jSONObject0.accumulate("getgetNames", jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", true);
      Integer integer0 = new Integer(120);
      jSONObject1.accumulate("] is not a number.", integer0);
      jSONObject1.optJSONArray("] is not a number.");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.5171063970610277
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "Kw\"69/%Cz^_");
      JSONObject jSONObject0 = new JSONObject("Kw\"69/%Cz^_", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.8872422356445006
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\",\n\"java.lang.String@0000000005\": {}\n             }");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertFalse(jSONTokener0.more());
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.2033320406994705
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{RRJxd_^#};");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {RRJxd_^#};
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.4708084763221114
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("M`$FeE", false);
      boolean boolean0 = jSONObject1.isNull("M`$FeE");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("wheel.json.JSONArray");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("IMJX");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("uz");
      assertEquals("", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("Kw\"69/%Cz^/");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Short, JSONObject> hashMap0 = new HashMap<Short, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("true", (Map) hashMap0);
      jSONObject1.optJSONObject("true");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("asj", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.3068894077018045
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wR#w_\"q^", (-798L));
      try { 
        jSONObject0.getJSONArray("wR#w_\"q^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wR#w_\\\"q^\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("fE|Vuqp3(]jmlJyXxp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fE|Vuqp3(]jmlJyXxp\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      double double0 = jSONObject0.optDouble("tri");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }
}
