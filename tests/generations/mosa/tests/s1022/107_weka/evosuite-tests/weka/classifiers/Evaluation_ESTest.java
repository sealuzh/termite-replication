/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 22:18:12 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.util.ArrayList;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.ConditionalDensityEstimator;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.PART;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.M5P;
import weka.classifiers.trees.RandomForest;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.estimators.NormalEstimator;
import weka.estimators.PoissonEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.14057387157424
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NoPriors = true;
      evaluation0.KBMeanInformation();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) null, instances0, objectArray0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.753965716419247
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.relativeAbsoluteError();
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.856002643554968
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities0 = costSensitiveClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("Root relative squared error        ");
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.trueNegativeRate(1);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.sizeOfPredictedRegions();
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.961133864606029
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.SFPriorEntropy();
      evaluation0.rootRelativeSquaredError();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      Evaluation.main((String[]) null);
      evaluation0.toSummaryString(false);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = 0.01;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) 1;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) (-2);
      doubleArray1[4] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) (-2);
      doubleArray3[2] = 1.050000000745058;
      doubleArray3[3] = (double) 1;
      doubleArray3[4] = (double) (-2);
      doubleArray3[5] = (double) 1;
      doubleArray3[6] = (double) (-1);
      doubleArray3[7] = (double) (-2);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 1;
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = (double) 2;
      doubleArray4[3] = (double) (-2);
      doubleArray4[4] = (double) (-1);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (-1.7976931348623157E308);
      doubleArray5[1] = 1.7976931348623157E308;
      doubleArray5[2] = 2406.19904929483;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (double) (-1);
      doubleArray6[1] = 15.0;
      doubleArray6[2] = 2406.19904929483;
      doubleArray6[3] = 2406.19904929483;
      doubleArray6[4] = (double) 2;
      doubleArray6[5] = 3215.598958;
      doubleArray6[6] = (-1.7976931348623157E308);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (double) (-1);
      doubleArray7[1] = 3215.598958;
      doubleArray7[2] = 1.050000000745058;
      doubleArray7[3] = (double) (-2);
      doubleArray7[4] = 15.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = (double) (-1);
      doubleArray8[1] = (double) 1;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      doubleArray9[0] = 2406.19904929483;
      doubleArray9[1] = 2406.19904929483;
      doubleArray9[2] = 3215.598958;
      doubleArray9[3] = 15.0;
      doubleArray0[8] = doubleArray9;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      evaluation0.m_ClassIsNominal = true;
      // Undeclared exception!
      try { 
        evaluation0.unweightedMacroFmeasure();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.errorRate();
      try { 
        evaluation0.crossValidateModel(".bsi", instances0, (-2), testInstances0.DEFAULT_WORDS, (Random) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .bsi
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.867597108344429
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      evaluation0.m_NoPriors = true;
      MockRandom mockRandom0 = new MockRandom(1L);
      double double1 = evaluation0.falsePositiveRate((-2));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.weightedFMeasure();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0525312230501809
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 10.0;
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      MockRandom mockRandom0 = new MockRandom(6);
      try { 
        evaluation0.crossValidateModel((Classifier) m5Rules0, instances0, 280106558, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(23);
      binarySparseInstance0.toString(1881);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.precision((-1632));
      MockRandom mockRandom0 = new MockRandom(120L);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("0", arrayList0, 115);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "0";
      objectArray0[1] = (Object) textDirectoryLoader0;
      try { 
        evaluation0.crossValidateModel((Classifier) inputMappedClassifier0, instances1, 180, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(23);
      binarySparseInstance0.toString(23);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.precision(6);
      MockRandom mockRandom0 = new MockRandom(120L);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      binarySparseInstance0.dataset();
      inputMappedClassifier0.setModelHeader((Instances) null);
      evaluation0.falsePositiveRate(23);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) inputMappedClassifier0, (Instance) binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9160175838494788
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_WithClass = (double) (-2);
      evaluation0.KBMeanInformation();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(23);
      evaluation0.KBMeanInformation();
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(23);
      MockRandom mockRandom0 = new MockRandom(0L);
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 1081, (Random) mockRandom2, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9716094896914944
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(">\"#=#q<Vj+2'=a");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.getRandomNumberGenerator((-2));
      instances0.setClassIndex((-1));
      evaluation0.weightedMatthewsCorrelation();
      testInstances0.setWordSeparators("E.5z_!7l-?G6");
      evaluation0.weightedAreaUnderPRC();
      try { 
        evaluation0.setPriors(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4286687697449683
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(23);
      binarySparseInstance0.copy();
      evaluation0.fMeasure(23);
      evaluation0.toSummaryString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\nTotal Number of Instances                0     \n";
      stringArray0[1] = "5FN3m7<.YOY9R.";
      stringArray0[2] = ".bsi";
      stringArray0[6] = ".arff";
      Evaluation.main(stringArray0);
      M5P m5P0 = new M5P();
      try { 
        evaluation0.evaluateModelOnce((Classifier) m5P0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      evaluation0.SFPriorEntropy();
      evaluation0.rootRelativeSquaredError();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) regressionByDiscretization0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.464354206361708
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1132.31359758163);
      IBk iBk0 = new IBk((-2));
      Evaluation.handleCostOption((String) null, 2);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      // Undeclared exception!
      try { 
        evaluation0.falsePositiveRate(70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.519544703074724
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumClasses(3196);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.confusionMatrix();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-2), doubleArray0);
      instances0.add((Instance) denseInstance0);
      evaluation1.toCumulativeMarginDistributionString();
      // Undeclared exception!
      evaluation0.unweightedMicroFmeasure();
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.49056603773584906
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 10.0;
      evaluation0.SFSchemeEntropy();
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1304778859169557
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      m5Rules0.setUseUnsmoothed(true);
      evaluation0.areaUnderROC((-1));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 10.0;
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      evaluation0.getRevision();
      // Undeclared exception!
      try { 
        evaluation0.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances2.generate("!DNN(!5N3!I`");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4439802824701875
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1104.837350094838;
      doubleArray0[2] = 1104.837350094838;
      doubleArray0[3] = 1104.837350094838;
      doubleArray0[4] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 6.0);
      IBk iBk0 = new IBk((-2512));
      Evaluation.handleCostOption((String) null, (-2512));
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.falsePositiveRate(1);
      evaluation0.toSummaryString(".cost", false);
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1));
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      textDirectoryLoader0.getOptions();
      double double0 = evaluation0.truePositiveRate(1);
      assertEquals(0.0, double0, 0.01);
      
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4403575967745756
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[6] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1104.837350094838);
      IBk iBk0 = new IBk((-1));
      Evaluation.handleCostOption("", (-2));
      evaluation0.m_TrainClassVals = doubleArray0;
      evaluation0.kappa();
      evaluation0.updateMargins(doubleArray0, 2, 0.0);
      AllFilter allFilter0 = new AllFilter();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(1, testInstances0.getSeed());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.237966169824137
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.m_NoPriors = true;
      evaluation0.SFPriorEntropy();
      double double1 = evaluation0.numFalseNegatives((-1));
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString("@data", true);
      assertEquals("@data\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.230194603908443
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.confusionMatrix();
      evaluation0.m_Incorrect = (-3466.98323569266);
      evaluation0.errorRate();
      evaluation1.areaUnderPRC(3930);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      evaluation0.m_TrainClassWeights = doubleArray0;
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.errorRate(), 0.01);
      
      double double0 = evaluation1.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8160500079520578
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      evaluation1.weightedTrueNegativeRate();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 100.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(23.0, doubleArray0);
      try { 
        evaluation1.evaluateModelOnce(Double.NaN, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5901377123969231
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 10.0;
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(4.94E-321, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(23);
      binarySparseInstance0.toString(23);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.precision(6);
      evaluation0.truePositiveRate(8);
      evaluation0.m_ClassIsNominal = false;
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.301608716407634
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) 2545L;
      doubleArray0[8] = (double) 2545L;
      doubleArray0[2] = (double) 2545L;
      doubleArray0[6] = (double) 2545L;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 2545L);
      IBk iBk0 = new IBk((-1));
      Evaluation.handleCostOption("", (-2));
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4909090909090909
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("$-:>mov4L}EK");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1));
      evaluation0.SFSchemeEntropy();
      evaluation0.numTruePositives(434);
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      evaluation0.numFalseNegatives(17);
      try { 
        evaluation0.evaluateModelOnce((double) (-2), (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.1665836683914903
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumClasses(1207);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.confusionMatrix();
      evaluation0.errorRate();
      evaluation0.toMatrixString();
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.1404437843310955
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1));
      evaluation0.SFSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.trueNegativeRate(195225776);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.154252758663164
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      instances0.indexOf(testInstances0);
      MockRandom mockRandom0 = new MockRandom(491);
      MockRandom mockRandom1 = new MockRandom();
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '6';
      charArray0[2] = '*';
      charArray0[3] = '\\';
      charArray0[4] = 'W';
      charArray0[5] = '_';
      charArray0[6] = 'y';
      evaluation0.num2ShortID(491, charArray0, 491);
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 491, (Random) mockRandom1, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1886211160727207
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      capabilities0.assign(capabilities1);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate(")~y3.Y|5xeO~>");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      evaluation0.SFSchemeEntropy();
      evaluation0.numTruePositives(3);
      evaluation0.pctIncorrect();
      try { 
        Evaluation.handleCostOption("listOptions", 3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      PoissonEstimator poissonEstimator0 = new PoissonEstimator();
      Capabilities capabilities0 = poissonEstimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getGlobalBlend");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      PipedReader pipedReader0 = new PipedReader();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.3946819089698845
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Percentage split ('-percentage-split') is missing.");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1));
      evaluation0.SFSchemeEntropy();
      evaluation0.numTruePositives((-1));
      // Undeclared exception!
      try { 
        evaluation0.recall((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      m5Rules0.getTechnicalInformation();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.49056603773584906
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      m5Rules0.globalInfo();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumInstances((-2));
      evaluation0.areaUnderROC((-1));
      evaluation0.SFSchemeEntropy();
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.meanPriorAbsoluteError();
      double double1 = evaluation0.weightedPrecision();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.6351225381963586
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("oQYH^R");
      evaluation0.weightedTrueNegativeRate();
      evaluation0.falseNegativeRate(1);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.recall((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(">\"#=#q<Vj+2'=a");
      PART pART0 = new PART();
      Instances instances0 = testInstances0.generate(">\"#=#q<Vj+2'=a");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.300956508581174
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1));
      evaluation0.SFSchemeEntropy();
      evaluation0.numTruePositives((-1));
      // Undeclared exception!
      try { 
        evaluation0.precision(400);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.1304778859169557
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumInstances((-2));
      evaluation0.areaUnderROC((-1));
      evaluation0.SFSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.weightedTruePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.5053243169982706
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.KBInformation();
      double double1 = evaluation0.SFPriorEntropy();
      double double2 = evaluation0.numFalseNegatives((-1));
      assertEquals(double2, double1, 0.01);
      
      evaluation0.areaUnderPRC((-2));
      double double3 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.442271178038931
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation.makeOptionString(decisionStump0, true);
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities1 = additiveRegression0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances2.generate("PjQXd-e9");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumInstances((-2));
      evaluation0.areaUnderROC(13);
      evaluation0.SFSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.2030856415829745
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("[fF][rR][oO][mM]");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-2899));
      evaluation0.KBInformation();
      // Undeclared exception!
      try { 
        evaluation0.recall(1439);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1439
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.668803800330735
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation1.recall(46);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation1.errorRate();
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, evaluation1.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.2809976014645987
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setHandler(m5Rules0);
      testInstances0.setNumInstances((-2));
      evaluation0.areaUnderROC((-1));
      evaluation0.SFSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.unweightedMicroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.7937355415134535
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.confusionMatrix();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.makeDistribution(0.9940302114769565);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9394181545874047
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision(1);
      MockRandom mockRandom0 = new MockRandom(456L);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 2;
      intArray0[2] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), intArray0, 108);
      binarySparseInstance0.dataset();
      inputMappedClassifier0.setModelHeader((Instances) null);
      evaluation0.falsePositiveRate(2);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      try { 
        sVMLightLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      testInstances0.setNumInstances((-2));
      evaluation0.SFPriorEntropy();
      try { 
        evaluation0.toMatrixString("IM4]uS(''9+");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.0144864535881952
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSchemeEntropy;
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.unweightedMacroFmeasure();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(0, testInstances0.getNumRelationalString());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.3296130040405383
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setOutputProbsForSVM");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      double double0 = evaluation0.errorRate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.numTrueNegatives(1);
      double double1 = evaluation0.pctIncorrect();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.addNumericTrainClass(23.0, (-2));
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(23);
      evaluation0.precision(6);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(23);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, binarySparseInstance0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.8558221031888238
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      M5P m5P0 = new M5P();
      evaluation0.m_NumClasses = (-2);
      evaluation0.toMatrixString(".arff");
      DecisionStump decisionStump0 = new DecisionStump();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2545L;
      doubleArray0[1] = (double) 2545L;
      doubleArray0[2] = (double) 2545L;
      doubleArray0[6] = (double) 2545L;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1104.837350094838);
      IBk iBk0 = new IBk((-1));
      Evaluation.handleCostOption("", (-2));
      evaluation0.kappa();
      evaluation0.updateMargins(doubleArray0, 2, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("");
      Instances instances0 = testInstances0.generate("@data");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.equals((Object) null);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6781502623956532
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setOutputProbsForSVM");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      evaluation0.toMatrixString();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      double[] doubleArray1 = new double[0];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray1, (Instance) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.921452559457709
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_SumSqrErr;
      double double2 = evaluation0.falseNegativeRate((-2119));
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "maxBoostingIterationsTipText");
      assertNotNull(string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      double double0 = evaluation0.m_Incorrect;
      double double1 = evaluation0.m_ClassPriorsSum;
      double double2 = evaluation0.meanAbsoluteError();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.3109290309357102
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.errorRate();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1403.0), intArray0, (-1));
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 0.07500000298023224;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-255.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      ConditionalDensityEstimator conditionalDensityEstimator0 = null;
      try { 
        evaluation0.updateStatsForPredictor((-2.0), binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(23);
      evaluation0.priorEntropy();
      MockRandom mockRandom0 = new MockRandom(23);
      JRip jRip0 = new JRip();
      assertEquals("Whether debug information is output to the console.", jRip0.debugTipText());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.8564909139241834
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unclassified();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(120);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_CoverageStatisticsAvailable = false;
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.truePositiveRate(23);
      assertEquals(0.0, double1, 0.01);
      
      System.setCurrentTimeMillis((-1940L));
      double double2 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double3 = evaluation0.KBMeanInformation();
      assertEquals(double3, double2, 0.01);
      
      System.setCurrentTimeMillis((-2933L));
      org.evosuite.runtime.Random.setNextRandom(1344);
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.getHeader();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, "VWJ^Q%<V:}5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.3921682295364994
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient(109);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7896656513804965
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.confusionMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.5120240916215923
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Ilx0");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.KBMeanInformation();
      System.setCurrentTimeMillis(893L);
      testInstances0.setNumInstancesRelational((-94));
      evaluation0.relativeAbsoluteError();
      evaluation0.SFPriorEntropy();
      evaluation0.falsePositiveRate(1415);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1415;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-2);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.7148603057626772
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.confusionMatrix();
      textDirectoryLoader0.setCharSet("six");
      evaluation0.SFEntropyGain();
      evaluation0.weightedAreaUnderROC();
      evaluation0.correct();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      PART pART0 = new PART();
      MockRandom mockRandom0 = new MockRandom(491);
      Object[] objectArray0 = new Object[1];
      try { 
        evaluation0.crossValidateModel((Classifier) pART0, instances0, 491, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      M5P m5P0 = new M5P();
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(">\"#=#q<Vj+2'=a");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.kappa();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.134163907688782
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      org.evosuite.runtime.Random.setNextRandom(1);
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(23);
      instances0.toArray();
      evaluation0.precision(6);
      double double0 = evaluation0.fMeasure(23);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.numInstances();
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1837132182957943
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("!ho'L");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      M5P m5P0 = new M5P();
      evaluation0.toMatrixString(".arff");
      System.setCurrentTimeMillis((-1));
      org.evosuite.runtime.Random.setNextRandom((-1));
      evaluation0.rootRelativeSquaredError();
      evaluation0.weightedFalsePositiveRate();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, (-2), 1952.58571940239);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) zeroR0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, "import weka.classifiers.Classifier;\nimport weka.classifiers.AbstractClassifier;\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      double double1 = evaluation0.m_SumPriorSqrErr;
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updateStatsForPredictor((-1), (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(23);
      evaluation0.addNumericTrainClass(1.7976931348623157E308, (-2020.08017121203));
      evaluation0.trueNegativeRate((-1));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getRevision();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = (double) 2;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1.0E-10, doubleArray0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.4466856169199285
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalDate((-2));
      evaluation0.KBMeanInformation();
      System.setCurrentTimeMillis((-1));
      evaluation0.relativeAbsoluteError();
      evaluation0.SFPriorEntropy();
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1), charArray0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      double double0 = evaluation0.m_SumPriorAbsErr;
      evaluation0.equals(testInstances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-1), Double.NaN);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = (-1);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.106644616344715
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.pctUnclassified();
      evaluation0.trueNegativeRate(11);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setClassIndex(104);
      evaluation0.areaUnderPRC((-2));
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.0593431566619578
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.handleCostOption("", (-2));
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation2.numFalsePositives(1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation2.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = evaluation0.equals(instances0);
      assertFalse(boolean0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals(testInstances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(10.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      org.evosuite.runtime.Random.setNextRandom(80);
      evaluation0.rootRelativeSquaredError();
      Float float0 = new Float((double) (-1));
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("");
      Instances instances0 = testInstances0.generate("@data");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.falseNegativeRate((-2));
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double0 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.errorRate();
      try { 
        evaluation0.crossValidateModel("@data", instances0, (-2), testInstances0.DEFAULT_WORDS, (Random) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @data
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        Evaluation.evaluateModel((String) null, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) null, instances0, objectArray0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.617267183600608
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.errorRate();
      double double1 = evaluation0.weightedRecall();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray0.length);
      
      double double0 = evaluation1.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFSchemeEntropy();
      assertNotEquals(double1, double0, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double[] doubleArray1 = evaluation0.getClassPriors();
      assertEquals(2, doubleArray1.length);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(23);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 6;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.489737222504811
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.KBInformation();
      evaluation0.SFPriorEntropy();
      evaluation0.numFalseNegatives((-1));
      try { 
        evaluation0.evaluateModelOnce(1.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.toClassDetailsString("=?");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      M5Rules m5Rules0 = new M5Rules();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("Jar does not exist: ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.338468406923318
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.KBMeanInformation();
      System.setCurrentTimeMillis(3026);
      evaluation0.relativeAbsoluteError();
      evaluation0.SFPriorEntropy();
      char[] charArray0 = new char[0];
      int int0 = 20;
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2), charArray0, 20);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(23);
      binarySparseInstance0.toString(23);
      FileSystemHandling.shouldAllThrowIOExceptions();
      textDirectoryLoader0.getDirectory();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 6;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("v");
      Evaluation evaluation0 = new Evaluation(instances0);
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) randomSubSpace0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      try { 
        evaluation0.evaluateModelOnce((Classifier) multilayerPerceptron0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumInstances(8);
      evaluation0.addNumericTrainClass(8, 8);
      double double0 = evaluation0.trueNegativeRate(8);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1.0), (-2));
      double double0 = evaluation0.trueNegativeRate((-2));
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(">9\"#=#q<Vj+2'=a");
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.avgCost();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.7112725272475138
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      NormalEstimator normalEstimator0 = new NormalEstimator(0.0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("getWeightTrimBeta");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = 'D';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[4] = '.';
      charArray0[5] = 'D';
      charArray0[6] = '.';
      charArray0[7] = 'i';
      charArray0[8] = '.';
      String string0 = evaluation0.num2ShortID(19, charArray0, 484);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  DD", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.m_Header = instances0;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.equals(instances0);
      testInstances0.setMultiInstance(false);
      evaluation1.matthewsCorrelationCoefficient((-2275));
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = 'h';
      String string0 = evaluation1.num2ShortID((-2), charArray0, 3586);
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      testInstances0.clone();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.numFalsePositives((-2));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.incorrect();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(23);
      SparseInstance sparseInstance0 = new SparseInstance(6);
      evaluation0.KBMeanInformation();
      System.setCurrentTimeMillis(23);
      try { 
        evaluation0.evaluateModel((Classifier) null, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      try { 
        evaluation0.evaluateModel((Classifier) null, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(11);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((double[]) null, (Instance) sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(">\"#=#q<Vj+2'=a");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[6];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      MockRandom mockRandom0 = new MockRandom((-1));
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 1865, (Random) mockRandom0, (Object[]) doubleArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [D cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(464);
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, (-1), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("useAICTipText");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      
      String string0 = evaluation0.toSummaryString("*.!/M%TV|`e", false);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals("*.!/M%TV|`e\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.092883882347058
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.toSummaryString("@relation", true);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.getRevision();
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      AbstractClassifier.makeCopy((Classifier) null);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      org.evosuite.runtime.Random.setNextRandom((-1));
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      String string0 = Evaluation.getGlobalInfo(cVParameterSelection0);
      assertEquals("\nSynopsis for weka.classifiers.meta.CVParameterSelection:\n\nClass for performing parameter selection by cross-validation for any classifier.\n\nFor more information, see:\n\nR. Kohavi (1995). Wrappers for Performance Enhancement and Oblivious Decision Graphs. Department of Computer Science, Stanford University.", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.5422656928854366
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.errorRate();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.numTruePositives(2414);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.290664210654739
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString(true);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      double double0 = evaluation0.m_ClassPriorsSum;
      evaluation0.useNoPriors();
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.8835621206827322
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("getWeightTrimBeta");
      instances0.toArray();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = evaluation0.toClassDetailsString("[TreeModel] not implemented!");
      assertEquals("[TreeModel] not implemented!\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      M5P m5P0 = new M5P();
      String string1 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string1);
      
      System.setCurrentTimeMillis(31L);
      evaluation0.relativeAbsoluteError();
      evaluation0.setDiscardPredictions(true);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.8834372182627477
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      M5P m5P0 = new M5P();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      System.setCurrentTimeMillis(2545L);
      evaluation0.setDiscardPredictions(false);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.toMatrixString(".bsi");
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1));
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("getWeightTrimBeta");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumInstances((-1));
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.272539375087381
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.meanPriorAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("zRj`'ol");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "zRj`'ol");
      try { 
        Evaluation.handleCostOption("zRj`'ol", 7);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"zRj`'ol\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.8835319301806641
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".arff");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".koml");
      Instances instances0 = testInstances0.generate("oLIZib8hv42r");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unclassified();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toClassDetailsString(" ");
      try { 
        Evaluation.handleCostOption(".arff", (-2));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \".koml\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("useAICTipText");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.totalCost();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.32014511983807
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      evaluation0.errorRate();
      evaluation0.toMatrixString();
      evaluation1.rootMeanSquaredError();
      evaluation1.falseNegativeRate(1319);
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1995138716), charArray0, (-2264));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Ilx0");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(3433, (char[]) null, 1579);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(">\"#=#q<Vj+2'=a");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.setPriors(instances0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.8913741235084864
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      libSVMLoader0.setUseRelativePath(true);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("   * only checks the data against its capabilities.\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorEntropy = (double) (-2);
      evaluation0.confusionMatrix();
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.SFMeanPriorEntropy(), 0.01);
      assertEquals((-2.0), double0, 0.01);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertFalse(testInstances0.getMultiInstance());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SMO sMO0 = new SMO();
      M5P m5P0 = new M5P();
      String string0 = Evaluation.makeOptionString(m5P0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.549521821245012
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      String string0 = Evaluation.makeOptionString(decisionStump0, true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(string0, arrayList0, 109);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[5];
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      try { 
        Evaluation.evaluateModel((Classifier) naiveBayesMultinomialUpdateable0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      RandomForest randomForest0 = new RandomForest();
      try { 
        Evaluation.evaluateModel((Classifier) randomForest0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.trees.RandomForest:
         // 
         // -I <number of trees>
         // \tNumber of trees to build.
         // -K <number of features>
         // \tNumber of features to consider (<1=int(logM+1)).
         // -S
         // \tSeed for random number generator.
         // \t(default 1)
         // -depth <num>
         // \tThe maximum depth of the trees, 0 for unlimited.
         // \t(default 0)
         // -print
         // \tPrint the individual trees in the output
         // -num-slots <num>
         // \tNumber of execution slots.
         // \t(default 1 - i.e. no parallelism)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      try { 
        Evaluation.handleCostOption("zRj`'ol", 7);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = Evaluation.makeOptionString(naiveBayesMultinomialText0, false);
      assertNotNull(string0);
  }
}
