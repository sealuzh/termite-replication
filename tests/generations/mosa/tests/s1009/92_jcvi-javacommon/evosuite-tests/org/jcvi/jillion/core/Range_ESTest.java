/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 05:01:43 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3866123593999244
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775667L);
      range1.equals(range_CoordinateSystem0);
      Range range2 = Range.of(2147483647L, 2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      assertFalse(list0.contains(range1));
      assertSame(range0, range2);
      assertTrue(list0.contains(range0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1998534797907348
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = 500L;
      Range range0 = Range.of(500L, 500L);
      range0.iterator();
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 500L, 232L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.853895920561397
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(491L, 491L);
      Range range1 = Range.of(491L, 65580L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString();
      String string0 = range1.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 491 .. 65580 ]/0B", string0);
      
      Range range2 = Range.of(491L, 65580L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.parseRange("[ 491 .. 65580 ]/0B", range_CoordinateSystem1);
      List<Range> list0 = range3.complement(range1);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      
      boolean boolean0 = range3.equals(range0);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range2));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.762551687759674
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of((-6L), 492L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.split(127L);
      Range range1 = Range.of((-6L), 127L);
      linkedList0.push(range1);
      range0.getLength();
      range0.equals(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.329213344056216
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of((-1L));
      range0.intersects(range1);
      Range.ofLength(820L);
      Object object0 = null;
      range1.equals((Object) null);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.ofLength((-1019L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.203776696828706
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.equals(range0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.8551824372445527
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      //  // Unstable assertion: assertFalse(boolean0);
      
      range0.equals(object0);
      Range range1 = Range.of((-648L), (-648L));
      range0.complement(range1);
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
      Range range2 = Range.of(4294967295L);
      //  // Unstable assertion: assertNotSame(range2, range0);
      //  // Unstable assertion: assertTrue(range2.equals((Object)range0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.8311429390499385
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.of(193L, 193L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range1 = Range.of(193L, 9223372036854775807L);
      linkedList0.add(range1);
      Range.of(9223372036854775807L);
      range1.complementFrom(linkedList0);
      Range range2 = Range.of(2147483647L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2060259096042345
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775802L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775802L), (-9223372036854775802L));
      Object object0 = new Object();
      range0.isEmpty();
      range0.equals(range1);
      Range range2 = Range.of((-9223372036854775802L), (-9223372036854775802L));
      range2.complement(range1);
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      boolean boolean0 = range1.equals(range0);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2021678481610336
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      Long long0 = new Long(0L);
      range0.equals((Object) null);
      Range range1 = Range.of(4294967295L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.892400767303865
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of((-1863L), 23L);
      Range range1 = Range.of((-10L), 731L);
      List<Range> list0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.723267830182661
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getLength();
      range0.getEnd(range_CoordinateSystem0);
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), 2901L);
      // Undeclared exception!
      range1.split(1966L);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2033773039059485
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1603L, 65580L);
      Object object0 = new Object();
      range0.getEnd();
      range0.equals(range_CoordinateSystem0);
      long long0 = 4294967295L;
      Range range1 = Range.ofLength(4294967295L);
      range1.toString();
      // Undeclared exception!
      try { 
        range1.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.8300768506007357
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.ofLength(291L);
      Range range1 = Range.of(291L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = Range.of(291L);
      boolean boolean0 = range1.intersects(range2);
      assertTrue(boolean0);
      
      Long long0 = new Long(291L);
      Long.getLong("");
      range1.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range2.getEnd(range_CoordinateSystem0);
      assertEquals(292L, long1);
      
      Range range3 = Range.of(292L, 291L);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ 291 .. -9223372036854775808 ]/SB", string0);
      
      range3.intersection(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.ofLength(5786L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 5786L, 5786L);
      Long long0 = new Long(5786L);
      Object object0 = new Object();
      range1.equals(range_CoordinateSystem0);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      range0.equals((Object) null);
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.266970744711691
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.parseRange("  <%{]g+N5-8eV", range_CoordinateSystem0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0611325635684077
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775784L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775784L), (-9223372036854775784L));
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      boolean boolean1 = range0.equals(range1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      Object object1 = new Object();
      boolean boolean2 = range0.equals(object0);
      //  // Unstable assertion: assertFalse(boolean2);
      
      Range range2 = Range.of((-9223372036854775784L));
      //  // Unstable assertion: assertNotSame(range2, range1);
      //  // Unstable assertion: assertSame(range2, range0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.725906055451097
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-85L), 0L);
      Object object0 = new Object();
      Range range1 = Range.of(1995L, 1995L);
      boolean boolean0 = range0.equals(range1);
      long long0 = range1.getBegin();
      assertEquals(1995L, long0);
      
      Long long1 = new Long(0L);
      Range range2 = Range.of((-2937L), 32767L);
      Range range3 = Range.of(9990L);
      boolean boolean1 = range3.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      
      Range range4 = Range.of((-1861L));
      assertNotSame(range4, range2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.541760006784195
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9991L, 2147483647L);
      Range range1 = Range.ofLength(9971L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      
      Long.getLong("r");
      range0.equals((Object) null);
      Range range2 = Range.of(9968L);
      Range range3 = Range.of(9968L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range3.getEnd(range_CoordinateSystem1);
      assertEquals(9969L, long0);
      assertSame(range3, range2);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.582394262884063
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-9223372036854775808L), (-9223372036854775808L));
      range1.toString();
      range1.spliterator();
      // Undeclared exception!
      try { 
        Range.parseRange("[ -9223372036854775808 .. 9223372036854775807 ]/0B", range_CoordinateSystem1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9223372036854775808\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Long long0 = new Long((-511L));
      Range range0 = Range.of(377L, 4294967295L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = (-9223372036854775784L);
      Range range0 = Range.of((-9223372036854775784L));
      Object object0 = new Object();
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.056474781190351
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = 549L;
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("[ 1 .. 0 ]/RB", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.423726279007912
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Object object0 = new Object();
      range1.equals(object0);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.ofLength(4294967295L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.771162375717047
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range.of(731L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range1.complement(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.136133353007071
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals((-9223372036854775808L), long0);
      
      Range range1 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.startsBefore(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Range range2 = Range.ofLength(9223372036854775807L);
      range2.equals((Object) null);
      Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range1.getBegin(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals(4294967295L, long1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0605245787004756
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, (-9223372036854775808L));
      Object object0 = new Object();
      range0.isSubRangeOf(range1);
      range1.equals(object0);
      range0.equals(range1);
      range1.endsBefore(range0);
      List<Range> list0 = new LinkedList<Range>();
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.ofLength(4294967310L);
      Long long0 = new Long((-511L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.8374500590135896
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.endsBefore(range1);
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem0);
      Range range2 = Range.parseRange("[ 9223372036854775807 .. 9223372036854775807 ]/0B", range_CoordinateSystem0);
      range1.complement(range2);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, (-945L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -945 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.607351245070941
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1251L), 5443L);
      List<Range> list0 = range0.split(5443L);
      assertEquals(2, list0.size());
      
      String string0 = range0.toString();
      assertEquals("[ -1251 .. 5442 ]/0B", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.493339929056383
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-181L), (-181L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range range1 = Range.of(range_CoordinateSystem1, (-181L), (-181L));
      range1.iterator();
      Range range2 = Range.of((-181L));
      Range.Builder range_Builder0 = new Range.Builder((-1280L), (-1280L));
      Range range3 = range_Builder0.build();
      range3.intersects(range0);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      
      range0.getBegin(range_CoordinateSystem0);
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertTrue(range0.equals((Object)range2));
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      //  // Unstable assertion: assertEquals("[ -181 .. -181 ]/SB", string0);
      //  // Unstable assertion: assertNotSame(range0, range2);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9787338102818284
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of((-2147483657L));
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(759L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.0599988624120327
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(5786L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 5786 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.parseRange("[ 1 .. 5786 ]/RB", range_CoordinateSystem1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.1351203217412427
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.ofLength(153L);
      Range range0 = Range.of(153L, 153L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 153L, 153L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.5814487838827964
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-1L), (-1L));
      assertFalse(range1.isEmpty());
      
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.388149535673943
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Long long0 = new Long((-2076L));
      Object object0 = new Object();
      Range range1 = Range.of(4294967295L, 4294967295L);
      range0.equals(range1);
      Long long1 = new Long(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem0);
      Range range2 = Range.of((-2076L), 4294967295L);
      Range.of((-9223372036854775808L));
      Range range3 = Range.of((-2076L));
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.390260917727688
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(491L, 491L);
      Range range1 = Range.of(491L, 65580L);
      List<Range> list0 = range1.split(4024L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(17, list0.size());
      //  // Unstable assertion: assertEquals(2, list1.size());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.4434080513313887
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(1862L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range1 = Range.of(1862L, 1862L);
      linkedList0.add(range1);
      Range range2 = Range.of(1862L);
      List<Range> list0 = range2.complementFrom(linkedList0);
      assertEquals(0, list0.size());
      
      Range range3 = Range.of(1862L);
      assertSame(range3, range1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.9649558715984767
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-85L), 0L);
      Range range1 = Range.of((-2147483637L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      range0.forEach(consumer0);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      range0.split(530L);
      boolean boolean1 = range0.equals(range0);
      Long long1 = new Long((-85L));
      Range.Comparators.values();
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range0));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      assertFalse(range2.isEmpty());
      
      range1.iterator();
      Range range3 = Range.of((-2945L));
      Range.ofLength(1248L);
      boolean boolean2 = range3.isEmpty();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.5629039446681854
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(27L, 27L);
      Range range1 = Range.ofLength(193L);
      Range range2 = Range.ofLength(1475L);
      range0.equals(range2);
      assertFalse(range0.isEmpty());
      
      Range.of(643L);
      Range range3 = Range.ofLength(1213L);
      assertFalse(range3.equals((Object)range2));
      assertNotSame(range3, range1);
      assertFalse(range3.equals((Object)range1));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(153L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 153L, 153L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(153L, long0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 378L, 9223372036851981921L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(378L, long0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = (-181L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-181L), (-181L));
      Object object0 = new Object();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.387145951444552
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(1862L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.endsBefore(range0);
      Range range1 = Range.of(range_CoordinateSystem0, 1862L, 1862L);
      range0.split(2147483647L);
      range1.getLength();
      range1.equals(range0);
      range1.complement(range0);
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.135872616239462
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(491L);
      Long long0 = new Long(4024L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      Range range1 = Range.of(491L, 4024L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 491 .. 4025 ]/SB", string0);
      
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1 == boolean0);
      
      Range range2 = Range.of(4024L);
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-6834L), 378L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-6834L), long0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.2668415958029997
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Object object0 = new Object();
      Long.getLong("number of entries must be <= Integer.MAX_VALUE");
      range0.equals((Object) null);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.of(range_CoordinateSystem0, 0L, 1678L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(142L, 142L);
      Long long0 = new Long(1427L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Comparators.values();
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.2660952157462746
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483621L, 2147483621L);
      Long long0 = new Long((-181L));
      range0.equals(long0);
      Range range1 = Range.of(2116L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.6761703534160013
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967332L, 4294967332L);
      Range range0 = Range.of(4294967332L, 4294967332L);
      range0.spliterator();
      Range.of((-1862L));
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.05725704976923
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      range0.endsBefore(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Long.getLong((String) null);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 65535L, (-538L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range range1 = Range.of(371L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(4294967295L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.5920180578087355
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of(9223372036854775807L);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372036854775807 .. 9223372036854775807 ]/0B", string0);
      
      List<Range> list0 = range0.split(1L);
      assertFalse(list0.contains(range0));
      assertEquals(255, list0.size());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.133310203178477
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.getLength();
      range0.equals((Object) null);
      Range.of(9223372036854775807L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(9223372036854775782L, 9223372036854775782L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = range0.equals(consumer0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(1417L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.89156615887432
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(153L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(153L);
      range1.equals(range1);
      long long0 = range1.getLength();
      assertFalse(range1.equals((Object)range0));
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.756038924852759
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of((-2664L), (-2664L));
      Range range1 = Range.of((-2664L), (-2664L));
      range0.iterator();
      range0.getBegin();
      range0.equals(range1);
      range0.getLength();
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 2971L, 4496L);
      range0.iterator();
      range2.complement(range0);
      range2.getBegin();
      range0.getBegin(range_CoordinateSystem1);
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      range2.asRange();
      String string1 = range_CoordinateSystem0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.Comparators.values();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.718816897349047
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of((-1863L), 23L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      List<Range> list0 = range0.split(503L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(4, list0.size());
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.0936163719933942
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of(255L);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("$VALUES");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse $VALUES into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.431350098534834
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(1277L, 4294967295L);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range1.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.792915855263332
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967332L, 4294967332L);
      Range range0 = Range.of(4294967332L, 4294967332L);
      Range range1 = Range.of((-1060L));
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.9784131432944947
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.ofLength(65535L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      Range.Comparators.values();
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.130582753344072
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.3846246314593835
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.spliterator();
      range0.equals(range_CoordinateSystem0);
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.2017210871781594
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(0L);
      range0.spliterator();
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of((-1285L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.180683087165041
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.ofLength(5786L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.796837966557264
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range range2 = range0.asRange();
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.2068453818251017
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(27L, 27L);
      Range range1 = Range.ofLength(193L);
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.204174232109962
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(9223372036854775807L);
      Range range2 = Range.of(255L);
      boolean boolean0 = range1.intersects(range2);
      assertFalse(range2.isEmpty());
      assertFalse(boolean0);
      
      Long long0 = new Long(255L);
      boolean boolean1 = range1.isEmpty();
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.611035249710534
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.ofLength(4294967295L);
      Range.of((-2147483648L), 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.347367941794885
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1692L), 1L);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
      
      Long long1 = new Long(4294967310L);
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.ofLength(378L);
      boolean boolean0 = range0.equals("The second parameter in the comparison is null.");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.329945370200007
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      Range range2 = Range.of(4294967295L, 4294967295L);
      boolean boolean0 = range2.isSubRangeOf(range1);
      long long0 = range2.getLength();
      assertEquals(1L, long0);
      
      range1.isEmpty();
      boolean boolean1 = range0.startsBefore(range1);
      assertSame(range1, range2);
      assertTrue(boolean1 == boolean0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.1351813606230103
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(491L, 491L);
      Range range1 = Range.of(491L, 65580L);
      Long long0 = new Long(65580L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range2 = Range.of(491L);
      assertSame(range2, range0);
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(5786L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.4410376186222225
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(27L, 27L);
      Range range1 = Range.ofLength(27L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Long long0 = new Long(4294967295L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.2081819478882956
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 4294967279L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.388188351782628
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-2800L));
      Range range1 = Range.of((-2800L), (-2800L));
      List<Range> list0 = range0.complement(range1);
      assertSame(range1, range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-344L), (-344L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.721774676450885
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1636L), (-1636L));
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.651253342373547
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of((-114L), 0L);
      long long0 = 65535L;
      Range range1 = Range.of((-114L), 65535L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      String string0 = "0:";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("0:", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 0: into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.5873928183218178
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(4576L, 4576L);
      Range range1 = Range.ofLength(955L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.327189247670674
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.of(4294967295L, 9223372036854775806L);
      Range range0 = Range.of(378L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.4998484047165377
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 378L, 4294967295L);
      Range range1 = Range.of(1053L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      boolean boolean1 = range1.isSubRangeOf(range0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.1446451161947224
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.ofLength(255L);
      Range range0 = Range.of((-9223372036854775802L));
      Range range1 = Range.of(255L);
      range0.intersects(range1);
      Long long0 = new Long(255L);
      assertEquals(255L, (long)long0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.3278369999701947
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483621L, 2147483621L);
      Long long0 = new Long((-159L));
      range0.intersects(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 2147483621L, 4294967278L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.267734353307742
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 4294967294 ]/0B", string0);
      
      Range range1 = Range.of(1291L, 4294967295L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.7895612106111645
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.endsBefore(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 9223372036854775807 .. 9223372036854775807 ]/0B", string0);
      
      Range range2 = Range.parseRange("[ 9223372036854775807 .. 9223372036854775807 ]/0B");
      List<Range> list0 = range1.complement(range2);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      //  // Unstable assertion: assertSame(range2, range1);
      //  // Unstable assertion: assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.572724682115478
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range range1 = Range.of(9223372032559808389L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.3442594172317297
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(2710L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.0598988524110324
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(5772L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 5772 ]/RB", string0);
      
      Range range1 = Range.parseRange("[ 1 .. 5772 ]/RB", range_CoordinateSystem0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.31501058695372
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      Range range2 = Range.of(4294967295L, 4294967295L);
      boolean boolean0 = range2.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      long long0 = range2.getLength();
      assertEquals(1L, long0);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.0561774276369764
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(1059L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775781L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L), (-128L));
      // Undeclared exception!
      try { 
        range0.split((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      List<Range> list0 = range0.split(23L);
      assertTrue(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.058620243537487
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.of(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(550L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.9796434918932646
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of(377L, 1080L);
      Range range1 = Range.of(1080L, 1080L);
      boolean boolean0 = range0.startsBefore(range0);
      assertNotSame(range0, range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.3844894049549885
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Long long0 = new Long(4294967295L);
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertNotSame(range1, range0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      range0.asRange();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.136133353007071
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      List<Range> list0 = range0.split(9223372036854775807L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      //  // Unstable assertion: assertEquals(1, list1.size());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.495439362013276
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-393L));
      Range range0 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getLength();
      range_Builder0.expandEnd((-393L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 1L, 205L);
      Range range1 = range_Builder1.build();
      range1.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = (-1L);
      Range.Builder range_Builder0 = new Range.Builder((-1123L), (-1L));
      range_Builder0.shift(32767L);
      long long1 = 2132L;
      range_Builder0.expandBegin(2132L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("r-ga?bv~WtM]Ygd", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse r-ga?bv~WtM]Ygd into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.449156929808095
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.of((-32768L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-32768L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getEnd();
      assertTrue(range0.isEmpty());
      
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/SB", string0);
      
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertSame(range1, range0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.2380188789437025
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of((-2147230918L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.6729208638426094
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 378L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(0L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-1L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.2227634799363307
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-697L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = (-2147483648L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036851981925L, (-2147483648L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483648 would make range [9223372036851981925 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.589141312673904
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of((-85L), 0L);
      Range range1 = range0.asRange();
      range1.iterator();
      Range range2 = Range.of((-2147483648L), (-85L));
      List<Range> list0 = range2.complement(range0);
      assertEquals(1, list0.size());
      
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range2.getBegin(range_CoordinateSystem0);
      assertEquals((-2147483648L), long0);
      
      range_CoordinateSystem0.getAbbreviatedName();
      range0.asRange();
      assertFalse(range0.equals((Object)range2));
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.3763612566307986
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(1L, 750L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(1862L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long0 = range0.getBegin();
      assertEquals(1862L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.633578507116889
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list1.equals((Object)list0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.4407893441299437
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.ofLength(153L);
      Range range1 = Range.of(153L, 153L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range0));
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range1));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.327189247670674
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967279L, 4294967279L);
      Range range1 = Range.of(138L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 378L, 378L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.ofLength(5786L);
      Range range1 = range0.asRange();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of((-1329L));
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.1360270265849555
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.9772143420956936
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 153L, 153L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(152L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-2147483646L), (-2147483646L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-2147483646L), long0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-85L), (-85L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.329987537604603
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1860L), 1L);
      range_Builder0.contractEnd(1L);
      Range range0 = Range.of((-1860L), 1L);
      Range range1 = Range.ofLength(255L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.of(range_CoordinateSystem0, (-1860L), 255L);
      assertFalse(range2.isEmpty());
      
      range0.getEnd();
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1860 .. 2 ]/SB", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1537L), (-1L));
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.2947356610848955
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.2397208470799024
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-10L), (-10L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.084259275231587
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      String string0 = range0.toString();
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = new LinkedList<Range>();
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.equals((Object)list0));
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.05725704976923
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 255L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 912L, 655L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.2662596083157305
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.contractBegin((-511L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1252L), 1965L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Range range2 = range0.asRange();
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.056474781190351
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967310L, 4294967310L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      // Undeclared exception!
      try { 
        Range.of((-1L), (-3502L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Collection<Range> collection0 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-2188L), (-2188L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.3636010049122564
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 377L, 65535L);
      Range.Builder range_Builder0 = new Range.Builder(377L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long long0 = (-2147483648L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.1890760075458306
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-1607L));
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1607 .. -1607 ]/0B", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.2951698773245828
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2147483647L), long0);
      
      long long1 = range0.getBegin();
      assertEquals((-2147483648L), long1);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-235L));
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-234L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range range0 = Range.of((-32760L), (-32760L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.023122060864379
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.133680985529237
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Long long0 = new Long(4294967295L);
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range range0 = Range.of(1772L);
      assertFalse(range0.isEmpty());
  }
}
