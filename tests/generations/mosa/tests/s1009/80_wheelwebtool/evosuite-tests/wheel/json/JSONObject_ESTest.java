/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 06:04:13 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray1 = new String[0];
      JSONObject jSONObject1 = new JSONObject(stringWriter0, stringArray1);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      JSONObject jSONObject2 = jSONObject1.put("XLF}gCKnZA+Y1]^y0", (-1173.0));
      long long0 = jSONObject2.optLong("XLF}gCKnZA+Y1]^y0");
      assertEquals((-1173L), long0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.605928713801937
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-1.0));
      jSONArray1.join(" yhmKcjpJ U{^856A");
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      jSONObject0.getInt("java.lang.Double@0000000002");
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      jSONObject0.getLong("java.lang.Double@0000000002");
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray0, jSONArray2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.346619585399745
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer(28);
      JSONObject jSONObject0 = new JSONObject(integer0);
      Float float0 = new Float((float) 28);
      jSONObject0.putOpt("C?~$nNzN{\"9H-(Y>T`.", float0);
      jSONObject0.optBoolean("HaK", false);
      Boolean boolean0 = new Boolean(false);
      jSONObject0.opt((String) null);
      jSONObject0.getInt("C?~$nNzN{\"9H-(Y>T`.");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.578600015269585
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("P(@/]TT*/UZEH", "P(@/]TT*/UZEH");
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      JSONObject jSONObject2 = jSONObject1.put("P(@/]TT*/UZEH", (Map) hashMap0);
      jSONObject1.isNull("P(@/]TT*/UZEH");
      JSONObject jSONObject3 = jSONObject1.optJSONObject("P(@/]TT*/UZEH");
      assertFalse(jSONObject3.equals((Object)jSONObject2));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(false, true);
      hashMap0.put((Double) null, boolean0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2121329200411655
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put(">+j>3", (-578.8944482));
      jSONObject0.getDouble(">+j>3");
      JSONObject.getNames((Object) jSONObject0);
      String string0 = "isaccumulate";
      try { 
        jSONObject0.getBoolean("isaccumulate");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isaccumulate\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble(",)81$");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.49056603773584906
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject1 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject1.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6837728778960765
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Long, JSONArray> hashMap0 = new HashMap<Long, JSONArray>();
      Long long0 = new Long((-3886L));
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.put(long0, jSONArray0);
      String string0 = JSONObject.valueToString(hashMap0, (-1859), 1893);
      assertNotNull(string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8190136416335434
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Long long0 = new Long((-780L));
      Long.max((-780L), (-780L));
      JSONObject.numberToString(long0);
      String string0 = "{9";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {9
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9716518516064823
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "D G:/.");
      JSONObject jSONObject0 = new JSONObject("D G:/.", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("k`yK]Bh_4]");
      assertEquals(0L, long0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      
      jSONObject0.put("k`yK]Bh_4]", false);
      boolean boolean0 = jSONObject0.getBoolean("k`yK]Bh_4]");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      Short short0 = new Short((short)337);
      hashMap0.put(jSONObject0, jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("di", (Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.put("di", (Object) boolean0);
      String string0 = JSONObject.quote("ite");
      assertEquals("\"ite\"", string0);
      
      boolean boolean1 = jSONObject1.getBoolean("di");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject.valueToString(linkedList0, 1965, 991);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("q.H'B)4p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of q.H'B)4p
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.851861983169869
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 46, 46);
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      jSONObject1.put("{}", 46);
      JSONObject.getNames((Object) "{}");
      jSONObject1.getLong("{}");
      JSONObject.testValidity("{}");
      String string1 = jSONObject0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8122575389083995
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 46, 46);
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      jSONObject0.getString("{}");
      jSONObject1.isNull("{}");
      String string0 = jSONObject1.optString(".12mM^'gYS", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.252090183495044
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double((-1722.0601471));
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString(1918, 1918);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5272226322711564
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      JSONObject jSONObject2 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(602);
      jSONObject2.write(stringWriter0);
      String string0 = jSONObject1.toString(22, 4487);
      JSONObject jSONObject3 = new JSONObject(string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.putOpt("j@#\"?.N.:k |kAYE", jSONObject0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("j@#\"?.N.:k |kAYE");
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3935343515788563
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object object0 = new Object();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 1, 1127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4439883051710902
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Short short0 = new Short((short)1796);
      Short.compare((short)1796, (short)1796);
      JSONObject.valueToString(short0, (short)1796, (short)1796);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject.getNames((Object) short0);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString(jSONObject0, 1, 0);
      jSONObject0.optBoolean("/Q'#XI", false);
      Short.toUnsignedLong((short)1796);
      jSONObject0.length();
      JSONObject.testValidity("/Q'#XI");
      JSONObject jSONObject1 = jSONObject0.putOpt("/Q'#XI", short0);
      jSONObject1.optBoolean((String) null);
      JSONObject jSONObject2 = jSONObject1.append("java.lang.Short@0000000001", jSONObject0);
      jSONObject2.optDouble("wx<pT+(2`\"V1_18o'3K", 0.0);
      Float float0 = new Float(725.4F);
      Float.min(0, 0.0F);
      jSONObject2.optDouble((String) null, 213.97);
      Float.isFinite(0);
      JSONObject.valueToString(float0);
      Float.isFinite((short)1796);
      jSONObject2.optDouble("/Q'#XI");
      JSONObject.numberToString(float0);
      jSONObject0.optLong("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      try { 
        jSONObject2.getJSONArray("islongBitsToDouble");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"islongBitsToDouble\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2789389564075417
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("{}");
      JSONObject jSONObject1 = jSONObject0.put("{}", (double) 0L);
      jSONObject1.optInt("{}");
      Integer integer0 = new Integer(0);
      try { 
        jSONObject1.getJSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("JSON does not allow non-finite numbers.", "JSON does not allow non-finite numbers.");
      jSONObject1.isNull("JSON does not allow non-finite numbers.");
      JSONArray jSONArray0 = jSONObject1.getJSONArray("JSON does not allow non-finite numbers.");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3128868859883003
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\r";
      jSONObject0.put("\r", false);
      try { 
        jSONObject0.append("\r", "\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\r] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.324481088886851
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put("JSON does not allow non-finite numbers.", (Object) jSONArray0);
      JSONObject jSONObject1 = jSONObject0.append("JSON does not allow non-finite numbers.", "JSON does not allow non-finite numbers.");
      boolean boolean0 = jSONObject1.isNull("JSON does not allow non-finite numbers.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.658944282249962
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("\r", "\r");
      jSONObject1.put("dy'+W'?BHgjAuH\"7aY", (-1L));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      int int0 = jSONObject1.getInt("dy'+W'?BHgjAuH\"7aY");
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5508047679198604
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("EMs5rL}m2k[G@N|", 0);
      try { 
        jSONObject0.getJSONArray("EMs5rL}m2k[G@N|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"EMs5rL}m2k[G@N|\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("wheel.json.JSONException", "wheel.json.JSONException");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(1769.33F);
      linkedList0.addFirst(float0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      JSONObject.getNames((Object) jSONArray1);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.792383011118817
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Ml U/Ky*D!#i&%d", 626L);
      jSONObject1.optInt("Ml U/Ky*D!#i&%d");
      String[] stringArray0 = new String[3];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.16000987417804
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.append(" at character ", " at character ");
      try { 
        jSONObject0.getLong(" at character ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" at character \"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.097242790482881
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("flo", 34);
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      JSONObject jSONObject1 = jSONObject0.put("Q'jW_^,/62XH739X", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(12);
      jSONObject1.write(stringWriter0);
      JSONObject jSONObject2 = jSONObject0.put("Q'jW_^,/62XH739X", (double) 34);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.499508947987567
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("{}");
      assertEquals(0L, long0);
      
      JSONObject jSONObject1 = jSONObject0.put("{}", (double) 0L);
      jSONObject1.optInt("{}");
      jSONObject1.getInt("{}");
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      long long1 = jSONObject0.getLong("{}");
      assertTrue(long1 == long0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5279503174574058
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(37, (Map) null);
      jSONArray0.optJSONObject(37);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 160, 160);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.490403227787064
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("|?upA5[", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.048844359649284
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2448999724663743
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.put("KDKIT!xAf", 42);
      String string0 = jSONObject0.optString("KDKIT!xAf", "(bghX{d{rgBW@F");
      assertNotNull(string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.4522469794234416
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONException", "wheel.json.JSONException");
      jSONObject0.isNull("wheel.json.JSONException");
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      String string0 = jSONObject1.optString("wheel.json.JSONException");
      assertNotNull(string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.999703381818536
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject((Object) "toS");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("getflush", "getflush");
      JSONObject.getNames(jSONObject1);
      try { 
        jSONObject1.getJSONObject("getflush");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getflush\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7451369084105084
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject.doubleToString((-1722.0601471));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      try { 
        jSONObject0.get("-1722.0601471");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-1722.0601471\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.3866550866633967
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("*L{}");
      JSONObject jSONObject1 = jSONObject0.put("*L{}", (double) 0L);
      int int0 = jSONObject1.optInt("*L{}");
      int int1 = jSONObject1.getInt("*L{}");
      assertTrue(int1 == int0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.327701700803115
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "false";
      JSONObject jSONObject1 = jSONObject0.append("false", "false");
      try { 
        jSONObject1.getInt("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0545027463856176
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1688.41978);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.accumulate("Oi;t~", jSONArray1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.615241710283925
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.getBoolean("J!0");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("J!0", 0.0);
      jSONObject0.remove("Z1\u0003jadUO|#");
      jSONObject0.toString(18, 18);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject1.put("4(b*OU5goIKCc[", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.opt("4(b*OU5goIKCc[");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("{}");
      JSONObject jSONObject1 = jSONObject0.put("b", (double) 0L);
      jSONObject1.remove("{}");
      jSONObject1.accumulate("b", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.3262202193216335
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("getflush", "getflush");
      jSONObject0.isNull("getflush");
      JSONObject jSONObject2 = jSONObject1.accumulate("getflush", "getflush");
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.25201584021585
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.getBoolean("J!0");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("J!0", 0.0);
      jSONObject1.optDouble("J!0");
      JSONObject.quote("co");
      try { 
        jSONObject1.getDouble("zLFNgKO/uR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"zLFNgKO/uR\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 707, (-32864431));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.395516448667509
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 46, 46);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      jSONObject0.getString("{}");
      StringWriter stringWriter0 = new StringWriter(46);
      jSONObject1.has("{}");
      jSONObject1.toString((-1222), 1810);
      double double0 = jSONObject1.optDouble("getvalueOf");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1385356126135595
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("{&=q_S");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optInt("{&=q_S");
      String string0 = jSONObject1.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Double double0 = new Double((short)26);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.060583823335459
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      // Undeclared exception!
      jSONObject0.toString(8192);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.058393431267321
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Byte byte0 = new Byte((byte)43);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Byte byte1 = Byte.valueOf((byte)47);
      JSONObject jSONObject1 = new JSONObject(byte1);
      jSONObject1.put("com", 1374.532066930445);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com";
      stringArray0[1] = "com";
      stringArray0[2] = "com";
      stringArray0[3] = "com";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      double double0 = jSONObject2.getDouble("com");
      assertEquals(2, jSONObject1.length());
      assertEquals(1374.532066930445, double0, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.466665343145404
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      jSONObject0.put(",`GNF--_B,(?/szJ", (Object) double0);
      jSONObject0.getDouble(",`GNF--_B,(?/szJ");
      try { 
        jSONObject0.getDouble("*~<b&h<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*~<b&h<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      try { 
        jSONObject1.getDouble("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.668803800330735
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("JSON does not allow non-finite numbers.", "JSON does not allow non-finite numbers.");
      jSONObject0.get("JSON does not allow non-finite numbers.");
      jSONObject0.isNull("JSON does not allow non-finite numbers.");
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.495914456064185
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("", 0L);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.4735311753621145
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Double double0 = new Double((short) (-22));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((int) (short) (-22), (int) (short) (-22));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.put((String) null, (-2046L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.3288406232775385
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("OkN[dm>Ye", (Collection) linkedList0);
      jSONObject0.put("getcompare", (Collection) linkedList0);
      jSONObject0.toString((-1111), (-1111));
      JSONArray jSONArray0 = jSONObject0.optJSONArray("getcompare");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 839, 34);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.155248643887635
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("\r", "\r");
      jSONObject1.isNull("\r");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("\r");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      String string1 = jSONObject0.optString(">\"w82iC104A;(jhd", "{}");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("]VN%# j`\"5->q9");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Double double0 = new Double((short)12);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("put");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"put\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("va", 13);
      assertEquals(13, int0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("getlongBitsToDouble", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("VQo1oC.T%Dl&Be.o");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      jSONObject0.put("0y(&~", 16);
      long long0 = jSONObject0.optLong("0y(&~");
      assertEquals(16L, long0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject1 = jSONObject0.put("`o!.M!4", (Collection) linkedList0);
      long long0 = jSONObject1.optLong("`o!.M!4");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject$Null", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.448437455613918
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONException", "wheel.json.JSONException");
      jSONObject1.remove("wheel.json.JSONException");
      boolean boolean0 = jSONObject0.isNull("wheel.json.JSONException");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.1756407392813153
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("\r", "\r");
      String string0 = jSONObject0.toString((-30733247), (-30733247));
      assertNotNull(string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.474353691762369
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
      
      jSONObject0.toString(1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.9609823514117406
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.getBoolean("J!0");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.keys();
      Byte byte0 = new Byte((byte)10);
      Byte.toUnsignedInt((byte)10);
      Byte byte1 = new Byte((byte) (-90));
      jSONObject0.accumulate("J!0", byte1);
      jSONObject0.optDouble("J!0", 0.0);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.quote("getreverseBytes");
      assertEquals("\"getreverseBytes\"", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.729823048470849
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("com", (-1722.0601471));
      int int0 = jSONObject0.optInt("com");
      assertEquals((-1722), int0);
      
      jSONObject1.getInt("com");
      double double0 = jSONObject0.optDouble("com");
      assertEquals((-1722.0601471), double0, 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0276242004980904
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.put("val", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1983857508370273
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("gettoArray", false);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.284236195774473
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      boolean boolean0 = jSONObject1.isNull("wheel.json.JSONObject@0000000001");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.033810204512617
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float(617.48057068);
      JSONObject jSONObject0 = new JSONObject(float0);
      boolean boolean0 = jSONObject0.optBoolean("Q%9fumeh8_rEGV<", false);
      assertFalse(boolean0);
      
      boolean boolean1 = new Boolean(false);
      jSONObject0.opt("");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.0820925084345685
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Integer integer0 = new Integer(28);
      JSONObject jSONObject0 = new JSONObject(integer0);
      boolean boolean0 = jSONObject0.optBoolean("HaK", false);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      jSONObject0.opt((String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("JSONArray[", (-414L));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      
      int int0 = jSONObject0.optInt("&N8JQb ,.boE]lZ", (-258));
      assertEquals((-258), int0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(46, 46);
      JSONObject jSONObject1 = new JSONObject("{}");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.8772034520289815
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Double double0 = new Double((short)12);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((int) (short)12, (int) (short)12);
      JSONObject jSONObject1 = new JSONObject("{\n                        \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                        \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                        \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n            }");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{YGf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {YGf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{&=G_S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 6 of {&=G_S
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("Bad value from toJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Bad value from toJSONString: \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString((Object) null, 85, 85);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("!SfEi~hB3F", 780L);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", true);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = JSONObject.quote("9?a3W\"|s9o5=OP:(|");
      assertEquals("\"9?a3W\\\"|s9o5=OP:(|\"", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = JSONObject.quote("\f");
      assertEquals("\"\\f\"", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONArray0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONArray0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.append("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      jSONObject0.getString("wheel.json.JSONObject@0000000001");
      boolean boolean0 = new Boolean("wheel.json.JSONObject@0000000001");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-39));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("JSON does not allow non-finite numbers.", "JSON does not allow non-finite numbers.");
      try { 
        jSONObject1.getBoolean("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSON does not allow non-finite numbers.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = JSONObject.quote("EMs5rL}m2k[G@N|");
      assertEquals("\"EMs5rL}m2k[G@N|\"", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = JSONObject.quote("kk/|hp98>w&,");
      assertEquals("\"kk/|hp98>w&,\"", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = JSONObject.quote(" Gt4:/.");
      assertEquals("\" Gt4:/.\"", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Float float0 = new Float(617.48057068);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.has("Q%9fumeh8_rEGV<");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate(";gC[*", ";gC[*");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("tr", false);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(" |tD:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of  |tD:
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject.getNames(object0);
      jSONObject0.length();
      try { 
        jSONObject0.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Short short0 = Short.valueOf((short) (-746));
      String string0 = JSONObject.valueToString(short0, (short) (-746), (short) (-746));
      assertNotNull(string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Double double0 = new Double((-3657.516427377933));
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("LxG,-FAZg7H3;S YT;", 0.0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("z :Ne<61cj:)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"z :Ne<61cj:)\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      try { 
        jSONObject0.getString("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("=:O0DWkxPO5", (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Jr%>!dg+hxzp</>[h5z");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("ismax");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ismax
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("] not fun.");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("lo");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("wheel.json.JSONTokener");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONTokener\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.1807382878069084
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("{*U5@><Cat", true);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      String string0 = JSONObject.valueToString(hashMap0, 707, 707);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = JSONObject.valueToString("{}");
      assertNotNull(string0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("Zw'}lgg,Pft-_u)");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("Mqc");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("0.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0.0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Double double0 = new Double(2450.07580813);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("{&_S");
      assertEquals("", string0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
