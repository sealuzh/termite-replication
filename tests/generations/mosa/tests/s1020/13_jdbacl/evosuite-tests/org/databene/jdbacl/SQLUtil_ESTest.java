/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 20:55:58 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-3187), "2nWw!Y}HjQ^");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5!oh", (DBTable) null, dBDataType0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2nWw!Y}HjQ^");
      linkedList0.addFirst(defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("5!oh, 5!oh", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(2995, "BLOB");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", (DBTable) null, dBDataType0, integer1, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("BLOB");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("BLOBBLOB", stringBuilder0.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLUtil.removeComments("#P");
      DBSchema dBSchema0 = new DBSchema("org.antlr.runtime.RuleReturnScope");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("o,dQHY", dBSchema0);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("oPoD>}>&", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "\n/*o so2tcd /";
      // Undeclared exception!
      SQLUtil.isDDL("\n/*o so2tcd /");
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6814228603314603
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("fW7d(5w^kal");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("uTQddi%J?V_ mT]IIu");
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fW7d(5w^kal";
      String string0 = SQLUtil.join("inner", "fW7d(5w^kal", stringArray0, "inner", "org.h2.result.ResultRemote", stringArray0);
      assertEquals("inner as org.h2.result.ResultRemote on fW7d(5w^kal.fW7d(5w^kal = org.h2.result.ResultRemote.fW7d(5w^kal", string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-1842217723), "FOREIGN KEY ");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("FOREIGN KEY ", (DBTable) null, dBDataType0, integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("FOREIGN KEY  FOREIGN KEY (0) NULL", string1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9792528475755982
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("greaterorequals");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("W0", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(9, "greaterorequals");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      dBDataType0.isAlpha();
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("W0", defaultDBTable0, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("W0 GREATEROREQUALS(3,2) NULL", string0);
      
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("W0 GREATEROREQUALS(3,2) NULL");
      assertEquals(3, objectArray0.length);
      
      boolean boolean0 = SQLUtil.isProcedureCall("W0");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)103;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.parseColumnTypeAndSize("");
      TableContainer tableContainer0 = new TableContainer("", (CompositeDBObject<? extends DBObject>) null);
      String string0 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("EXTERNYL");
      String[] stringArray0 = new String[5];
      boolean boolean0 = SQLUtil.isProcedureCall("Bx!PgD;A|Hvm)$0");
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(", name.hashCode()=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(rafo#}l];efK&3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (rafo#}l];efK&3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      String string0 = SQLUtil.substituteMarkers("", "delete", (Object) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance(710, "NAME");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("GO'E-3P(U/*Kd6t8r}");
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("CannItconver type ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CannItconver type ";
      stringArray0[1] = "CannItconver type ";
      stringArray0[2] = "RDB$RELATION_FIELDS";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("RDB$RELATION_FIELDS", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      slaveDatabase0.getLocale();
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "CannItconver type ", (Object[]) stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertEquals(191, charArrayWriter0.size());
      assertEquals("CannItconver type ALTER TABLE null ADD \n\tFOREIGN KEY (CannItconver type , CannItconver type , RDB$RELATION_FIELDS) REFERENCES null(CannItconver type , CannItconver type , RDB$RELATION_FIELDS)", charArrayWriter0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(3276, "CURDATE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CURDATE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CURDATE", defaultDBTable0, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumn(dBColumnArray0[0]);
      SQLUtil.renderColumnNames(dBColumnArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">`n[DozaeUooqqtKR");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("CURDATE");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("D?56");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "D?56";
      stringArray0[1] = "D?56";
      stringArray0[2] = "D?56";
      stringArray0[3] = "D?56";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("D?56", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("E:.M>mH4{ZIZPexV6=U");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("D?56", defaultDBTable0.getName());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7754337976947765
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("callcannitconver type");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "qY tas2ZD>[VCts";
      stringArray0[2] = "qY tas2ZD>[VCts";
      stringArray0[3] = "qY tas2ZD>[VCts";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "qY tas2ZD>[VCts";
      stringArray1[1] = "qY tas2ZD>[VCts";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("qY tas2ZD>[VCts", stringArray0, "qY tas2ZD>[VCts", "qY tas2ZD>[VCts", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = SQLUtil.normalize("\n/*go so2tcd */", false);
      assertEquals("/* go so2tcd */", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, defaultDBTable0, "LATIN2");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.948720592834763
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("EXTERNYL");
      String[] stringArray0 = new String[1];
      SQLUtil.isProcedureCall("Bx!PgD;A|Hvm)$0");
      StringBuilder stringBuilder0 = new StringBuilder();
      LinkedHashSet<DBUniqueConstraint> linkedHashSet0 = new LinkedHashSet<DBUniqueConstraint>();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("EXTERNYL", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLUtil.removeComments("=?;5w<(LSg?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "=?;5w<(LSg?";
      stringArray0[1] = "=?;5w<(LSg?";
      stringArray0[2] = "=?;5w<(LSg?";
      stringArray0[3] = "=?;5w<(LSg?";
      stringArray0[4] = "=?;5w<(LSg?";
      stringArray0[5] = null;
      stringArray0[6] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("=?;5w<(LSg?", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertEquals("=?;5w<(LSg?", stringBuilder0.toString());
      
      SQLUtil.normalize("=?;5w<(LSg?", false);
      Random.setNextRandom((-2035336853));
      SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.isProcedureCall("into");
      Random.setNextRandom((-2035336853));
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("akBw,t(7Z(`u(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: akBw,t(7Z(`u(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("org.apache.de");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.de";
      stringArray0[1] = "externa";
      stringArray0[2] = "sbMcmk|?~'Go<d";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("org.apache.de", stringArray0, "org.apache.de", "g0N|6!", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance(10, "T");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("T", (DBTable) null, dBDataType0, integer0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("alter table");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("alter tableT(1,1)", stringBuilder0.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance("Object");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Object", (DBTable) null, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("SXv078IfS2d?'K");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("SXv078IfS2d?'KOBJECT(1)", stringBuilder0.toString());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(1496, "a,e,B+3");
      Integer integer0 = new Integer((-148808446));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("a,e,B+3", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("A,E,B+3(-148808446,-148808446)", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("setDouble(Str:g,double)");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\n/* group sorted */");
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("SxR;`S`D");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4486869174985209
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("insert(raJ#}l;ef3");
      boolean boolean1 = SQLUtil.isProcedureCall("insert(raJ#}l;ef3");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("update");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ALTER#TABLE ";
      stringArray0[1] = "ALTER#TABLE ";
      stringArray0[2] = "ALTER#TABLE ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "ALTER#TABLE ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (ALTER#TABLE , ALTER#TABLE , ALTER#TABLE )", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(".");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("createtabl ", (DBTable) null, 10, "createtabl ");
      defaultDBColumn0.toString();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals(".CREATETABL ", stringBuilder0.toString());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Blq6", defaultDBTable0, 1675, "callupfateq*1*k;hv");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("Blq6 CALLUPFATEQ*1*K;HV NULL", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, 400, "externa");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("EXTERNA", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8=~|*t(]6%:ZY", defaultDBTable0, 1117, "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 181);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLUtil.removeComments("");
      String[] stringArray0 = new String[2];
      String[] stringArray1 = new String[0];
      String string0 = SQLUtil.leftJoin((String) null, stringArray1, (String) null, "Pk_-^`4KNpS", stringArray0);
      assertEquals("left join null as Pk_-^`4KNpS on ", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("exec");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("exec");
      assertNull(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("\n/* group sorted */");
      assertNull(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      String string0 = "`_`b)R<'T7|6VY<ll";
      DBDataType.getInstance(3276, "`_`b)R<'T7|6VY<ll");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("`_`b)R<'T7|6VY<ll", (DBTable) null, 3276, "`_`b)R<'T7|6VY<ll");
      defaultDBColumn0.setDoc("`_`b)R<'T7|6VY<ll");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("greaterorequals");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      Object object0 = new Object();
      constraintDescriptorList0.add(object0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DBTable dBTable0 = null;
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("ater maeriRlizd view");
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("ater maeriRlizd view", (String[]) null, "ater maeriRlizd view", "ater maeriRlizd view", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9073247589817182
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLUtil.normalize(";IZ{.{$-+`2", false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "drop tablewp;";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("drop tablewp;", (String[]) null, ";  IZ {.{ $ - + ` 2", "C6t+U4~E7em+y", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = SQLUtil.normalize("truncate/sr]gr#f{b@f", true);
      assertEquals("truncate / sr ] gr # f { b @ f", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.3221086830269158
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.isQuery("SELECT * FROM ");
      DBSchema dBSchema0 = new DBSchema("SELECT * FROM ");
      DBPackage dBPackage0 = new DBPackage("SELECT * FROM ", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("SELECT * FROM ", dBPackage0);
      String string0 = SQLUtil.ownerDotComponent(dBProcedure0);
      assertEquals("SELECT * FROM .SELECT * FROM ", string0);
      
      boolean boolean0 = SQLUtil.isQuery("SELECT * FROM .SELECT * FROM ");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.036750670357467
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit", true);
      assertEquals("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit", string0);
      
      SQLUtil.removeComments("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit";
      stringArray0[1] = "alter index";
      stringArray0[2] = "org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit";
      stringArray0[3] = "|7az+BNQj1";
      String string1 = SQLUtil.join("Concurrent update", "|7az+BNQj1", stringArray0, "ATAN2", "drop tableorg.apache.derby.impl.", stringArray0);
      assertEquals("Concurrent update join ATAN2 as drop tableorg.apache.derby.impl. on |7az+BNQj1.org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit = drop tableorg.apache.derby.impl..org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit and |7az+BNQj1.alter index = drop tableorg.apache.derby.impl..alter index and |7az+BNQj1.org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit = drop tableorg.apache.derby.impl..org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit and |7az+BNQj1.|7az+BNQj1 = drop tableorg.apache.derby.impl..|7az+BNQj1", string1);
      
      boolean boolean0 = SQLUtil.isDML("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit");
      assertFalse(boolean0);
      
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Object object0 = new Object();
      SQLUtil.renderValue(defaultDBTable0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("r/eDzma\"1");
      System.setCurrentTimeMillis((-1L));
      String string2 = SQLUtil.substituteMarkers("alter index", "alter index", ".9vkKiF`GOkdeu5g");
      assertEquals("'.9vkKiF`GOkdeu5g'", string2);
      
      String string3 = SQLUtil.renderColumnListWithTableName("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit", stringArray0);
      assertEquals("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit.org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit, org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit.alter index, org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit.org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit, org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit.|7az+BNQj1", string3);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join(" NOT", "K/@-X`VgM>Qo}#", stringArray0, "delete", "delete", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = SQLUtil.normalize("mBa18*=a5S=(Lt", true);
      assertEquals("mBa18 * = a5S = (Lt", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = SQLUtil.normalize("` ]g5')=raqyFS]", false);
      assertEquals("` ] g5 ')=raqyFS]'", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = SQLUtil.normalize("-L", true);
      assertEquals("- L", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setDouble(Str:g,double)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Str:g\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("create table ", true, "dyG", "SAMPLE_SIZE");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.3808546144405294
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLUtil.normalize("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit", true);
      SQLUtil.removeComments("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isDML("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Object object0 = new Object();
      SQLUtil.renderValue(stringBuffer0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("");
      // Undeclared exception!
      try { 
        defaultDBTable1.getUniqueConstraint("42X24");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLUtil.removeComments("_J-hC");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("_J-hC");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "tivK.8;";
      stringArray0[1] = "_J-hC";
      stringArray0[2] = "_J-hC";
      stringArray0[3] = "_J-hC";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("_J-hC");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.8786753718922282
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("org.apache.derby.iapi.sql.dictionary.SubCheckConstraintDescriptor");
      String[] stringArray0 = new String[8];
      stringArray0[2] = "";
      stringArray0[3] = "ResultSetMetaData";
      stringArray0[4] = "y#+J$Mw3$:M;W|]x?Ph";
      stringArray0[5] = "org.apache.derby.iapi.sql.dictionary.SubCheckConstraintDescriptor";
      stringArray0[6] = "org.apache.derby.iapi.sql.dictionary.SubCheckConstraintDescriptor";
      stringArray0[7] = "";
      SQLUtil.join("", "y#+J$Mw3$:M;W|]x?Ph", stringArray0, "(&Xp*P2.\"", "Illegal column type format: ", stringArray0);
      SQLUtil.isDML("P);,8lmdc");
      Object object0 = new Object();
      Character character0 = Character.valueOf('\"');
      SQLUtil.renderValue(character0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(stringArray0[0]);
      defaultDBTable0.setDoc("y#+J$Mw3$:M;W|]x?Ph");
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLUtil.removeComments("CEILING");
      Character character0 = Character.valueOf('+');
      String string0 = SQLUtil.substituteMarkers("W#F7", "CEILING", character0);
      assertEquals("W#F7", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = SQLUtil.normalize("setDouble(Str:g,double)", false);
      assertEquals("setDouble (Str : g, double)", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Boolean boolean0 = new Boolean("EXTERNAL");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getForeignKeyConstraints();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLUtil.normalize("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit", true);
      SQLUtil.removeComments("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit";
      stringArray0[1] = " DEFAULT ";
      stringArray0[2] = "create unique index";
      stringArray0[3] = " DEFAULT ";
      stringArray0[4] = "org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit";
      stringArray0[5] = "org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit";
      stringArray0[6] = " DEFAULT ";
      stringArray0[7] = " DEFAULT ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " DEFAULT ", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec0);
      assertEquals("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommitCONSTRAINT \" DEFAULT \" ", stringBuilder0.toString());
      assertEquals("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommitCONSTRAINT \" DEFAULT \" ", stringBuilder1.toString());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "(rafo#}$l];ef3", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.8539030631395337
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLUtil.normalize("ygbg7FQo(fWD840pK?", true);
      SQLUtil.removeComments("create unique index");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "ygbg7FQo(fWD840pK?", false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("rename", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec0);
      assertEquals("rename", stringBuilder0.toString());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("uoknow3 waue (", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "uoknow3 waue (";
      stringArray0[1] = "uoknow3 waue (";
      stringArray0[2] = "uoknow3 waue (";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "uoknow3 waue (", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      assertEquals("uoknow3 waue (", stringBuilder0.toString());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLUtil.removeComments("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String[] stringArray0 = new String[8];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("<osk`.F]!\"uI6if@S", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec0);
      assertEquals("<osk`.F]!\"uI6if@SCONSTRAINT org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit ", stringBuilder1.toString());
      assertEquals("<osk`.F]!\"uI6if@SCONSTRAINT org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit ", stringBuilder0.toString());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.874099239168671
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLUtil.removeComments("org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit";
      stringArray0[1] = " DEFAULT ";
      stringArray0[2] = "create unique index";
      stringArray0[3] = " DEFAULT ";
      stringArray0[5] = "org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit";
      String string0 = SQLUtil.normalize(" DEFAULT ", true);
      assertEquals("DEFAULT", string0);
      
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit = 'org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit' AND  DEFAULT  = ' DEFAULT ' AND create unique index = 'create unique index' AND  DEFAULT  = ' DEFAULT ' AND null = null AND org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit = 'org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit' AND null = null AND null = null", string1);
      
      boolean boolean0 = SQLUtil.isDDL("L?0H");
      assertFalse(boolean0);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " DEFAULT ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" DEFAULT \" PRIMARY KEY (org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit,  DEFAULT , create unique index,  DEFAULT , , org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit, , )", string2);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELpCT * FWNOM ", true, defaultDBTable0, "SELpCT * FWNOM ");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"SELpCT * FWNOM \" ", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("alter index", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sleep");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "sleep", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT sleep UNIQUE (, , , )", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Cannot convert type ");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Cannot convert type ");
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("Cannot convert type ", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("rh(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: rh(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      boolean boolean0 = SQLUtil.isDDL("left");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("unknown waue (", stringBuilder0);
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String[] stringArray1 = new String[1];
      stringArray1[0] = " WH!RE ";
      String string0 = SQLUtil.join(" WH!RE ", "_J)5Pc*ZQT'% E]tY ", stringArray1, "TQL|R__tQ!KTwt;wU", " WH!RE ", stringArray0);
      assertEquals(" WH!RE  join TQL|R__tQ!KTwt;wU as  WH!RE  on _J)5Pc*ZQT'% E]tY . WH!RE  =  WH!RE .null", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SQLUtil.renderColumnListWithTableName(".$A", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.join(".$A", "um/Kg9w)L;/`Zg%.U#1", (String[]) null, "um/Kg9w)L;/`Zg%.U#1", "um/Kg9w)L;/`Zg%.U#1", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.48717948717948717
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null");
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0832409930999294
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("create table ");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("create table ", false);
      assertEquals("create table", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("SCHEMAID", "greaterorequ", "SCHEMAID");
      assertEquals("SCHEMAID", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = SQLUtil.normalize("lR?0=i\"N 3%NNW@@", false);
      assertEquals("lR ? 0 = i \"N 3%NNW@@\"", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLUtil.removeComments("\n/* group sorted */");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("alter materialized view");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create unique indexnv(w~hho8t'bxk");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.1392921128169875
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("alter materialized view", stringArray0, "execute", "alter materialized view", stringArray0);
      assertEquals("left join execute as alter materialized view on ", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLUtil.isDDL("K6$W5<)TGX$F{5D^4SG");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.201793123629589
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.removeComments("\n/*go so2tcd */");
      assertEquals("\n", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\n");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\n/*go so2tcd */";
      stringArray0[1] = "\n";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("\n/*go so2tcd */", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"\n/*go so2tcd */\" FOREIGN KEY (\n/*go so2tcd */, \n) REFERENCES \n(\n/*go so2tcd */, \n)", string1);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("2 )=/d)/gt");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      SQLUtil.addRequiredCondition("\n/* group sorted */", stringBuilder1);
      assertEquals("false and \n/* group sorted */", stringBuilder1.toString());
      assertEquals("false and \n/* group sorted */", stringBuilder0.toString());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("greateroequals");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("greateroequals");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("greateroequals", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT greateroequals FOREIGN KEY () REFERENCES greateroequals()", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("setDouble(Str:g,double)");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("create table ", stringBuilder0);
      assertEquals("create table ", stringBuilder0.toString());
      
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create table ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create table \" PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("60000", false, defaultDBTable0, "60000");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT 60000 ", string0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("description");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("9'Ia#v", true, defaultDBTable0, "description");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK description", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter maeriRlizd view", true, (String[]) null);
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"alter maeriRlizd view\" PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[7] = "";
      String string0 = SQLUtil.renderValue(stringArray0[4]);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("callexternal", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      String string0 = SQLUtil.substituteMarkers("alter session", "alter session", boolean0);
      assertEquals("false", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("BLOB", "BLOB", (String[]) null, "BLOB", "BLOB", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = SQLUtil.normalize("5:5[|N)!9b7dU", true);
      assertEquals("5 : 5 [ | N) ! 9b7dU", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("W8!w^xpz~");
      SQLUtil.typeAndName(dBCatalog0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("W8!w^xpz~", true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "W8!w^xpz~");
      SQLUtil.addOptionalCondition("acjIkIfq7{|44B9", stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("W8!w^xpz~", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string0 = SQLUtil.innerJoin("", stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("null as null on . = null. and . = null. and . = null. and . = null. and . = null. and . = null. and . = null. and . = null.", string0);
      
      String string1 = SQLUtil.renderValue("");
      assertEquals("''", string1);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("createtabl ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.innerJoin("null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, "null = null AND null = null AND null = null AND null = null AND null = null", "null = null AND null = null AND null = null AND null = null AND null = null", stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null as null = null AND null = null AND null = null AND null = null AND null = null on null = null AND null = null AND null = null AND null = null AND null = null.null = null = null AND null = null AND null = null AND null = null AND null = null.null and null = null AND null = null AND null = null AND null = null AND null = null.null = null = null AND null = null AND null = null AND null = null AND null = null.null and null = null AND null = null AND null = null AND null = null AND null = null.null = null = null AND null = null AND null = null AND null = null AND null = null.null and null = null AND null = null AND null = null AND null = null AND null = null.null = null = null AND null = null AND null = null AND null = null AND null = null.null and null = null AND null = null AND null = null AND null = null AND null = null.null = null = null AND null = null AND null = null AND null = null AND null = null.null", string1);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("setDouble(Str:g,double)");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.4339607606777518
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = SQLUtil.leftJoin("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", "org.hsqldb.Library.abs", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.join("into", "into", stringArray0, "into", "org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace", stringArray0);
      assertEquals("into join into as org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace on into.null = org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace.null and into.null = org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace.null and into.null = org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace.null and into.null = org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace.null and into.null = org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace.null and into.null = org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace.null and into.null = org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace.null and into.null = org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace.null", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("COLUMN_DEFAULT", (String[]) null, "COLUMN_DEFAULT", "COLUMN_DEFAULT", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",e!UUH,L$EBL";
      String string0 = SQLUtil.innerJoin(",e!UUH,L$EBL", stringArray0, ",e!UUH,L$EBL", "8v,1", stringArray0);
      assertEquals(",e!UUH,L$EBL as 8v,1 on ,e!UUH,L$EBL.,e!UUH,L$EBL = 8v,1.,e!UUH,L$EBL", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.join("sleep", "sleep", stringArray0, "sleep", "sleep", stringArray0);
      assertEquals("sleep join sleep as sleep on sleep.null = sleep.null and sleep.null = sleep.null and sleep.null = sleep.null and sleep.null = sleep.null", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.renderColumnListWithTableName("(rafo#}l];ef3", stringArray0);
      String string1 = SQLUtil.innerJoin("(rafo#}l];ef3.null, (rafo#}l];ef3.null, (rafo#}l];ef3.null, (rafo#}l];ef3.null, (rafo#}l];ef3.null, (rafo#}l];ef3.null, (rafo#}l];ef3.null", stringArray0, "b", "b", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.renderColumnListWithTableName("w", stringArray0);
      assertEquals("w.null, w.null, w.null, w.null, w.null, w.null, w.null, w.null", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , , , )", string1);
  }
}
