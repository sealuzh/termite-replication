/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 07 12:15:52 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8883748344162048
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "}");
      jSONObject0.toString((-526), (-526));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("=tN2/Pv1=-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of =tN2/Pv1=-
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9736489231972635
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9830877585747856
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      hashMap0.put((Long) null, "26!GG4fj^aR$}");
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put((Object) null, "-1930.101591");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("] is not a JSONArray.", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("isjoin", 1L);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Oget", 10L);
      long long0 = jSONObject1.optLong("Oget");
      assertEquals(10L, long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("get", (-2L));
      long long0 = jSONObject1.optLong("get");
      assertEquals((-2L), long0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(56.060242);
      hashMap0.put(double0, double0);
      JSONObject jSONObject1 = jSONObject0.put("Ik", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("Ik");
      assertNotSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("OT", 90);
      assertEquals(90, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("isvalueOf", (-1118));
      assertEquals((-1118), int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0981473891350673
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)32);
      jSONObject0.putOpt("^e(F+", byte0);
      int int0 = jSONObject0.optInt("^e(F+");
      assertEquals(32, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-62L));
      int int0 = jSONObject1.optInt("");
      assertEquals((-62), int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "\\u";
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble(string0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", (-1163.0774498));
      assertEquals((-1163.0774498), double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5331598289492039
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      boolean boolean0 = jSONObject0.optBoolean("?=q7aRN q_epV\"(", true);
      assertTrue(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("206", (Object) jSONObject0);
      Object object0 = jSONObject0.opt("206");
      assertSame(object0, jSONObject0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Double double0 = new Double((-3417.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "\\u";
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(string0, (Map) hashMap0);
      boolean boolean0 = jSONObject0.has(string0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject("s", stringArray0);
      jSONObject0.put("s", 1971);
      long long0 = jSONObject0.getLong("s");
      assertEquals(1971L, long0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5358551955461084
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Short short0 = new Short((short) (-3140));
      JSONObject jSONObject0 = new JSONObject((Object) "{");
      JSONObject jSONObject1 = jSONObject0.putOpt("{", short0);
      jSONObject1.getLong("{");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Double double0 = new Double(69);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("wheel.json.JSONObject@0000000001", (Object) jSONObject0);
      jSONObject0.getJSONObject("wheel.json.JSONObject@0000000001");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0947290475276494
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put("_Od6`YQeT(<~lr", jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("_Od6`YQeT(<~lr", (Map) hashMap0);
      JSONObject jSONObject2 = (JSONObject)jSONObject1.remove("_Od6`YQeT(<~lr");
      JSONArray jSONArray1 = jSONObject2.getJSONArray("_Od6`YQeT(<~lr");
      assertEquals(0, jSONArray1.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.put("gettoString", (Object) long0);
      int int0 = jSONObject1.getInt("gettoString");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("sho", (-62L));
      int int0 = jSONObject1.getInt("sho");
      assertEquals((-62), int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Oget", 10L);
      double double0 = jSONObject1.getDouble("Oget");
      assertEquals(10.0, double0, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9433483923290391
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 4, 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7269369375735455
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      hashMap0.put((Long) null, "BQdu");
      JSONObject jSONObject1 = jSONObject0.put("c;,h749\"Lw*m4", (Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(jSONObject1, 30, 30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7269369375735455
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      hashMap0.put((Float) null, (Object) null);
      jSONObject0.put("8.", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-2633), (-2633));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8377933025778024
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "ea`5{Cq38Jrka");
      // Undeclared exception!
      jSONObject0.toString(5934);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Long long0 = new Long(1L);
      hashMap0.put(long0, (String) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-1964), 1489);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7846300761330085
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      // Undeclared exception!
      jSONObject0.toString((-333), 8192);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = JSONObject.quote("'W:a>/N'2E|5v2-R:");
      assertEquals("\"'W:a>/N'2E|5v2-R:\"", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = JSONObject.quote("0th\")*9aC()tJIk");
      assertEquals("\"0th\\\")*9aC()tJIk\"", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONArray[", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("'", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)8192);
      JSONObject jSONObject1 = jSONObject0.put("C", (Object) short0);
      String string0 = jSONObject1.optString("C", "`gY/5!PN5:rH");
      assertNotNull(string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = Integer.valueOf(14);
      jSONObject0.put("Bad value from toJSONString: ", (Object) integer0);
      double double0 = jSONObject0.optDouble("Bad value from toJSONString: ", 62.226378375);
      assertEquals(14.0, double0, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.opt("xgbsg_I|'>*~4f|JV");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Double double0 = new Double(903.029);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("P(d", (Object) "P(d");
      try { 
        jSONObject1.getLong("P(d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"P(d\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("P@O(C", (Object) "P@O(C");
      try { 
        jSONObject0.getInt("P@O(C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"P@O(C\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5406465859104317
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer(182);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("X{}", (double) 182);
      int int0 = jSONObject1.getInt("X{}");
      assertEquals(2, jSONObject0.length());
      assertEquals(182, int0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("] is not a Boolean.", "] is not a Boolean.");
      try { 
        jSONObject0.getDouble("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8446214763655029
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.accumulate("Missing value", boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject0.getBoolean("Missing value");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.4080604617178538
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("P@O(C", (Object) "P@O(C");
      try { 
        jSONObject0.getBoolean("P@O(C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"P@O(C\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.3260640378709974
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("  {! YIZ!x\"Z'?eG");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("  {! YIZ!x\"Z'?eG", (Object) jSONTokener0);
      try { 
        jSONObject1.getBoolean("  {! YIZ!x\"Z'?eG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"  {! YIZ!x\\\"Z'?eG\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Boolean boolean0 = new Boolean("8A");
      JSONObject jSONObject1 = jSONObject0.put("8A", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("8A");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",:]}/\"[{;=#", 1L);
      Object object0 = jSONObject0.get(",:]}/\"[{;=#");
      assertEquals(1L, object0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("H@1Q\"o)ajuWN%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"H@1Q\\\"o)ajuWN%\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("Unclosed comment");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Unclosed comment
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("mi", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.3986496111888456
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("istoHexString", (Collection) linkedList0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.4849258911092231
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      jSONObject0.put("2,C[ Qyn2", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.8228804629889481
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "J)");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, 51, 32);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0, 16, (-1839));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 34, 1378);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-160), 1029);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 154, 154);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.2677946372884996
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Double double0 = new Double(69);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.valueToString(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7913563426828252
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(29);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-263), (-263));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.8008293981022103
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.6583656821534862
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONArray jSONArray0 = jSONObject1.names();
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      try { 
        jSONObject1.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Float float0 = new Float(2899.926112);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double double0 = new Double(903.029);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = JSONObject.quote("j&'6elNg)b;u'Eu~</");
      assertEquals("\"j&'6elNg)b;u'Eu~<\\/\"", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("}8|jVP{:(U", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\t", true);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("P@O(C", (Object) "P@O(C");
      String string0 = jSONObject0.optString("P@O(C");
      assertNotNull(string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      jSONObject0.put("POb(d", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("POb(d");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("(x>Gk2GcpGukr");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (Collection) null);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("Bad value from toJSONString: ");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("}8|jVP{:(U");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("=tN2/Pv1=-", 1832L);
      double double0 = jSONObject1.optDouble("=tN2/Pv1=-");
      assertEquals(1832.0, double0, 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.6135480077477962
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      jSONObject0.put("c;,h749\"Lw*m4", (Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000003\": {}}");
      Short short0 = new Short((short)3137);
      jSONObject0.put("{\"java.lang.String@0000000003\": {}}", (Object) short0);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.7782333057997077
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("rep", 0.0);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("rep", 0.0);
      long long0 = jSONObject0.getLong("rep");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.580649125069464
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("P@O(C", (Object) "P@O(C");
      long long0 = jSONObject0.optLong("P@O(C");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.6354502583387052
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Long long0 = new Long((-1049L));
      JSONObject jSONObject0 = new JSONObject(long0);
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      jSONObject0.put("y*]WktyXHIl&o_Oh", (Map) hashMap0);
      jSONObject0.getJSONObject("y*]WktyXHIl&o_Oh");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.3068894077018045
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Kku>\";qddEv'iP", 3427);
      try { 
        jSONObject1.getJSONObject("Kku>\";qddEv'iP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Kku>\\\";qddEv'iP\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(",\n", ",\n");
      JSONArray jSONArray0 = jSONObject0.getJSONArray(",\n");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.6170014857862662
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("$bUf|0&4+GlF'Oz", (-1.0));
      try { 
        jSONObject0.getJSONArray("$bUf|0&4+GlF'Oz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$bUf|0&4+GlF'Oz\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.9722469794234418
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("has", 0L);
      int int0 = jSONObject0.optInt("has", 2879);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("3I('6LNP2)$'.Q", (-753L));
      double double0 = jSONObject0.getDouble("3I('6LNP2)$'.Q");
      assertEquals(2, jSONObject0.length());
      assertEquals((-753.0), double0, 0.01);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.9512595041439562
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.put("tr", (Object) boolean0);
      boolean boolean1 = jSONObject0.optBoolean("tr");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.6726254461503207
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("false", (Object) "false");
      boolean boolean0 = jSONObject0.getBoolean("false");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.6895462526148668
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("rep", 0.0);
      boolean boolean0 = jSONObject0.optBoolean("rep");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.8361047461804743
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("\b", "\b");
      int int0 = jSONObject1.optInt("\b");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = JSONObject.doubleToString(206);
      assertEquals("206", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1930.101591));
      assertEquals("-1930.101591", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Double@0000000001", (Collection) linkedList0);
      Integer integer0 = new Integer(2006);
      JSONObject jSONObject2 = jSONObject0.append("java.lang.Double@0000000001", integer0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.7201934592198251
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("jm=Sk8$oX&", "jm=Sk8$oX&");
      try { 
        jSONObject0.append("jm=Sk8$oX&", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[jm=Sk8$oX&] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.455500877075017
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("get", (Collection) linkedList0);
      jSONObject1.accumulate("get", float0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.6154579187426967
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONArray jSONArray0 = jSONObject1.names();
      jSONObject0.accumulate("\n", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" at character ", (Object) " at character ");
      JSONObject jSONObject2 = jSONObject1.accumulate(" at character ", " at character ");
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("  {! YIZ!x\"Z'?eG");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of   {! YIZ!x\"Z'?eG
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("", object0);
      boolean boolean0 = jSONObject1.isNull("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("PO(d", (Object) "PO(d");
      boolean boolean0 = jSONObject0.isNull("PO(d");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("Sh2j%/_ud7>xvr", (-1153L));
      assertEquals((-1153L), long0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("P@O(C");
      assertEquals("", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("istoUpperCase", (Map) hashMap0);
      String string0 = jSONObject1.getString("istoUpperCase");
      assertNotNull(string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a number.", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("KQ7;I56[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"KQ7;I56[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("]");
      assertFalse(boolean0);
  }
}
