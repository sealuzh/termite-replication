/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 11:11:23 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SyncFailedException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5821447072671853
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player((-1422), "Player.unpack(): *** WARNING *** [IO] failed t, unpack data: ", (-5540));
      System.setCurrentTimeMillis((-5540));
      Player player1 = new Player((short)4919, "T<g459ti0Q", "Player.unpack(): *** WARNING *** [IO] failed t, unpack data: ", (-1), (-5540));
      player1.setJoinOK(player0, true);
      player1.add(player0);
      System.setCurrentTimeMillis(9460L);
      boolean boolean0 = player1.isJoinOK(player0, true);
      assertFalse(boolean0);
      
      player0.pack();
      Player player2 = new Player((-1422));
      player2.isJoinOK(player1, false);
      assertEquals(0, player2.getPictureId());
      assertEquals(1, player2.getStrength());
      assertEquals("Player-1422", player2.toString());
      
      player1.pack();
      assertFalse(player1.isDead());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals((-1), player1.getPictureId());
      assertEquals((-5540), player1.getStrength());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)109;
      Player player0 = new Player(2803, "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", (byte) (-60));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-60), (byte)109);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 684);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player((-1422), "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", (-1422));
      System.setCurrentTimeMillis((-1422));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ");
      player0.setJoinOK(player0, true);
      player0.add(player0);
      System.setCurrentTimeMillis(15960L);
      Player player1 = new Player((-1422), "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", (-1422));
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals("0.0.0.0", player0.getIP());
      assertFalse(boolean0);
      
      player1.pack();
      assertEquals((-1422), player1.getPictureId());
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertFalse(player1.isDead());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertTrue(player1.isConnected());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player((-1422), "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", (-5487));
      player0.type();
      System.setCurrentTimeMillis((-5487));
      Player player1 = new Player((short)4919, "T<g459ti0Q", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", (-1), (-5487));
      boolean boolean0 = true;
      player1.isBoss();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player1.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.827176612438596
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player(286, "state.Party", "H6n#LwmN5*|zfS1=W", (short)4919, (short)4919);
      player0.setJoinOK(player1, true);
      Player player2 = new Player((short)4919, "", 286);
      player2.setDead((long) 286, true);
      player2.setX(0.0F);
      player2.getX();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(286);
      player1.isJoinOK(player0, true);
      Player player3 = new Player(5, "H6n#LwmN5*|zfS1=W", (String) null, (short)4919);
      player1.isJoinOK(player3, true);
      player0.isJoinOK(player1, true);
      int int0 = player2.gangStrength();
      assertEquals(286L, player2.getTimeOfDeath());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player();
      player0.setY((-3925.2742F));
      player0.setMoney(0.2F);
      float float0 = player0.getY();
      assertEquals(0.2F, player0.getMoney(), 0.01F);
      assertEquals((-3925.2742F), float0, 0.01F);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((-430), "FyS+,Vd:$HG", "FyS+,Vd:$HG", (-430), (-430));
      int int0 = player0.gangStrength();
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals((-430), int0);
      assertEquals((-430), player0.getPictureId());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player();
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte) (-83);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player(2436, (String) null, (String) null, (-1224));
      player0.getSubparty();
      player0.id = 1337;
      int int0 = player0.gangStrength();
      assertEquals(1, int0);
      
      player0.getName();
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals((-1224), player0.getPictureId());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-21428);
      String string0 = null;
      Player player0 = new Player((-21428), (String) null, (-21428));
      player0.reset(false);
      boolean boolean0 = true;
      player0.reset(true);
      player0.toString();
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player();
      player0.setX((-2128.316F));
      float float0 = player0.getX();
      assertEquals((-2128.316F), float0, 0.01F);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player();
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((-299), "5Dj\"0_v81e7U[*k", 2481);
      player0.setZ((-299));
      player0.pack();
      float float0 = player0.getZ();
      assertEquals((-299.0F), float0, 0.01F);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Player player0 = new Player();
      player0.setConnected(false);
      player0.setDead(0L);
      player0.getX();
      player0.getZ();
      player0.toString();
      player0.setX(1523.3031F);
      player0.pack();
      player0.remove((Party) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      player0.isConnected();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.046430838943019
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 0L;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Player player0 = new Player();
      player0.setConnected(false);
      player0.setZ(1523.3031F);
      player0.setDead(0L);
      player0.getX();
      player0.getZ();
      player0.toString();
      player0.setX(1523.3031F);
      player0.pack();
      player0.remove((Party) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      player0.isConnected();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player((short)4919, "", "", (-1679), (short)4919);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals("0.0.0.0", player0.getIP());
      assertFalse(boolean0);
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-1", player0.getName());
      assertEquals(1, player0.getStrength());
      
      player1.getIP();
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertFalse(player1.isDead());
      assertEquals(4919, player1.getStrength());
      assertEquals((-1679), player1.getPictureId());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertTrue(player1.isConnected());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = player0.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Party party0 = new Party();
      player0.remove(party0);
      player0.unpack(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int0 = player0.getStrength();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      Player player0 = new Player((byte)0, "bV", "3mW\"QwhgGTV<_xm13", (-3703), 0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertFalse(boolean0);
      
      int int0 = player0.getStrength();
      assertEquals(0, int0);
      assertEquals((-3703), player0.getPictureId());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals("bV", player0.getIP());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.271759469228055
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player(1254, "BU2yO<Z{Kx", "", (short)4919, (-943));
      int int0 = player1.getStrength();
      assertEquals((-943), int0);
      assertEquals("BU2yO<Z{Kx", player1.getIP());
      
      Player player2 = new Player((-943));
      assertEquals(0, player2.getPictureId());
      assertEquals("Player-943", player2.toString());
      assertEquals("0.0.0.0", player2.getIP());
      assertEquals(1, player2.getStrength());
      
      Player player3 = new Player((-299), "BU2yO<Z{Kx", "BU2yO<Z{Kx", (-1891), 20356);
      assertEquals(0L, player3.getTimeOfDeath());
      assertFalse(player3.isDead());
      assertEquals((-1891), player3.getPictureId());
      assertEquals(0.0F, player3.getY(), 0.01F);
      assertEquals(10.0F, player3.getX(), 0.01F);
      assertTrue(player3.isConnected());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player();
      player0.setDead((long) (-1817), false);
      boolean boolean0 = player0.isDead();
      assertEquals((-1817L), player0.getTimeOfDeath());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-68);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      boolean boolean1 = player0.isJoinOK(player0, false);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals("Player-1", player0.getName());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-128);
      player0.unpack(byteArray0);
      System.setCurrentTimeMillis((byte) (-128));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player();
      player0.setY((short)4919);
      player0.setMoney(0.2F);
      player0.getY();
      int int0 = player0.type();
      assertEquals(0.2F, player0.getMoney(), 0.01F);
      assertEquals(5, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.171659610384074
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player(806);
      player0.getSubparty();
      Player player1 = new Player(806, "", 5);
      player0.setJoinOK(player1, true);
      player0.prev = (Party) player1;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      player1.unpack(byteArray0);
      player1.isDead();
      player1.setDead((-1267L));
      player0.setMoney((byte)0);
      player1.setX(0.0F);
      player1.getIP();
      player0.gangStrength();
      player1.getZ();
      player0.getZ();
      long long0 = player1.getTimeOfDeath();
      assertEquals(0.0F, player1.getX(), 0.01F);
      assertEquals((-1267L), long0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9410699503727398
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead();
      player0.setZ(0.0F);
      player0.setDead(1392409296320L);
      player0.boss = null;
      player0.pack();
      player0.gangStrength();
      int int0 = Packable.GAME_STATE;
      player0.getX();
      player0.setMoney((-291.8F));
      float float0 = player0.getMoney();
      assertEquals(1392409296320L, player0.getTimeOfDeath());
      assertEquals((-291.8F), float0, 0.01F);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.05477796069814
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player();
      player0.setJoinOK(player1, false);
      player1.setMoney(0.2F);
      player1.isJoinOK(player0, false);
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertEquals(0.2F, player1.getMoney(), 0.01F);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player();
      player0.setJoinOK(player0, true);
      player0.setMoney((-1.0F));
      Player player1 = new Player();
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertEquals((-1.0F), player0.getMoney(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player();
      player0.setJoinOK(player0, false);
      player0.setMoney((-749.8563F));
      boolean boolean0 = player0.isJoinOK(player0, false);
      assertEquals((-749.8563F), player0.getMoney(), 0.01F);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player();
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-1", player0.getName());
      assertEquals(1, player0.getStrength());
      
      Player player1 = new Player((short)4919, "7z&C {%h{E", "7z&C {%h{E", (short)4919, (short)4919);
      player1.pack();
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertFalse(player1.isDead());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(4919, player1.getStrength());
      assertTrue(player1.isConnected());
      assertEquals(4919, player1.getPictureId());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = new Party((short)4919);
      player0.add(party0);
      player0.pack();
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player((-688), "", 410);
      player0.setX((-3796.0F));
      Player player1 = new Player();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Player player2 = new Player((-688), (String) null, "'=,", (-2178));
      player2.setDead((-1813L), true);
      player0.getStrength();
      player2.getIP();
      player2.reset(true);
      player0.getName();
      assertEquals((-3796.0F), player0.getX(), 0.01F);
      
      String string0 = player1.toString();
      assertEquals("Player-1", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player();
      boolean boolean0 = player0.isDead();
      assertFalse(boolean0);
      
      player0.pack();
      int int0 = player0.type();
      assertEquals(0, player0.getPictureId());
      assertEquals(5, int0);
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals("Player-1", player0.getName());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player(256, "", 0);
      player0.toString();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.026522790307467
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player(0, "(F>;MBZp", 5);
      player0.gangStrength();
      player0.setDead();
      player0.pack();
      player0.setDead((long) 5);
      player0.setZ((-921.9387F));
      player0.getPictureId();
      player0.setMoney(5);
      player0.getName();
      player0.setMoney(0.0F);
      player0.type();
      player0.setDead((long) 5);
      assertEquals((-921.9387F), player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertFalse(boolean0);
      
      String string0 = player0.getName();
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-1", string0);
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(0, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player();
      player0.reset(true);
      int int0 = player0.gangStrength();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0, player0.getPictureId());
      assertEquals(1, int0);
      assertEquals("Player-1", player0.getName());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getMoney(), 0.01F);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player(4, "", "", (-437));
      player0.getPictureId();
      player0.pack();
      player0.getY();
      player0.getY();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("Mv7j!OO(]HEQ2&@+n");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player();
      player0.pack();
      player0.getPictureId();
      player0.getX();
      player0.setMoney(3266.1F);
      player0.pack();
      assertEquals(3266.1F, player0.getMoney(), 0.01F);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((short)4919);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      player0.pack(dataOutputStream0);
      assertEquals(29, byteArrayOutputStream0.size());
      
      player0.pack();
      assertEquals("Player-1", player0.toString());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.getStrength();
      assertEquals(1, int0);
      
      boolean boolean0 = player0.isConnected();
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-1", player0.toString());
      assertTrue(boolean0);
      assertEquals(0, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player((short)4919, "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", "Playerunpack(): *^* WARNING *** [EOF] data was incomplete: ", (short)4919, 0);
      player1.gangStrength();
      player1.pack();
      System.setCurrentTimeMillis((-2364L));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player(1581, "", "", 1581, 1581);
      int int0 = player0.gangStrength();
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1581, player0.getPictureId());
      assertEquals(1581, int0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead((-5523L), false);
      player0.pack();
      assertEquals((-5523L), player0.getTimeOfDeath());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player(5, "%^mmcD(UccGlX|HQSO=", "%^mmcD(UccGlX|HQSO=", 4919, 5);
      float float0 = player0.getX();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(5, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, float0, 0.01F);
      assertEquals(4919, player0.getPictureId());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.gangStrength();
      int int1 = player0.getStrength();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      String string0 = player0.getName();
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("Player-1", string0);
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1028100642070378
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player(0, "F>;MBZp", 5);
      player0.gangStrength();
      player0.setDead();
      player0.setDead((long) 5);
      player0.setZ((-921.9387F));
      player0.getPictureId();
      player0.setMoney(5);
      player0.getName();
      player0.getTimeOfDeath();
      player0.getMoney();
      Player player1 = new Player((-10122), "F>;MBZp", (-938));
      player1.gangStrength();
      player0.remove(player0);
      player1.isConnected();
      player0.setY(0.0F);
      assertEquals((-921.9387F), player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Player player0 = new Player();
      player0.setConnected(false);
      byte[] byteArray0 = player0.pack();
      player0.setX((-624.2484F));
      player0.unpack(byteArray0);
      assertEquals(10.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      player0.unpack(byteArray0);
      player0.pack();
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-1", player0.getName());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.038009341005529
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Player player0 = new Player();
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[6];
      Player player1 = new Player((-1817));
      player0.unpack(byteArray0);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-1", player0.toString());
      assertEquals(0, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Player player0 = new Player();
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Player player0 = new Player(0, "45PEre(", "45PEre(", (-1), (-1));
      long long0 = player0.getTimeOfDeath();
      assertEquals(0L, long0);
      assertEquals((-1), player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals((-1), player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Player player0 = new Player();
      player0.reset(false);
      player0.pack();
      assertEquals(1, player0.getStrength());
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-1", player0.getName());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Player player0 = new Player();
      float float0 = player0.getY();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0, player0.getPictureId());
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(player0.isConnected());
      assertEquals("Player-1", player0.toString());
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player((short)4919);
      player0.setJoinOK(player1, false);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertFalse(player1.isDead());
      assertEquals(1, player1.getStrength());
      assertTrue(player1.isConnected());
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals("Player4919", player1.toString());
      assertEquals(0, player1.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Player player0 = new Player();
      player0.setY(714.0F);
      player0.getIP();
      assertEquals(714.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Player player0 = new Player();
      player0.setJoinOK(player0, true);
      player0.pack();
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("Player-1", player0.getName());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Player player0 = new Player();
      player0.getMoney();
      player0.setDead();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
  }
}
