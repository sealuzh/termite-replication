/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 10:18:13 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1360987497336015
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(65535L);
      Range range1 = Range.of(1226L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.of(65535L);
      Range range3 = Range.of((-2399L));
      range2.equals(range3);
      range0.iterator();
      assertSame(range0, range2);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.269320748383572
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = new Object();
      Range.of((-784L));
      Range range0 = Range.ofLength(9223372032559808471L);
      Range range1 = Range.ofLength(9223372034707298334L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.of(9223372034707298334L);
      boolean boolean1 = range2.equals(object0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.6808594526075846
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775760L, 9223372036854775760L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(1038L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range range1 = Range.of((-1947L));
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1947 would make range [9223372036854774721 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.892632114903634
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-9223372032559809609L), (-9223372032559809609L));
      Long long0 = new Long((-9223372032559809609L));
      Range range1 = Range.of((-9223372032559809609L), 65535L);
      range1.equals((Object) null);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4031760494678855
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of((-3443L));
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3443 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9778643962668743
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      range0.toString();
      Object object0 = new Object();
      range0.spliterator();
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.9509335942014934
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 9223372036854775107L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775107L);
      range1.endsBefore(range0);
      range1.spliterator();
      range1.iterator();
      long long1 = 95L;
      long long2 = (-306L);
      Range range2 = Range.of((-306L));
      range0.spliterator();
      range1.split(95L);
      String string0 = "naE,WbduJDf?1";
      Range.CoordinateSystem.valueOf(string0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem2);
      Range range3 = Range.ofLength(long1);
      range1.complement(range0);
      Range range4 = range1.asRange();
      Range range5 = Range.parseRange(string0);
      String string1 = null;
      Range.ofLength(long2);
      Range.parseRange(string1);
      Range.of(long1);
      range1.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem3);
      range4.complement(range2);
      range0.toString();
      range5.complement(range4);
      range5.getLength();
      String string2 = "";
      Range.CoordinateSystem.valueOf(string2);
      range2.complement(range3);
      range1.split(long0);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.SPACE_BASED;
      range2.getBegin(range_CoordinateSystem4);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.6757817854505
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 127L, 127L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = 9223372032559808491L;
      Range.ofLength(9223372032559808491L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, 9223372032559808491L, 9223372032559808491L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.867191598174923
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of((-2536L), 127L);
      List<Range> list0 = range0.split(127L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
      assertFalse(list0.contains(range0));
      assertEquals(21, list0.size());
      
      range0.iterator();
      long long0 = range0.getLength();
      assertEquals(2664L, long0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1346325508541963
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      String string0 = range0.toString();
      assertEquals("[ 4294967295 .. 4294967295 ]/0B", string0);
      
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.equals(object0);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 65556L, 4294967295L);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1360270265849555
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      range0.toString();
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      boolean boolean0 = range0.equals(object0);
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 65556L, 4294967295L);
      Range range3 = Range.of(65556L);
      boolean boolean1 = range1.equals(range3);
      assertTrue(boolean1 == boolean0);
      assertNotSame(range3, range2);
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem2);
      assertEquals("[ 4294967296 .. 4294967296 ]/RB", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(4294967282L, 9223372032559808511L);
      Long long0 = new Long((-2932L));
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Long long0 = new Long(4294967295L);
      range0.equals("e");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-3505L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3506 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(681L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.4921861742632108
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.split(9223372034707298334L);
      Range range1 = Range.of(9991L, 2147477474L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      Range range2 = Range.of(9978L);
      Long long0 = new Long(9223372034707298334L);
      boolean boolean1 = range1.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem0);
      long long1 = range2.getBegin(range_CoordinateSystem0);
      assertEquals(9979L, long1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3278369999701947
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.of(3727L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 3727L, 9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(421L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Long long0 = new Long(253L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      assertEquals(Range.CoordinateSystem.RESIDUE_BASED, range_CoordinateSystem1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(4294967298L, 9223372032559808511L);
      range0.iterator();
      Long long0 = new Long(4294967282L);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      assertEquals("RB", range_CoordinateSystem0.getAbbreviatedName());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L));
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      assertEquals("SB", range_CoordinateSystem0.getAbbreviatedName());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      assertEquals(Range.CoordinateSystem.RESIDUE_BASED, range_CoordinateSystem0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.796091586500539
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.ofLength(9223372032559808511L);
      Range range0 = Range.ofLength(9223372032559808511L);
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(9223372032559808471L, 9223372032559808471L);
      Range.ofLength(9223372032559808471L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1350573296152584
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L, 255L);
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of(255L);
      Range range2 = Range.of(255L);
      boolean boolean0 = range1.equals(range0);
      assertSame(range1, range2);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.89156615887432
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.ofLength(8L);
      Range range1 = Range.of(8L);
      range0.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder(8L);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-3580L));
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.ofLength(9223372032559808478L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372032559808478L, 9223372032559808478L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      assertEquals(Range.CoordinateSystem.RESIDUE_BASED, range_CoordinateSystem1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.3867746355940067
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223372034707298334L);
      Range range1 = Range.ofLength(9223372034707298334L);
      range1.toString();
      Range range2 = Range.of(9223372034707298334L, 9223372036854775760L);
      range2.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.7964122534878726
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(9223372032559808511L);
      range0.equals(range0);
      Range range1 = Range.of(9223372034707298334L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.6687734876413405
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-910L));
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(1226L);
      range1.startsBefore(range0);
      range1.getEnd(range_CoordinateSystem0);
      Range range2 = Range.of((-2399L));
      range0.equals(range2);
      range0.iterator();
      // Undeclared exception!
      try { 
        Range.of(1L, (-2399L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.136264033525873
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-910L));
      range0.endsBefore(range0);
      Range range1 = Range.of(1226L);
      Range range2 = Range.of((-2695L));
      Range range3 = Range.of((-2399L));
      range2.equals(range3);
      range0.iterator();
      Range.Builder range_Builder0 = new Range.Builder(range1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.137864012192824
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(9223372032559808471L, 9223372032559808471L);
      Range range1 = Range.of(9223372032559808471L, 9223372032559808471L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertSame(range1, range0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.6455578745073565
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.of(0L, 0L);
      Range range0 = Range.of((-1L), 0L);
      Range range1 = Range.of((-1L));
      Object object0 = new Object();
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.143652409619771
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, (-3505L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3507 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.717214695300092
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Range range1 = Range.of(32767L, 32767L);
      range0.iterator();
      Range.of(32767L);
      Object object0 = new Object();
      Long long0 = new Long((-991L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of((-2147483643L), (-2147483643L));
      Long long0 = new Long(819L);
      range0.equals(long0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8899587648618628
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-32768L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ -2147483648 .. -32768 ]/0B", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.268588722239781
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.of(0L, 0L);
      Range range0 = Range.of((-1L), 0L);
      Long long0 = new Long(255L);
      Range range1 = Range.of((-1L));
      Object object0 = new Object();
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      assertEquals(Range.CoordinateSystem.RESIDUE_BASED, range_CoordinateSystem0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.332502094335467
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      range0.equals(range1);
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.iterator();
      Range range2 = Range.ofLength(1L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.653556397963837
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(2397L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.ofLength(9223372036854775760L);
      Range range0 = Range.of(579L, 9223372036854775760L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.126678119720693
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      
      Range range2 = range0.asRange();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.633807380768648
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = 24L;
      Range range0 = Range.ofLength(24L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8922772952702807
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range range0 = Range.ofLength(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(255L);
      range1.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      assertEquals("RB", range_CoordinateSystem1.getAbbreviatedName());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(1365L, 2147483647L);
      Long long0 = new Long(1365L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(4294967282L, 9223372032559808511L);
      Long long0 = new Long(4294967282L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.130582753344072
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      range0.iterator();
      Long long0 = new Long(4294967295L);
      Long long1 = new Long(1204L);
      range0.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      assertEquals(Range.CoordinateSystem.RESIDUE_BASED, range_CoordinateSystem0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.4419999547761964
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(1364L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.329337375063968
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of(9223372032559808471L, 9223372032559808471L);
      Range range1 = Range.of(2277L, 2277L);
      Long long0 = new Long((-72L));
      Range range2 = Range.of(2277L);
      boolean boolean0 = range1.equals(range2);
      assertFalse(range2.equals((Object)range0));
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.614752528329351
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      Range.of(1L, 1L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.3278369999701947
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.of(9223372036854775807L);
      Range range0 = Range.of(9995L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-3922L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3922 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-2147483648L), 579L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.4930000331168323
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(959L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(959L, 959L);
      Range range1 = Range.of(range_CoordinateSystem0, (-648L), 2147483647L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
      
      long long0 = range1.getEnd(range_CoordinateSystem1);
      assertEquals(2147483647L, long0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "~Knp_VWYz&";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-268L), (-268L));
      range_Builder0.expandBegin((-268L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.6131154161194963
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of((-9223372032559809609L), (-9223372032559809609L));
      Range range1 = Range.of((-9223372032559809609L));
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Long long0 = new Long((-9223372032559809609L));
      boolean boolean0 = range0.equals(long0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertSame(range0, range1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of((-9223372032559809609L), (-9223372032559809609L));
      Long long0 = new Long((-9223372032559809609L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775789L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.44318584633436
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(9223372032559808471L);
      Range range1 = Range.of(9223372032559808471L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.344292841368524
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(9223372032559808468L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.571152633434689
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.7015337793441843
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of((-1L));
      range0.complement(range1);
      Range.of(5029L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.9769701418514933
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(1365L, 2147483647L);
      String string0 = range0.toString();
      assertEquals("[ 1365 .. 2147483647 ]/0B", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Object object0 = new Object();
      Range range0 = Range.ofLength(9223372036854775760L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(9223372036854775760L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.spliterator();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.061245653757834
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range1.startsBefore(range0);
      Range range2 = Range.ofLength(2147483647L);
      range2.iterator();
      Long.compareUnsigned(2147483647L, (-1244L));
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.of((-128L), (-3420L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.756072246523508
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(9223372032559808476L);
      Range range1 = Range.of(65535L, 4294967254L);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      assertEquals(Range.CoordinateSystem.RESIDUE_BASED, range_CoordinateSystem0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.327189247670674
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.of(4294967282L, 9223372032559808515L);
      Range range0 = Range.of(9223372032559808515L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.563225154969363
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      range0.startsBefore(range1);
      Range range2 = Range.of((-128L));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long long0 = new Long((-128L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.2668415958029997
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.ofLength(23L);
      Range range1 = Range.of((-1L), 23L);
      Long long0 = new Long(23L);
      range1.isSubRangeOf(range0);
      Range range2 = range1.asRange();
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.4731666777475163
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.ofLength(9223372036854775789L);
      Range range0 = Range.of(65535L, 65535L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.4419999547761964
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.equals(range0);
      range0.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      assertEquals(Range.CoordinateSystem.RESIDUE_BASED, range_CoordinateSystem0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.68766157909045
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.complement(range0);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.765027738830801
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.of((-9223372032559809609L), (-9223372032559809609L));
      Range range0 = Range.of((-9223372032559809609L));
      Long long0 = new Long(0L);
      Range range1 = Range.of((-9223372032559809609L));
      assertSame(range1, range0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range2.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long1);
      
      String string0 = range2.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.497202926885675
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of((-956L), 1L);
      Range.of(range_CoordinateSystem0, (-956L), 32767L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.756546326229921
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775806L));
      Range range1 = Range.of((-9223372036854775806L), (-1901L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertNotSame(range0, range1);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.2672123781537596
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(224L);
      Range range1 = Range.of(224L, 9223372036854775807L);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("`+&|}>*N", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse `+&|}>*N into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.633239779883331
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(9223372032559808511L, 9223372032559808511L);
      Range range1 = Range.of(9223372032559808511L, 9223372034707294305L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = range_Builder0.build();
      long long0 = range2.getLength();
      assertEquals(0L, long0);
      
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd(255L);
      Object object0 = new Object();
      Long long1 = new Long((-9223372036854775808L));
      range1.equals(range_Builder1);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.2838685127595846
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of((-1L), 579L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Long long0 = new Long((-209L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.704858287210259
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-128L), long0);
      
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.1586109539834624
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.of(4294967295L);
      Range range0 = Range.of(4294967295L);
      Long long0 = new Long(4294967295L);
      range0.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      assertEquals("RB", range_CoordinateSystem0.getAbbreviatedName());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.1374286651201446
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775783L));
      List<Range> list0 = range0.complement(range0);
      Range range1 = Range.of((-9223372036854775783L));
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.contains(range0));
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.245905362460896
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(4294967282L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.3035770196432024
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-1L), (-1787L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.120449434820636
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-568L), 4294966108L);
      long long0 = range0.getLength();
      assertEquals(4294966677L, long0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.709549975533289
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem.values();
      Range range0 = Range.of(3740L);
      Range range1 = Range.ofLength(681L);
      range0.intersection(range1);
      Range range2 = Range.ofLength(0L);
      range2.isEmpty();
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(681L, (-586L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.142555981605134
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(28L);
      Range range1 = Range.of(28L);
      range1.getBegin();
      long long0 = range1.getEnd();
      assertEquals(28L, long0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.441171005310231
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775776L);
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.3327036600602935
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of((-2496L), 127L);
      List<Range> list0 = range0.split(127L);
      assertEquals(21, list0.size());
      assertFalse(list0.contains(range0));
      
      long long0 = range0.getEnd();
      assertEquals(127L, long0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.7591612208383665
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(1L);
      List<Range> list0 = range1.split(1L);
      assertTrue(list0.contains(range1));
      assertEquals(1, list0.size());
      
      Range.of((-1511L));
      range1.iterator();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.1356178217257975
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-32768L), long0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(2L, long0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.3194300454253907
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(23L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(23L, 23L);
      Long long0 = new Long(23L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
      
      range1.asRange();
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.6881336682453103
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.ofLength(23L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.3846246314593835
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(4294967282L, 9223372032559808511L);
      Long long0 = new Long(4294967282L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-88L), (-88L));
      Range range2 = range0.intersection(range1);
      assertTrue(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.3270405045500433
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(959L, 959L);
      Range range0 = Range.ofLength(0L);
      Range.of(9223372036854718268L);
      Object object0 = new Object();
      range0.equals(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      assertEquals("Residue Based", range_CoordinateSystem0.toString());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.2015566946087035
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.ofLength(9223372032559808471L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.3866680541924614
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.of(0L);
      Range range0 = Range.of(0L, 0L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(72L, 2147483647L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Zero Based", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.442381365997716
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.1334393520871684
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(681L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(681L, 681L);
      boolean boolean0 = range0.startsBefore(range1);
      assertSame(range1, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.251606977918609
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of((-893L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.8906488959867764
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 387L, 387L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.135617821725798
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.iterator();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2L, 2L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.ofLength(681L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.251771370488065
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.of((-32768L));
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.4403067477614817
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(959L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
      
      range_Builder0.contractEnd(959L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(959L, 959L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Range.Builder range_Builder1 = new Range.Builder(959L, 959L);
      Range range2 = range_Builder0.build();
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of((-956L), (-491L));
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Residue Based", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(681L, 681L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-32754L));
      boolean boolean0 = range0.equals(">5}p'S Si?QAPI!;");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.457663386901383
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.of((-140L));
      Range.Builder range_Builder0 = new Range.Builder((-140L), (-140L));
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.1792007145348498
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.2688293237435406
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.633743713256562
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.ofLength(9223372032559808476L);
      Range range1 = Range.of(9223372032559808476L, 9223372032559808476L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertNotSame(range2, range1);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range1));
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of((-32743L));
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.330068689968166
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.ofLength(9223372032559808511L);
      Range range1 = Range.ofLength(959L);
      range1.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 9223372032559808511 ]/RB", string0);
      
      Range range2 = Range.parseRange("[ 1 .. 9223372032559808511 ]/RB", range_CoordinateSystem0);
      boolean boolean0 = range0.intersects(range2);
      assertSame(range2, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.4822849036609926
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.of(9223372032559808471L, 9223372032559808471L);
      Range range0 = Range.ofLength(9223372032559808471L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.7273131672915896
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.ofLength(9223372032559808478L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372032559808478L, 9223372032559808478L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(9223372032559808478L);
      range_Builder1.build();
      // Undeclared exception!
      try { 
        Range.of(9223372032559808478L, (-468L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.1156141964683886
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.ofLength(2259L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 2259 ]/SB", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775409L, 9223372036854775409L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.4554676010655276
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(9223372036854775807L);
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2639L), (-2639L));
      Range range1 = Range.of((-2639L), (-2639L));
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.189445966850307
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      String string0 = range0.toString();
      assertEquals("[ -32768 .. -32768 ]/0B", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.5873928183218178
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of(9223372032559808471L, 9223372032559808471L);
      Range range1 = Range.ofLength(205L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.481889099480955
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.of(1L, 1L);
      Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(1L);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2112L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.2027580914202374
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2610L);
      range_Builder0.shift(26L);
      Range range0 = range_Builder0.build();
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.187252022137714
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = range0.getBegin();
      assertEquals((-32768L), long0);
      
      long long1 = range0.getEnd();
      assertEquals((-32768L), long1);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.0857227577864523
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.ofLength(9223372032559808491L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      long long1 = range0.getEnd();
      assertEquals(9223372032559808490L, long1);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.115053675356123
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of(344L);
      long long0 = range0.getEnd();
      assertEquals(344L, long0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.7083326665019025
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 9223372036854775807 ]/RB", string0);
      
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.1327282156912077
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of(9223372032559808488L);
      Range range1 = Range.ofLength(9223372032559808488L);
      assertFalse(range1.isEmpty());
      
      List<Range> list0 = range0.split(9223372032559808488L);
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.060276460265276
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775776L);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        range0.split(9223372036854775776L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -65 would make range [9223372036854775776 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.238586093918178
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      // Undeclared exception!
      try { 
        range0.split((-719L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.4403067477614817
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of((-2147483648L));
      assertFalse(range1.isEmpty());
      
      Range range2 = range_Builder0.build();
      Long long0 = new Long(255L);
      Long long1 = new Long((-2147483648L));
      range2.equals(";S&gRJll\"mdCn");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      boolean boolean0 = range0.intersects(range2);
      assertFalse(boolean0);
      
      long long2 = range0.getLength();
      assertEquals(255L, long2);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.0581000423930447
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.of(681L, 681L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(681L, long0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of(260L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.ofLength(1345L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2112L), (-2112L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd(141L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.ofLength(9223372032559808464L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372032559808464L, 9223372032559808464L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(9223372032559808464L);
      range_Builder1.contractBegin(9223372032559808464L);
      range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      assertEquals("Space Based", range_CoordinateSystem1.toString());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of((-709L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of(4294901720L, 4294901720L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
