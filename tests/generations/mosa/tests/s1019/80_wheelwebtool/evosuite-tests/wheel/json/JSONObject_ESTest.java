/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 19:39:35 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6934031489894426
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      HashMap<Double, Boolean> hashMap1 = new HashMap<Double, Boolean>(hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("-nyv", (Map) hashMap1);
      jSONObject1.put("-nyv", true);
      jSONObject0.toString((-998), (-998));
      boolean boolean0 = jSONObject0.optBoolean("-nyv");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("JSONArray[");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("JSONArray[", (Collection) linkedList0);
      Long long0 = new Long((-1197L));
      JSONObject jSONObject2 = jSONObject1.accumulate("JSONArray[", long0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.174003403734852
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(1L);
      jSONObject0.append("ZJ'[0>'3:/B1", long0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("ZJ'[0>'3:/B1");
      assertNotNull(jSONArray0);
      
      double double0 = jSONObject0.optDouble("ZJ'[0>'3:/B1");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Long> hashMap0 = new HashMap<JSONObject, Long>();
      JSONObject jSONObject1 = jSONObject0.put("5N-", (Map) hashMap0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject2 = jSONObject1.put("5N-", (Collection) linkedList0);
      jSONObject0.getJSONArray("5N-");
      try { 
        jSONObject2.getJSONObject("5N-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5N-\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "{Bn\"{u";
      JSONTokener jSONTokener0 = new JSONTokener("{Bn\"{u");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {Bn\"{u
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8442266465293593
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      Float float0 = new Float(1602.60237982);
      Float float1 = new Float(1595.6F);
      hashMap0.put(float0, float1);
      Float.max((-357.0F), 0.0F);
      Float float2 = new Float((double) 1595.6F);
      hashMap0.put((Float) null, float2);
      Float float3 = new Float((-357.0F));
      Float.max(0.0F, 1595.6F);
      hashMap0.put(float0, float3);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      BiFunction<Object, Float, Float> biFunction0 = (BiFunction<Object, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyFloat());
      hashMap0.compute((Float) null, biFunction0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-42841071), (-42841071));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      hashMap0.remove((Object) jSONObject0);
      Integer integer0 = new Integer(8448);
      Integer integer1 = Integer.getInteger("L{R+Y<4x[n=", integer0);
      hashMap0.put((JSONObject) null, integer1);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.971702292149313
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1368, (Object) jSONObject0);
      jSONObject0.toJSONArray(jSONArray0);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 1368, 1025);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("pJ'[0>'3:/B1", (Map) hashMap0);
      jSONObject1.isNull("isjoin");
      JSONObject jSONObject2 = jSONObject0.getJSONObject("pJ'[0>'3:/B1");
      assertNotSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.728634564947611
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      jSONObject0.put("fAt~'&o];;X'", (Map) hashMap0);
      Double double0 = new Double(Double.NaN);
      Float float0 = new Float(Double.NaN);
      hashMap0.put(double0, float0);
      JSONObject jSONObject1 = jSONObject0.put("getcopyValueOf", (Map) hashMap0);
      JSONObject.quote("getcopyValueOf");
      jSONObject1.optBoolean("getcopyValueOf");
      try { 
        jSONObject1.toString((-998), (-998));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("[|jW4mR&</");
      assertEquals("\"[|jW4mR&<\\/\"", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.160858742064353
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("add", (-974L));
      jSONObject0.getDouble("add");
      jSONObject0.put("add", false);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.944604464718906
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      JSONObject.valueToString(hashMap0, 1200, 91);
      jSONObject0.optString("", (String) null);
      try { 
        jSONObject0.getDouble("?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8760707436641795
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("-126.590", 0L);
      jSONObject1.optInt("-126.590");
      long long0 = jSONObject0.getLong("-126.590");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7473160710982958
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      String string0 = JSONObject.quote("pJ'[0>'3:/B1");
      assertEquals("\"pJ'[0>'3:/B1\"", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("\"pJ'[0>'3:/B1\"", 26);
      long long0 = jSONObject1.getLong("\"pJ'[0>'3:/B1\"");
      assertEquals(26L, long0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.112704644485289
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("isspliterator", "isspliterator");
      try { 
        jSONObject0.getBoolean("isspliterator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isspliterator\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONArray0.put((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0546857945132753
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Object) "getlongValue");
      int int0 = jSONObject0.optInt("getlongValue");
      assertEquals(0, int0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray0.length);
      
      jSONObject0.toString(0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0056408405861834
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Object) "g=b4|@8w-%eP`Tk@ES");
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("[DTE", (Object) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6379940485425777
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 1261, 1261);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("!,7=nfv70@>r_-0fgSe", true);
      jSONObject0.toString();
      Object object0 = jSONObject0.get("!,7=nfv70@>r_-0fgSe");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5709195237181253
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0k)08sh>Tg+#W~{", (-3185L));
      jSONObject1.optLong("0k)08sh>Tg+#W~{");
      Object object0 = jSONObject0.opt("SI\"^H\"\"`[)z");
      assertNull(object0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4991653613512566
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      
      jSONObject0.opt((String) null);
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Float float0 = new Float(1584.4718F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5428866763466784
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      jSONObject0.put("true", (Map) hashMap0);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>(837);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("true");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("cY~!u)$B+a;g~@r`[", 226);
      JSONObject jSONObject2 = jSONObject1.accumulate("cY~!u)$B+a;g~@r`[", "cY~!u)$B+a;g~@r`[");
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4651935718829296
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames(jSONObject0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("(wY (!=QiE<(caf{", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8760902794872374
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      Float float0 = new Float((-876.76F));
      JSONObject jSONObject1 = jSONObject0.append("/Q/_d3kJPYG1^'3J", float0);
      int int0 = jSONObject0.optInt("getlongValue");
      assertEquals(0, int0);
      
      JSONObject jSONObject2 = jSONObject0.put("getlongValue", (double) (-876.76F));
      Object object0 = new Object();
      jSONObject2.append("/Q/_d3kJPYG1^'3J", object0);
      Short short0 = new Short((byte)1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "getlongValue";
      stringArray0[1] = "getlongValue";
      jSONObject1.put(",", (double) 0);
      String string0 = JSONObject.doubleToString((-876.76F));
      assertEquals("-876.760009765625", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.558918946201889
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Float float0 = new Float(1930.4011F);
      JSONObject.numberToString(float0);
      Double double0 = new Double(1930.4011F);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "java.lang.Float@0000000001";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000001", (double) (-2535));
      jSONObject1.getInt("java.lang.Float@0000000001");
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.335970331171801
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Object) "getlongValue");
      jSONObject0.optInt("getlongValue");
      jSONObject0.optInt("getlongValue", 0);
      JSONObject jSONObject1 = jSONObject0.put("getlongValue", (double) 1157.0F);
      try { 
        jSONObject1.getJSONObject("getlongValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getlongValue\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8681749379160528
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>(0);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      Integer.getInteger("U\"3Z2^{8>", (int) (short) (-1047));
      jSONObject0.put("2", (Map) hashMap0);
      jSONObject1.optBoolean("2");
      jSONObject1.length();
      Short short0 = new Short((short) (-1047));
      jSONObject1.put("2", (Object) short0);
      JSONObject.numberToString(short0);
      jSONObject1.toString((-4722), 97);
      Integer integer0 = new Integer(97);
      JSONObject jSONObject2 = new JSONObject();
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.157280995708096
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray();
      Byte byte0 = new Byte((byte) (-8));
      jSONObject0.putOpt("de", byte0);
      jSONObject0.optString("de", "de");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2789389564075417
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 3577, 3577);
      assertEquals("{}", string0);
      
      jSONObject0.has("false");
      String string1 = jSONObject0.optString("{}");
      assertEquals("", string1);
      
      jSONObject0.toString(123, 123);
      jSONObject0.put(" r9akf", false);
      boolean boolean0 = jSONObject0.optBoolean(" r9akf");
      assertFalse(boolean0);
      
      String string2 = JSONObject.quote(" r9akf");
      assertEquals("\" r9akf\"", string2);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.133133739559716
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("[]", "[]");
      assertEquals(1, jSONObject0.length());
      
      jSONObject0.remove("[]");
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("] is no a JONArray.");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("\t", "\t");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1506719848487332
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      hashMap0.entrySet();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      jSONObject0.write(stringWriter1);
      Double double0 = new Double((-1.0));
      Integer integer0 = new Integer(0);
      jSONObject0.put("Expected a ',' or ']'", (Object) integer0);
      double double1 = jSONObject0.getDouble("Expected a ',' or ']'");
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8937277100473913
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("1696.1864560", 3008.3768253);
      double double0 = jSONObject0.getDouble("1696.1864560");
      assertEquals(3008.3768253, double0, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (-2305.447321487));
      try { 
        jSONObject1.append("wheel.json.JSONObject@0000000001", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[wheel.json.JSONObject@0000000001] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("r#3`_wri?ukFNheN7%'", (-70125688));
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      assertEquals(0, hashMap0.size());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.948720592834763
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("0k)08sh>Tg+#W~{", 123L);
      long long0 = new Long(123L);
      Object object0 = jSONObject0.opt("0k)08sh>Tg+#W~{");
      assertEquals(123L, object0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.8053415898278653
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject.doubleToString((-2094.619172221));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 2, 2);
      JSONObject jSONObject1 = new JSONObject("{}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {t
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.0126200936538066
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "JSONArray[";
      JSONObject jSONObject1 = jSONObject0.accumulate("JSONArray[", "JSONArray[");
      try { 
        jSONObject1.getInt("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray[\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("q[*zXNj qG7+^ 99i", "q[*zXNj qG7+^ 99i");
      jSONObject1.optInt("q[*zXNj qG7+^ 99i");
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote(".");
      assertEquals("\".\"", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.571831599661383
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0k)08sh>Tg+#W~{", 123L);
      jSONObject1.optLong("0k)08sh>Tg+#W~{");
      Object object0 = jSONObject0.opt("SI\"^H\"\"`[)z");
      assertNull(object0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.4287239495000943
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "P+EO_[^ZWW+.";
      JSONObject jSONObject0 = new JSONObject((Object) "P+EO_[^ZWW+.");
      // Undeclared exception!
      jSONObject0.toString(3171);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("TQISaU!r)Tvze");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Byte.compare((byte) (-23), (byte) (-23));
      String string0 = JSONObject.doubleToString((-28734958));
      assertEquals("-2.8734958E7", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("", "OaIt?~iXobx");
      assertEquals("OaIt?~iXobx", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("u8Es|Xs0!;d", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("yejd6wThI-J", 274L);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.310038398547123
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("", byte0);
      jSONObject0.put(" of ", false);
      jSONObject0.has("");
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject();
      boolean boolean0 = jSONObject1.isNull("ZoT@Jq");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.9853278202731631
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "e(+Bx");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("gettoHexString", 2666);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject1 = jSONObject0.put("de", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.put((String) null, (-1972L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.164425715693679
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("eq", true);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      JSONObject.valueToString(jSONObject1);
      boolean boolean0 = jSONObject0.getBoolean("eq");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 1, 1);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("null", (-1006.09606948891));
      try { 
        jSONObject1.getJSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.8058632507364383
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(linkedList0, (-1859), (-1859));
      jSONObject0.isNull("lTJ ]B7<.QtaL");
      try { 
        jSONObject0.getJSONArray("lTJ ]B7<.QtaL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lTJ ]B7<.QtaL\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("[", "[");
      JSONObject.getNames(jSONObject0);
      String string0 = jSONObject1.optString("[");
      assertNotNull(string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>(0);
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(hashMap0, 1492, (-18627781));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("[", false);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 1139, 4190);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.5149300683537237
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject.doubleToString(517.01702069968);
      JSONObject jSONObject0 = new JSONObject((Object) "517.01702069968");
      // Undeclared exception!
      jSONObject0.toString(2120, (-230));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, object0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-1), (-2883));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.777828207060025
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      short short0 = (short)160;
      Short short1 = new Short((short)160);
      short short2 = (short) (-924);
      Short.toUnsignedInt((short) (-924));
      JSONObject jSONObject0 = new JSONObject(short1);
      String string0 = "jwXP<%(M";
      Short.toUnsignedLong((short) (-924));
      JSONObject jSONObject1 = jSONObject0.put("jwXP<%(M", 319.0122167940474);
      jSONObject1.optDouble("jwXP<%(M", (double) 91);
      jSONObject1.toString(91);
      jSONObject0.put("{\n                                                                                           \"java.lang.String@0000000004\": java.lang.Double@0000000005,\n                                                                                           \"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}", (long) 91);
      JSONObject.doubleToString(64612L);
      String string1 = "true";
      JSONTokener jSONTokener0 = new JSONTokener("true");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of true
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.5899865355124034
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("op|PWL{~rlH=;4b^I", 84L);
      jSONObject0.optBoolean("op|PWL{~rlH=;4b^I", false);
      jSONObject1.optDouble("op|PWL{~rlH=;4b^I");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.3991048133301536
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      Float float0 = new Float(1157.0F);
      String string0 = "getlongValue";
      JSONObject jSONObject0 = new JSONObject((Object) "getlongValue");
      jSONObject0.optInt("getlongValue");
      JSONObject jSONObject1 = jSONObject0.put("getlongValue", (double) 1157.0F);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optInt("getlongValue");
      try { 
        jSONObject1.append("getlongValue", jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[getlongValue] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getfloatToIntBits", 1141.0);
      int int0 = jSONObject1.getInt("getfloatToIntBits");
      assertEquals(1141, int0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.2022413954579148
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString((-998), 46);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.683859228591611
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      jSONObject0.put("su", (Map) hashMap0);
      jSONObject0.isNull("su");
      String string0 = jSONObject0.getString("su");
      assertNotNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = JSONObject.valueToString("q.2vg@@6");
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("u3=T#`eMy<Bc%v6_}Sc", 2481.943364);
      jSONObject0.names();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5134049813662336
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      try { 
        jSONObject0.getDouble("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.7202245016325666
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(92, 92);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.3336889061514894
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-465));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float float0 = new Float(202.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("iskeys");
      assertNull(object0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("xFpJ:9I J", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.061093750171824
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "getforEach");
      JSONObject jSONObject0 = new JSONObject("getforEach", stringArray0);
      jSONObject0.toString(2383);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.885488118580586
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(12);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(2);
      JSONObject jSONObject1 = jSONObject0.put("{}", (long) 2);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      jSONObject0.put("pJ'[0>'3:/B1", (Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("pJ'[0>'3:/B1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pJ'[0>'3:/B1\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("JSONArray[", "JSONArray[");
      JSONArray jSONArray0 = jSONObject1.getJSONArray("JSONArray[");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("bJo)8z{\"eW\"", (-3013));
      try { 
        jSONObject0.getBoolean("bJo)8z{\"eW\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"bJo)8z{\\\"eW\\\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isreverseBytes", (Object) "isreverseBytes");
      try { 
        jSONObject0.getLong("isreverseBytes");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isreverseBytes\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("q (&", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Double double0 = new Double(1705.53456);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("r5_`-pWN0", 0.0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt(")=d+IZ9;/q");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0, 1, 1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("gettoLowerCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoLowerCase\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("g^|z", true);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (-531));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.80276727550424
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong(".", (-1L));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.3350026060706126
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("W&f.E\"$@#0,<a'QGI[$", 0L);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("r _]@>g#;J5Zb-b");
      assertEquals(0L, long0);
      
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("getjoin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getjoin\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("get", (-2098.411178697536));
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)88);
      String string0 = JSONObject.valueToString(byte0, (byte)88, (byte)88);
      assertNotNull(string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Float float0 = new Float(1930.4011F);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 8448, 8448);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.7494502426070615
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "l{ZP%B)[ij6h");
      jSONObject0.putOpt("l{ZP%B)[ij6h", "l{ZP%B)[ij6h");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.append("{}", "{}");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("gettoUpperCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoUpperCase\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = JSONObject.quote("|b6y/;<ONH*P\"i+gmjA");
      assertEquals("\"|b6y/;<ONH*P\\\"i+gmjA\"", string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = JSONObject.quote("bKMAW{f[yg.");
      assertEquals("\"bKMAW{f[yg.\"", string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      boolean boolean0 = jSONObject0.optBoolean("{}");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("Expected a ':' after a key");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Expected a ':' after a key
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("JVj_(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of JVj_(
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = JSONObject.quote("getput");
      assertEquals("\"getput\"", string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(3577);
      assertEquals("{}", string0);
      
      jSONObject0.has("false");
      String string1 = jSONObject0.optString("{}");
      assertEquals("", string1);
  }
}
