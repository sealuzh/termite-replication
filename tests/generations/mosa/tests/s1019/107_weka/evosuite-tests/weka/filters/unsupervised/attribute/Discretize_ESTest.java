/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 19:00:18 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      boolean boolean0 = discretize0.getInvertSelection();
      assertTrue(boolean0);
      
      String string0 = discretize0.useBinNumbersTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5436840551234408
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      arrayList0.add(attribute0);
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setFindNumBins(true);
      instances0.setClass(attribute0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '7/!' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.8888043637074614
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setFindNumBins(true);
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize0);
      discretize0.batchFinished();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.795338716182451
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("!");
      Attribute attribute1 = new Attribute("!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("5u`n6=gQ3Lto", arrayList0, 86);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      instances0.add((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      instances0.add((Instance) binarySparseInstance1);
      discretize0.setInputFormat(instances0);
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      assertEquals("5u`n6=gQ3Lto-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances1.relationName());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("7/!", "7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("li$h]#vJ@?z[i", arrayList0, 0);
      discretize0.setFindNumBins(true);
      SparseInstance sparseInstance0 = new SparseInstance(79);
      attribute0.addStringValue((Attribute) null, 357913942);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance0);
      discretize0.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize0);
      discretize0.batchFinished();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0139076237610185
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      Attribute attribute0 = new Attribute("!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setUseEqualFrequency(true);
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize0);
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      discretize0.setMakeBinary(true);
      Instances instances0 = new Instances("integer", arrayList0, 41);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      discretize0.setUseEqualFrequency(true);
      instances0.add((Instance) binarySparseInstance1);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.889123342973809
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4);
      discretize0.setUseEqualFrequency(true);
      instances0.add((Instance) binarySparseInstance1);
      discretize0.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize0);
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      Attribute attribute0 = new Attribute("!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setUseEqualFrequency(true);
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize0);
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.793395096716282
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("7/!", "7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setInputFormat(instances0);
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      assertEquals(2.0, instances1.sumOfWeights(), 0.01);
      assertEquals("real-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances1.relationName());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.795338716182451
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("7/!", "7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance1);
      discretize0.setInputFormat(instances0);
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      assertEquals("real-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances1.relationName());
      assertEquals(2.0, instances1.sumOfWeights(), 0.01);
      assertTrue(discretize0.isNewBatch());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5204414653829543
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("All", 382);
      Attribute attribute1 = attribute0.copy("o3q#e:Z");
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("integer", arrayList0, 0);
      int int0 = 82;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(82);
      instances0.add((Instance) binarySparseInstance0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list0, locale_FilteringMode0);
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list1);
      Attribute attribute2 = new Attribute("All", list2, 382);
      instances0.setClass(attribute2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      try { 
        Filter.useFilter(instances0, discretize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class index: 382
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("7/!", "7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      DenseInstance denseInstance0 = new DenseInstance(4);
      instances0.add((Instance) denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      discretize0.setUseEqualFrequency(true);
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize0);
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute(")=X`");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 2);
      Discretize discretize1 = new Discretize("");
      discretize1.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize1);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-2004318069));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1556998843681323
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("7/!", "7/!");
      discretize0.setUseEqualFrequency(true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      arrayList0.trimToSize();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setInputFormat(instances0);
      discretize0.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize0);
      DenseInstance denseInstance0 = new DenseInstance(2);
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("7", "7");
      discretize0.setUseEqualFrequency(true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      discretize0.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize0);
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6900712281691477
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("numeric", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setInputFormat(instances0);
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      boolean boolean0 = discretize0.setInputFormat(instances1);
      assertFalse(boolean0);
      
      Instances instances2 = Filter.useFilter(instances1, discretize0);
      assertEquals(1, instances2.numInstances());
      assertEquals("numeric-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances2.relationName());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("7/!", "7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance0);
      instances0.setClass(attribute0);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      assertEquals(1.0, instances1.sumOfWeights(), 0.01);
      assertEquals("real-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances1.relationName());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8966806958552587
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("7/!", "7/!", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      DenseInstance denseInstance0 = new DenseInstance(1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-D";
      stringArray0[1] = "numeric";
      stringArray0[2] = ".arff";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8265512215693027
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("gc=", arrayList1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("$Revision: 8964 $", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      assertEquals("$Revision: 8964 $-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances1.relationName());
      assertEquals(1, instances1.numAttributes());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      instances0.setClass(attribute0);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      assertTrue(discretize0.isNewBatch());
      assertEquals("real-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances1.relationName());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0161202765633703
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("7/!", "7/!", protectedProperties1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.795810460988548
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      Attribute attribute0 = new Attribute("7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      SparseInstance sparseInstance0 = new SparseInstance(2106);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      instances0.add((Instance) sparseInstance2);
      discretize0.setInputFormat(instances0);
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      assertTrue(discretize0.isNewBatch());
      assertEquals(1.0, instances1.sumOfWeights(), 0.01);
      assertEquals("real-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances1.relationName());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8208079109865913
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setInputFormat(instances0);
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      Instances instances2 = Filter.useFilter(instances1, discretize0);
      assertEquals("real-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances2.relationName());
      assertEquals(1.0, instances2.sumOfWeights(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("7/!", "7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setInputFormat(instances0);
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      assertEquals("real-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances1.relationName());
      assertEquals(1, instances1.numInstances());
      
      discretize0.findNumBins(0);
      assertTrue(discretize0.isNewBatch());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0963152738859554
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("7/!", "7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1177);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1177
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0369008852318826
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("7/!", "7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      instances0.setClass(attribute0);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      try { 
        Filter.useFilter(instances0, discretize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '7/!' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("7/!", "7/!", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      assertEquals("real-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances1.relationName());
      assertEquals(1, instances1.numAttributes());
      
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.998526449546372
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("7/!", "7/!", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("7/!", "7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("7/!", "7/!", protectedProperties1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("numeric", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      assertEquals(1, instances1.numAttributes());
      assertEquals("numeric-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances1.relationName());
      
      DenseInstance denseInstance0 = new DenseInstance(1);
      discretize0.convertInstance(denseInstance0);
      assertTrue(discretize0.isNewBatch());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("7/!", "7/!", protectedProperties1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("7/!", "7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setInputFormat(instances0);
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      assertEquals(1, instances1.numInstances());
      assertEquals("real-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances1.relationName());
      
      discretize0.input(binarySparseInstance0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9378135424538416
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("7/!", "7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.clone();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("~rQPY,;{", 2699);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 244);
      discretize0.setInputFormat(instances0);
      DenseInstance denseInstance0 = new DenseInstance(1);
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      Attribute attribute0 = new Attribute("7/!", "7/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      
      String[] stringArray0 = new String[0];
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.7518685126965625
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize("Checking first version number against second constraint");
      int[] intArray0 = new int[1];
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.m_DefaultCols = "Checking first version number against second constraint";
      discretize0.setDesiredWeightOfInstancesPerInterval(5.70001);
      discretize0.setMakeBinary(false);
      SystemInUtil.addInputLine("@WoM2DGVG1-=V.");
      discretize0.setOutputFormat();
      discretize0.getInvertSelection();
      discretize0.listOptions();
      discretize0.getAttributeIndices();
      discretize0.listOptions();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals(5.70001, double0, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.909886099701744
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[35][9];
      int[] intArray0 = new int[1];
      intArray0[0] = 2145;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.m_CutPoints = doubleArray0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "JJXa5'ewtqyD9w";
      stringArray0[1] = "-M <num>";
      stringArray0[2] = "1{V";
      stringArray0[3] = ",il,AnW";
      stringArray0[4] = "-O";
      stringArray0[5] = "d{ay6A";
      discretize0.setOptions(stringArray0);
      discretize0.getRevision();
      boolean boolean0 = discretize0.getFindNumBins();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DiscretizeCols = null;
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.setInvertSelection(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9931268198966365
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("/!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize0);
      DenseInstance denseInstance0 = new DenseInstance(4);
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DiscretizeCols = null;
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.getInvertSelection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8003780070989173
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      discretize0.getBins();
      discretize0.getRevision();
      discretize0.binsTipText();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getOptions();
      assertEquals(0.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[35][9];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(79);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 79
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-B <num>";
      stringArray0[1] = "???";
      stringArray0[2] = "\"'V#>F_|ev1)`9";
      stringArray0[3] = "\"'V#>F_|ev1)`9";
      stringArray0[4] = "Unable to find the name of the package in the Description file for";
      stringArray0[5] = ";bWL";
      stringArray0[6] = "-M";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -M option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[12][9];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      discretize0.setIgnoreClass(true);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize("T%]..r");
      discretize0.setUseBinNumbers(true);
      discretize0.useEqualFrequencyTipText();
      discretize0.globalInfo();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.getFindNumBins();
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.getUseBinNumbers();
      Attribute attribute0 = new Attribute("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.");
      Attribute.typeToString(attribute0);
      Attribute.typeToString(attribute0);
      discretize0.isNewBatch();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize("X]..?f");
      discretize0.setAttributeIndices("X]..?f");
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(36);
      discretize0.getBinRangesString(36);
      boolean boolean0 = discretize0.getMakeBinary();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-M";
      stringArray0[1] = "_<p_ 7gu";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.toString();
      discretize0.setMakeBinary(false);
      discretize0.m_UseEqualFrequency = true;
      discretize0.setUseEqualFrequency(true);
      discretize0.setUseBinNumbers(false);
      discretize0.listOptions();
      discretize0.getUseEqualFrequency();
      SparseInstance sparseInstance0 = new SparseInstance(2649);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("$Kv.n8", list0, (-2581));
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute isn't relation-valued!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_UseEqualFrequency = true;
      String[] stringArray0 = discretize0.getOptions();
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals(7, stringArray0.length);
      assertTrue(discretize0.getFindNumBins());
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = new Discretize("_zdo#8dSn");
      int[] intArray0 = new int[0];
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.m_DefaultCols = "_zdo#8dSn";
      discretize0.setDesiredWeightOfInstancesPerInterval(5.70001);
      discretize0.setMakeBinary(false);
      SystemInUtil.addInputLine("_zdo#8dSn");
      discretize0.setOutputFormat();
      discretize0.getInvertSelection();
      discretize0.listOptions();
      discretize0.m_MakeBinary = false;
      discretize0.getAttributeIndices();
      discretize0.listOptions();
      assertEquals(5.70001, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5203497287815004
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[43][9];
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString(29);
      assertEquals("(-inf-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-inf)", string0);
      
      discretize0.getCutPoints(29);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-";
      stringArray0[1] = "";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      discretize0.getOptions();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("+!T%,", arrayList0, 576);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.convertInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setUseEqualFrequency(true);
      discretize0.setOutputFormat();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.321585437079472
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(6, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.attributeIndicesTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      discretize0.getCapabilities();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCapabilities();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getBinRangesString((-853));
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.makeBinaryTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals(10, discretize0.getBins());
      
      discretize0.setBins((-1));
      assertEquals((-1), discretize0.getBins());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getAttributeIndices();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("first-last", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setMakeBinary(true);
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = null;
      try {
        discretize1 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.invertSelectionTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.findNumBinsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.786456060735981
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[0];
      Discretize.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(5074);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getMakeBinary();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
  }
}
