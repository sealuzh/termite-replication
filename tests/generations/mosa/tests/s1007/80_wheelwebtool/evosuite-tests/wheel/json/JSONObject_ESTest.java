/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 03:16:44 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6561856615603068
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      Byte byte0 = new Byte((byte)69);
      jSONObject0.append("{m,o^BBX0.zoTR|", byte0);
      Short short0 = new Short((short) (-1818));
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("{m,o^BBX0.zoTR|");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("LVE(.:/q", object0);
      jSONObject1.put("LVE(.:/q", true);
      jSONObject1.getBoolean("LVE(.:/q");
      boolean boolean0 = jSONObject1.optBoolean("LVE(.:/q");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("b", (Collection) linkedList0);
      jSONObject0.getJSONArray("b");
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7632244150209984
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Double double0 = new Double(181.63109934);
      Double.isFinite(Double.NaN);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      Double double1 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double1, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      byte byte0 = (byte) (-2);
      Byte byte1 = new Byte((byte) (-2));
      hashMap0.put(object0, byte1);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONObject text must end with '}'";
      jSONObject0.optDouble("A JSONObject text must end with '}'");
      JSONObject.getNames(jSONObject0);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4369855674002663
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject((Object) "Substring bounds error");
      // Undeclared exception!
      jSONObject0.toString(531);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.putOpt("wheel.json.JSONObject@0000000001", (Object) null);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject@0000000001", boolean0);
      boolean boolean1 = jSONObject1.getBoolean("wheel.json.JSONObject@0000000001");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = JSONObject.valueToString(linkedList0, 16, 1095);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8760902794872374
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray1 = jSONArray0.put((Collection) linkedList0);
      jSONArray0.put((-1086L));
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      jSONObject0.toString((-205), (-205));
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000004\": [],\n\"java.lang.String@0000000006\": java.lang.Long@0000000005\n}");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray1 = jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      jSONObject0.toString((-205), (-205));
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000004\": []}");
      jSONObject0.keys();
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray0, jSONArray2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("tiS", (-2312.03998436));
      Object object0 = jSONObject0.opt("tiS");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("tiS", (Collection) linkedList0);
      JSONObject.getNames(object0);
      JSONObject jSONObject2 = jSONObject1.accumulate("tiS", "tiS");
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2195071176382815
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = Integer.getInteger("wheel.json.JSONException", 61);
      Double double0 = new Double(61);
      Double.min(61, 61);
      hashMap0.put(integer0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("7$K3w&$yp,@t#.B$", (-574.94663842));
      jSONObject0.optInt("7$K3w&$yp,@t#.B$");
      jSONObject0.getString("7$K3w&$yp,@t#.B$");
      try { 
        jSONObject0.getInt("java.lang.Double@0000000005");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Double@0000000005\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.267919633796747
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(2799.1382F);
      JSONObject jSONObject1 = new JSONObject(float0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject1, 793, 2638);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4006615899292156
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      jSONObject0.optJSONArray("{}");
      jSONObject1.optInt("{}", (-2098));
      jSONObject0.names();
      jSONObject1.length();
      try { 
        jSONObject0.getLong("put");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"put\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("NiR", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("NiR");
      assertNotNull(jSONArray0);
      
      jSONObject0.accumulate("NiR", jSONArray0);
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\r", (-1144.88013806));
      int int0 = jSONObject0.getInt("\r");
      assertEquals((-1144), int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6379940485425777
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 65, (-4464));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7385773559017519
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(61, (Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[61] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4355114169551446
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Tlb-", 70);
      String string0 = "z7E@-^";
      jSONObject1.accumulate("z7E@-^", jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject0.write(stringWriter0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{ykT*`>uN]-`&=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of {ykT*`>uN]-`&=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("m\"KX,B", "m\"KX,B");
      JSONObject.quote("IMON8XXG");
      Short short0 = new Short((short)34);
      JSONObject jSONObject1 = jSONObject0.append("m\"KX,B", short0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2817299301103127
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      jSONObject0.put("|\"$0g0#(5V1T_w(je", (Map) hashMap0);
      Double double0 = new Double(1404.6286818);
      JSONObject.numberToString(double0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("|\"$0g0#(5V1T_w(je");
      assertNotSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("!J]9", "!J]9");
      HashMap<Byte, Short> hashMap0 = new HashMap<Byte, Short>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("!J]9", jSONObject2);
      jSONObject1.toString(1882, 1882);
      JSONObject jSONObject3 = jSONObject0.getJSONObject("!J]9");
      assertNotSame(jSONObject0, jSONObject3);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Byte byte0 = new Byte((byte)95);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put("KI/", (Object) byte0);
      assertEquals(6, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("' and instead saw '", (Collection) linkedList0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5271646092980924
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      Object object0 = JSONObject.NULL;
      JSONObject.getNames((Object) "-]HHCd7>");
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-]HHCd7>", object0);
      jSONObject0.get("-]HHCd7>");
      jSONObject0.accumulate("-]HHCd7>", float0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject1.put("-]HHCd7>", (Map) hashMap0);
      boolean boolean0 = jSONObject0.has("-]HHCd7>");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8008440171076106
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".", 4L);
      Long long0 = new Long(4L);
      jSONObject0.getDouble(".");
      jSONObject1.optBoolean(".");
      String string0 = jSONObject1.toString(44);
      assertNotNull(string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5729723957678976
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has(".");
      JSONObject jSONObject1 = jSONObject0.put(".", 0L);
      jSONObject1.optDouble(".");
      JSONObject.valueToString(".");
      Long long0 = new Long(0L);
      jSONObject0.remove("\"java.lang.String@0000000002\"");
      jSONObject0.optLong(".");
      try { 
        jSONObject0.getJSONObject(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1567857046278536
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "J|M$1eOZ7M&=qAcG");
      JSONObject jSONObject1 = jSONObject0.put("J|M$1eOZ7M&=qAcG", 1L);
      jSONObject1.putOpt("J|M$1eOZ7M&=qAcG", "J|M$1eOZ7M&=qAcG");
      try { 
        jSONObject1.getDouble("J|M$1eOZ7M&=qAcG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"J|M$1eOZ7M&=qAcG\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.105029631334913
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.put((Collection) null);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("isnuberToStrng", (-3156.2));
      double double0 = jSONObject1.optDouble("isnuberToStrng");
      assertEquals((-3156.2), double0, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.2413196271736995
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".", 0L);
      Long long0 = new Long(0L);
      jSONObject0.getDouble(".");
      boolean boolean0 = jSONObject1.optBoolean(".");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5889589595572513
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[3] = "-]HHCd7>";
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.put((Collection) null);
      Object object0 = new Object();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("}ALR~%", (-3156.2));
      jSONObject1.optDouble("getlength");
      jSONObject0.toString((-1), (-1));
      String string0 = jSONObject0.optString("*O)'Rk0`r#bPTeI", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.799206038837367
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("is", (-1435L));
      jSONObject1.optLong("is");
      jSONObject0.getLong("is");
      String[] stringArray0 = new String[9];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.testValidity(jSONObject2);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.3745534488352
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject1 = jSONObject0.put("Fha]", (-447.9606265959674));
      jSONObject1.optDouble("Fha]", 232.108);
      jSONObject1.isNull("Fha]");
      String string0 = " of ";
      try { 
        jSONObject1.getBoolean(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.292073148554951
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("su", 4196);
      jSONObject0.optDouble("su");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5952629603288853
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.732515388661742
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONArray jSONArray1 = jSONArray0.put((Collection) null);
      Object object0 = new Object();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      JSONObject jSONObject1 = jSONObject0.put("-]HHCd7>", (-447.26051));
      JSONObject.numberToString(float0);
      jSONObject0.toString(0);
      jSONObject1.put("-]HHCd7>", (long) 0);
      jSONObject1.getLong("-]HHCd7>");
      JSONObject jSONObject2 = jSONObject0.accumulate("{\n\"java.lang.String@0000000004\": [],\n\"java.lang.String@0000000005\": java.lang.Double@0000000006\n}", jSONArray0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("] is not a JSONArray.");
      jSONObject0.putOpt("] is not a JSONArray.", boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject0.getBoolean("] is not a JSONArray.");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5063874375065844
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("Mv/X!w0')N4;@lfH7W", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.214349432881345
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("", hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("!J]9", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(83);
      jSONObject1.write(stringWriter0);
      double double0 = jSONObject0.optDouble("getreplaceFirst");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("xl,");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.048844359649284
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8298249359591239
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("CZq", (-1272.104758));
      jSONObject0.getDouble("CZq");
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.038009341005529
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1583);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.4028846385132387
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("0", 1L);
      Object object0 = new Object();
      int int0 = 9;
      jSONObject0.toString(1520, 9);
      jSONObject1.toString(903, 8);
      String string0 = "] is not a JSONArray.";
      JSONObject.quote("] is not a JSONArray.");
      JSONTokener jSONTokener0 = new JSONTokener("0");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1071024035889305
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt(",]4D_?K9jL", jSONObject0);
      try { 
        jSONObject0.getBoolean(",]4D_?K9jL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",]4D_?K9jL\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("0", (Object) "0");
      try { 
        jSONObject1.append("0", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[0] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(34, 34);
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject2 = new JSONObject("{}");
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.964293467729211
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString((-28746850), 2147483645);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6457928323748754
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("}l(W9+E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }l(W9+E
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("toS", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.8853198923166263
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull((String) null);
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.4150636132496262
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "e<");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.403262956966149
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "int");
      jSONObject0.optLong("int", 0L);
      JSONObject jSONObject1 = jSONObject0.put("int", 1L);
      jSONObject1.put(",:]}/\"[{;=#", 0L);
      jSONObject0.optString("int", "int");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject2 = jSONObject0.put("java.lang.Long@0000000021", (Map) hashMap0);
      try { 
        jSONObject2.getJSONObject("`r)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`r)\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.578147389135067
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("0", object0);
      jSONObject1.keys();
      String string0 = jSONObject0.optString("0");
      assertNotNull(string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toString(43, 43);
      jSONObject0.toJSONArray(jSONArray0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "{";
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      jSONArray0.toJSONObject(jSONArray0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{GNjBaV7`9t5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 14 of {GNjBaV7`9t5
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.put("isintern", object0);
      JSONTokener jSONTokener0 = new JSONTokener("g[|rzTLe~1e KL<}dZ");
      String string0 = jSONObject0.getString("isintern");
      assertNotNull(string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.7448735835681599
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "T}1t");
      try { 
        jSONObject0.put((String) null, (Object) "T}1t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\t", (Object) "\t");
      try { 
        jSONObject0.getJSONArray("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("A JSONObject text must end with '}'", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.7206518319389303
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.put((Collection) null);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray1);
      jSONObject0.optInt("+S`B@rU-/4LHthuwO", 0);
      boolean boolean0 = jSONObject0.has("+S`B@rU-/4LHthuwO");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("m),+^ZdAhO,2UH\"");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.9525864517434668
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("A[Tc/m'E", "A[Tc/m'E");
      jSONObject1.get("A[Tc/m'E");
      try { 
        jSONObject0.getBoolean("A[Tc/m'E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A[Tc/m'E\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Byte byte0 = new Byte((byte)98);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 4256, 121);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.5094656225315988
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "getlongBitsToDouble";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.3350026060706126
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("!5sji.rt1MlSR.i\u0001", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-622), 125);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[", false);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      try { 
        jSONObject0.put("{}", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\t";
      JSONObject jSONObject1 = jSONObject0.put("\t", (Object) "\t");
      try { 
        jSONObject1.getInt("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.9853278202731631
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "l@MIJOew[T|iny");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("q%V~R[0=:}R6", (-1885));
      assertEquals((-1885), int0);
      
      String string0 = jSONObject0.toString(92);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.027242060013438
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt(")T", 16);
      assertEquals(16, int0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.7911998103932196
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(2692.152505539015);
      hashMap0.put((Double) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "r*m=2hW0#6G47WD";
      int int0 = (-812);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-812), 2448);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.8184506609563127
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0, 1, (-3782));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.8121790402101223
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("getcopyValueOf", hashMap0);
      jSONObject0.toString((-2378), (-2378));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.9236348607016178
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "~[4V#xf2h!b!%[~");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
      
      double double0 = jSONObject0.optDouble("~[4V#xf2h!b!%[~");
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = JSONObject.quote("~[4V#xf2h!b!%[~");
      assertEquals("\"~[4V#xf2h!b!%[~\"", string0);
      
      String string1 = jSONObject0.optString("~[4V#xf2h!b!%[~", "] is not a JSONArray.");
      assertEquals("] is not a JSONArray.", string1);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject.quote("J`x/IR63z{;;xZB");
      Long long0 = new Long((-680L));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.optString("\"\"", "");
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("tiS");
      assertNull(object0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("*c[n=z7VIVGcVn`g");
      assertEquals("", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("toS", (-2741.6));
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString((Object) null, 125, 125);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-3125), (-3125));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("wheel.json.JSONArray", (-82L));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("4w \"\" R/h|bDi%x.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4w \\\"\\\" R/h|bDi%x.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.2739580694777835
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(59, 59);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.5249311748495913
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0.00", 1.0);
      int int0 = jSONObject1.optInt("0.00");
      assertEquals(1, int0);
      
      boolean boolean0 = jSONObject1.isNull("0.00");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.5298641740510206
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "jo");
      jSONObject0.toString((-50546690));
      jSONObject0.optJSONArray("jo");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = JSONObject.quote("SzI/)");
      assertEquals("\"SzI/)\"", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = JSONObject.quote("ri)auS6C&_<8/");
      assertEquals("\"ri)auS6C&_<8/\"", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("&X2Y]pxM3d2V;|rZ$=");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      assertTrue(hashMap0.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("0.00", 1.0);
      assertEquals(1, jSONObject0.length());
      
      int int0 = jSONObject0.getInt("0.00");
      assertEquals(1, int0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("0.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0.0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer integer0 = new Integer(1427);
      String string0 = JSONObject.valueToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Double double0 = new Double((-42817976));
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has(".");
      String string0 = JSONObject.doubleToString(0L);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.9813355000843629
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "T}1t";
      JSONObject jSONObject1 = jSONObject0.put("T}1t", (Object) "T}1t");
      try { 
        jSONObject1.getLong("T}1t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"T}1t\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("!J]9", "!J]9");
      jSONObject1.toString(1882, 1882);
      try { 
        jSONObject0.getJSONObject("!J]9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!J]9\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.4192361461924854
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "T}1t");
      jSONObject0.put("T}1t", (Object) "T}1t");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.004822822698641
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("op", "\\1?i");
      jSONObject1.remove("op");
      try { 
        jSONObject1.getBoolean("op");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"op\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("a?Q\"Q'0b#eAkv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"a?Q\\\"Q'0b#eAkv\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("cU");
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("{}", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("V4qkc@3WuGkOWQ+");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("getoptJSONObject", 1166.398);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      assertTrue(hashMap0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.189002309590893
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.valueToString(jSONObject1, (-2954), 1063);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Integer integer0 = new Integer(2274);
      String string0 = JSONObject.valueToString(integer0, 2274, 2274);
      assertNotNull(string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.2103209597031823
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "jo");
      JSONObject.valueToString(jSONObject0, 1097, 1097);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("?o@3$(6,-SeC7sKj##V");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Float float0 = new Float((-469.27283F));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.1983857508370273
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2739.48572);
      assertEquals("2739.48572", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("Bad value from toJSONString: ");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Bad value from toJSONString: 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(" of ", 1064L);
      assertEquals(1064L, long0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.617051411355598
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("wheel.json.JSONObject$Null", 0L);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
      
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g}Hku/Q8z+]");
      try { 
        jSONObject0.getJSONObject("g}Hku/Q8z+]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g}Hku/Q8z+]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("wheel.json.JSONObject$Null");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("kQb)gyLip>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of kQb)gyLip>
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
