/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 03:22:15 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-2147483648L));
      Range range0 = range_Builder1.build();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.7815292558497933
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775807L));
      Range range1 = Range.of(3942L);
      long long0 = range0.getEnd();
      //  // Unstable assertion: assertEquals(9223372036854775807L, long0);
      
      List<Range> list0 = range0.complement(range0);
      // Undeclared exception!
      try { 
        range1.complementFrom(list0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 3942, -9223372036854775807 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.868493653572729
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of((-25L), 1717L);
      Range range1 = Range.of(127L);
      range1.spliterator();
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.6742695420709404
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(1518L, 2109L);
      boolean boolean0 = range0.startsBefore(range1);
      Range range2 = Range.of(1744L);
      range1.split(1744L);
      boolean boolean1 = range2.equals(range1);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 367L, 367L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.9705881425414558
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of((-1L), 1717L);
      Range range1 = Range.of(127L);
      range1.spliterator();
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.785835145081531
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775798L, 9223372036854775798L);
      Range range1 = Range.of(9223372036854710273L);
      range0.equals(range1);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.contains(range1));
      
      Range range2 = Range.of(9223372036854710273L);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3132129167647393
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(4294967292L, 4294967292L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.690731070842713
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of((-2L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(range0);
      Range range1 = Range.of((-2L));
      // Undeclared exception!
      try { 
        range1.split((-2L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2692774639616355
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 124L, 4294967295L);
      Object object0 = new Object();
      range0.spliterator();
      Range range1 = Range.ofLength(4294967295L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      
      range0.equals((Object) null);
      assertSame(range0, range2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertFalse(range1.equals((Object)range0));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.203099706052705
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775790L), (-9223372036854775790L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775790L), (-9223372036854775790L));
      range1.iterator();
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.984677397151596
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775807L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-9223372036854775807L));
      range0.forEach(consumer0);
      Range range1 = Range.of((-9223372036854775807L));
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775807L), (-9223372036854775807L));
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.134384432418997
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      String string0 = range1.toString();
      assertEquals("[ -2147483649 .. -2147483649 ]/0B", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.7112698155907093
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.spliterator();
      Range range1 = Range.of((-1030L), (-1030L));
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1030 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0614528539650343
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 124L, 9223372036854567116L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.7958101722880304
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(2382L, 65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 65535L);
      range1.getLength();
      Range range2 = Range.of(2382L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      List<Range> list0 = range0.split(900L);
      Range range3 = Range.of(65535L);
      range2.equals(range3);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range1));
      
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list1.contains(range1));
      //  // Unstable assertion: assertTrue(list1.contains(range2));
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list1.size());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.133562824120753
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(65535L);
      long long0 = range0.getEnd();
      assertEquals(65535L, long0);
      
      Object object0 = new Object();
      Range range1 = Range.of(1684L, 65535L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.of(4294967295L, 4294967295L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 4294967295L, 4294967295L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of((-1373L));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.4505716377756777
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(124L);
      Range.of(0L);
      List<Range> list0 = range0.split(1L);
      assertEquals(1, list0.size());
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.758069541638999
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(2987L, 2987L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 65382L);
      long long0 = range1.getLength();
      assertEquals(65383L, long0);
      
      Range range2 = Range.of(0L);
      List<Range> list0 = range1.split(900L);
      Range.of(0L);
      range2.equals(range0);
      List<Range> list1 = range2.complementFrom(list0);
      assertEquals(2, list1.size());
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 5057L, 5057L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.352594304015109
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.of((-2523L), (-2523L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-2523L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2524 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.6007610673944224
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(10L);
      long long0 = range0.getBegin();
      assertEquals(10L, long0);
      
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      Range range1 = Range.of(10L, 1470L);
      boolean boolean1 = range0.isSubRangeOf(range1);
      range0.equals(range1);
      boolean boolean2 = range1.equals(range0);
      assertFalse(boolean2 == boolean1);
      
      range1.split(2056L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.38560985313426
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 369L, 369L);
      Range range1 = Range.of(369L, 369L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2662596083157305
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.of(65535L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(425L, 425L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9772143420956936
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(2987L, 9223372036854775425L);
      String string0 = range0.toString();
      assertEquals("[ 2987 .. 9223372036854775425 ]/0B", string0);
      
      Object object0 = new Object();
      range0.equals("[ 2987 .. 9223372036854775425 ]/0B");
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.201877361596037
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 367L, 2147481062L);
      Range.ofLength(367L);
      range0.equals((Object) null);
      Object object0 = new Object();
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 367L, 367L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-2147483648L));
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.2660952157462746
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.of(4626L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.5097171458389216
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of((-73L), 129L);
      Range range1 = Range.of((-3715L));
      range0.startsBefore(range1);
      Object object0 = new Object();
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(4294967295L, long0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.06633045170451
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 367L, 2147481062L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = 124L;
      Range range0 = Range.of(124L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.5649962932819212
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = 124L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 124L, 124L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      List<Range> list0 = range0.split(65535L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.2020106856041037
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 391L, 391L);
      range0.toString(range_CoordinateSystem0);
      range0.toString();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.4890302461642184
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getBegin();
      Object object0 = new Object();
      Range range1 = Range.of(0L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      range0.intersection(range1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.798311588720541
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.of(2147483647L);
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(2147483647L);
      Object object0 = new Object();
      range0.equals(range1);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.5587206027727807
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(9223372036854775807L);
      Range range2 = Range.of(9223372036854775807L);
      range0.intersection(range2);
      range0.forEach(consumer0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      range1.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, (-3124L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3125 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-2229L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2229 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = 1717L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.846364757572862
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-1L));
      Range range1 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
      
      String string0 = range0.toString();
      assertEquals("[ -32768 .. -2 ]/0B", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.4407893441299437
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.ofLength(124L);
      Range range1 = Range.of((-2147483648L));
      boolean boolean0 = range1.endsBefore(range0);
      assertTrue(boolean0);
      
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(255L, 4294967295L);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.086870484872592
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = new Object();
      Range.of((-570L), 9223372036854772937L);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.607583110255917
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(479L);
      boolean boolean0 = range1.startsBefore(range0);
      assertTrue(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(4294967320L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      boolean boolean0 = range1.equals(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.ofLength(255L);
      range0.equals(range1);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.4619929911398497
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of((-3658L), (-3658L));
      Range range1 = Range.ofLength(1604L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        range1.split((-3658L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.360531095373739
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(3862L);
      range0.getEnd();
      Range range1 = Range.of((-3236L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.1365697674262036
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775807L));
      Range range1 = Range.of((-9223372036854775807L));
      range1.endsBefore(range0);
      long long0 = range1.getEnd();
      //  // Unstable assertion: assertEquals(9223372036854775807L, long0);
      
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.9202327504580285
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-1258L), 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 10L, 1586L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.1850190476653264
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775392L);
      Range range1 = Range.of(9223372036854775392L);
      range0.isSubRangeOf(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = new Long(9223372036854775392L);
      assertEquals(9223372036854775392L, long0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.38560985313426
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(2987L, 2987L);
      String string0 = range0.toString();
      assertEquals("[ 2987 .. 2987 ]/0B", string0);
      
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 2987 .. 2987 ]/0B", range_CoordinateSystem0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.2674340830645234
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 391L, 391L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 391 .. 391 ]/SB", string0);
      
      Range range1 = Range.parseRange("[ 391 .. 391 ]/SB");
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.2015566946087035
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(5215L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.1054900845732494
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 65535L, 65535L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.3292763361822004
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(0L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.split(2382L);
      assertFalse(list0.contains(range0));
      assertTrue(list0.contains(range1));
      
      Range range2 = Range.of(0L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.676299444383034
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(2147483647L);
      range0.complement(range1);
      Range.of(4294967295L);
      // Undeclared exception!
      try { 
        Range.ofLength((-409L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.1356178217257975
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.8943987693018673
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-3658L), (-3658L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of((-3658L), (-3658L));
      Range range2 = Range.of((-1448L), (-1448L));
      range2.equals(range1);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-3658L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.589743752059613
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-1717L));
      Range range1 = Range.of((-1717L), 2264L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range1));
      assertEquals(0, list1.size());
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.5873928183218178
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(0L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.intersects(range1);
      long long1 = range1.getEnd();
      assertEquals((-1L), long1);
      
      Range range2 = Range.of((-1L), 952L);
      range2.isSubRangeOf(range1);
      boolean boolean1 = range2.equals((Object) null);
      assertFalse(boolean1);
      
      boolean boolean2 = range0.isEmpty();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.3268842301321655
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-56L), (-56L));
      Range.of(9223372036854775807L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.893586318674525
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-461L));
      Range range1 = Range.of((-2771L));
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        range0.split((-461L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-942L));
      boolean boolean0 = range0.equals("_}JnuHK;BYz}$w6");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.419926894153205
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.ofLength(10L);
      Range.of(10L, 498L);
      range0.intersects(range0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.443192096373423
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(2382L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(2572L);
      range0.equals(range1);
      List<Range> list0 = range1.complement(range0);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.206821699873709
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(9223372036854773992L);
      Range range1 = Range.of(9223372036854773992L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertSame(range1, range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.7931511307298944
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.intersects(range0);
      // Undeclared exception!
      try { 
        range0.split((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(124L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.387669055193462
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-347L));
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.386554964003035
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(124L);
      Range range1 = Range.of((-9223372036854775323L));
      List<Range> list0 = range1.complement(range0);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.startsBefore(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.06633045170451
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-356L), 1L);
      long long0 = range0.getLength();
      assertEquals(358L, long0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-672L), (-672L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.534623243969917
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of((-73L), 130L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.2702190539933356
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getBegin();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range range1 = Range.of(0L, 1478L);
      range0.isSubRangeOf(range1);
      assertNotSame(range1, range0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.toString();
      Range range2 = Range.of(130L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 0L, 1478L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range2.getBegin(range_CoordinateSystem2);
      assertEquals(131L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range2.toString(range_CoordinateSystem3);
      assertEquals("[ 130 .. 131 ]/SB", string0);
      
      Range range3 = range_Builder1.build();
      assertNotSame(range3, range0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.301586756692573
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 65536 .. 65536 ]/RB", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.1452865341093443
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.ofLength(1793L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-782L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.0543110595891974
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.of(0L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Zero Based", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of((-73L), 130L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.181672696269445
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.ofLength(2399L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      //  // Unstable assertion: assertEquals(2399L, long0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.129253408046631
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      range_Builder1.expandEnd((-1L));
      range0.getBegin();
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(0L, (-1744L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.184349782415832
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(65535L);
      range0.getBegin();
      long long0 = range0.getEnd();
      assertEquals(65535L, long0);
      
      range0.split(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.30273127777412
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2523L), (-2523L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.330264478399572
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = range0.asRange();
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.06633045170451
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.855953326723654
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(32767L);
      List<Range> list0 = range0.split(32767L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertTrue(list1.isEmpty());
      assertEquals(1, list0.size());
      
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.4419999547761964
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(144L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.20243222357412
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range range0 = Range.of(1240L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.3274662176194347
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder1.expandEnd((-1L));
      range_Builder1.expandBegin(0L);
      range_Builder1.expandBegin(0L);
      range_Builder1.expandEnd((-1L));
      range_Builder1.contractBegin((-2804L));
      range_Builder2.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(55L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.3540755133711526
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2399L, 2399L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2147483647L);
      range_Builder0.contractEnd((-1779L));
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.0749993980812604
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372036854775191L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-32767L), long0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 367L, 367L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = range0.asRange();
      //  // Unstable assertion: assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.0646924500665085
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.354100214318228
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(367L, 367L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.1470823338168756
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647L, long0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-356L), (-356L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-356L), long0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      // Undeclared exception!
      try { 
        range0.split((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      List<Range> list0 = range0.split(65535L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of((-3658L), (-3658L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of((-830L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getEnd();
      long long0 = range0.getEnd();
      //  // Unstable assertion: assertEquals((-1L), long0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of((-237L));
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals((-237L), long0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.112227645912027
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.ofLength(124L);
      range0.getBegin();
      Object object0 = new Object();
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.ofLength(1492L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.299145180131708
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of(2504L, 2504L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.3346959524909843
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775807L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.691848233250198
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of((-1789L));
      Range range1 = Range.of((-32768L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1789L), long0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.2671143019073328
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of(4294967269L, 4294967269L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.1860594162939453
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of((-32760L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-3951L), 2147483647L);
      // Undeclared exception!
      try { 
        range0.split((-3951L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.3037208868785237
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775794L);
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.472229694553638
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      //  // Unstable assertion: assertFalse(list1.isEmpty());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-2147483648L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-2147483662L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2147483647L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-366L), 127L);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.0749993980812604
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-2147483648L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(130L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.1396664047217486
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of(24L);
      String string0 = range0.toString();
      assertEquals("[ 24 .. 24 ]/0B", string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.4419999547761964
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of(124L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.2028955619269524
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(1032L);
      Range range0 = range_Builder0.build();
      range_Builder0.contractEnd(1032L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = Range.of((-1840L), (-1840L));
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.of(852L, 852L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.0538382463504266
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("1s_[@n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 1s_[@n into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
