/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 02:36:24 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.Classifier;
import weka.classifiers.ConditionalDensityEstimator;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGDText;
import weka.classifiers.lazy.KStar;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.RandomForest;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.TextDirectoryLoader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      m5Rules0.getCapabilities();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LMT lMT0 = new LMT();
      double double0 = evaluation0.m_Unclassified;
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderPRC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9907867545761526
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(928.2069895315236, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.94092672206472
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = new Capabilities(m5Rules0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      m5Rules0.getOptions();
      testInstances0.generate((String) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.weightedAreaUnderROC();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@data";
      stringArray0[1] = "@data";
      stringArray0[2] = ".bsi";
      testInstances0.setOptions(stringArray0);
      evaluation0.numTruePositives(1);
      evaluation0.errorRate();
      evaluation0.weightedRecall();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.addNumericTrainClass((-4041.8), 4564.2040764624935);
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = '[';
      evaluation0.num2ShortID(3854, charArray0, 0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5996894691164356
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelation(".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      evaluation0.m_NumClasses = (-1);
      evaluation0.SFEntropyGain();
      evaluation0.numFalsePositives((-1));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6880977349206847
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = (double) (-2);
      doubleArray1[5] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) (-2);
      doubleArray2[3] = (double) (-2);
      doubleArray2[4] = (double) (-1);
      doubleArray2[5] = (double) (-1);
      doubleArray0[1] = doubleArray2;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      evaluation0.unweightedMicroFmeasure();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      evaluation0.falseNegativeRate(26);
      evaluation0.areaUnderPRC(26);
      evaluation0.numFalseNegatives((-2));
      try { 
        Evaluation.evaluateModel((Classifier) cVParameterSelection0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.CVParameterSelection:
         // 
         // -X <number of folds>
         // \tNumber of folds used for cross validation (default 10).
         // -P <classifier parameter>
         // \tClassifier parameter options.
         // \teg: \"N 1 5 10\" Sets an optimisation parameter for the
         // \tclassifier with name -N, with lower bound 1, upper bound
         // \t5, and 10 optimisation steps. The upper bound may be the
         // \tcharacter 'A' or 'I' to substitute the number of
         // \tattributes or instances in the training data,
         // \trespectively. This parameter may be supplied more than
         // \tonce to optimise over several classifier options
         // \tsimultaneously.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.289344010290857
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Utils.SMALL = (double) (-1);
      evaluation0.weightedFMeasure();
      evaluation0.SFEntropyGain();
      evaluation0.toClassDetailsString(".arff");
      evaluation0.weightedAreaUnderROC();
      evaluation0.toSummaryString();
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.updateStatsForPredictor(Double.NaN, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.067094546561575
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.unweightedMicroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      TestInstances testInstances0 = new TestInstances();
      Evaluation.handleCostOption("", (-1));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.321886434331756
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2264520311596105
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.weightedFalsePositiveRate();
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.913737189449991
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LMT lMT0 = new LMT();
      double double0 = evaluation0.m_Unclassified;
      // Undeclared exception!
      try { 
        evaluation0.trueNegativeRate(16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1777486156207164
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.weightedRecall();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFPriorEntropy();
      evaluation0.avgCost();
      RandomForest randomForest0 = new RandomForest();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) randomForest0, instances0, objectArray0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1777486156207164
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.SFMeanSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.precision((-2212));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1819194199901304
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.setPriors(instances0);
      evaluation0.errorRate();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(2265);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Bagging bagging0 = new Bagging();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBInformation();
      double double0 = evaluation1.m_TotalCost;
      evaluation0.m_ClassIsNominal = false;
      evaluation1.recall((-926));
      evaluation1.equals(evaluation0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.763097600310429
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(true);
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.incorrect();
      evaluation0.priorEntropy();
      double double0 = evaluation0.m_MaxTarget;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Py1DR");
      evaluation0.trueNegativeRate(0);
      evaluation0.SFEntropyGain();
      evaluation0.matthewsCorrelationCoefficient((-1));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1267102467261854
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = new Capabilities(m5Rules0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      ConverterUtils.DataSource.read(".arff");
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4965034965034965
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      m5Rules0.setMinNumInstances((-1));
      evaluation0.SFMeanPriorEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_SumSqrClass = (-5485.9746);
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation2.toClassDetailsString("@relation");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.407098420221564
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JRip jRip0 = new JRip();
      Capabilities capabilities0 = jRip0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumClasses(567);
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = new Instances(instances0);
      KStar kStar0 = new KStar();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      evaluation0.matthewsCorrelationCoefficient((-1900));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.rootRelativeSquaredError();
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.m_SumClass;
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1573444861112994
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(68);
      double double0 = evaluation0.numFalseNegatives((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.falseNegativeRate(0);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.600557702137739
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      evaluation0.SFMeanPriorEntropy();
      instances0.remove((Object) evaluation0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3943450341527925
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!cY&)-mI<,#7iLJ4>A4");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.priorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Integer integer0 = new Integer((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedFMeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.0734736492244985
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.toClassDetailsString(".arff");
      ConditionalDensityEstimator conditionalDensityEstimator0 = null;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(74);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      sparseInstance0.copy();
      Vote vote0 = new Vote();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) vote0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8274298134548794
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.setNumericPriorsFromBuffer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.numFalseNegatives(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = (-1.7976931348623157E308);
      SparseInstance sparseInstance0 = null;
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((SparseInstance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.4849734755987374
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@data";
      TextDirectoryLoader.main(stringArray0);
      evaluation0.setNumericPriorsFromBuffer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      Evaluation.makeOptionString(serializedClassifier0, false);
      evaluation0.numFalseNegatives(11);
      evaluation0.equals((Object) null);
      // Undeclared exception!
      try { 
        evaluation0.falsePositiveRate(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.924515455701917
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = new Capabilities(m5Rules0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-2));
      evaluation0.weightedFMeasure();
      evaluation0.incorrect();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluateModelOnce(0.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4290745585762754
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = new Capabilities(m5Rules0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@data";
      TextDirectoryLoader.main(stringArray0);
      evaluation0.setNumericPriorsFromBuffer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      Evaluation.makeOptionString(serializedClassifier0, true);
      double double0 = evaluation0.numFalseNegatives(11);
      boolean boolean0 = evaluation0.equals((Object) null);
      assertFalse(boolean0);
      
      double double1 = evaluation0.falsePositiveRate(1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[7];
      TextDirectoryLoader.main(stringArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      evaluation0.truePositiveRate(1);
      evaluation0.confusionMatrix();
      try { 
        evaluation0.updateStatsForPredictor(1462.6, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.updateStatsForPredictor((-1), instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.449661528163401
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-2));
      evaluation0.weightedFMeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.fMeasure((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.4696072829762055
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      Evaluation evaluation1 = new Evaluation(instances0);
      Integer integer0 = new Integer((-1800580277));
      double double1 = evaluation0.fMeasure((-1800580277));
      double double2 = evaluation1.falsePositiveRate((-1800580277));
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(4414.812191594, 901.668413667926);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.areaUnderROC(2);
      double double1 = evaluation0.falseNegativeRate(2147483645);
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9847703865999269
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[7];
      Bagging bagging0 = new Bagging();
      evaluation0.evaluateModel((Classifier) bagging0, instances0, (Object[]) stringArray0);
      textDirectoryLoader0.setRetrieval((-1127281206));
      stringArray0[0] = ".arff";
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.addNumericTrainClass(0.0, 0.0);
      LWL lWL0 = new LWL();
      Capabilities capabilities0 = lWL0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("@data");
      try { 
        evaluation1.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.17421187273883
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      evaluation0.weightedAreaUnderPRC();
      double double0 = evaluation0.unclassified();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.numTruePositives((-2));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.648194810830298
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-2));
      evaluation0.weightedFMeasure();
      testInstances0.setNumInstances(1160134845);
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (double) (-2);
      doubleArray1[2] = 1.0E-8;
      doubleArray1[3] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      evaluation0.incorrect();
      // Undeclared exception!
      try { 
        evaluation0.weightedFalseNegativeRate();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1840562714690361
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.rootRelativeSquaredError();
      try { 
        evaluation0.toMatrixString("@data");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1846726042887588
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      Evaluation.makeOptionString(m5Rules0, true);
      evaluation0.makeDistribution((-1));
      Random.setNextRandom((-2));
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = new Capabilities(m5Rules0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      capabilities0.disableAllClasses();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setOptions(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.truePositiveRate(0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation1.toMatrixString("minNoTipText");
      assertEquals("minNoTipText\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6828558067063368
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate((-2));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.setPriors(instances0);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6339012696788378
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.rootRelativeSquaredError();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.toMatrixString("[NeuralNetwork] Should be just one NeuralOutputs element defined!");
      evaluation0.numTrueNegatives(0);
      evaluation0.falseNegativeRate((-1804));
      evaluation0.SFMeanEntropyGain();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(1, testInstances0.getSeed());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.998932348535748
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.toClassDetailsString(".arff");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(74);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      evaluation0.toMatrixString("@data");
      evaluation0.numTrueNegatives(74);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = new Capabilities(m5Rules0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.numFalsePositives((-1));
      assertEquals(0.0, double2, 0.01);
      
      double[] doubleArray0 = evaluation0.makeDistribution(0.0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      boolean boolean0 = evaluation0.equals((Object) null);
      assertFalse(boolean0);
      
      double double0 = evaluation0.m_SumPriorAbsErr;
      double double1 = evaluation0.KBInformation();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = new Capabilities(m5Rules0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFMeasure();
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.840650912953662
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = new Capabilities(m5Rules0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.rootRelativeSquaredError();
      evaluation0.sizeOfPredictedRegions();
      String string0 = evaluation0.toMatrixString("@data");
      assertEquals("@data\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double0 = evaluation0.numTrueNegatives((-2));
      double double1 = evaluation0.falseNegativeRate(46);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.SFMeanEntropyGain();
      assertNotEquals(double2, double0, 0.01);
      
      evaluation0.getHeader();
      double double3 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1815192735832012
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Bagging bagging0 = new Bagging();
      Capabilities capabilities0 = bagging0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.rootRelativeSquaredError();
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toMatrixString("@relation");
      assertEquals("@relation\n a b c d   <-- classified as\n 0 0 0 0 | a = class1\n 0 0 0 0 | b = class2\n 0 0 0 0 | c = class3\n 0 0 0 0 | d = class4\n", string0);
      
      instances0.compactify();
      double double1 = evaluation0.numTrueNegatives(9);
      evaluation0.falseNegativeRate((-1));
      evaluation0.precision(1);
      evaluation0.confusionMatrix();
      double double2 = evaluation0.falseNegativeRate(118);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = new Capabilities(m5Rules0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-2));
      evaluation0.weightedFMeasure();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      try { 
        evaluation0.evaluateModel((Classifier) null, instances0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.7021911756418975
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toClassDetailsString("main");
      assertEquals("main\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.toMatrixString("main\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n");
      evaluation0.weightedTrueNegativeRate();
      evaluation0.areaUnderROC(1851);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      M5Rules m5Rules0 = new M5Rules();
      Evaluation.makeOptionString(m5Rules0, true);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.7113776992819467
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFMeasure();
      evaluation0.SFEntropyGain();
      double double1 = evaluation0.numFalsePositives((-1));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedTruePositiveRate();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource1.nextElement(instances0);
      evaluation0.updateStatsForPredictor(1.0, instance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.errorRate();
      evaluation0.setPriors(instances0);
      evaluation0.errorRate();
      assertEquals(1.0, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      JRip jRip0 = new JRip();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.4268389992053856
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFEntropyGain();
      // Undeclared exception!
      try { 
        evaluation1.recall(122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 122
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      double[] doubleArray0 = new double[7];
      evaluation0.m_TrainClassVals = doubleArray0;
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      doubleArray0[3] = (double) 6;
      doubleArray0[5] = 2.6796299437727193;
      evaluation0.updateMargins(doubleArray0, 6, 6.0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      double double0 = evaluation0.m_SumKBInfo;
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.542651527252255
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toClassDetailsString("@data");
      assertEquals("@data\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedPrecision();
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.337827080898473
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.weightedMatthewsCorrelation();
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      ArffLoader arffLoader0 = new ArffLoader();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) multilayerPerceptron0, (Instance) binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) sGDText0, (Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4.9E-324;
      doubleArray0[1] = (-3233.57209797356);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      double[] doubleArray1 = new double[0];
      try { 
        evaluation0.updateStatsForClassifier(doubleArray1, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation1.evaluateModelOnce((Classifier) sGDText0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      JRip jRip0 = new JRip();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) jRip0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.5190687637462776
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      double double0 = evaluation0.m_MaxTarget;
      String string0 = evaluation0.toClassDetailsString("@relation");
      assertEquals("@relation\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedAreaUnderROC();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.numInstances();
      double double1 = evaluation0.numTrueNegatives(5452);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1829430989272922
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      // Undeclared exception!
      try { 
        evaluation0.numTrueNegatives(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[0];
      MockRandom mockRandom0 = new MockRandom();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomialText0, instances0, 14, (java.util.Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 112;
      Instances instances0 = new Instances("George H. John and Pat Langley", arrayList0, 112);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      Evaluation.makeOptionString((Classifier) null, true);
      double double0 = evaluation0.numFalseNegatives(74);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "minNoTipText");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.reset();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      String string0 = evaluation1.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.areaUnderROC((-2536));
      double double1 = evaluation0.pctCorrect();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.8669932428978546
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (-3759.961);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      double double0 = evaluation1.SFEntropyGain();
      Evaluation evaluation2 = new Evaluation(instances0, costMatrix0);
      double double1 = evaluation2.numFalsePositives(1);
      assertEquals(0.0, double1, 0.01);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@relation";
      double double2 = evaluation2.errorRate();
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.4841984686100282
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double double0 = evaluation0.m_MaxTarget;
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(255.83572);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      evaluation1.m_SumSqrPredicted = (-10.0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "nearestNeighbourSearchAlgorithmTipText");
      evaluation1.toMatrixString("@data");
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.getHeader();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-2));
      double double0 = evaluation0.numFalseNegatives((-2));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.falsePositiveRate((-2));
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.getHeader();
      double double2 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      JRip jRip0 = new JRip();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.SFMeanSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.precision((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[8];
      Evaluation.main(stringArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.areaUnderROC(0);
      double double0 = evaluation0.falseNegativeRate(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      String string0 = evaluation0.toClassDetailsString(".arff");
      assertEquals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.equals(instances0);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSchemeEntropy;
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      evaluation0.equals(evaluation0);
      double double1 = evaluation0.m_ClassPriorsSum;
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      JRip jRip0 = new JRip();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.weightedTrueNegativeRate();
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.717020786717215
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[7];
      Evaluation.main(stringArray0);
      evaluation0.numTrueNegatives(466);
      try { 
        Evaluation.evaluateModel(".arff", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name .arff.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.precision((-1953921916));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.numInstances();
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      MockRandom mockRandom0 = new MockRandom();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = 14;
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomialText0, instances0, 14, (java.util.Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[1];
      MockRandom mockRandom0 = new MockRandom();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomialText0, instances0, 14, (java.util.Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setDebug(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      double double1 = evaluation0.weightedAreaUnderPRC();
      char[] charArray0 = new char[3];
      evaluation0.useNoPriors();
      textDirectoryLoader0.getRevision();
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'o';
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double2 = evaluation1.m_SumAbsErr;
      evaluation0.rootMeanPriorSquaredError();
      double double3 = evaluation1.SFMeanSchemeEntropy();
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation1.weightedTrueNegativeRate();
      assertEquals(double4, double1, 0.01);
      
      double[] doubleArray0 = new double[9];
      double double5 = evaluation0.sizeOfPredictedRegions();
      double double6 = evaluation1.kappa();
      assertEquals(1.0, double6, 0.01);
      
      double double7 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double7, double5, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.3334495201618894
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.setPriors(instances0);
      evaluation0.toSummaryString("@relation", false);
      try { 
        evaluation0.evaluateModelOnce((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFMeasure();
      double double1 = evaluation0.incorrect();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double0, 0.01);
      
      LWL lWL0 = new LWL();
      evaluation0.equals(lWL0);
      assertEquals(0.0, evaluation0.incorrect(), 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      JRip jRip0 = new JRip();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.confusionMatrix();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, (-2), (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      try { 
        evaluation1.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.m_NumClasses = (-3177);
      // Undeclared exception!
      try { 
        evaluation0.weightedMatthewsCorrelation();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.trueNegativeRate((-1));
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 2999, 2.6796299437727193);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2999
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setDebug(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double1, 0.01);
      
      char[] charArray0 = new char[3];
      evaluation0.useNoPriors();
      charArray0[0] = 'o';
      charArray0[1] = 'R';
      charArray0[2] = 'o';
      String string0 = evaluation0.num2ShortID(1051, charArray0, 'o');
      assertEquals("                                                                                                         ooRRRR", string0);
      
      double double2 = evaluation0.KBInformation();
      assertEquals(double2, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      double double3 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double3, double0, 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.rootRelativeSquaredError();
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluateModelOnce(4.9E-324, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.9999683577390484
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      int int0 = 320;
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(320, (char[]) null, 320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, 1416);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.2668998754679306
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.getDataSet();
      DenseInstance denseInstance0 = new DenseInstance(25);
      instances0.add((Instance) denseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      Evaluation.main((String[]) null);
      double double0 = evaluation0.numTruePositives(477);
      assertEquals(0.0, double0, 0.01);
      
      Evaluation.main((String[]) null);
      double double1 = evaluation0.errorRate();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.toMatrixString(".bsi");
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(2L);
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.setDiscardPredictions(false);
      assertFalse(evaluation1.getDiscardPredictions());
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.455554805265039
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setDiscardPredictions(true);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertTrue(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-1));
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_SumAbsErr;
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.1346568241817123
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString((String) null, false);
      assertEquals("null\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(" ", true);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(" \nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      String string0 = evaluation0.toSummaryString(false);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.719546829818525
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".bsi");
      evaluation0.setPriors(instances0);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "bUVq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.9907867545761528
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      JRip jRip0 = new JRip();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getOptions();
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.avgCost();
      double double2 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) sGDText0, instances0, 1160134845, (java.util.Random) mockRandom0, (Object[]) sGDText0.TAGS_SELECTION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      evaluation0.precision(117);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) sGDText0, instances0, 0, (java.util.Random) mockRandom0, (Object[]) sGDText0.TAGS_SELECTION);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.106613053677038
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1));
      evaluation0.toClassDetailsString("@data");
      evaluation0.totalCost();
      try { 
        evaluation0.crossValidateModel(" ", instances0, (-1), testInstances0.DEFAULT_WORDS, (java.util.Random) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called:  
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      instances0.add((Instance) denseInstance0);
      MockRandom mockRandom0 = new MockRandom(3834L);
      evaluation0.relativeAbsoluteError();
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'R';
      charArray0[2] = 'q';
      String string0 = evaluation0.num2ShortID('q', charArray0, 'q');
      assertEquals("                                                                                                             qq\u0000q", string0);
      
      double double1 = evaluation0.avgCost();
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.0951521981483863
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      double double0 = evaluation0.weightedFMeasure();
      evaluation0.SFEntropyGain();
      RandomForest randomForest0 = new RandomForest();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.1660899068057584
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".arff";
      stringArray0[1] = "\tThe class label to determine the threshold data for\n\t(default is the first label)\n";
      stringArray0[2] = "@data";
      evaluation0.sizeOfPredictedRegions();
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation1.falsePositiveRate((-2371));
      assertEquals(double1, double0, 0.01);
      
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.001144140593967
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      char[] charArray0 = new char[4];
      charArray0[0] = 't';
      charArray0[1] = 'q';
      charArray0[2] = 'R';
      charArray0[3] = 'q';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-171), charArray0, 84);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.4218477394380735
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.rootRelativeSquaredError();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1411), (char[]) null, (-1411));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      evaluation0.num2ShortID(1223, charArray0, 1223);
      double double1 = evaluation0.KBInformation();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.correct();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.KBInformation();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      double double1 = evaluation0.kappa();
      assertEquals(1.0, double1, 0.01);
      
      double double2 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.SFMeanSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation.wekaStaticWrapper(zeroR0, "H0FcI-uE.+n;-V5");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      assertEquals("libsvm data files", libSVMLoader0.getFileDescription());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      J48 j48_0 = new J48();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation.makeOptionString(j48_0, true);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      int[] intArray0 = new int[4];
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.8669932428978546
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3759.961);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.710027779724208
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(7);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-4549);
      doubleArray0[2] = (-3759.961);
      doubleArray0[4] = (-3759.961);
      doubleArray0[5] = (double) 7;
      doubleArray0[6] = (double) (-4549);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = new Capabilities(m5Rules0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-2));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3946);
      try { 
        evaluation0.evaluationForSingleInstance((double[]) null, binarySparseInstance0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.293760185886937
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.weightedAreaUnderROC();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
      double double0 = evaluation0.m_SumClass;
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.7780980041399044
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      evaluation0.weightedAreaUnderPRC();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[7];
      evaluation0.evaluateModel((Classifier) null, instances0, (Object[]) stringArray0);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      try { 
        evaluation0.evaluateModel((Classifier) cVParameterSelection0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.710027779724208
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      evaluation0.addNumericTrainClass((-1.0), 777.274351);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(230.8634222805679, 901.668413667926);
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanPriorEntropy();
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(double1, double0, 0.01);
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double2 = evaluation0.numTruePositives(0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = new Capabilities(m5Rules0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), (int[]) null, 1);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, sparseInstance0, 0.964);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".arff");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "[u;&/Q)T");
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      simpleKMeans0.setFastDistanceCalc(true);
      try { 
        Evaluation.handleCostOption(".arff", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[u;&/Q)T\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "bjo>#Wz+re 'j");
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.handleCostOption(" ", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"bjo>#Wz+re\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.3368883075390159
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(481.527, doubleArray0);
      sparseInstance0.copy();
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      instances0.add((Instance) sparseInstance1);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      BayesNet bayesNet0 = new BayesNet();
      String string0 = Evaluation.makeOptionString(bayesNet0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      JRip jRip0 = new JRip();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        Evaluation.evaluateModel((Classifier) regressionByDiscretization0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.RegressionByDiscretization:
         // 
         // -B <int>
         // \tNumber of bins for equal-width discretization
         // \t(default 10).
         // 
         // -E
         // \tWhether to delete empty bins after discretization
         // \t(default false).
         // 
         // -A
         // \tWhether to minimize absolute error, rather than squared error.
         // \t(default false).
         // 
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -K
         // \tWhat type of density estimator to use: 0=histogram/1=kernel/2=normal (default: 0).
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.J48)
         // 
         // Options specific to classifier weka.classifiers.trees.J48:
         // 
         // -U
         // \tUse unpruned tree.
         // -O
         // \tDo not collapse tree.
         // -C <pruning confidence>
         // \tSet confidence threshold for pruning.
         // \t(default 0.25)
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // \t(default 2)
         // -R
         // \tUse reduced error pruning.
         // -N <number of folds>
         // \tSet number of folds for reduced error
         // \tpruning. One fold is used as pruning set.
         // \t(default 3)
         // -B
         // \tUse binary splits only.
         // -S
         // \tDon't perform subtree raising.
         // -L
         // \tDo not clean up after the tree has been built.
         // -A
         // \tLaplace smoothing for predicted probabilities.
         // -J
         // \tDo not use MDL correction for info gain on numeric attributes.
         // -Q <seed>
         // \tSeed for random data shuffling (default 1).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String[] stringArray0 = new String[6];
      try { 
        Evaluation.evaluateModel((Classifier) regressionByDiscretization0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.handleCostOption(" ", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, 11);
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      String string0 = Evaluation.getGlobalInfo(multiScheme0);
      assertEquals("\nSynopsis for weka.classifiers.meta.MultiScheme:\n\nClass for selecting a classifier from among several using cross validation on the training data or the performance on the training data. Performance is measured based on percent correct (classification) or mean-squared error (regression).", string0);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "SlidingMidPointofWidestSide splitting method. Please ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
